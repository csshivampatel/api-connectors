{
  "swagger": "2.0",
  "info": {
    "version": "2006-03-01",
    "x-release": "s3",
    "title": "Amazon Simple Storage Service",
    "description": "Amazon Simple Storage Service (Amazon S3) is an object storage service that offers industry-leading scalability, data availability, security, and performance. Customers of all sizes and industries can use Amazon S3 to store and protect any amount of data for a range of use cases, such as data lakes, websites, mobile applications, backup and restore, archive, enterprise applications, IoT devices, and big data analytics.",
    "x-providerName": "amazonaws.com",
    "x-serviceName": "s3",
    "x-preferred": true,
    "x-ms-code-generation-settings": {
      "header": "MIT",
      "strictSpecAdherence": false
    }
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "{url}",
    "useSchemePrefix": false,
    "positionInOperation": "first",
    "parameters": [
      {
        "$ref": "#/definitions/Url"
      }
    ]
  },
  "host": "https://{bucket}.s3.{region}.amazonaws.com",
  "schemes": ["https"],
  "consumes": ["application/xml", "text/plain"],
  "produces": ["application/xml"],
  "tags": [
    { "name": "Access Control List" },
    { "name": "Bucket accelerate" },
    { "name": "Bucket analytics" },
    { "name": "Bucket Core" },
    { "name": "Bucket Encryption" },
    { "name": "Bucket inventory" },
    { "name": "Bucket lifecycle" },
    { "name": "Bucket metrics" },
    { "name": "Bucket ownershipControls" },
    { "name": "Bucket publicAccessBlock" },
    { "name": "Bucket Policy" },
    { "name": "Bucket replication" },
    { "name": "Bucket website" },
    { "name": "Intelligent-Tiering" },
    { "name": "Operations on Object" },
    { "name": "Operations on Bucket" },
    { "name": "Tagging" },
    { "name": "Uploads" }
  ],
  "paths": {
    "/{Key}?uploadId": {
      "delete": {
        "tags": ["Uploads"],
        "summary": "Aborts a multipart upload",
        "operationId": "AbortMultipartUpload",
        "description": "This action aborts a multipart upload. After a multipart upload is aborted, no additional parts can be uploaded using that upload ID. The storage consumed by any previously uploaded parts will be freed. However, if any part uploads are currently in progress, those part uploads might or might not succeed. As a result, it might be necessary to abort a given multipart upload multiple times in order to completely free all storage consumed by all parts.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Key of the object for which the multipart upload was initiated.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "uploadId",
            "in": "query",
            "required": true,
            "description": "Upload ID that identifies the multipart upload.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          }
        ]
      },

      "post": {
        "tags": ["Uploads"],
        "operationId": "CompleteMultipartUpload",
        "summary": "Completes a multipart upload",
        "description": "Completes a multipart upload by assembling previously uploaded parts.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CompleteMultipartUploadResult"
            }
          }
        },
        "parameters": [
          {
            "name": "CompleteMultipartUpload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteMultipartUpload"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the multipart upload was initiated.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "uploadId",
            "in": "query",
            "required": true,
            "description": "ID for the initiated multipart upload.",
            "type": "string"
          },
          {
            "$ref":"#/parameters/ChecksumCRC32"
          },
          {
            "$ref":"#/parameters/ChecksumCRC32C"
          },
          {
            "$ref":"#/parameters/ChecksumSHA1"
          },
          {
            "$ref":"#/parameters/ChecksumSHA256"
          },
          {
            "$ref": "#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/SSECustomerAlgorithm"
          },
          {
            "$ref":"#/parameters/SSECustomerKey"
          },
          {
            "$ref":"#/parameters/SSECustomerKeyMD5"
          }
        ]
      },
      "get": {
        "tags": ["Uploads"],
        "summary": "Lists  parts for  multipart upload",
        "operationId": "ListParts",
        "description": "Lists the parts that have been uploaded for a specific multipart upload. This operation must include the upload ID, which you obtain by sending the initiate multipart upload request",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPartsResult"
            }
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the multipart upload was initiated.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "max-parts",
            "in": "query",
            "description": "Sets the maximum number of parts to return.",
            "type": "integer"
          },
          {
            "name": "part-number-marker",
            "in": "query",
            "description": "Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.",
            "type": "integer"
          },
          {
            "name": "uploadId",
            "in": "query",
            "required": true,
            "description": "Upload ID identifying the multipart upload whose parts are being listed.",
            "type": "string"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/SSECustomerAlgorithm"
          },
          {
            "$ref":"#/parameters/SSECustomerKey"
          },
          {
            "$ref":"#/parameters/SSECustomerKeyMD5"
          }
        ]
      }
    },
    "/{Key}?x-amz-copy-source": {
      "put": {
        "tags": ["Operations on Object"],
        "operationId": "CopyObject",
        "summary": "Copy object",
        "description": "Creates a copy of an object that is already stored in Amazon S3.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CopyObjectResult"
            }
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The key of the destination object.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "x-amz-copy-source",
            "in": "header",
            "required": true,
            "description": "Specifies the source object for the copy operation.",
            "type": "string",
            "pattern": "\\/.+\\/.+"
          },
          {
            "$ref":"#/parameters/ACL"
          },
          {
            "$ref":"#/parameters/CacheControl"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ContentDisposition"
          },
          {
            "$ref":"#/parameters/ContentEncoding"
          },
          {
            "$ref":"#/parameters/ContentLanguage"
          },
          {
            "$ref":"#/parameters/ContentType"
          },
          {
            "$ref":"#/parameters/CopySourceIfMatch"
          },
          {
            "$ref":"#/parameters/CopySourceIfModifiedSince"
          },
          {
            "$ref":"#/parameters/CopySourceIfNoneMatch"
          },
          {
            "$ref":"#/parameters/CopySourceIfUnmodifiedSince"
          },
          {
            "$ref":"#/parameters/Expires"
          },
          {
            "$ref":"#/parameters/GrantFullControl"
          },
          {
            "$ref":"#/parameters/GrantRead"
          },
          {
            "$ref":"#/parameters/GrantReadACP"
          },
          {
            "$ref":"#/parameters/GrantWriteACP"
          },
          {
            "$ref":"#/parameters/MetadataDirective"
          },
          {
            "$ref":"#/parameters/TaggingDirective"
          },
          {
            "$ref":"#/parameters/ServerSideEncryption"
          },
          {
            "$ref":"#/parameters/StorageClass"
          },
          {
            "$ref":"#/parameters/WebsiteRedirectLocation"
          },
          {
            "$ref":"#/parameters/SSECustomerAlgorithm"
          },
          {
            "$ref":"#/parameters/SSECustomerKey"
          },
          {
            "$ref":"#/parameters/SSECustomerKeyMD5"
          },
          {
            "$ref":"#/parameters/SSEKMSKeyId"
          },
          {
            "$ref":"#/parameters/SSEKMSEncryptionContext"
          },
          {
            "$ref":"#/parameters/BucketKeyEnabled"
          },
          {
            "$ref":"#/parameters/CopySourceSSECustomerAlgorithm"
          },
          {
            "$ref":"#/parameters/CopySourceSSECustomerKey"
          },
          {
            "$ref":"#/parameters/CopySourceSSECustomerKeyMD5"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/Tagging"
          },
          {
            "$ref":"#/parameters/ObjectLockMode"
          },
          {
            "$ref":"#/parameters/ObjectLockRetainUntilDate"
          },
          {
            "$ref":"#/parameters/ObjectLockLegalHoldStatus"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/ExpectedSourceBucketOwner"
          }
        ]
      }
    },
    "/": {
      "put": {
        "tags": ["Operations on Bucket"],
        "summary": "Creates a new S3 bucket",
        "operationId": "CreateBucket",
        "description": "To create a bucket, you must register with Amazon S3 and have a valid Amazon Web Services Access Key ID to authenticate requests. Anonymous requests are never allowed to create buckets. By creating the bucket, you become the bucket owner.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "CreateBucketConfiguration",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateBucketConfiguration"
            }
          },
          {
            "$ref":"#/parameters/ACL"
          },
          {
            "$ref":"#/parameters/GrantFullControl"
          },
          {
            "$ref":"#/parameters/GrantRead"
          },
          {
            "$ref":"#/parameters/GrantReadACP"
          },
          {
            "$ref":"#/parameters/GrantWrite"
          },
          {
            "$ref":"#/parameters/GrantWriteACP"
          },
          {
            "$ref":"#/parameters/ObjectLockEnabledForBucket"
          },
          {
            "$ref":"#/parameters/ObjectOwnership"
          }
        ]
      },

      "delete": {
        "tags": ["Operations on Bucket"],
        "summary": "Deletes the S3 bucket.",
        "operationId": "DeleteBucket",
        "description": "All objects (including all object versions and delete markers) in the bucket must be deleted before the bucket itself can be deleted.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "head": {
        "tags": ["Operations on Bucket"],
        "operationId": "HeadBucket",
        "summary": "Check If a bucket exists",
        "description": "This action is useful to determine if a bucket exists and you have permission to access it.",

        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "get": {
        "tags": ["Operations on Object"],
        "operationId": "ListObjects",
        "summary": "List Objects",
        "description": "Returns some or all (up to 1,000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBucketResult"
            }
          }
        },
        "parameters": [
          {
            "name": "delimiter",
            "in": "query",
            "description": "A delimiter is a character you use to group keys.",
            "type": "string"
          },
          {
            "name": "marker",
            "in": "query",
            "description": "Marker is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. Marker can be any key in the bucket.",
            "type": "string"
          },
          {
            "name": "max-keys",
            "in": "query",
            "description": "Sets the maximum number of keys returned in the response. By default the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more. ",
            "type": "integer"
          },
          {
            "name": "prefix",
            "in": "query",
            "description": "Limits the response to keys that begin with the specified prefix.",
            "type": "string"
          },
          {
            "$ref":"#/parameters/EncodingType"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/OptionalObjectAttributes"
          }
        ]
      }
    },
    "/{Key}?uploads": {
      "post": {
        "tags": ["Uploads"],
        "summary": "Initiates a multipart upload",
        "operationId": "CreateMultipartUpload",
        "description": "This action initiates a multipart upload and returns an upload ID. This upload ID is used to associate all of the parts in the specific multipart upload. You specify this upload ID in each of your subsequent upload part requests",

        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InitiateMultipartUploadResult"
            }
          }
        },
        "parameters": [
         {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the multipart upload is to be initiated.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "uploads",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          }, 
          {
            "$ref":"#/parameters/ACL"
          }, 
          {
            "$ref":"#/parameters/CacheControl"
          }, 
          {
            "$ref":"#/parameters/ContentDisposition"
          }, 
          {
            "$ref":"#/parameters/ContentEncoding"
          }, 
          {
            "$ref":"#/parameters/ContentLanguage"
          }, 
          {
            "$ref":"#/parameters/ContentType"
          }, 
          {
            "$ref":"#/parameters/Expires"
          }, 
          {
            "$ref":"#/parameters/GrantFullControl"
          }, 
          {
            "$ref":"#/parameters/GrantRead"
          }, 
          {
            "$ref":"#/parameters/GrantWriteACP"
          }, 
          {
            "$ref":"#/parameters/ServerSideEncryption"
          }, 
          {
            "$ref":"#/parameters/StorageClass"
          }, 
          {
            "$ref":"#/parameters/WebsiteRedirectLocation"
          }, 
          {
            "$ref":"#/parameters/SSECustomerAlgorithm"
          }, 
          {
            "$ref":"#/parameters/SSECustomerKey"
          }, 
          {
            "$ref":"#/parameters/SSECustomerKeyMD5"
          }, 
          {
            "$ref":"#/parameters/SSEKMSKeyId"
          }, 
          {
            "$ref":"#/parameters/SSEKMSEncryptionContext"
          }, 
          {
            "$ref":"#/parameters/BucketKeyEnabled"
          }, 
          {
            "$ref":"#/parameters/RequestPayer"
          }, 
          {
            "$ref":"#/parameters/Tagging"
          }, 
          {
            "$ref":"#/parameters/ObjectLockMode"
          }, 
          {
            "$ref":"#/parameters/ObjectLockRetainUntilDate"
          }, 
          {
            "$ref":"#/parameters/ObjectLockLegalHoldStatus"
          }, 
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }, 
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          }
        ]
      }
    },
    "/?analytics&id": {
      "delete": {
        "tags": ["Bucket analytics"],
        "summary": "Deletes an analytics configuration",
        "operationId": "DeleteBucketAnalyticsConfiguration",
        "description": "Deletes an analytics configuration for the bucket (specified by the analytics configuration ID).",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID that identifies the analytics configuration.",
            "type": "string"
          },
          {
            "name": "analytics",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "get": {
        "tags": ["Bucket analytics"],
        "summary": "Get Analytics configuration of Bucket",
        "operationId": "GetBucketAnalyticsConfiguration",
        "description": "This implementation of the GET action returns an analytics configuration (identified by the analytics configuration ID) from the bucket. <You>To use this operation, you must have permissions to perform the s3:GetAnalyticsConfiguration action.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AnalyticsConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID that identifies the analytics configuration.",
            "type": "string"
          },
          {
            "name": "analytics",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Bucket analytics"],
        "summary": "Sets an analytics configuration for bucket",
        "operationId": "PutBucketAnalyticsConfiguration",
        "description": "Sets an analytics configuration for the bucket (specified by the analytics configuration ID). You can have up to 1,000 analytics configurations per bucket.You can choose to have storage class analysis export analysis reports sent to a comma-separated values (CSV) flat file. Reports are updated daily and are based on the object filters that you configure. When selecting data export, you specify a destination bucket and an optional destination prefix where the file is written. You can export the data to a destination bucket in a different account. However, the destination bucket must be in the same Region as the bucket that you are making the PUT analytics configuration to.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "AnalyticsConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyticsConfiguration"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID that identifies the analytics configuration.",
            "type": "string"
          },
          {
            "name": "analytics",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?cors": {
      "delete": {
        "tags": ["Bucket Core"],
        "summary": "Deletes the cors configuration",
        "operationId": "DeleteBucketCors",
        "description": "Deletes the cors configuration information set for the bucket.To use this operation, you must have permission to perform the s3:PutBucketCORS action. ",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "cors",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "get": {
        "tags": ["Bucket Core"],
        "summary": "Get cors configuration information",
        "operationId": "GetBucketCors",
        "description": "Returns the cors configuration information set for the bucket.To use this operation, you must have permission to perform the s3:GetBucketCORS action.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CORSConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "cors",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Bucket Core"],
        "summary": "Sets the cors configuration",
        "operationId": "PutBucketCors",
        "description": "Sets the cors configuration for your bucket. If the configuration exists, Amazon S3 replaces it. To use this operation, you must be allowed to perform the s3:PutBucketCORS action. You set this configuration on a bucket so that the bucket can service cross-origin requests.",

        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "CORSConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CORSConfiguration"
            }
          },
          {
            "name": "cors",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ContentMD5"
          }
        ]
      }
    },
    "/?encryption": {
      "delete": {
        "tags": ["Bucket Encryption"],
        "summary": "Remove default encryption",
        "operationId": "DeleteBucketEncryption",
        "description": "This implementation of the DELETE action removes default encryption from the bucket.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "encryption",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "get": {
        "tags": ["Bucket Encryption"],
        "summary": "Get encryption for bucket",
        "operationId": "GetBucketEncryption",
        "description": "Returns the default encryption configuration for an Amazon S3 bucket. If the bucket does not have a default encryption configuration, GetBucketEncryption returns ServerSideEncryptionConfigurationNotFoundError.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServerSideEncryptionConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "encryption",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Bucket Encryption"],
        "summary": "configure default encryption of bucket",
        "operationId": "PutBucketEncryption",
        "description": "This action uses the encryption subresource to configure default encryption and Amazon S3 Bucket Key for an existing bucket.Default encryption for a bucket can use server-side encryption with Amazon S3-managed keys (SSE-S3) or customer managed keys (SSE-KMS). If you specify default encryption using SSE-KMS, you can also configure Amazon S3 Bucket Key.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "ServerSideEncryptionConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServerSideEncryptionConfiguration"
            }
          },
          {
            "name": "Content-MD5",
            "in": "header",
            "description": "The base64-encoded 128-bit MD5 digest of the server-side encryption configuration.",
            "type": "string"
          },
          {
            "name": "encryption",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ContentMD5"
          }
        ]
      }
    },
    "/?intelligent-tiering&id": {
      "delete": {
        "tags": ["Intelligent-Tiering"],
        "summary": "Deletes Intelligent-Tiering configuration from bucket",
        "operationId": "DeleteBucketIntelligentTieringConfiguration",
        "description": "Deletes the S3 Intelligent-Tiering configuration from the specified bucket.The S3 Intelligent-Tiering storage class is designed to optimize storage costs by automatically moving data to the most cost-effective storage access tier, without performance impact or operational overhead. S3 Intelligent-Tiering delivers automatic cost savings in two low latency and high throughput access tiers. For data that can be accessed asynchronously, you can choose to activate automatic archiving capabilities within the S3 Intelligent-Tiering storage class.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID used to identify the S3 Intelligent-Tiering configuration.",
            "type": "string"
          },
          {
            "name": "intelligent-tiering",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          }
        ]
      },

      "get": {
        "tags": ["Intelligent-Tiering"],
        "summary": "Gets Intelligent-Tiering configuration from bucket",
        "operationId": "GetBucketIntelligentTieringConfiguration",
        "description": "Gets the S3 Intelligent-Tiering configuration from the specified bucket.The S3 Intelligent-Tiering storage class is designed to optimize storage costs by automatically moving data to the most cost-effective storage access tier, without performance impact or operational overhead. S3 Intelligent-Tiering delivers automatic cost savings in two low latency and high throughput access tiers. For data that can be accessed asynchronously, you can choose to activate automatic archiving capabilities within the S3 Intelligent-Tiering storage class.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IntelligentTieringConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID used to identify the S3 Intelligent-Tiering configuration.",
            "type": "string"
          },
          {
            "name": "intelligent-tiering",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          }
        ]
      },
      "put": {
        "tags": ["Intelligent-Tiering"],
        "summary": "Puts Intelligent-Tiering configuration from bucket",
        "operationId": "PutBucketIntelligentTieringConfiguration",
        "description": "Puts a S3 Intelligent-Tiering configuration to the specified bucket. You can have up to 1,000 S3 Intelligent-Tiering configurations per bucket.The S3 Intelligent-Tiering storage class is designed to optimize storage costs by automatically moving data to the most cost-effective storage access tier, without performance impact or operational overhead. S3 Intelligent-Tiering delivers automatic cost savings in two low latency and high throughput access tiers. For data that can be accessed asynchronously, you can choose to activate automatic archiving capabilities within the S3 Intelligent-Tiering storage class.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "IntelligentTieringConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IntelligentTieringConfiguration"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID used to identify the S3 Intelligent-Tiering configuration.",
            "type": "string"
          },
          {
            "name": "intelligent-tiering",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          }
        ]
      }
    },
    "/?inventory&id": {
      "delete": {
        "tags": ["Bucket inventory"],
        "summary": "Deletes an inventory configuration from bucket",
        "operationId": "DeleteBucketInventoryConfiguration",
        "description": "Deletes an inventory configuration (identified by the inventory ID) from the bucket.To use this operation, you must have permissions to perform the s3:PutInventoryConfiguration action. ",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID used to identify the inventory configuration.",
            "type": "string"
          },
          {
            "name": "inventory",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "get": {
        "tags": ["Bucket inventory"],
        "summary": "Returns an inventory configuration from bucket",
        "operationId": "GetBucketInventoryConfiguration",
        "description": "Returns an inventory configuration (identified by the inventory configuration ID) from the bucket.To use this operation, you must have permissions to perform the s3:GetInventoryConfiguration action.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InventoryConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID used to identify the inventory configuration.",
            "type": "string"
          },
          {
            "name": "inventory",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Bucket inventory"],
        "summary": "Add inventory configuration to bucket",
        "operationId": "PutBucketInventoryConfiguration",
        "description": "This implementation of the PUT action adds an inventory configuration (identified by the inventory ID) to the bucket. You can have up to 1,000 inventory configurations per bucket.Amazon S3 inventory generates inventories of the objects in the bucket on a daily or weekly basis, and the results are published to a flat file. The bucket that is inventoried is called the source bucket, and the bucket where the inventory flat file is stored is called the destination bucket. The destination bucket must be in the same Amazon Web Services Region as the source bucket.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "InventoryConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryConfiguration"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID used to identify the inventory configuration.",
            "type": "string"
          },
          {
            "name": "inventory",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?lifecycle": {
      "delete": {
        "tags": ["Bucket lifecycle"],
        "summary": "Delete bucket life cycle",
        "operationId": "DeleteBucketLifecycle",
        "description": "Deletes the lifecycle configuration from the specified bucket. Amazon S3 removes all the lifecycle configuration rules in the lifecycle subresource associated with the bucket. Your objects never expire, and Amazon S3 no longer automatically deletes any objects on the basis of rules contained in the deleted lifecycle configuration.To use this operation, you must have permission to perform the s3:PutLifecycleConfiguration action.There is usually some time lag before lifecycle configuration deletion is fully propagated to all the Amazon S3 systems.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "lifecycle",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "get": {
        "tags": ["Bucket lifecycle"],
        "summary": "Get Bucket Lifecycle Configuration",
        "operationId": "GetBucketLifecycleConfiguration",
        "description": "Bucket lifecycle configuration now supports specifying a lifecycle rule using an object key name prefix, one or more object tags, or a combination of both. Accordingly, this section describes the latest API. The response describes the new filter element that you can use to specify a filter to select a subset of objects to which the rule applies.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LifecycleConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "lifecycle",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Bucket lifecycle"],
        "summary": "Put Bucket Lifecycle Configuration",
        "operationId": "PutBucketLifecycleConfiguration",
        "description": "Creates a new lifecycle configuration for the bucket or replaces an existing lifecycle configuration.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "LifecycleConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LifecycleConfiguration"
            }
          },
          {
            "name": "lifecycle",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ContentMD5"
          }
        ]
      }
    },
    "/?metrics&id": {
      "delete": {
        "tags": ["Bucket metrics"],
        "summary": "Delete Bucket Metrics Configuration",
        "operationId": "DeleteBucketMetricsConfiguration",
        "description": "Deletes a metrics configuration for the Amazon CloudWatch request metrics (specified by the metrics configuration ID) from the bucket. Note that this doesn't include the daily storage metrics. To use this operation, you must have permissions to perform the s3:PutMetricsConfiguration action.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID used to identify the metrics configuration.",
            "type": "string"
          },
          {
            "name": "metrics",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "get": {
        "tags": ["Bucket metrics"],
        "summary": "Get Bucket Metrics Configuration",
        "operationId": "GetBucketMetricsConfiguration",
        "description": "Gets a metrics configuration (specified by the metrics configuration ID) from the bucket. Note that this doesn't include the daily storage metrics.To use this operation, you must have permissions to perform the s3:GetMetricsConfiguration action.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MetricsConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID used to identify the metrics configuration.",
            "type": "string"
          },
          {
            "name": "metrics",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Bucket metrics"],
        "summary": "Sets Bucket Metrics Configuration",
        "operationId": "PutBucketMetricsConfiguration",
        "description": "Sets a metrics configuration (specified by the metrics configuration ID) for the bucket. You can have up to 1,000 metrics configurations per bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. To use this operation, you must have permissions to perform the s3:PutMetricsConfiguration action.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "MetricsConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetricsConfiguration"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID used to identify the metrics configuration.",
            "type": "string"
          },
          {
            "name": "metrics",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?ownershipControls": {
      "delete": {
        "tags": ["Bucket ownershipControls"],
        "summary": "Delete Bucket Ownership Controls",
        "operationId": "DeleteBucketOwnershipControls",
        "description": "Removes OwnershipControls for an Amazon S3 bucket. To use this operation, you must have the s3:PutBucketOwnershipControls permission.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "ownershipControls",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "get": {
        "tags": ["Bucket ownershipControls"],
        "summary": "Get Bucket Ownership Controls",
        "operationId": "GetBucketOwnershipControls",
        "description": "Retrieves OwnershipControls for an Amazon S3 bucket. To use this operation, you must have the s3:GetBucketOwnershipControls permission.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/OwnershipControls" }
          }
        },
        "parameters": [
          {
            "name": "ownershipControls",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Bucket ownershipControls"],
        "summary": "Put Bucket Ownership Controls",
        "operationId": "PutBucketOwnershipControls",
        "description": "Creates or modifies OwnershipControls for an Amazon S3 bucket. To use this operation, you must have the s3:PutBucketOwnershipControls permission.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "OwnershipControlsRule",
            "in": "body",
            "schema": { "$ref": "#/definitions/OwnershipControls" }
          },
          {
            "name": "ownershipControls",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?policy": {
      "delete": {
        "tags": ["Bucket Policy"],
        "summary": "Delete Bucket Policy",
        "operationId": "DeleteBucketPolicy",
        "description": "This implementation of the DELETE action uses the policy subresource to delete the policy of a specified bucket. If you are using an identity other than the root user of the Amazon Web Services account that owns the bucket, the calling identity must have the DeleteBucketPolicy permissions on the specified bucket and belong to the bucket owner's account to use this operation.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "policy",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "get": {
        "tags": ["Bucket Policy"],
        "summary": "Get Bucket Policy",
        "operationId": "GetBucketPolicy",
        "description": "Returns the policy of a specified bucket. If you are using an identity other than the root user of the Amazon Web Services account that owns the bucket, the calling identity must have the GetBucketPolicy permissions on the specified bucket and belong to the bucket owner's account in order to use this operation.",
        "responses": {
          "200": {
            "description": "Success",
            "type": "object"
          }
        },
        "parameters": [
          {
            "name": "policy",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Bucket Policy"],
        "summary": "Put Bucket Policy",
        "operationId": "PutBucketPolicy",
        "description": "Applies an Amazon S3 bucket policy to an Amazon S3 bucket. If you are using an identity other than the root user of the Amazon Web Services account that owns the bucket, the calling identity must have the PutBucketPolicy permissions on the specified bucket and belong to the bucket owner's account in order to use this operation.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          { "name": "body", "in": "body", "type": "object" },
          {
            "name": "policy",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ContentMD5"
          }
        ],
        "requestBody": {
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "Policy": {
                "description": "The bucket policy as a JSON document.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/?replication": {
      "delete": {
        "tags": ["Bucket replication"],
        "summary": "Delete Bucket Replication",
        "operationId": "DeleteBucketReplication",
        "description": "Deletes the replication configuration from the bucket.To use this operation, you must have permissions to perform the s3:PutReplicationConfiguration action.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "replication",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "get": {
        "tags": ["Bucket replication"],
        "summary": "Get Bucket Replication",
        "operationId": "GetBucketReplication",
        "description": "Returns the replication configuration of a bucket. It can take a while to propagate the put or delete a replication configuration to all Amazon S3 systems. Therefore, a get request soon after put or delete can return a wrong result.This action requires permissions for the s3:GetReplicationConfiguration action.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReplicationConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "replication",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Bucket replication"],
        "summary": "Put Bucket Replication",
        "operationId": "PutBucketReplication",
        "description": "Creates a replication configuration or replaces an existing one.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "ReplicationConfiguration",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReplicationConfiguration"
            }
          },
          {
            "name": "replication",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/Token"
          }
        ]
      }
    },
    "/?tagging": {
      "delete": {
        "tags": ["Tagging"],
        "summary": "Delete Bucket Tagging",
        "operationId": "DeleteBucketTagging",
        "description": "Deletes the tags from the bucket.To use this operation, you must have permission to perform the s3:PutBucketTagging action.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "tagging",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "get": {
        "tags": ["Tagging"],
        "summary": "Get Bucket Tagging",
        "operationId": "GetBucketTagging",
        "description": "Returns the tag set associated with the bucket.To use this operation, you must have permission to perform the s3:GetBucketTaggingaction. ",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Tagging"
            }
          }
        },
        "parameters": [
          {
            "name": "tagging",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Tagging"],
        "summary": "Put Bucket Tagging",
        "operationId": "PutBucketTagging",
        "description": "Sets the tags for a bucket.Use tags to organize your Amazon Web Services bill to reflect your own cost structure. To do this, sign up to get your Amazon Web Services account bill with tag key values included. Then, to see the cost of combined resources, organize your billing information according to resources with the same tag key values.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "Tagging",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Tagging"
            }
          },
          {
            "name": "tagging",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          }
        ]
      }
    },
    "/?website": {
      "delete": {
        "tags": ["Bucket website"],
        "summary": "Delete Bucket Website",
        "operationId": "DeleteBucketWebsite",
        "description": "This action removes the website configuration for a bucket. Amazon S3 returns a 200 OK response upon successfully deleting a website configuration on the specified bucket. You will get a 200 OK response if the website configuration you are trying to delete does not exist on the bucket. Amazon S3 returns a 404 response if the bucket specified in the request does not exist.This DELETE action requires the S3:DeleteBucketWebsite permission.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "website",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "get": {
        "tags": ["Bucket website"],
        "summary": "Get Bucket Website",
        "operationId": "GetBucketWebsite",
        "description": "Returns the website configuration for a bucket. To host website on Amazon S3, you can configure a bucket as website by adding a website configuration.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WebsiteConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "website",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Bucket website"],
        "summary": "Put Bucket Website",
        "operationId": "PutBucketWebsite",
        "description": "Sets the configuration of the website that is specified in the website subresource. To configure a bucket as a website, you can add this subresource on the bucket with website configuration information such as the file name of the index document and any redirect rules.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "WebsiteConfiguration",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/WebsiteConfiguration"
            }
          },
          {
            "name": "website",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          }
        ]
      }
    },
    "/{Key}": {
      "delete": {
        "tags": ["Operations on Object"],
        "summary": "Delete Object",
        "operationId": "DeleteObject",
        "description": "Removes the null version (if there is one) of an object and inserts a delete marker, which becomes the latest version of the object. If there isn't a null version, Amazon S3 does not remove any objects but will still respond that the command was successful.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Key name of the object to delete.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "VersionId used to reference a specific version of the object.",
            "type": "string"
          },
          {
            "$ref":"#/parameters/MFA"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/BypassGovernanceRetention"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "get": {
        "tags": ["Operations on Object"],
        "summary": "Get Object",
        "operationId": "GetObject",
        "description": "Retrieves objects from Amazon S3. To use GET, you must have READ access to the object. If you grant READ access to the anonymous user, you can return the object without using an authorization header. An Amazon S3 bucket has no directory hierarchy such as you would find in a typical computer file system. You can, however, create a logical hierarchy by using object key names that imply a folder structure.",
        "responses": {
          "200": {
            "description": "Success",
            "type": "string"
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Key of the object to get.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "VersionId used to reference a specific version of the object.",
            "type": "string"
          },
          {
            "name": "partNumber",
            "in": "query",
            "description": "Part number of the object being read. This is a positive integer between 1 and 10,000.",
            "type": "integer"
          },
          {
            "$ref":"#/parameters/IfMatch"
          },
          {
            "$ref":"#/parameters/IfModifiedSince"
          },
          {
            "$ref":"#/parameters/IfNoneMatch"
          },
          {
            "$ref":"#/parameters/IfUnmodifiedSince"
          },
          {
            "$ref":"#/parameters/Range"
          },
            {
            "$ref":"#/parameters/SSECustomerAlgorithm"
          },
          {
            "$ref":"#/parameters/SSECustomerKey"
          },
          {
            "$ref":"#/parameters/SSECustomerKeyMD5"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/ChecksumMode"
          },
          {
            "$ref":"#/parameters/ResponseCacheControl"
          },
          {
            "$ref":"#/parameters/ResponseContentDisposition"
          },
          {
            "$ref":"#/parameters/ResponseContentEncoding"
          },
          {
            "$ref":"#/parameters/ResponseContentLanguage"
          },
          {
            "$ref":"#/parameters/ResponseContentType"
          }
        ]
      },
      "head": {
        "tags": ["Operations on Object"],
        "summary": "Retrieves metadata of object",
        "operationId": "HeadObject",
        "description": "The HEAD action retrieves metadata from an object without returning the object itself. This action is useful if you're only interested in an object's metadata. To use HEAD, you must have READ access to the object.HEAD request has the same options as a GET action on an object.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The object key.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "VersionId used to reference a specific version of the object.",
            "type": "string"
          },
          {
            "name": "partNumber",
            "in": "query",
            "description": "Part number of the object being read. This is a positive integer between 1 and 10,000.",
            "type": "integer"
          },
          {
            "$ref":"#/parameters/IfMatch"
          },
          {
            "$ref":"#/parameters/IfModifiedSince"
          },
          {
            "$ref":"#/parameters/IfNoneMatch"
          },
          {
            "$ref":"#/parameters/IfUnmodifiedSince"
          },
          {
            "$ref":"#/parameters/Range"
          },
            {
            "$ref":"#/parameters/SSECustomerAlgorithm"
          },
          {
            "$ref":"#/parameters/SSECustomerKey"
          },
          {
            "$ref":"#/parameters/SSECustomerKeyMD5"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/ChecksumMode"
          }
        ]
      },
      "put": {
        "tags": ["Operations on Object"],
        "summary": "Adds object to bucket",
        "operationId": "PutObject",
        "description": "Adds an object to a bucket. You must have WRITE permissions on a bucket to add an object to it.Amazon S3 never adds partial objects; if you receive a success response, Amazon S3 added the entire object to the bucketAmazon S3 is a distributed system. If it receives multiple write requests for the same object simultaneously, it overwrites all but the last object written.",
        "responses": {
          "200": {
            "description": "Success",
            "type": "string"
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object data.",
            "type": "string"
          },
          {
            "name": "Content-Length",
            "in": "header",
            "description": "Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.",
            "type": "integer"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "A standard MIME type describing the format of the contents.",
            "type": "string"
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the PUT action was initiated.",
            "type": "string",
            "minLength": 1
          }, 
          {
            "$ref":"#/parameters/ACL"
          }, 
          {
            "$ref":"#/parameters/CacheControl"
          }, 
          {
            "$ref":"#/parameters/ContentDisposition"
          }, 
          {
            "$ref":"#/parameters/ContentEncoding"
          }, 
          {
            "$ref":"#/parameters/ContentLanguage"
          }, 
          {
            "$ref":"#/parameters/ContentType"
          }, 
          {
            "$ref":"#/parameters/Expires"
          }, 
          {
            "$ref":"#/parameters/GrantFullControl"
          }, 
          {
            "$ref":"#/parameters/GrantRead"
          }, 
          {
            "$ref":"#/parameters/GrantWriteACP"
          }, 
          {
            "$ref":"#/parameters/ServerSideEncryption"
          }, 
          {
            "$ref":"#/parameters/StorageClass"
          }, 
          {
            "$ref":"#/parameters/WebsiteRedirectLocation"
          }, 
          {
            "$ref":"#/parameters/SSECustomerAlgorithm"
          }, 
          {
            "$ref":"#/parameters/SSECustomerKey"
          }, 
          {
            "$ref":"#/parameters/SSECustomerKeyMD5"
          }, 
          {
            "$ref":"#/parameters/SSEKMSKeyId"
          }, 
          {
            "$ref":"#/parameters/SSEKMSEncryptionContext"
          }, 
          {
            "$ref":"#/parameters/BucketKeyEnabled"
          }, 
          {
            "$ref":"#/parameters/RequestPayer"
          }, 
          {
            "$ref":"#/parameters/Tagging"
          }, 
          {
            "$ref":"#/parameters/ObjectLockMode"
          }, 
          {
            "$ref":"#/parameters/ObjectLockRetainUntilDate"
          }, 
          {
            "$ref":"#/parameters/ObjectLockLegalHoldStatus"
          }, 
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }, 
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          }
        ]
      }
    },
    "/{Key}?tagging": {
      "delete": {
        "tags": ["Tagging"],
        "summary": "Remove Tagset of Object",
        "operationId": "DeleteObjectTagging",
        "description": "Removes the entire tag set from the specified object.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The key that identifies the object in the bucket from which to remove all tags.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "The versionId of the object that the tag-set will be removed from.",
            "type": "string"
          },
          {
            "name": "tagging",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "get": {
        "tags": ["Tagging"],
        "summary": "Get Tagset of Object",
        "operationId": "GetObjectTagging",
        "description": "Returns the tag-set of an object. You send the GET request against the tagging subresource associated with the object. To use this operation, you must have permission to perform the s3:GetObjectTagging action.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Tagging"
            }
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which to get the tagging information.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "The versionId of the object for which to get the tagging information.",
            "type": "string"
          },
          {
            "name": "tagging",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          }
        ]
      },
      "put": {
        "tags": ["Tagging"],
        "summary": "Sets Tagset of Object",
        "operationId": "PutObjectTagging",
        "description": "Sets the supplied tag-set to an object that already exists in a bucket.A tag is a key-value pair. You can associate tags with an object by sending a PUT request against the tagging subresource that is associated with the object. You can retrieve tags by sending a GET request.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "Tagging",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Tagging"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Name of the object key.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "The versionId of the object that the tag-set will be added to.",
            "type": "string"
          },
          {
            "name": "tagging",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          }
        ]
      }
    },
    "/?delete": {
      "post": {
        "tags": ["Operations on Object"],
        "summary": "Delete Objects",
        "operationId": "DeleteObjects",
        "description": "This action enables you to delete multiple objects from a bucket using a single HTTP request. If you know the object keys that you want to delete, then this action provides a suitable alternative to sending individual delete requests, reducing per-request overhead.The request contains a list of up to 1000 keys that you want to delete. In the XML, you provide the object key names, and optionally, version IDs if you want to delete a specific version of the object from a versioning-enabled bucket. For each key, Amazon S3 performs a delete action and returns the result of that delete, success, or failure, in the response.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteResult"
            }
          }
        },
        "parameters": [
          {
            "name": "Delete",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/Delete" }
          },
          {
            "name": "x-amz-mfa",
            "in": "header",
            "description": "The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled.",
            "type": "string"
          },
          {
            "name": "delete",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/BypassGovernanceRetention"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          }
        ]
      }
    },
    "/?publicAccessBlock": {
      "delete": {
        "tags": ["Bucket publicAccessBlock"],
        "summary": "Removes PublicAccessBlock for bucket.",
        "operationId": "DeletePublicAccessBlock",
        "description": "Removes the PublicAccessBlock configuration for an Amazon S3 bucket. To use this operation, you must have the s3:PutBucketPublicAccessBlock permission.",
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "publicAccessBlock",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "get": {
        "tags": ["Bucket publicAccessBlock"],
        "summary": "Retrives PublicAccessBlock for bucket.",
        "operationId": "GetPublicAccessBlock",
        "description": "Retrieves the PublicAccessBlock configuration for an Amazon S3 bucket. To use this operation, you must have the s3:GetBucketPublicAccessBlock permission.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PublicAccessBlockConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "publicAccessBlock",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Bucket publicAccessBlock"],
        "summary": "Create or Modify PublicAccessBlock for bucket.",
        "operationId": "PutPublicAccessBlock",
        "description": "Creates or modifies the PublicAccessBlock configuration for an Amazon S3 bucket. To use this operation, you must have the s3:PutBucketPublicAccessBlock permission.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "PublicAccessBlockConfiguration",
            "in": "body",
            "schema": { "$ref": "#/definitions/PublicAccessBlockConfiguration" }
          },
          {
            "name": "publicAccessBlock",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?accelerate": {
      "get": {
        "tags": ["Bucket accelerate"],
        "summary": "Return Transfer Acceleration state of bucket",
        "operationId": "GetBucketAccelerateConfiguration",
        "description": "This implementation of the GET action uses the accelerate subresource to return the Transfer Acceleration state of a bucket, which is either Enabled or Suspended. Amazon S3 Transfer Acceleration is a bucket-level feature that enables you to perform faster data transfers to and from Amazon S3.To use this operation, you must have permission to perform the s3:GetAccelerateConfiguration action.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccelerateConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "accelerate",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          }
        ]
      },

      "put": {
        "tags": ["Bucket accelerate"],
        "summary": "Sets Acceleration of bucket",
        "operationId": "PutBucketAccelerateConfiguration",
        "description": "Sets the accelerate configuration of an existing bucket. Amazon S3 Transfer Acceleration is a bucket-level feature that enables you to perform faster data transfers to Amazon S3. To use this operation, you must have permission to perform the s3:PutAccelerateConfiguration action.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "AccelerateConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccelerateConfiguration"
            }
          },
          {
            "name": "accelerate",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          }
        ]
      }
    },
    "/?acl": {
      "get": {
        "tags": ["Access Control List"],
        "summary": "Get Access Control List Of Bucket",
        "operationId": "GetBucketAcl",
        "description": "This implementation of the GET action uses the acl subresource to return the access control list (ACL) of a bucket. To use GET to return the ACL of the bucket, you must have READ_ACP access to the bucket.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccessControlPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "acl",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/VersionId"
          }
        ]
      },

      "put": {
        "tags": ["Access Control List"],
        "summary": "Sets Access Control List Of Bucket",
        "operationId": "PutBucketAcl",
        "description": "Sets the permissions on an existing bucket using access control lists (ACL).",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "AccessControlPolicy",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AccessControlPolicy"
            }
          },
          {
            "name": "x-amz-acl",
            "in": "header",
            "description": "The canned ACL to apply to the bucket.",
            "type": "string",
            "enum": [
              "private",
              "public-read",
              "public-read-write",
              "authenticated-read"
            ]
          },
          {
            "name": "acl",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/GrantFullControl"
          },
          {
            "$ref":"#/parameters/GrantRead"
          },
          {
            "$ref":"#/parameters/GrantReadACP"
          },
          {
            "$ref":"#/parameters/GrantWrite"
          },
          {
            "$ref":"#/parameters/GrantWriteACP"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?logging": {
      "get": {
        "tags": ["Operations on Bucket"],
        "summary": "Get Logging status of Bucket",
        "operationId": "GetBucketLogging",
        "description": "Returns the logging status of a bucket and the permissions users have to view and modify that status. To use GET, you must be the bucket owner.The following operations are related to GetBucketLogging CreateBucket , PutBucketLogging",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BucketLoggingStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "logging",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "put": {
        "tags": ["Operations on Bucket"],
        "summary": "Set Logging status of Bucket",
        "operationId": "PutBucketLogging",
        "description": "Set the logging parameters for a bucket and to specify permissions for who can view and modify the logging parameters. All logs are saved to buckets in the same Amazon Web Services Region as the source bucket.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "BucketLoggingStatus",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/BucketLoggingStatus" }
          },
          {
            "name": "logging",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?notification": {
      "get": {
        "tags": ["Operations on Bucket"],
        "summary": "Get Notification Configuration of bucket",
        "operationId": "GetBucketNotificationConfiguration",
        "description": "Returns the notification configuration of a bucket.If notifications are not enabled on the bucket, the action returns an empty NotificationConfiguration element.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/NotificationConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "notification",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "put": {
        "tags": ["Operations on Bucket"],
        "summary": "Enable Notification Configuration of bucket",
        "operationId": "PutBucketNotificationConfiguration",
        "description": "Enables notifications of specified events for a bucket.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "NotificationConfiguration",
            "schema": {
              "$ref": "#/definitions/NotificationConfiguration"
            }
          },
          {
            "name": "notification",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?policyStatus": {
      "get": {
        "tags": ["Operations on Bucket"],
        "summary": "Retrives Policy status of Bucket",
        "operationId": "GetBucketPolicyStatus",
        "description": "Retrieves the policy status for an Amazon S3 bucket, indicating whether the bucket is public. In order to use this operation, you must have the s3:GetBucketPolicyStatus permission.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PolicyStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyStatus",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?requestPayment": {
      "get": {
        "tags": ["Operations on Bucket"],
        "summary": "Get Request Payment of bucket",
        "operationId": "GetBucketRequestPayment",
        "description": "Returns the request payment configuration of a bucket. To use this version of the operation, you must be the bucket owner.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RequestPaymentConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "requestPayment",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "put": {
        "tags": ["Operations on Bucket"],
        "summary": "Set Request Payment of bucket",
        "operationId": "PutBucketRequestPayment",
        "description": "Sets the request payment configuration for a bucket. By default, the bucket owner pays for downloads from the bucket. This configuration parameter enables the bucket owner (only) to specify that the person requesting the download will be charged for the download.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "RequestPaymentConfiguration",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RequestPaymentConfiguration"
            }
          },
          {
            "name": "requestPayment",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?versioning": {
      "get": {
        "tags": ["Operations on Bucket"],
        "summary": "Get versioning state of bucket",
        "operationId": "GetBucketVersioning",
        "description": "Returns the versioning state of a bucket.To retrieve the versioning state of a bucket, you must be the bucket owner.This implementation also returns the MFA Delete status of the versioning state. If the MFA Delete status is enabled, the bucket owner must use an authentication device to change the versioning state of the bucket.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VersioningConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "versioning",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "put": {
        "tags": ["Operations on Bucket"],
        "summary": "Set versioning state of bucket",
        "operationId": "PutBucketVersioning",
        "description": "Sets the versioning state of an existing bucket. To set the versioning state, you must be the bucket owner.You can set the versioning state with one of the following values:Enabled , Suspended. All objects added to the bucket receive the version ID null.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "VersioningConfiguration",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VersioningConfiguration"
            }
          },
          {
            "name": "versioning",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/MFA"
          }
        ]
      }
    },
    "/{Key}?acl": {
      "get": {
        "tags": ["Access Control List"],
        "summary": "Get ACL of object",
        "operationId": "GetObjectAcl",
        "description": "Returns the access control list (ACL) of an object. To use this operation, you must have READ_ACP access to the object.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccessControlPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The key of the object for which to get the ACL information.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "VersionId used to reference a specific version of the object.",
            "type": "string"
          },
          {
            "name": "acl",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "put": {
        "tags": ["Access Control List"],
        "summary": "Set ACL of object",
        "operationId": "PutObjectAcl",
        "description": "Uses the acl subresource to set the access control list (ACL) permissions for a new or existing object in an S3 bucket. You must have WRITE_ACP permission to set the ACL of an object.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "AccessControlPolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessControlPolicy"
            }
          },
          {
            "name": "x-amz-acl",
            "in": "header",
            "description": "The canned ACL to apply to the object.",
            "schema": {
              "type": "string",
              "enum": [
                "private",
                "public-read",
                "public-read-write",
                "authenticated-read",
                "aws-exec-read",
                "bucket-owner-read",
                "bucket-owner-full-control"
              ]
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Key for which the PUT action was initiated. When using this action with an access point, you must direct requests to the access point hostname.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "VersionId used to reference a specific version of the object.",
            "type": "string"
          },
          {
            "name": "acl",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/GrantFullControl"
          },
          {
            "$ref":"#/parameters/GrantRead"
          },
          {
            "$ref":"#/parameters/GrantReadACP"
          },
          {
            "$ref":"#/parameters/GrantWrite"
          },
          {
            "$ref":"#/parameters/GrantWriteACP"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/{Key}?legal-hold": {
      "get": {
        "tags": ["Operations on Object"],
        "summary": "Get legal hold status of object",
        "operationId": "GetObjectLegalHold",
        "description": "Gets an object's current Legal Hold status.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LegalHold"
            }
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The key name for the object whose Legal Hold status you want to retrieve.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "The version ID of the object whose Legal Hold status you want to retrieve.",
            "type": "string"
          },

          {
            "name": "legal-hold",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "put": {
        "tags": ["Operations on Object"],
        "summary": "Apply legal hold status of object",
        "operationId": "PutObjectLegalHold",
        "description": "Applies a Legal Hold configuration to the specified object.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "LegalHold",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LegalHold"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The key name for the object that you want to place a Legal Hold on.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "The version ID of the object that you want to place a Legal Hold on.",
            "type": "string"
          },
          {
            "name": "legal-hold",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?object-lock": {
      "get": {
        "tags": ["Operations on Bucket"],
        "summary": "Gets the Object Lock for  bucket",
        "operationId": "GetObjectLockConfiguration",
        "description": "Gets the Object Lock configuration for a bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed in the specified bucket.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ObjectLockConfiguration"
            }
          }
        },
        "parameters": [
          {
            "name": "object-lock",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },

      "put": {
        "tags": ["Operations on Bucket"],
        "summary": "Place the Object Lock for  bucket",
        "operationId": "PutObjectLockConfiguration",
        "description": "Places an Object Lock configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed in the specified bucket.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "ObjectLockConfiguration",
            "in": "body",
            "schema": { "$ref": "#/definitions/ObjectLockConfiguration" }
          },
          {
            "name": "object-lock",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/Token"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/{Key}?retention": {
      "get": {
        "tags": ["Operations on Object"],
        "summary": "Retrives retention setting of object",
        "operationId": "GetObjectRetention",
        "description": "Retrieves an object's retention settings.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Retention"
            }
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The key name for the object whose retention settings you want to retrieve.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "The version ID for the object whose retention settings you want to retrieve.",
            "type": "string"
          },
          {
            "name": "retention",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      },
      "put": {
        "tags": ["Operations on Object"],
        "summary": "Place retention setting of object",
        "operationId": "PutObjectRetention",
        "description": "Places an Object Retention configuration on an object.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "Retention",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Retention"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The key name for the object that you want to apply this Object Retention configuration to.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "The version ID for the object that you want to apply this Object Retention configuration to.",
            "type": "string"
          },
          {
            "name": "Content-MD5",
            "in": "header",
            "description": "The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message integrity check to verify that the request body was not corrupted in transit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "retention",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/BypassGovernanceRetention"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/{Key}?torrent": {
      "get": {
        "tags": ["Operations on Object"],
        "summary": "Get torrent file from bucket",
        "operationId": "GetObjectTorrent",
        "description": "Returns torrent files from a bucket. BitTorrent can save you bandwidth when you're distributing large files.",
        "responses": {
          "200": {
            "description": "Success",
            "type": "string"
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The object key for which to get the information.",
            "type": "string",
            "minLength": 1
          },

          {
            "name": "torrent",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?analytics": {
      "get": {
        "tags": ["Bucket analytics"],
        "summary": "Lists analytics for bucket",
        "operationId": "ListBucketAnalyticsConfigurations",
        "description": "Lists the analytics configurations for the bucket. You can have up to 1,000 analytics configurations per bucket.This action supports list pagination and does not return more than 100 configurations at a time. You should always check the IsTruncated element in the response. You use the NextContinuationToken value to continue the pagination of the list by passing the value in continuation-token in the request to GET the next page.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBucketAnalyticsConfigurationResult"
            }
          }
        },
        "parameters": [
          {
            "name": "continuation-token",
            "in": "query",
            "description": "The ContinuationToken that represents a placeholder from where this request should begin.",
            "type": "string"
          },

          {
            "name": "analytics",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?intelligent-tiering": {
      "get": {
        "tags": ["Intelligent-Tiering"],
        "summary": "Lists Intelligent-Tiering from bucket.",
        "operationId": "ListBucketIntelligentTieringConfigurations",
        "description": "The S3 Intelligent-Tiering storage class is designed to optimize storage costs by automatically moving data to the most cost-effective storage access tier, without performance impact or operational overhead. S3 Intelligent-Tiering delivers automatic cost savings in three low latency and high throughput access tiers. To get the lowest storage cost on data that can be accessed in minutes to hours, you can choose to activate additional archiving capabilities.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBucketIntelligentTieringConfigurationsOutput"
            }
          }
        },
        "parameters": [
          {
            "name": "continuation-token",
            "in": "query",
            "description": "The ContinuationToken that represents a placeholder from where this request should begin.",
            "type": "string"
          },
          {
            "name": "intelligent-tiering",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          }
        ]
      }
    },
    "/?inventory": {
      "get": {
        "tags": ["Bucket inventory"],
        "summary": "Get list of inventory configurations for bucket",
        "operationId": "ListBucketInventoryConfigurations",
        "description": "Returns a list of inventory configurations for the bucket. You can have up to 1,000 analytics configurations per bucket. This action supports list pagination and does not return more than 100 configurations at a time. Always check the IsTruncated element in the response. If there are no more configurations to list, IsTruncated is set to false. If there are more configurations to list, IsTruncated is set to true, and there is a value in NextContinuationToken. You use the NextContinuationToken value to continue the pagination of the list by passing the value in continuation-token in the request to GET the next page. To use this operation, you must have permissions to perform the s3:GetInventoryConfiguration action. ",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBucketInventoryConfigurationsResult"
            }
          }
        },
        "parameters": [
          {
            "name": "continuation-token",
            "in": "query",
            "description": "The marker used to continue an inventory configuration listing that has been truncated.",
            "type": "string"
          },

          {
            "name": "inventory",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?metrics": {
      "get": {
        "tags": ["Bucket metrics"],
        "summary": "Get List of Metrics for Bucket",
        "operationId": "ListBucketMetricsConfigurations",
        "description": "Lists the metrics configurations for the bucket. The metrics configurations are only for the request metrics of the bucket and do not provide information on daily storage metrics. You can have up to 1,000 configurations per bucket. This action supports list pagination and does not return more than 100 configurations at a time. Always check the IsTruncated element in the response.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListMetricsConfigurationsResult"
            }
          }
        },
        "parameters": [
          {
            "name": "continuation-token",
            "in": "query",
            "description": "The marker that is used to continue a metrics configuration listing that has been truncated.",
            "type": "string"
          },
          {
            "name": "metrics",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "https://s3.amazonaws.com": {
      "get": {
        "tags": ["Operations on Bucket"],
        "summary": "List Buckets",
        "operationId": "ListBuckets",
        "description": "Returns a list of all buckets owned by the authenticated sender of the request.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAllMyBucketsResult"
            }
          }
        }
      }
    },
    "/?uploads": {
      "get": {
        "tags": ["Uploads"],
        "summary": "List Multipart Uploads",
        "operationId": "ListMultipartUploads",
        "description": "This action lists in-progress multipart uploads. An in-progress multipart upload is a multipart upload that has been initiated using the Initiate Multipart Upload request, but has not yet been completed or aborted.This action returns at most 1,000 multipart uploads in the response. 1,000 multipart uploads is the maximum number of uploads a response can include, which is also the default value. You can further limit the number of uploads in a response by specifying the max-uploads parameter in the response.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListMultipartUploadsResult"
            }
          }
        },
        "parameters": [
          {
            "name": "delimiter",
            "in": "query",
            "description": "Character you use to group keys. All keys that contain the same string between the prefix.",
            "type": "string"
          },
          {
            "name": "key-marker",
            "in": "query",
            "description": "Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.",
            "type": "string"
          },
          {
            "name": "max-uploads",
            "in": "query",
            "description": "Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body.",
            "type": "integer"
          },
          {
            "name": "prefix",
            "in": "query",
            "description": "Lists in-progress uploads only for those keys that begin with the specified prefix.",
            "type": "string"
          },
          {
            "name": "upload-id-marker",
            "in": "query",
            "description": "Together with key-marker, specifies the multipart upload after which listing should begin.",
            "type": "string"
          },
          {
            "name": "uploads",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/EncodingType"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/?versions": {
      "get": {
        "tags": ["Operations on Object"],
        "summary": "List Object Versions",
        "operationId": "ListObjectVersions",
        "description": "Returns metadata about all versions of the objects in a bucket. You can also use request parameters as selection criteria to return metadata about a subset of all the object versions.To use this operation, you must have permissions to perform the s3:ListBucketVersions action. Be aware of the name difference.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListVersionsResult"
            }
          }
        },
        "parameters": [
          {
            "name": "delimiter",
            "in": "query",
            "description": "A delimiter is a character that you specify to group keys. ",
            "type": "string"
          },
          {
            "name": "encoding-type",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "enum": ["url"],
              "description": "Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response."
            }
          },
          {
            "name": "key-marker",
            "in": "query",
            "description": "Specifies the key to start with when listing objects in a bucket.",
            "type": "string"
          },
          {
            "name": "max-keys",
            "in": "query",
            "description": "Sets the maximum number of keys returned in the response. By default the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more.",
            "type": "integer"
          },
          {
            "name": "prefix",
            "in": "query",
            "description": "Use this parameter to select only those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different groupings of keys.",
            "type": "string"
          },
          {
            "name": "version-id-marker",
            "in": "query",
            "description": "Specifies the object version you want to start listing from.",
            "type": "string"
          },
          {
            "name": "versions",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/OptionalObjectAttributes"
          }
        ]
      }
    },
    "/?list-type=2": {
      "get": {
        "tags": ["Operations on Object"],
        "summary": "List Objects V2",
        "operationId": "ListObjectsV2",
        "description": "Returns some or all (up to 1,000) of the objects in a bucket with each request. You can use the request parameters as selection criteria to return a subset of the objects in a bucket. A 200 OK response can contain valid or invalid XML. Make sure to design your application to parse the contents of the response and handle it appropriately. Objects are returned sorted in an ascending order of the respective key names in the list.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBucketResultV2"
            }
          }
        },
        "parameters": [
          {
            "name": "delimiter",
            "in": "query",
            "description": "A delimiter is a character you use to group keys.",
            "type": "string"
          },
          {
            "name": "encoding-type",
            "in": "query",
            "description": "Encoding type used by Amazon S3 to encode object keys in the response.",
            "schema": {
              "type": "string",
              "enum": ["url"],
              "description": "Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response."
            }
          },
          {
            "name": "max-keys",
            "in": "query",
            "description": "Sets the maximum number of keys returned in the response. By default the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more.",
            "type": "integer"
          },
          {
            "name": "prefix",
            "in": "query",
            "description": "Limits the response to keys that begin with the specified prefix.",
            "type": "string"
          },
          {
            "name": "continuation-token",
            "in": "query",
            "description": "ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key.",
            "type": "string"
          },
          {
            "name": "start-after",
            "in": "query",
            "description": "StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket.",
            "type": "string"
          },
          {
            "name": "list-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["2"]
            }
          },
          {
            "name":"fetch-owner",
            "in":"query",
            "type":"boolean"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/OptionalObjectAttributes"
          }
        ]
      }
    },
    "/{Key}?restore": {
      "post": {
        "tags": ["Operations on Object"],
        "summary": "Restores an archived copy of an object back",
        "operationId": "RestoreObject",
        "description": "Restores an archived copy of an object back into Amazon S3.This action performs the following types of requests:select - Perform a select query on an archived objectrestore. an archive- Restore an archived object . To use this operation, you must have permissions to perform the s3:RestoreObject action.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "RestoreRequest",
            "in": "body",
            "schema": { "$ref": "#/definitions/RestoreRequest" }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the action was initiated.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "VersionId used to reference a specific version of the object.",
            "type": "string"
          },

          {
            "name": "restore",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          }
        ]
      }
    },
    "/{Key}?select&select-type=2": {
      "post": {
        "tags": ["Operations on Bucket"],
        "summary": "Filter content based on SQL statement",
        "operationId": "SelectObjectContent",
        "description": "This action filters the contents of an Amazon S3 object based on a simple structured query language (SQL) statement. In the request, along with the SQL expression, you must also specify a data serialization format (JSON, CSV, or Apache Parquet) of the object. Amazon S3 uses this format to parse object data into records, and returns only records that match the specified SQL expression. You must also specify the data serialization format for the response. This action is not supported by Amazon S3 on Outposts.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Payload"
            }
          }
        },
        "parameters": [
          {
            "name": "SelectObjectContentRequest",
            "in": "body",
            "schema": { "$ref": "#/definitions/SelectObjectContentRequest" }
          },

          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The object key.",
            "type": "string",
            "minLength": 1
          },

          {
            "name": "select",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "name": "select-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["2"]
            }
          },
          {
            "$ref":"#/parameters/SSECustomerAlgorithm"
          },
          {
            "$ref":"#/parameters/SSECustomerKey"
          },
          {
            "$ref":"#/parameters/SSECustomerKeyMD5"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          }
        ]
      }
    },
    "/{Key}?partNumber&uploadId": {
      "put": {
        "tags": ["Uploads"],
        "summary": "Upload part in Multipart upload",
        "operationId": "UploadPart",
        "description": "Uploads a part in a multipart upload.In this operation, you provide part data in your request. However, you have an option to specify your existing Amazon S3 object as a data source for the part you are uploading. To upload a part from an existing object, you use the UploadPartCopy operation.You must initiate a multipart upload before you can upload any part.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "type": "string"
          },
          {
            "name": "Content-Length",
            "in": "header",
            "description": "Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.",
            "type": "integer"
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the multipart upload was initiated.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "partNumber",
            "in": "query",
            "required": true,
            "description": "Part number of part being uploaded. This is a positive integer between 1 and 10,000.",
            "type": "integer"
          },
          {
            "name": "uploadId",
            "in": "query",
            "required": true,
            "description": "Upload ID identifying the multipart upload whose part is being uploaded.",
            "type": "string"
          },
          {
            "$ref":"#/parameters/ContentMD5"
          },
          {
            "$ref":"#/parameters/ChecksumAlgorithm"
          },
          {
            "$ref":"#/parameters/ChecksumCRC32"
          },
          {
            "$ref":"#/parameters/ChecksumCRC32C"
          },
          {
            "$ref":"#/parameters/ChecksumSHA1"
          },
          {
            "$ref":"#/parameters/ChecksumSHA256"
          },
          {
            "$ref":"#/parameters/SSECustomerAlgorithm"
          },
          {
            "$ref":"#/parameters/SSECustomerKey"
          },
          {
            "$ref":"#/parameters/SSECustomerKeyMD5"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          }
        ]
      }
    },
    "/{Key}?x-amz-copy-source&partNumber&uploadId": {
      "put": {
        "tags": ["Uploads"],
        "summary": "Upload part by copy data from object",
        "operationId": "UploadPartCopy",
        "description": "Uploads a part by copying data from an existing object as data source. You specify the data source by adding the request header x-amz-copy-source in your request and a byte range by adding the request header x-amz-copy-source-range in your request. The minimum allowable part size for a multipart upload is 5 MB.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CopyPartResult"
            }
          }
        },
        "parameters": [
          {
            "name": "x-amz-copy-source",
            "in": "header",
            "required": true,
            "description": "Specifies the source object for the copy operation.",
            "schema": {
              "type": "string",
              "pattern": "\\/.+\\/.+"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the multipart upload was initiated.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "partNumber",
            "in": "query",
            "required": true,
            "description": "Part number of part being copied. This is a positive integer between 1 and 10,000.",
            "type": "integer"
          },
          {
            "name": "uploadId",
            "in": "query",
            "required": true,
            "description": "Upload ID identifying the multipart upload whose part is being copied.",
            "type": "string"
          },
          {
            "$ref":"#/parameters/CopySourceIfMatch"
          },
          {
            "$ref":"#/parameters/CopySourceIfModifiedSince"
          },
          {
            "$ref":"#/parameters/CopySourceIfNoneMatch"
          },
          {
            "$ref":"#/parameters/CopySourceIfUnmodifiedSince"
          },
          {
            "name":"x-amz-copy-source-range",
            "in":"header",
            "type":"string"
          },
          {
            "$ref":"#/parameters/SSECustomerAlgorithm"
          },
          {
            "$ref":"#/parameters/SSECustomerKey"
          },
          {
            "$ref":"#/parameters/SSECustomerKeyMD5"
          },
          {
            "name":"x-amz-copy-source-server-side-encryption-customer-algorithm",
            "in":"header",
            "type":"string"
          },
          {
            "name":"x-amz-copy-source-server-side-encryption-customer-key",
            "in":"header",
            "type":"string"
          },
          {
            "name":"x-amz-copy-source-server-side-encryption-customer-key-MD5",
            "in":"header",
            "type":"string"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedSourceBucketOwner"
          }
        ]
      }
    },
    "/{Key}?attributes": {
      "get": {
        "tags": ["Operations on Object"],
        "summary": "Retrieves metadata from object",
        "operationId": "GetObjectAttributes",
        "description": "Retrieves all the metadata from an object without returning the object itself. This action is useful if you're interested only in an object's metadata.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetObjectAttributesOutput"
            }
          }
        },
        "parameters": [
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The key name for the object whose Legal Hold status you want to retrieve.",
            "type": "string",
            "minLength": 1
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "The version ID of the object whose Legal Hold status you want to retrieve.",
            "type": "string"
          },

          {
            "name": "attributes",
            "in": "query",
            "required": true,
            "type": "boolean",
            "enum": [true],
            "allowEmptyValue": true
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "name":"x-amz-max-parts",
            "in":"header",
            "description":"Sets the maximum number of parts to return.",
            "type":"string"
          },
          {
            "name":"x-amz-part-number-marker",
            "in":"header",
            "type":"string"
          },
          {
            "$ref":"#/parameters/SSECustomerAlgorithm"
          },
          {
            "$ref":"#/parameters/SSECustomerKey"
          },
          {
            "$ref":"#/parameters/SSECustomerKeyMD5"
          },
          {
            "$ref":"#/parameters/RequestPayer"
          },
          {
            "$ref":"#/parameters/ExpectedBucketOwner"
          },
          {
            "name":"x-amz-object-attributes",
            "in":"header",
            "type":"string",
            "required":true
          }
        ]
      }
    }
  },

  "definitions": {
    "Url": {
      "name": "url",
      "description": "The URL of the Bucket , Region or S3 that is the target of the desired operation.",
      "x-ms-parameter-location": "client",
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true
    },
    "NoSuchUpload": {},
    "CompleteMultipartUpload": {
      "type": "object",
      "properties": {
        "Part": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Etag": { "$ref": "#/definitions/ETag" },
              "PartNumber": { "ref": "#/definitions/PartNumber" }
            }
          }
        }
      }
    },

    "CompleteMultipartUploadResult": {
      "type": "object",

      "properties": {
        "Location": {
          "$ref": "#/definitions/Location"
        },
        "Bucket": {
          "type": "string"
        },
        "Key": {
          "type": "string"
        },
        "ETag": {
          "$ref": "#/definitions/ETag"
        },
        "ChecksumCRC32": {
          "$ref": "#/definitions/ChecksumCRC32"
        },
        "ChecksumCRC32C": {
          "$ref": "#/definitions/ChecksumCRC32C"
        },
        "ChecksumSHA1": {
          "$ref": "#/definitions/ChecksumSHA1"
        },
        "ChecksumSHA256": {
          "$ref": "#/definitions/ChecksumSHA256"
        }
      }
    },
    "CompletedPartList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CompletedPart"
      },
      "xml": {
        "wrapped": false
      }
    },
    "InitiateMultipartUploadResult": {
      "type": "object",
      "properties": {
        "Bucket": {
          "type": "string"
        },
        "Key": {
          "type": "string"
        },
        "UploadId": {
          "$ref": "#/definitions/MultipartUploadId"
        }
      }
    },

    "DeleteResult": {
      "type": "object",
      "properties": {
        "Deleted": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Key": {
                "type": "string"
              },
              "VersionId": {
                "type": "string"
              },
              "DeleteMarker": {
                "type": "boolean"
              },
              "DeleteMarkerVersionId": {
                "type": "string"
              }
            }
          },
          "xml": {
            "wrapped": false
          }
        },
        "Error": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Key": {
                "type": "string"
              },
              "VersionId": {
                "type": "string"
              },
              "Code": {
                "type": "string"
              },
              "Message": {
                "type": "string"
              }
            }
          },
          "xml": {
            "wrapped": false
          }
        }
      }
    },
    "ObjectIdentifierList": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "VersionId": {
            "type": "string"
          }
        }
      },
      "xml": {
        "wrapped": false
      }
    },
    "Quiet": {
      "type": "boolean"
    },
    "AccelerateConfiguration": {
      "type": "object",
      "properties": {
        "Status": {
          "$ref": "#/definitions/BucketAccelerateStatus"
        }
      }
    },
    "GetBucketLifecycleOutput": {
      "type": "object",
      "properties": {
        "Rule": {
          "type": "object",
          "properties": {
            "Expiration": {
              "$ref": "#/definitions/LifecycleExpiration"
            },
            "Filter": {
              "$ref": "#/definitions/LifecycleFilter"
            },
            "ID": {
              "$ref": "#/definitions/ID"
            },
            "Prefix": {
              "type": "string"
            },
            "Status": {
              "type": "string",
              "enum": ["Enabled", "Disabled"]
            },
            "Transition": {
              "$ref": "#/definitions/Transition"
            },
            "NoncurrentVersionTransition": {
              "$ref": "#/definitions/NoncurrentVersionTransition"
            },
            "NoncurrentVersionExpiration": {
              "$ref": "#/definitions/NoncurrentVersionExpiration"
            },
            "AbortIncompleteMultipartUpload": {
              "$ref": "#/definitions/AbortIncompleteMultipartUpload"
            }
          },
          "description": "Specifies lifecycle rules for an Amazon S3 bucket."
        }
      }
    },

    "LocationConstraint": {
      "type": "object",
      "properties": {
        "LocationConstraint": {
          "type": "string"
        }
      }
    },
    "NotificationConfiguration": {
      "type": "object",
      "properties": {
        "QueueConfiguration": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Id": {
                "type": "string"
              },
              "Queue": {
                "type": "string"
              },
              "Event": {
                "$ref": "#/definitions/Event"
              },
              "Filter": {
                "$ref": "#/definitions/NotificationConfigurationFilter"
              }
            }
          }
        },
        "TopicConfiguration": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Id": {
                "type": "string"
              },
              "Topic": {
                "type": "string"
              },
              "Event": {
                "$ref": "#/definitions/Event"
              },
              "Filter": {
                "type": "object",
                "properties": {
                  "S3Key": {
                    "type": "object",
                    "properties": {
                      "FilterRule": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "Name": {
                              "type": "string",
                              "enum": ["prefix", "suffix"]
                            },
                            "Value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "CloudFunctionConfiguration": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Id": {
                "type": "string"
              },
              "CloudFunction": {
                "$ref": "#/definitions/CloudFunction"
              },
              "Event": {
                "$ref": "#/definitions/Event"
              },
              "Filter": {
                "type": "object",
                "properties": {
                  "S3Key": {
                    "type": "object",
                    "properties": {
                      "FilterRule": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "Name": {
                              "type": "string",
                              "enum": ["prefix", "suffix"]
                            },
                            "Value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "EventBridgeConfiguration": {
          "type": "object"
        }
      },
      "description": "A container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off for the bucket."
    },
    "GetBucketVersioningOutput": {
      "type": "object",
      "properties": {
        "Status": {
          "$ref": "#/definitions/BucketVersioningStatus"
        },
        "MfaDelete": {
          "$ref": "#/definitions/MFADeleteStatus"
        }
      }
    },
    "MFADeleteStatus": {
      "type": "string",
      "enum": ["Enabled", "Disabled"]
    },
    "GetObjectOutput": {
      "type": "object",
      "properties": {
        "Body": {
          "$ref": "#/definitions/Body"
        },
        "x-amz-meta-": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "NoSuchKey": {},
    "InvalidObjectState": {},
    "GetObjectLockConfigurationOutput": {
      "type": "object",
      "properties": {
        "ObjectLockConfiguration": {
          "$ref": "#/definitions/ObjectLockConfiguration"
        }
      }
    },
    "NoSuchBucket": {},
    "ListBucketAnalyticsConfigurationResult": {
      "type": "object",
      "properties": {
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated"
        },
        "ContinuationToken": {
          "$ref": "#/definitions/Token"
        },
        "NextContinuationToken": {
          "$ref": "#/definitions/NextToken"
        },
        "AnalyticsConfiguration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalyticsConfiguration"
          },
          "xml": {
            "wrapped": false
          }
        }
      }
    },
    "ListBucketIntelligentTieringConfigurationsOutput": {
      "type": "object",
      "properties": {
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated"
        },
        "ContinuationToken": {
          "$ref": "#/definitions/Token"
        },
        "NextContinuationToken": {
          "$ref": "#/definitions/NextToken"
        },
        "IntelligentTieringConfiguration": {
          "$ref": "#/definitions/IntelligentTieringConfigurationList"
        }
      }
    },
    "ListBucketInventoryConfigurationsResult": {
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "If sent in the request, the marker that is used as a starting point for this inventory configuration list response."
            }
          ]
        },
        "InventoryConfiguration": {
          "$ref": "#/definitions/InventoryConfigurationList"
        },
        "IsTruncated": {
          "allOf": [
            {
              "$ref": "#/definitions/IsTruncated"
            },
            {
              "description": "Tells whether the returned list of inventory configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken is provided for a subsequent request."
            }
          ]
        },
        "NextContinuationToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The marker used to continue this inventory configuration listing. Use the NextContinuationToken from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands."
            }
          ]
        }
      }
    },
    "ListMetricsConfigurationsResult": {
      "type": "object",
      "properties": {
        "IsTruncated": {
          "allOf": [
            {
              "$ref": "#/definitions/IsTruncated"
            },
            {
              "description": "Indicates whether the returned list of metrics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request."
            }
          ]
        },
        "ContinuationToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "The marker that is used as a starting point for this metrics configuration list response. This value is present if it was sent in the request."
            }
          ]
        },
        "NextContinuationToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The marker used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands."
            }
          ]
        },
        "MetricsConfiguration": {
          "$ref": "#/definitions/MetricsConfigurationList"
        }
      }
    },
    "ListAllMyBucketsResult": {
      "type": "object",
      "properties": {
        "Buckets": {
          "$ref": "#/definitions/Buckets"
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        }
      }
    },
    "ListMultipartUploadsResult": {
      "type": "object",
      "properties": {
        "Bucket": {
          "type": "string",
          "description": "The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used."
        },
        "KeyMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyMarker"
            },
            {
              "description": "The key at or after which the listing began."
            }
          ]
        },
        "UploadIdMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/UploadIdMarker"
            },
            {
              "description": "Upload ID after which listing began."
            }
          ]
        },
        "NextKeyMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/NextKeyMarker"
            },
            {
              "description": "When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request."
            }
          ]
        },
        "Prefix": {
          "type": "string",
          "description": "When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix."
        },
        "Delimiter": {
          "$ref": "#/definitions/Delimiter"
        },
        "NextUploadIdMarker": {
          "$ref": "#/definitions/NextUploadIdMarker"
        },
        "MaxUploads": {
          "$ref": "#/definitions/MaxUploads"
        },
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated"
        },
        "Uploads": {
          "$ref": "#/definitions/MultipartUploadList"
        },
        "CommonPrefixes": {
          "$ref": "#/definitions/CommonPrefixList"
        },
        "EncodingType": {
          "$ref": "#/definitions/EncodingType"
        }
      }
    },
    "ListBucketsResult": {
      "type": "object",
      "properties": {
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated"
        },
        "Marker": {
          "type": "string"
        },
        "NextMarker": {
          "type": "string"
        },
        "Contents": {
          "$ref": "#/definitions/ObjectList"
        },
        "Name": {
          "type": "string"
        },
        "Prefix": {
          "type": "string"
        },
        "Delimiter": {
          "type": "string"
        },
        "MaxKeys": {
          "$ref": "#/definitions/MaxKeys"
        },
        "CommonPrefixes": {
          "$ref": "#/definitions/CommonPrefixList"
        },
        "EncodingType": {
          "type": "string"
        }
      }
    },
    "ListVersionsResult": {
      "type": "object",
      "properties": {
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated"
        },
        "KeyMarker": {
          "$ref": "#/definitions/KeyMarker"
        },
        "VersionIdMarker": {
          "$ref": "#/definitions/VersionIdMarker"
        },
        "NextKeyMarker": {
          "$ref": "#/definitions/NextKeyMarker"
        },
        "NextVersionIdMarker": {
          "$ref": "#/definitions/NextVersionIdMarker"
        },
        "Version": {
          "$ref": "#/definitions/ObjectVersionList"
        },
        "DeleteMarker": {
          "$ref": "#/definitions/DeleteMarkers"
        },
        "Name": {
          "type": "string"
        },
        "Prefix": {
          "type": "string"
        },
        "Delimiter": {
          "$ref": "#/definitions/Delimiter"
        },
        "MaxKeys": {
          "$ref": "#/definitions/MaxKeys"
        },
        "CommonPrefixes": {
          "$ref": "#/definitions/CommonPrefixList"
        },
        "EncodingType": {
          "$ref": "#/definitions/EncodingType"
        }
      }
    },

    "ListBucketResultV2": {
      "type": "object",
      "properties": {
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated"
        },
        "Contents": {
          "$ref": "#/definitions/ObjectList"
        },
        "Name": {
          "type": "string"
        },
        "Prefix": {
          "type": "string"
        },
        "Delimiter": {
          "$ref": "#/definitions/Delimiter"
        },
        "MaxKeys": {
          "$ref": "#/definitions/MaxKeys"
        },
        "CommonPrefixes": {
          "$ref": "#/definitions/CommonPrefixList"
        },
        "EncodingType": {
          "$ref": "#/definitions/EncodingType"
        },
        "KeyCount": {
          "$ref": "#/definitions/KeyCount"
        },
        "ContinuationToken": {
          "$ref": "#/definitions/Token"
        },
        "NextContinuationToken": {
          "$ref": "#/definitions/NextToken"
        },
        "StartAfter": {
          "$ref": "#/definitions/StartAfter"
        }
      }
    },
    "ListBucketResult": {
      "type": "object",
      "properties": {
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated"
        },
        "Contents": {
          "$ref": "#/definitions/ObjectList"
        },
        "Name": {
          "type": "string"
        },
        "Prefix": {
          "type": "string"
        },
        "Delimiter": {
          "$ref": "#/definitions/Delimiter"
        },
        "MaxKeys": {
          "$ref": "#/definitions/MaxKeys"
        },
        "CommonPrefixes": {
          "$ref": "#/definitions/CommonPrefixList"
        },
        "EncodingType": {
          "$ref": "#/definitions/EncodingType"
        },

        "Marker": {
          "type": "string"
        },
        "NextMarker": {
          "type": "string"
        }
      }
    },

    "ListPartsResult": {
      "type": "object",
      "properties": {
        "Bucket": {
          "type": "string"
        },
        "Key": {
          "type": "string"
        },
        "UploadId": {
          "$ref": "#/definitions/MultipartUploadId"
        },
        "PartNumberMarker": {
          "$ref": "#/definitions/PartNumberMarker"
        },
        "NextPartNumberMarker": {
          "$ref": "#/definitions/NextPartNumberMarker"
        },
        "MaxParts": {
          "$ref": "#/definitions/MaxParts"
        },
        "IsTruncated": {
          "$ref": "#/definitions/IsTruncated"
        },
        "Parts": {
          "$ref": "#/definitions/Parts"
        },
        "Initiator": {
          "$ref": "#/definitions/Initiator"
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        },
        "StorageClass": {
          "type": "string",
          "enum": [
            "STANDARD",
            "REDUCED_REDUNDANCY",
            "STANDARD_IA",
            "ONEZONE_IA",
            "INTELLIGENT_TIERING",
            "GLACIER",
            "DEEP_ARCHIVE",
            "OUTPOSTS"
          ]
        },
        "ChecksumAlgorithm": {
          "$ref": "#/definitions/ChecksumAlgorithm"
        }
      }
    },
    "BucketAccelerateStatus": {
      "type": "string",
      "enum": ["Enabled", "Suspended"]
    },
    "Grants": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Grant": {
            "type": "object",
            "properties": {
              "Grantee": {
                "type": "object",
                "properties": {
                  "DisplayName": {
                    "type": "string"
                  },
                  "EmailAddress": {
                    "type": "string"
                  },
                  "ID": {
                    "type": "string"
                  },
                  "Type": {
                    "type": "string",
                    "enum": ["CanonicalUser", "AmazonCustomerByEmail", "Group"]
                  },
                  "URI": {
                    "type": "string"
                  }
                }
              },
              "Permission": {
                "type": "string",
                "enum": [
                  "FULL_CONTROL",
                  "WRITE",
                  "WRITE_ACP",
                  "READ",
                  "READ_ACP"
                ]
              }
            }
          }
        }
      }
    },
    "Owner": {
      "type": "object",
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "ID": {
          "type": "string"
        }
      }
    },
    "AnalyticsId": {
      "type": "string"
    },
    "AnalyticsFilter": {
      "type": "object",
      "properties": {
        "Prefix": {
          "type": "string"
        },
        "Tag": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string"
            },
            "Value": {
              "type": "string"
            }
          }
        },
        "And": {
          "type": "object",
          "properties": {
            "Prefix": {
              "type": "string"
            },
            "Tag": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "Key": {
                    "type": "string"
                  },
                  "Value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "description": "The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis."
    },

    "StorageClassAnalysis": {
      "type": "object",
      "properties": {
        "DataExport": {
          "type": "object",
          "properties": {
            "OutputSchemaVersion": {
              "type": "string",
              "enum": ["V_1"]
            },
            "Destination": {
              "type": "object",
              "properties": {
                "S3BucketDestination": {
                  "type": "object",
                  "properties": {
                    "Format": {
                      "type": "string",
                      "enum": ["CSV"]
                    },
                    "BucketAccountId": {
                      "type": "string"
                    },
                    "Bucket": {
                      "type": "string"
                    },
                    "Prefix": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "description": "Specifies data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes for an Amazon S3 bucket."
    },
    "CORSRules": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "AllowedHeader": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AllowedMethod": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "xml": {
              "wrapped": false
            }
          },
          "AllowedOrigin": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "xml": {
              "wrapped": false
            }
          },
          "ExposeHeader": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "MaxAgeSeconds": {
            "type": "integer"
          }
        }
      }
    },
    "ServerSideEncryptionRules": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServerSideEncryptionRule"
      },
      "xml": {
        "wrapped": false
      }
    },
    "IntelligentTieringId": {
      "type": "string"
    },
    "IntelligentTieringFilter": {
      "type": "object",
      "properties": {
        "Prefix": {
          "type": "string"
        },
        "Tag": {
          "$ref": "#/definitions/Tag"
        },
        "And": {
          "$ref": "#/definitions/IntelligentTieringAndOperator"
        }
      },
      "description": "The Filter is used to identify objects that the S3 Intelligent-Tiering configuration applies to."
    },
    "IntelligentTieringStatus": {
      "type": "string",
      "enum": ["Enabled", "Disabled"]
    },
    "TieringList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Tiering"
      }
    },
    "InventoryFilter": {
      "type": "object",
      "properties": {
        "Prefix": {
          "type": "string"
        }
      },
      "description": "Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria."
    },
    "InventoryId": {
      "type": "string"
    },
    "InventoryIncludedObjectVersions": {
      "type": "string",
      "enum": ["All", "Current"]
    },
    "InventoryOptionalFields": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Field": {
            "type": "string",
            "enum": [
              "Size",
              "LastModifiedDate",
              "StorageClass",
              "ETag",
              "IsMultipartUploaded",
              "ReplicationStatus",
              "EncryptionStatus",
              "ObjectLockRetainUntilDate",
              "ObjectLockMode",
              "ObjectLockLegalHoldStatus",
              "IntelligentTieringAccessTier",
              "BucketKeyStatus"
            ]
          }
        }
      }
    },
    "InventorySchedule": {
      "type": "object",
      "properties": {
        "Frequency": {
          "type": "string",
          "enum": ["Daily", "Weekly"]
        }
      },
      "description": "Specifies the schedule for generating inventory results."
    },
    "LoggingEnabled": {
      "type": "object",
      "properties": {
        "TargetBucket": {
          "type": "string"
        },
        "TargetGrants": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Grant": {
                "type": "object",
                "properties": {
                  "Grantee": {
                    "type": "object",
                    "properties": {
                      "DisplayName": {
                        "type": "string"
                      },
                      "EmailAddress": {
                        "type": "string"
                      },
                      "ID": {
                        "type": "string"
                      },
                      "Type": {
                        "type": "string",
                        "enum": [
                          "CanonicalUser",
                          "AmazonCustomerByEmail",
                          "Group"
                        ]
                      },
                      "URI": {
                        "type": "string"
                      }
                    }
                  },
                  "Permission": {
                    "type": "string",
                    "enum": ["FULL_CONTROL", "READ", "WRITE"]
                  }
                }
              }
            }
          }
        },
        "TargetPrefix": {
          "type": "string"
        }
      },
      "description": "Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket."
    },
    "TopicConfigurationDeprecated": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Events": {
          "$ref": "#/definitions/Event"
        },
        "Event": {
          "type": "string",
          "enum": [
            "s3:ReducedRedundancyLostObject",
            "s3:ObjectCreated:*",
            "s3:ObjectCreated:Put",
            "s3:ObjectCreated:Post",
            "s3:ObjectCreated:Copy",
            "s3:ObjectCreated:CompleteMultipartUpload",
            "s3:ObjectRemoved:*",
            "s3:ObjectRemoved:Delete",
            "s3:ObjectRemoved:DeleteMarkerCreated",
            "s3:ObjectRestore:*",
            "s3:ObjectRestore:Post",
            "s3:ObjectRestore:Completed",
            "s3:Replication:*",
            "s3:Replication:OperationFailedReplication",
            "s3:Replication:OperationNotTracked",
            "s3:Replication:OperationMissedThreshold",
            "s3:Replication:OperationReplicatedAfterThreshold"
          ]
        },
        "Topic": {
          "type": "string"
        }
      },
      "description": "A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events. This data type is deprecated. TopicConfiguration instead."
    },
    "QueueConfigurationDeprecated": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Event": {
          "type": "string",
          "enum": [
            "s3:ReducedRedundancyLostObject",
            "s3:ObjectCreated:*",
            "s3:ObjectCreated:Put",
            "s3:ObjectCreated:Post",
            "s3:ObjectCreated:Copy",
            "s3:ObjectCreated:CompleteMultipartUpload",
            "s3:ObjectRemoved:*",
            "s3:ObjectRemoved:Delete",
            "s3:ObjectRemoved:DeleteMarkerCreated",
            "s3:ObjectRestore:*",
            "s3:ObjectRestore:Post",
            "s3:ObjectRestore:Completed",
            "s3:Replication:*",
            "s3:Replication:OperationFailedReplication",
            "s3:Replication:OperationNotTracked",
            "s3:Replication:OperationMissedThreshold",
            "s3:Replication:OperationReplicatedAfterThreshold"
          ]
        },
        "Events": {
          "$ref": "#/definitions/Event"
        },
        "Queue": {
          "type": "string"
        }
      },
      "description": "This data type is deprecated. Use QueueConfiguration for the same purposes. This data type specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events. "
    },
    "Payer": {
      "type": "string",
      "enum": ["Requester", "BucketOwner"]
    },
    "TagSet": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      }
    },
    "MFADelete": {
      "type": "string",
      "enum": ["Enabled", "Disabled"]
    },
    "BucketVersioningStatus": {
      "type": "string",
      "enum": ["Enabled", "Suspended"]
    },
    "ErrorDocument": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        }
      },
      "description": "The error information."
    },
    "IndexDocument": {
      "type": "object",
      "properties": {
        "Suffix": {
          "type": "string"
        }
      },
      "description": "Container for the Suffix element."
    },
    "RedirectAllRequestsTo": {
      "type": "object",
      "properties": {
        "HostName": {
          "type": "string"
        },
        "Protocol": {
          "type": "string",
          "enum": ["http", "https"]
        }
      },
      "description": "Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket."
    },
    "RoutingRules": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "RoutingRule": {
            "type": "object",
            "properties": {
              "Condition": {
                "type": "object",
                "properties": {
                  "HttpErrorCodeReturnedEquals": {
                    "type": "string"
                  },
                  "KeyPrefixEquals": {
                    "type": "string"
                  }
                }
              },
              "Redirect": {
                "type": "object",
                "properties": {
                  "HostName": {
                    "type": "string"
                  },
                  "HttpRedirectCode": {
                    "type": "string"
                  },
                  "Protocol": {
                    "type": "string",
                    "enum": ["http", "https"]
                  },
                  "ReplaceKeyPrefixWith": {
                    "type": "string"
                  },
                  "ReplaceKeyWith": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Specifies the redirect behavior and when a redirect is applied."
          }
        }
      }
    },
    "ObjectLockLegalHoldStatus": {
      "type": "string",
      "enum": ["ON", "OFF"]
    },
    "Setting": {
      "type": "boolean"
    },
    "CSVOutput": {
      "type": "object",
      "properties": {
        "QuoteFields": {
          "type": "string",
          "enum": ["ALWAYS", "ASNEEDED"]
        },
        "QuoteEscapeCharacter": {
          "type": "string"
        },
        "RecordDelimiter": {
          "type": "string"
        },
        "FieldDelimiter": {
          "type": "string"
        },
        "QuoteCharacter": {
          "type": "string"
        }
      },
      "description": "Describes how uncompressed comma-separated values (CSV)-formatted results are formatted."
    },
    "JSONOutput": {
      "type": "object",
      "properties": {
        "RecordDelimiter": {
          "type": "string"
        }
      },
      "description": "Specifies JSON as request's output serialization format."
    },
    "AbortDate": {
      "type": "string",
      "format": "date-time"
    },
    "AbortIncompleteMultipartUpload": {
      "type": "object",
      "properties": {
        "DaysAfterInitiation": {
          "type": "integer"
        }
      },
      "description": "Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload."
    },
    "RequestCharged": {
      "type": "string",
      "enum": ["requester"],
      "description": "If present, indicates that the requester was successfully charged for the request."
    },
    "MultipartUploadId": {
      "type": "string"
    },
    "RequestPayer": {
      "type": "string",
      "enum": ["requester"],
      "description": "Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests."
    },
    "AbortRuleId": {
      "type": "string"
    },

    "AcceptRanges": {
      "type": "string"
    },
    "AccessControlPolicy": {
      "type": "object",
      "properties": {
        "AccessControlList": {
          "$ref": "#/definitions/AccessControlList"
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        }
      },
      "description": "Contains the elements that set the ACL permissions for an object per grantee."
    },
    "AccessControlList": {
      "type": "object",
      "properties": {
        "Grant": {
          "type": "object",
          "properties": {
            "Grantee": {
              "type": "object",
              "properties": {
                "DisplayName": {
                  "type": "string"
                },
                "EmailAddress": {
                  "type": "string"
                },
                "ID": {
                  "type": "string"
                },
                "Type": {
                  "type": "string",
                  "enum": ["CanonicalUser", "AmazonCustomerByEmail", "Group"]
                },
                "URI": {
                  "type": "string"
                }
              }
            },
            "Permission": {
              "type": "string",
              "enum": ["FULL_CONTROL", "WRITE", "WRITE_ACP", "READ", "READ_ACP"]
            }
          }
        }
      }
    },
    "AccessPointArn": {
      "type": "string"
    },
    "AllowedHeader": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "AllowedMethod": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "xml": {
        "wrapped": false
      }
    },
    "AllowedOrigin": {
      "type": "string"
    },
    "AllowedOrigins": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AllowedOrigin"
      },
      "xml": {
        "wrapped": false
      }
    },
    "AnalyticsAndOperator": {
      "type": "object",
      "properties": {
        "Prefix": {
          "type": "string"
        },
        "Tag": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Key": {
                "type": "string"
              },
              "Value": {
                "type": "string"
              }
            }
          }
        }
      },
      "description": "A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates in any combination, and an object must match all of the predicates for the filter to apply."
    },
    "AnalyticsConfiguration": {
      "type": "object",
      "properties": {
        "Id": {
          "$ref": "#/definitions/AnalyticsId"
        },
        "Filter": {
          "$ref": "#/definitions/AnalyticsFilter"
        },
        "StorageClassAnalysis": {
          "$ref": "#/definitions/StorageClassAnalysis"
        }
      },
      "description": "Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket."
    },
    "AnalyticsConfigurationList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AnalyticsConfiguration"
      },
      "xml": {
        "wrapped": false
      }
    },
    "AnalyticsS3BucketDestination": {
      "type": "object",
      "properties": {
        "Format": {
          "$ref": "#/definitions/AnalyticsS3ExportFileFormat"
        },
        "BucketAccountId": {
          "type": "string"
        },
        "Bucket": {
          "type": "string"
        },
        "Prefix": {
          "type": "string"
        }
      },
      "description": "Contains information about where to publish the analytics results."
    },
    "AnalyticsExportDestination": {
      "type": "object",
      "properties": {
        "S3BucketDestination": {
          "$ref": "#/definitions/AnalyticsS3BucketDestination"
        }
      },
      "description": "Where to publish the analytics results."
    },
    "Tag": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "AnalyticsS3ExportFileFormat": {
      "type": "string",
      "enum": ["CSV"]
    },
    "ArchiveStatus": {
      "type": "string",
      "enum": ["ARCHIVE_ACCESS", "DEEP_ARCHIVE_ACCESS"]
    },
    "Body": {
      "type": "string"
    },
    "CreationDate": {
      "type": "string",
      "format": "date-time"
    },
    "Bucket": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "CreationDate": {
          "$ref": "#/definitions/CreationDate"
        }
      },
      "description": " In terms of implementation, a Bucket is a resource. An Amazon S3 bucket name is globally unique, and the namespace is shared by all Amazon Web Services accounts. "
    },
    "BucketCannedACL": {
      "type": "string",
      "enum": [
        "private",
        "public-read",
        "public-read-write",
        "authenticated-read"
      ]
    },
    "BucketKeyEnabled": {
      "type": "boolean"
    },
    "BucketLoggingStatus": {
      "type": "object",
      "properties": {
        "LoggingEnabled": {
          "$ref": "#/definitions/LoggingEnabled"
        }
      },
      "description": "Container for logging status information."
    },
    "BucketLogsPermission": {
      "type": "string",
      "enum": ["FULL_CONTROL", "READ", "WRITE"]
    },
    "Buckets": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Bucket": { "$ref": "#/definitions/Bucket" }
        }
      }
    },
    "BypassGovernanceRetention": {
      "type": "boolean"
    },
    "BytesProcessed": {
      "type": "integer"
    },
    "BytesReturned": {
      "type": "integer"
    },
    "BytesScanned": {
      "type": "integer"
    },
    "CORSConfiguration": {
      "type": "object",
      "properties": {
        "CORSRule": {
          "$ref": "#/definitions/CORSRules"
        }
      },
      "description": "Describes the cross-origin access configuration for objects in an Amazon S3 bucket."
    },
    "ID": {
      "type": "string"
    },
    "ExposeHeaders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExposeHeader"
      }
    },
    "MaxAgeSeconds": {
      "type": "integer"
    },
    "CORSRule": {
      "type": "object",
      "properties": {
        "ID": {
          "$ref": "#/definitions/ID"
        },
        "AllowedHeader": {
          "$ref": "#/definitions/AllowedHeader"
        },
        "AllowedMethod": {
          "$ref": "#/definitions/AllowedMethod"
        },
        "AllowedOrigin": {
          "$ref": "#/definitions/AllowedOrigins"
        },
        "ExposeHeader": {
          "$ref": "#/definitions/ExposeHeaders"
        },
        "MaxAgeSeconds": {
          "$ref": "#/definitions/MaxAgeSeconds"
        }
      },
      "description": "Specifies a cross-origin access rule for an Amazon S3 bucket."
    },
    "Comments": {
      "type": "string"
    },
    "CacheControl": {
      "type": "string"
    },
    "CloudFunction": {
      "type": "string"
    },
    "Event": {
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "s3:ReducedRedundancyLostObject",
          "s3:ObjectCreated:*",
          "s3:ObjectCreated:Put",
          "s3:ObjectCreated:Post",
          "s3:ObjectCreated:Copy",
          "s3:ObjectCreated:CompleteMultipartUpload",
          "s3:ObjectRemoved:*",
          "s3:ObjectRemoved:Delete",
          "s3:ObjectRemoved:DeleteMarkerCreated",
          "s3:ObjectRestore:*",
          "s3:ObjectRestore:Post",
          "s3:ObjectRestore:Completed",
          "s3:Replication:*",
          "s3:Replication:OperationFailedReplication",
          "s3:Replication:OperationNotTracked",
          "s3:Replication:OperationMissedThreshold",
          "s3:Replication:OperationReplicatedAfterThreshold"
        ]
      }
    },
    "CommonPrefix": {
      "type": "object",
      "properties": {
        "Prefix": {
          "type": "string"
        }
      },
      "description": "Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. "
    },
    "CommonPrefixList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CommonPrefix"
      }
    },
    "ChecksumAlgorithm": {
      "type": "string",
      "enum": ["CRC32", "CRC32C", "SHA1", "SHA256"]
    },
    "ChecksumCRC32":{
      "type": "string"
    },
    "ChecksumCRC32C": {
      "type": "string"
    },
    "ChecksumSHA1": {
      "type": "string"
    },
    "ChecksumSHA256": {
      "type": "string"
    },
    "Location": {
      "type": "string"
    },
    "Expiration": {
      "type": "string"
    },
    "ETag": {
      "type": "string"
    },
    "ServerSideEncryption": {
      "type": "string",
      "enum": ["AES256", "aws:kms"]
    },
    "CompletedMultipartUpload": {
      "type": "object",
      "properties": {
        "Part": {
          "$ref": "#/definitions/CompletedPartList"
        }
      },
      "description": "The container for the completed multipart upload details."
    },
    "CompleteMultipartUploadRequest": {
      "type": "object",
      "title": "CompleteMultipartUploadRequest",
      "properties": {
        "CompleteMultipartUpload": {
          "$ref": "#/definitions/CompletedMultipartUpload"
        }
      }
    },
    "PartNumber": {
      "type": "integer"
    },
    "CompletedPart": {
      "type": "object",
      "properties": {
        "ETag": {
          "$ref": "#/definitions/ETag"
        },
        "PartNumber": {
          "$ref": "#/definitions/PartNumber"
        }
      },
      "description": "Details of the parts that were uploaded."
    },
    "ConfirmRemoveSelfBucketAccess": {
      "type": "boolean"
    },
    "ContentDisposition": {
      "type": "string"
    },
    "ContentEncoding": {
      "type": "string"
    },
    "ContentLanguage": {
      "type": "string"
    },
    "ContentLength": {
      "type": "integer"
    },
    "ContentMD5": {
      "type": "string"
    },
    "ContentRange": {
      "type": "string"
    },
    "ContentType": {
      "type": "string"
    },
    "ContinuationEvent": {
      "type": "object",
      "properties": {},
      "description": ""
    },
    "CopyObjectResult": {
      "type": "object",
      "properties": {
        "ETag": {
          "$ref": "#/definitions/ETag"
        },
        "LastModified": {
          "$ref": "#/definitions/LastModified"
        },
        "ChecksumCRC32": {
          "$ref": "#/definitions/ChecksumCRC32"
        },
        "ChecksumCRC32C": {
          "$ref": "#/definitions/ChecksumCRC32C"
        },
        "ChecksumSHA1": {
          "$ref": "#/definitions/ChecksumSHA1"
        },
        "ChecksumSHA256": {
          "$ref": "#/definitions/ChecksumSHA256"
        }
      },
      "description": "Container for all response elements."
    },
    "CopySourceVersionId": {
      "type": "string"
    },
    "SSECustomerAlgorithm": {
      "type": "string"
    },
    "SSECustomerKeyMD5": {
      "type": "string"
    },
    "SSEKMSEncryptionContext": {
      "type": "string",
      "format": "password"
    },
    "ObjectCannedACL": {
      "type": "string",
      "enum": [
        "private",
        "public-read",
        "public-read-write",
        "authenticated-read",
        "aws-exec-read",
        "bucket-owner-read",
        "bucket-owner-full-control"
      ]
    },
    "CopySource": {
      "type": "string",
      "pattern": "\\/.+\\/.+"
    },
    "CopySourceIfMatch": {
      "type": "string"
    },
    "CopySourceIfModifiedSince": {
      "type": "string",
      "format": "date-time"
    },
    "CopySourceIfNoneMatch": {
      "type": "string"
    },
    "CopySourceIfUnmodifiedSince": {
      "type": "string",
      "format": "date-time"
    },
    "Expires": {
      "type": "string",
      "format": "date-time"
    },
    "GrantFullControl": {
      "type": "string"
    },
    "GrantRead": {
      "type": "string"
    },
    "GrantReadACP": {
      "type": "string"
    },
    "GrantWriteACP": {
      "type": "string"
    },
    "Metadata": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "MetadataDirective": {
      "type": "string",
      "enum": ["COPY", "REPLACE"]
    },
    "TaggingDirective": {
      "type": "string",
      "enum": ["COPY", "REPLACE"]
    },
    "WebsiteRedirectLocation": {
      "type": "string"
    },
    "SSECustomerKey": {
      "type": "string",
      "format": "password"
    },
    "CopySourceSSECustomerAlgorithm": {
      "type": "string"
    },
    "CopySourceSSECustomerKey": {
      "type": "string",
      "format": "password"
    },
    "CopySourceSSECustomerKeyMD5": {
      "type": "string"
    },
    "TaggingHeader": {
      "type": "string"
    },
    "ObjectLockMode": {
      "type": "string",
      "enum": ["GOVERNANCE", "COMPLIANCE"]
    },
    "ObjectLockRetainUntilDate": {
      "type": "string",
      "format": "date-time"
    },
    "LastModified": {
      "type": "string",
      "format": "date-time"
    },
    "CopyPartResult": {
      "type": "object",
      "properties": {
        "ETag": {
          "$ref": "#/definitions/ETag"
        },
        "LastModified": {
          "$ref": "#/definitions/LastModified"
        },
        "ChecksumCRC32": {
          "$ref": "#/definitions/ChecksumCRC32"
        },
        "ChecksumCRC32C": {
          "$ref": "#/definitions/ChecksumCRC32C"
        },
        "ChecksumSHA1": {
          "$ref": "#/definitions/ChecksumSHA1"
        },
        "ChecksumSHA256": {
          "$ref": "#/definitions/ChecksumSHA256"
        }
      },
      "description": "Container for all response elements."
    },
    "CopySourceRange": {
      "type": "string"
    },
    "CreateBucketConfiguration": {
      "type": "object",
      "properties": {
        "LocationConstraint": {
          "type": "string"
        }
      },
      "description": "The configuration information for the bucket."
    },
    "GrantWrite": {
      "type": "string"
    },
    "ObjectLockEnabledForBucket": {
      "type": "boolean"
    },
    "DefaultRetention": {
      "type": "object",
      "properties": {
        "Mode": {
          "type": "string",
          "enum": ["GOVERNANCE", "COMPLIANCE"]
        },
        "Days": {
          "type": "integer"
        },
        "Years": {
          "type": "integer"
        }
      },
      "description": "The container element for specifying the default Object Lock retention settings for new objects placed in the specified bucket. The DefaultRetention settings require both a mode and a period.The DefaultRetention period can be either Days or Years but you must select one. You cannot specify Days and Years at the same time."
    },
    "Delete": {
      "type": "object",
      "properties": {
        "Object": {
          "$ref": "#/definitions/ObjectIdentifierList"
        },
        "Quiet": {
          "$ref": "#/definitions/Quiet"
        }
      },
      "description": "Container for the objects to delete."
    },
    "DeleteBucketPolicyRequest": {
      "type": "object",
      "title": "DeleteBucketPolicyRequest",
      "properties": {}
    },
    "IsLatest": {
      "type": "boolean"
    },
    "DeleteMarkerReplication": {
      "type": "object",
      "properties": {
        "Status": {
          "type": "string",
          "enum": ["Enabled", "Disabled"]
        }
      },
      "description": "Specifies whether Amazon S3 replicates delete markers. If you specify a Filter in your replication configuration, you must also include a DeleteMarkerReplication element. If your Filter includes a Tag element, the DeleteMarkerReplication Status must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules."
    },
    "DeleteMarkers": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Owner": {
            "type": "object",
            "properties": {
              "DisplayName": {
                "type": "string"
              },
              "ID": {
                "$ref": "#/definitions/ID"
              }
            }
          },
          "Key": {
            "type": "string"
          },
          "VersionId": {
            "type": "string"
          },
          "IsLatest": {
            "$ref": "#/definitions/IsLatest"
          },
          "LastModified": {
            "$ref": "#/definitions/LastModified"
          }
        },
        "description": "Information about the delete marker."
      }
    },
    "MFA": {
      "type": "string"
    },
    "Delimiter": {
      "type": "string"
    },
    "Destination": {
      "type": "object",
      "properties": {
        "Bucket": {
          "type": "string"
        },
        "Account": {
          "type": "string"
        },
        "StorageClass": {
          "type": "string",
          "enum": [
            "STANDARD",
            "REDUCED_REDUNDANCY",
            "STANDARD_IA",
            "ONEZONE_IA",
            "INTELLIGENT_TIERING",
            "GLACIER",
            "DEEP_ARCHIVE",
            "OUTPOSTS"
          ]
        },
        "AccessControlTranslation": {
          "type": "object",
          "properties": {
            "Owner": {
              "type": "string",
              "enum": ["Destination"]
            }
          },
          "description": "A container for information about access control for replicas."
        },
        "EncryptionConfiguration": {
          "type": "object",
          "properties": {
            "ReplicaKmsKeyID": {
              "type": "string"
            }
          },
          "description": "Specifies encryption-related information for an Amazon S3 bucket that is a destination for replicated objects."
        },
        "ReplicationTime": {
          "type": "object",
          "properties": {
            "Status": {
              "type": "string",
              "enum": ["Enabled", "Disabled"]
            },
            "Time": {
              "type": "object",
              "properties": {
                "Minutes": {
                  "type": "integer"
                }
              },
              "description": " A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics EventThreshold. "
            }
          },
          "description": " A container specifying S3 Replication Time Control (S3 RTC) related information, including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a Metrics block. "
        },
        "Metrics": {
          "type": "object",
          "properties": {
            "Status": {
              "type": "string",
              "enum": ["Enabled", "Disabled"]
            },
            "EventThreshold": {
              "type": "object",
              "properties": {
                "Minutes": {
                  "type": "integer"
                }
              },
              "description": " A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics EventThreshold. "
            }
          },
          "description": " A container specifying replication metrics-related settings enabling replication metrics and events."
        }
      },
      "description": "Specifies information about where to publish analysis or configuration results for an Amazon S3 bucket and S3 Replication Time Control (S3 RTC)."
    },
    "EncodingType": {
      "type": "string",
      "enum": ["url"],
      "description": "Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response."
    },
    "Encryption": {
      "type": "object",
      "properties": {
        "EncryptionType": {
          "type": "string",
          "enum": ["AES256", "aws:kms"]
        },
        "KMSKeyId": {
          "type": "string",
          "format": "password"
        },
        "KMSContext": {
          "type": "string"
        }
      },
      "description": "Contains the type of server-side encryption used."
    },
    "EndEvent": {
      "type": "object",
      "properties": {},
      "description": "A message that indicates the request is complete and no more messages will be sent. You should not assume that the request is complete until the client receives an EndEvent."
    },
    "ErrorCode": {
      "type": "string"
    },
    "ErrorMessage": {
      "type": "string"
    },
    "ExposeHeader": {
      "type": "string"
    },
    "Expression": {
      "type": "string"
    },
    "ExpressionType": {
      "type": "string",
      "enum": ["SQL"]
    },
    "FetchOwner": {
      "type": "boolean"
    },
    "ServerSideEncryptionConfiguration": {
      "type": "object",
      "properties": {
        "Rules": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "ApplyServerSideEncryptionByDefault": {
                "type": "object",
                "properties": {
                  "SSEAlgorithm": {
                    "$ref": "#/definitions/ServerSideEncryption"
                  },
                  "KMSMasterKeyID": {
                    "type": "string",
                    "format": "password"
                  }
                }
              },
              "BucketKeyEnabled": {
                "type": "object",
                "properties": {
                  "LoggingEnabled": {
                    "$ref": "#/definitions/LoggingEnabled"
                  }
                }
              }
            }
          },
          "xml": {
            "wrapped": false
          }
        }
      },
      "description": "Specifies the default server-side-encryption configuration."
    },
    "IntelligentTieringConfiguration": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Filter": {
          "type": "object",
          "properties": {
            "Prefix": {
              "type": "string"
            },
            "Tag": {
              "$ref": "#/definitions/Tag"
            },
            "And": {
              "type": "object",
              "properties": {
                "Prefix": {
                  "type": "string"
                },
                "Tag": {
                  "$ref": "#/definitions/TagSet"
                }
              }
            }
          }
        },
        "Status": {
          "type": "string",
          "enum": ["Enabled", "Disabled"]
        },
        "Tiering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tiering"
          }
        }
      },
      "description": "Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket."
    },

    "InventoryConfiguration": {
      "type": "object",
      "properties": {
        "Destination": {
          "type": "object",
          "properties": {
            "S3BucketDestination": {
              "$ref": "#/definitions/InventoryS3BucketDestination"
            }
          },
          "description": "Specifies the inventory configuration for an Amazon S3 bucket."
        },
        "IsEnabled": {
          "type": "boolean"
        },
        "Filter": {
          "$ref": "#/definitions/InventoryFilter"
        },
        "Id": {
          "type": "string"
        },
        "IncludedObjectVersions": {
          "$ref": "#/definitions/InventoryIncludedObjectVersions"
        },
        "OptionalFields": {
          "type": "string",
          "enum": [
            "Size",
            "LastModifiedDate",
            "StorageClass",
            "ETag",
            "IsMultipartUploaded",
            "ReplicationStatus",
            "EncryptionStatus",
            "ObjectLockRetainUntilDate",
            "ObjectLockMode",
            "ObjectLockLegalHoldStatus",
            "IntelligentTieringAccessTier",
            "BucketKeyStatus"
          ]
        },
        "Schedule": {
          "$ref": "#/definitions/InventorySchedule"
        }
      },
      "description": "Specifies the inventory configuration for an Amazon S3 bucket."
    },
    "MetricsConfiguration": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Filter": {
          "type": "object",
          "properties": {
            "Prefix": {
              "type": "string"
            },
            "Tag": {
              "$ref": "#/definitions/Tag"
            },
            "AccessPointArn": {
              "type": "string"
            },
            "And": {
              "$ref": "#/definitions/MetricsAndOperator"
            }
          },
          "description": "Specifies a metrics configuration filter. The metrics configuration only includes objects that meet the filter's criteria. A filter must be a prefix, an object tag, an access point ARN, or a conjunction (MetricsAndOperator)."
        }
      },
      "description": "Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased."
    },

    "OwnershipControls": {
      "type": "object",
      "properties": {
        "Rule": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OwnershipControlsRule"
          }
        }
      },
      "description": "The container element for a bucket's ownership controls."
    },
    "Policy": {
      "type": "string"
    },
    "GetBucketPolicyRequest": {
      "type": "object",
      "title": "GetBucketPolicyRequest",
      "properties": {}
    },
    "PolicyStatus": {
      "type": "object",
      "properties": {
        "IsPublic": {
          "$ref": "#/definitions/IsPublic"
        }
      },
      "description": "The container element for a bucket's policy status."
    },
    "GetBucketPolicyStatusRequest": {
      "type": "object",
      "title": "GetBucketPolicyStatusRequest",
      "properties": {}
    },
    "ReplicationConfiguration": {
      "type": "object",
      "properties": {
        "Role": {
          "type": "string"
        },
        "Rule": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "ID": {
                "type": "string"
              },
              "Priority": {
                "type": "integer"
              },
              "Prefix": {
                "type": "string"
              },
              "Filter": {
                "$ref": "#/definitions/ReplicationRuleFilter"
              },
              "Status": {
                "$ref": "#/definitions/ReplicationRuleStatus"
              },
              "SourceSelectionCriteria": {
                "$ref": "#/definitions/SourceSelectionCriteria"
              },
              "ExistingObjectReplication": {
                "type": "object",
                "properties": {
                  "Status": {
                    "type": "string",
                    "enum": ["Enabled", "Disabled"]
                  }
                },
                "description": "Optional configuration to replicate existing source bucket objects. "
              },
              "Destination": {
                "$ref": "#/definitions/Destination"
              },
              "DeleteMarkerReplication": {
                "$ref": "#/definitions/DeleteMarkerReplication"
              }
            },
            "description": "Specifies which Amazon S3 objects to replicate and where to store the replicas."
          },
          "xml": {
            "wrapped": false
          }
        }
      },
      "description": "A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB."
    },
    "GetObjectAttributesOutput":{
      "type":"object",
      "properties":{
        "ETag":{
          "$ref":"#/definitions/ETag"
        },
        "Checksum":{
          "type":"object",
          "properties":{
            "ChecksumCRC32":{
              "$ref":"#/definitions/ChecksumCRC32"
            },
            "ChecksumCRC32C":{
              "$ref":"#/definitions/ChecksumCRC32C"
            },
            "ChecksumSHA1":{
              "$ref":"#/definitions/ChecksumSHA1"
            },
            "ChecksumSHA256":{
              "$ref":"#/definitions/ChecksumSHA256"
            }
          }
        },
        "ObjectParts":{
          "type":"object",
          "properties":{
            "IsTruncated":{
              "$ref":"#/definitions/IsTruncated"
            },
            "MaxParts":{
              "$ref":"#/definitions/MaxParts"
            },
            "NextPartNumberMarker":{
              "$ref":"#/definitions/NextPartNumberMarker"
            },
            "PartNumberMarker":{
              "$ref":"#/definitions/PartNumberMarker"
            },
            "Part":{
              "type":"array",
              "items":{
                "type":"object",
                "properties":{
                  "ChecksumCRC32":{
                    "$ref":"#/definitions/ChecksumCRC32"
                  },
                  "ChecksumCRC32C":{
                    "$ref":"#/definitions/ChecksumCRC32C"
                  },
                  "ChecksumSHA1":{
                    "$ref":"#/definitions/ChecksumSHA1"
                  },
                  "ChecksumSHA256":{
                    "$ref":"#/definitions/ChecksumSHA256"
                  },
                  "PartNumber":{
                    "type":"integer"
                  },
                  "Size":{
                    "type":"integer"
                  }
                }
              }
            },
            "PartCount":{
              "type":"integer"
            }
          }
        },
        "StorageClass":{
          "type":"string"
        },
        "ObjectSize":{
          "type":"integer"
        }
      }
    },
    "LegalHold": {
      "type": "object",
      "properties": {
        "Status": {
          "$ref": "#/definitions/ObjectLockLegalHoldStatus"
        }
      },
      "description": "A Legal Hold configuration for an object."
    },
    "ObjectLockConfiguration": {
      "type": "object",
      "properties": {
        "ObjectLockEnabled": {
          "type": "string",
          "enum": ["Enabled"]
        },
        "Rule": {
          "type": "object",
          "properties": {
            "DefaultRetention": {
              "$ref": "#/definitions/DefaultRetention"
            }
          }
        }
      },
      "description": "The container element for Object Lock configuration parameters."
    },
    "Restore": {
      "type": "string"
    },
    "MissingMeta": {
      "type": "integer"
    },
    "ReplicationStatus": {
      "type": "string",
      "enum": ["COMPLETE", "PENDING", "FAILED", "REPLICA"]
    },
    "PartsCount": {
      "type": "integer"
    },
    "TagCount": {
      "type": "integer"
    },
    "IfMatch": {
      "type": "string"
    },
    "IfModifiedSince": {
      "type": "string",
      "format": "date-time"
    },
    "IfNoneMatch": {
      "type": "string"
    },
    "IfUnmodifiedSince": {
      "type": "string",
      "format": "date-time"
    },
    "Range": {
      "type": "string"
    },
    "ResponseCacheControl": {
      "type": "string"
    },
    "ResponseContentDisposition": {
      "type": "string"
    },
    "ResponseContentEncoding": {
      "type": "string"
    },
    "ResponseContentLanguage": {
      "type": "string"
    },
    "ResponseContentType": {
      "type": "string"
    },
    "ResponseExpires": {
      "type": "string",
      "format": "date-time"
    },
    "GetObjectRequest": {
      "type": "object",
      "title": "GetObjectRequest",
      "properties": {}
    },
    "GetObjectResponseStatusCode": {
      "type": "integer"
    },
    "Retention": {
      "type": "object",
      "properties": {
        "Mode": {
          "type": "string",
          "enum": ["GOVERNANCE", "COMPLIANCE"]
        },
        "RetainUntilDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "A Retention configuration for an object."
    },
    "PublicAccessBlockConfiguration": {
      "type": "object",
      "properties": {
        "BlockPublicAcls": {
          "$ref": "#/definitions/Setting"
        },
        "IgnorePublicAcls": {
          "$ref": "#/definitions/Setting"
        },
        "BlockPublicPolicy": {
          "$ref": "#/definitions/Setting"
        },
        "RestrictPublicBuckets": {
          "$ref": "#/definitions/Setting"
        }
      },
      "description": "The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination."
    },
    "HeadBucketRequest": {
      "type": "object",
      "title": "HeadBucketRequest",
      "properties": {}
    },
    "HeadObjectRequest": {
      "type": "object",
      "title": "HeadObjectRequest",
      "properties": {}
    },
    "Initiated": {
      "type": "string",
      "format": "date-time"
    },
    "Initiator": {
      "type": "object",
      "properties": {
        "ID": {
          "$ref": "#/definitions/ID"
        },
        "DisplayName": {
          "type": "string"
        }
      },
      "description": "Container element that identifies who initiated the multipart upload. "
    },
    "InputSerialization": {
      "type": "object",
      "properties": {
        "CSV": {
          "type": "object",
          "properties": {
            "FileHeaderInfo": {
              "type": "string",
              "enum": ["USE", "IGNORE", "NONE"]
            },
            "Comments": {
              "type": "string"
            },
            "QuoteEscapeCharacter": {
              "type": "string"
            },
            "RecordDelimiter": {
              "type": "string"
            },
            "FieldDelimiter": {
              "type": "string"
            },
            "QuoteCharacter": {
              "type": "string"
            },
            "AllowQuotedRecordDelimiter": {
              "type": "boolean"
            }
          }
        },
        "CompressionType": {
          "type": "string",
          "enum": ["NONE", "GZIP", "BZIP2"]
        },
        "JSON": {
          "type": "object",
          "properties": {
            "Type": {
              "type": "string",
              "enum": ["DOCUMENT", "LINES"]
            }
          }
        },
        "Parquet": {
          "type": "object",
          "properties": {},
          "description": "Container for Parquet."
        }
      },
      "description": "Describes the serialization format of the object."
    },
    "IntelligentTieringAndOperator": {
      "type": "object",
      "properties": {
        "Prefix": {
          "type": "string"
        },
        "Tag": {
          "$ref": "#/definitions/TagSet"
        }
      },
      "description": "A container for specifying S3 Intelligent-Tiering filters. The filters determine the subset of objects to which the rule applies."
    },
    "IntelligentTieringConfigurationList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/IntelligentTieringConfiguration"
      }
    },
    "IntelligentTieringDays": {
      "type": "integer"
    },
    "InventoryConfigurationList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/InventoryConfiguration"
      },
      "xml": {
        "wrapped": false
      }
    },
    "InventoryS3BucketDestination": {
      "type": "object",
      "properties": {
        "AccountId": {
          "type": "string"
        },
        "Bucket": {
          "type": "string"
        },
        "Format": {
          "type": "string",
          "enum": ["CSV", "ORC", "Parquet"]
        },
        "Prefix": {
          "type": "string"
        },
        "Encryption": {
          "type": "object",
          "properties": {
            "SSE-S3": {
              "type": "object",
              "properties": {},
              "description": "Specifies the use of SSE-S3 to encrypt delivered inventory reports."
            },
            "SSE-KMS": {
              "type": "object",
              "properties": {
                "KeyId": {
                  "type": "string",
                  "format": "password"
                }
              },
              "description": "Specifies the use of SSE-KMS to encrypt delivered inventory reports."
            }
          },
          "description": "Contains the type of server-side encryption used to encrypt the inventory results."
        }
      },
      "description": "Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published."
    },
    "IsPublic": {
      "type": "boolean"
    },
    "IsTruncated": {
      "type": "boolean"
    },
    "KeyCount": {
      "type": "integer"
    },
    "KeyMarker": {
      "type": "string"
    },

    "NotificationConfigurationFilter": {
      "type": "object",
      "properties": {
        "S3Key": {
          "type": "object",
          "properties": {
            "FilterRule": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string",
                    "enum": ["prefix", "suffix"]
                  },
                  "Value": {
                    "type": "string"
                  }
                },
                "description": "Specifies the Amazon S3 object key name to filter on and whether to filter on the suffix or prefix of the key name."
              }
            }
          }
        }
      },
      "description": "Specifies object key name filtering rules."
    },
    "LambdaFunctionConfiguration": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CloudFunction": {
          "type": "string"
        },
        "Event": {
          "$ref": "#/definitions/Event"
        },
        "Filter": {
          "$ref": "#/definitions/NotificationConfigurationFilter"
        }
      },
      "description": "A container for specifying the configuration for Lambda notifications."
    },
    "LifecycleConfiguration": {
      "type": "object",
      "properties": {
        "Rule": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Expiration": {
                "$ref": "#/definitions/LifecycleExpiration"
              },
              "Filter": {
                "$ref": "#/definitions/LifecycleFilter"
              },
              "ID": {
                "$ref": "#/definitions/ID"
              },
              "Prefix": {
                "type": "string"
              },
              "Status": {
                "type": "string",
                "enum": ["Enabled", "Disabled"]
              },
              "Transition": {
                "$ref": "#/definitions/Transition"
              },
              "NoncurrentVersionTransition": {
                "$ref": "#/definitions/NoncurrentVersionTransition"
              },
              "NoncurrentVersionExpiration": {
                "$ref": "#/definitions/NoncurrentVersionExpiration"
              },
              "AbortIncompleteMultipartUpload": {
                "$ref": "#/definitions/AbortIncompleteMultipartUpload"
              }
            },
            "description": "Specifies lifecycle rules for an Amazon S3 bucket."
          },
          "xml": {
            "wrapped": false
          }
        }
      },
      "description": "Container for lifecycle rules. You can add as many as 1000 rules."
    },
    "LifecycleExpiration": {
      "type": "object",
      "properties": {
        "Date": {
          "type": "string",
          "format": "date-time"
        },
        "Days": {
          "type": "integer"
        },
        "ExpiredObjectDeleteMarker": {
          "type": "boolean"
        }
      },
      "description": "Container for the expiration for the lifecycle of the object."
    },
    "LifecycleFilter": {
      "type": "object",
      "properties": {
        "ObjectSizeGreaterThan": {
          "type": "string"
        },
        "ObjectSizeLessThan": {
          "type": "string"
        },
        "Prefix": {
          "type": "string"
        },
        "Tag": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string"
            },
            "Value": {
              "type": "string"
            }
          }
        },
        "And": {
          "type": "object",
          "properties": {
            "Prefix": {
              "type": "string"
            },
            "Tag": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "Key": {
                    "type": "string"
                  },
                  "Value": {
                    "type": "string"
                  }
                }
              }
            },
            "ObjectSizeGreaterThan": {
              "type": "string"
            },
            "ObjectSizeLessThan": {
              "type": "string"
            }
          },
          "description": "This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.",
          "xml": {
            "wrapped": false
          }
        }
      },
      "description": "The Filter is used to identify objects that a Lifecycle Rule applies to. A Filter must have exactly one of Prefix, Tag, or And specified."
    },

    "TransitionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Transition"
      },
      "xml": {
        "wrapped": false
      }
    },
    "NoncurrentVersionTransitionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/NoncurrentVersionTransition"
      },
      "xml": {
        "wrapped": false
      }
    },
    "NoncurrentVersionExpiration": {
      "type": "object",
      "properties": {
        "NoncurrentDays": {
          "type": "integer"
        }
      },
      "description": "Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime."
    },
    "LifecycleRuleAndOperator": {
      "type": "object",
      "properties": {
        "Prefix": {
          "type": "string"
        },
        "Tag": {
          "$ref": "#/definitions/TagSet"
        },
        "ObjectSizeGreaterThan": {
          "type": "string"
        },
        "ObjectSizeLessThan": {
          "type": "string"
        }
      },
      "description": "This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.",
      "xml": {
        "wrapped": false
      }
    },
    "Token": {
      "type": "string"
    },
    "NextToken": {
      "type": "string"
    },
    "MetricsConfigurationList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MetricsConfiguration"
      },
      "xml": {
        "wrapped": false
      }
    },
    "UploadIdMarker": {
      "type": "string"
    },
    "NextKeyMarker": {
      "type": "string"
    },
    "NextUploadIdMarker": {
      "type": "string"
    },
    "MaxUploads": {
      "type": "integer"
    },
    "MultipartUploadList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MultipartUpload"
      },
      "xml": {
        "wrapped": false
      }
    },
    "VersionIdMarker": {
      "type": "string"
    },
    "NextVersionIdMarker": {
      "type": "string"
    },
    "ObjectVersionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ObjectVersion"
      }
    },
    "MaxKeys": {
      "type": "integer"
    },

    "ObjectList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Object"
      }
    },
    "StartAfter": {
      "type": "string"
    },
    "PartNumberMarker": {
      "type": "integer"
    },
    "NextPartNumberMarker": {
      "type": "integer"
    },
    "MaxParts": {
      "type": "integer"
    },
    "Parts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Part"
      },
      "xml": {
        "wrapped": false
      }
    },

    "TargetBucket": {
      "type": "string"
    },
    "TargetGrants": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Grant": {
            "$ref": "#/definitions/TargetGrant"
          }
        }
      }
    },
    "TargetPrefix": {
      "type": "string"
    },
    "MetadataKey": {
      "type": "string"
    },
    "MetricsAndOperator": {
      "type": "object",
      "properties": {
        "Prefix": {
          "type": "string"
        },
        "Tag": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Key": {
                "type": "string"
              },
              "Value": {
                "type": "string"
              }
            }
          }
        },
        "AccessPointArn": {
          "type": "string"
        }
      },
      "description": "A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.",
      "xml": {
        "wrapped": false
      }
    },
    "MultipartUpload": {
      "type": "object",
      "properties": {
        "ChecksumAlgorithm": {
          "$ref": "#/definitions/ChecksumAlgorithm"
        },
        "UploadId": {
          "$ref": "#/definitions/MultipartUploadId"
        },
        "Key": {
          "type": "string"
        },
        "Initiated": {
          "$ref": "#/definitions/Initiated"
        },
        "StorageClass": {
          "type": "string",
          "enum": [
            "STANDARD",
            "REDUCED_REDUNDANCY",
            "STANDARD_IA",
            "ONEZONE_IA",
            "INTELLIGENT_TIERING",
            "GLACIER",
            "DEEP_ARCHIVE",
            "OUTPOSTS"
          ]
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        },
        "Initiator": {
          "$ref": "#/definitions/Initiator"
        }
      },
      "description": "Container for the MultipartUpload for the Amazon S3 object."
    },
    "NoncurrentVersionTransition": {
      "type": "object",
      "properties": {
        "NoncurrentDays": {
          "type": "integer"
        },
        "StorageClass": {
          "type": "string",
          "enum": [
            "GLACIER",
            "STANDARD_IA",
            "ONEZONE_IA",
            "INTELLIGENT_TIERING",
            "DEEP_ARCHIVE"
          ]
        }
      },
      "description": "Container for the transition rule that describes when noncurrent objects transition to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER, or DEEP_ARCHIVE storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER, or DEEP_ARCHIVE storage class at a specific period in the object's lifetime."
    },
    "Size": {
      "type": "integer"
    },
    "ObjectStorageClass": {
      "type": "string",
      "enum": [
        "STANDARD",
        "REDUCED_REDUNDANCY",
        "GLACIER",
        "STANDARD_IA",
        "ONEZONE_IA",
        "INTELLIGENT_TIERING",
        "DEEP_ARCHIVE",
        "OUTPOSTS"
      ]
    },
    "Object": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "LastModified": {
          "$ref": "#/definitions/LastModified"
        },
        "ETag": {
          "$ref": "#/definitions/ETag"
        },
        "Size": {
          "$ref": "#/definitions/Size"
        },
        "StorageClass": {
          "$ref": "#/definitions/ObjectStorageClass"
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        },
        "ChecksumAlgorithm": {
          "$ref": "#/definitions/ChecksumAlgorithm"
        }
      },
      "description": "An object consists of data and its descriptive metadata."
    },
    "ObjectLockToken": {
      "type": "string"
    },
    "ObjectOwnership": {
      "type": "string",
      "enum": ["BucketOwnerPreferred", "ObjectWriter"],
      "description": "The container element for object ownership for a bucket's ownership controls. BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the bucket-owner-full-control canned ACL. ObjectWriter - The uploading account will own the object if the object is uploaded with the bucket-owner-full-control canned ACL."
    },
    "ObjectVersionStorageClass": {
      "type": "string",
      "enum": ["STANDARD"]
    },
    "ObjectVersion": {
      "type": "object",
      "properties": {
        "ETag": {
          "$ref": "#/definitions/ETag"
        },
        "Size": {
          "$ref": "#/definitions/Size"
        },
        "StorageClass": {
          "$ref": "#/definitions/ObjectVersionStorageClass"
        },
        "Key": {
          "type": "string"
        },
        "VersionId": {
          "type": "string"
        },
        "IsLatest": {
          "$ref": "#/definitions/IsLatest"
        },
        "LastModified": {
          "$ref": "#/definitions/LastModified"
        },
        "Owner": {
          "$ref": "#/definitions/Owner"
        },
        "ChecksumAlgorithm": {
          "$ref": "#/definitions/ChecksumAlgorithm"
        }
      },
      "description": "The version of an object."
    },
    "OwnershipControlsRule": {
      "type": "object",
      "properties": {
        "ObjectOwnership": {
          "type": "string",
          "enum": ["BucketOwnerPreferred", "ObjectWriter"],
          "description": "The container element for object ownership for a bucket's ownership controls. BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the bucket-owner-full-control canned ACL. ObjectWriter - The uploading account will own the object if the object is uploaded with the bucket-owner-full-control canned ACL."
        }
      },
      "description": "The container element for an ownership control rule."
    },
    "Part": {
      "type": "object",
      "properties": {
        "PartNumber": {
          "$ref": "#/definitions/PartNumber"
        },
        "LastModified": {
          "$ref": "#/definitions/LastModified"
        },
        "ETag": {
          "$ref": "#/definitions/ETag"
        },
        "Size": {
          "$ref": "#/definitions/Size"
        },
        "ChecksumCRC32": {
          "$ref": "#/definitions/ChecksumCRC32"
        },
        "ChecksumCRC32C": {
          "$ref": "#/definitions/ChecksumCRC32C"
        },
        "ChecksumSHA1": {
          "$ref": "#/definitions/ChecksumSHA1"
        },
        "ChecksumSHA256": {
          "$ref": "#/definitions/ChecksumSHA256"
        }
      },
      "description": "Container for elements related to a part."
    },
    "Progress": {
      "type": "object",
      "properties": {
        "BytesScanned": {
          "$ref": "#/definitions/BytesScanned"
        },
        "BytesProcessed": {
          "$ref": "#/definitions/BytesProcessed"
        },
        "BytesReturned": {
          "$ref": "#/definitions/BytesReturned"
        }
      },
      "description": "This data type contains information about progress of an operation."
    },
    "ProgressEvent": {
      "type": "object",
      "properties": {
        "Details": {
          "$ref": "#/definitions/Progress"
        }
      },
      "description": "This data type contains information about the progress event of an operation."
    },
    "RequestPaymentConfiguration": {
      "type": "object",
      "properties": {
        "Payer": {
          "$ref": "#/definitions/Payer"
        }
      },
      "description": "Container for Payer."
    },
    "Tagging": {
      "type": "object",
      "properties": {
        "TagSet": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Tag": {
                "type": "object",
                "properties": {
                  "Key": {
                    "type": "string"
                  },
                  "Value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "description": "Container for TagSet elements."
    },
    "VersioningConfiguration": {
      "type": "object",
      "properties": {
        "MFADelete": {
          "$ref": "#/definitions/MFADelete"
        },
        "Status": {
          "$ref": "#/definitions/BucketVersioningStatus"
        }
      },
      "description": "Describes the versioning state of an Amazon S3 bucket."
    },
    "WebsiteConfiguration": {
      "type": "object",
      "properties": {
        "ErrorDocument": {
          "$ref": "#/definitions/ErrorDocument"
        },
        "IndexDocument": {
          "$ref": "#/definitions/IndexDocument"
        },
        "RedirectAllRequestsTo": {
          "$ref": "#/definitions/RedirectAllRequestsTo"
        },
        "RoutingRules": {
          "$ref": "#/definitions/RoutingRules"
        }
      },
      "description": "Specifies website configuration parameters for an Amazon S3 bucket."
    },

    "QueueConfiguration": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "QueueArn": {
          "type": "string"
        },
        "Events": {
          "$ref": "#/definitions/Event"
        }
      },
      "description": "Specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events."
    },
    "RecordsEvent": {
      "type": "object",
      "properties": {
        "Payload": {
          "$ref": "#/definitions/Body"
        }
      },
      "description": "The container for the records event."
    },
    "ReplicaModificationsStatus": {
      "type": "string",
      "enum": ["Enabled", "Disabled"]
    },
    "ReplicationRuleFilter": {
      "type": "object",
      "properties": {
        "Prefix": {
          "type": "string"
        },
        "Tag": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string"
            },
            "Value": {
              "type": "string"
            }
          }
        },
        "And": {
          "type": "object",
          "properties": {
            "Prefix": {
              "type": "string"
            },
            "Tags": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "Key": {
                    "type": "string"
                  },
                  "Value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter.  For example:   If you specify both a Prefix and a Tag filter, wrap these filters in an And tag.    If you specify a filter based on multiple tags, wrap the Tag elements in an And tag.  ",
          "xml": {
            "wrapped": false
          }
        }
      },
      "description": "A filter that identifies the subset of objects to which the replication rule applies. A Filter must specify exactly one Prefix, Tag, or an And child element."
    },
    "ReplicationRuleStatus": {
      "type": "string",
      "enum": ["Enabled", "Disabled"]
    },
    "SourceSelectionCriteria": {
      "type": "object",
      "properties": {
        "SseKmsEncryptedObjects": {
          "type": "object",
          "properties": {
            "Status": {
              "type": "string",
              "enum": ["Enabled", "Disabled"]
            }
          },
          "description": "A container for filter information for the selection of S3 objects encrypted with Amazon Web Services KMS."
        },
        "ReplicaModifications": {
          "type": "object",
          "properties": {
            "Status": {
              "type": "string",
              "enum": ["Enabled", "Disabled"]
            }
          },
          "description": "A filter that you can specify for selection for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when Filter is specified), you can specify this element and set the status to Enabled to replicate modifications on replicas.    If you don't specify the Filter element, Amazon S3 assumes that the replication configuration is the earlier version, V1. In the earlier version, this element is not allowed. "
        }
      },
      "description": "A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using a customer managed key stored in Amazon Web Services Key Management Service (SSE-KMS)."
    },
    "ReplicationRuleAndOperator": {
      "type": "object",
      "properties": {
        "Prefix": {
          "type": "string"
        },
        "Tags": {
          "$ref": "#/definitions/TagSet"
        }
      },
      "description": "A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter.  For example:   If you specify both a Prefix and a Tag filter, wrap these filters in an And tag.    If you specify a filter based on multiple tags, wrap the Tag elements in an And tag.  ",
      "xml": {
        "wrapped": false
      }
    },
    "RequestProgress": {
      "type": "object",
      "properties": {
        "Enabled": {
          "type": "boolean"
        }
      },
      "description": "Container for specifying if periodic QueryProgress messages should be sent."
    },
    "RequestRoute": {
      "type": "string"
    },
    "RequestToken": {
      "type": "string"
    },
    "RestoreOutputPath": {
      "type": "string"
    },
    "RestoreRequest": {
      "type": "object",
      "properties": {
        "Days": {
          "type": "integer"
        },
        "GlacierJobParameters": {
          "type": "object",
          "properties": {
            "Tier": {
              "type": "string",
              "enum": ["Standard", "Bulk", "Expedited"]
            }
          }
        },
        "Type": {
          "type": "string",
          "enum": ["SELECT"]
        },
        "Tier": {
          "type": "string",
          "enum": ["Standard", "Bulk", "Expedited"]
        },
        "Description": {
          "type": "string"
        },
        "SelectParameters": {
          "type": "object",
          "properties": {
            "InputSerialization": {
              "$ref": "#/definitions/InputSerialization"
            },
            "ExpressionType": {
              "$ref": "#/definitions/ExpressionType"
            },
            "Expression": {
              "$ref": "#/definitions/Expression"
            },
            "OutputSerialization": {
              "type": "object",
              "properties": {
                "CSV": {
                  "$ref": "#/definitions/CSVOutput"
                },
                "JSON": {
                  "$ref": "#/definitions/JSONOutput"
                }
              }
            }
          }
        },
        "OutputLocation": {
          "type": "object",
          "properties": {
            "S3": {
              "type": "object",
              "properties": {
                "BucketName": {
                  "type": "string"
                },
                "Prefix": {
                  "type": "string"
                },
                "Encryption": {
                  "$ref": "#/definitions/Encryption"
                },
                "CannedACL": {
                  "$ref": "#/definitions/ObjectCannedACL"
                },
                "AccessControlList": {
                  "$ref": "#/definitions/Grants"
                },
                "Tagging": {
                  "$ref": "#/definitions/Tagging"
                },
                "UserMetadata": {
                  "$ref": "#/definitions/UserMetadata"
                },
                "StorageClass": {
                  "type": "string",
                  "enum": [
                    "STANDARD",
                    "REDUCED_REDUNDANCY",
                    "STANDARD_IA",
                    "ONEZONE_IA",
                    "INTELLIGENT_TIERING",
                    "GLACIER",
                    "DEEP_ARCHIVE",
                    "OUTPOSTS"
                  ]
                }
              }
            }
          }
        }
      },
      "description": "Container for restore job parameters."
    },
    "Transition": {
      "type": "object",
      "properties": {
        "Date": {
          "type": "string",
          "format": "date-time"
        },
        "Days": {
          "type": "integer"
        },
        "StorageClass": {
          "type": "string",
          "enum": [
            "GLACIER",
            "STANDARD_IA",
            "ONEZONE_IA",
            "INTELLIGENT_TIERING",
            "DEEP_ARCHIVE"
          ]
        }
      },
      "description": "Specifies when an object transitions to a specified storage class."
    },
    "UserMetadata": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "MetadataEntry": {
            "type": "object",
            "properties": {
              "Name": {
                "type": "string"
              },
              "Value": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "ScanRange": {
      "type": "object",
      "properties": {
        "Start": {
          "type": "integer"
        },
        "End": {
          "type": "integer"
        }
      },
      "description": "Specifies the byte range of the object to get the records from. A record is processed when its first byte is contained by the range. This parameter is optional, but when specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the start and end of the range."
    },
    "StatsEvent": {
      "type": "object",
      "properties": {
        "Details": {
          "$ref": "#/definitions/Stats"
        }
      },
      "description": "Container for the Stats Event."
    },
    "Payload": {
      "type": "object",
      "properties": {
        "Records": {
          "$ref": "#/definitions/RecordsEvent"
        },
        "Stats": {
          "$ref": "#/definitions/StatsEvent"
        },
        "Progress": {
          "$ref": "#/definitions/ProgressEvent"
        },
        "Cont": {
          "$ref": "#/definitions/ContinuationEvent"
        },
        "End": {
          "$ref": "#/definitions/EndEvent"
        }
      },
      "description": "The container for selecting objects from a content event stream."
    },
    "SelectObjectContentRequest": {
      "type": "object",
      "title": "SelectObjectContentRequest",
      "properties": {
        "Expression": {
          "$ref": "#/definitions/Expression"
        },
        "ExpressionType": {
          "$ref": "#/definitions/ExpressionType"
        },
        "RequestProgress": {
          "$ref": "#/definitions/RequestProgress"
        },
        "InputSerialization": {
          "$ref": "#/definitions/InputSerialization"
        },
        "OutputSerialization": {
          "type": "object",
          "properties": {
            "CSV": {
              "$ref": "#/definitions/CSVOutput"
            },
            "JSON": {
              "$ref": "#/definitions/JSONOutput"
            }
          }
        },
        "ScanRange": {
          "$ref": "#/definitions/ScanRange"
        }
      },
      "description": "Request to filter the contents of an Amazon S3 object based on a simple Structured Query Language (SQL) statement. In the request, along with the SQL expression, you must specify a data serialization format (JSON or CSV) of the object. Amazon S3 uses this to parse object data into records. It returns only records that match the specified SQL expression. You must also specify the data serialization format for the response."
    },
    "ServerSideEncryptionByDefault": {
      "type": "object",
      "properties": {
        "SSEAlgorithm": {
          "$ref": "#/definitions/ServerSideEncryption"
        },
        "KMSMasterKeyID": {
          "type": "string",
          "format": "password"
        }
      },
      "description": "Describes the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied."
    },
    "ServerSideEncryptionRule": {
      "type": "object",
      "properties": {
        "ApplyServerSideEncryptionByDefault": {
          "$ref": "#/definitions/ServerSideEncryptionByDefault"
        },
        "BucketKeyEnabled": {
          "$ref": "#/definitions/BucketKeyEnabled"
        }
      },
      "description": "Specifies the default server-side encryption configuration."
    },
    "Stats": {
      "type": "object",
      "properties": {
        "BytesScanned": {
          "$ref": "#/definitions/BytesScanned"
        },
        "BytesProcessed": {
          "$ref": "#/definitions/BytesProcessed"
        },
        "BytesReturned": {
          "$ref": "#/definitions/BytesReturned"
        }
      },
      "description": "Container for the stats details."
    },
    "StorageClassAnalysisDataExport": {
      "type": "object",
      "properties": {
        "OutputSchemaVersion": {
          "$ref": "#/definitions/StorageClassAnalysisSchemaVersion"
        },
        "Destination": {
          "$ref": "#/definitions/AnalyticsExportDestination"
        }
      },
      "description": "Container for data related to the storage class analysis for an Amazon S3 bucket for export."
    },
    "StorageClassAnalysisSchemaVersion": {
      "type": "string",
      "enum": ["V_1"]
    },
    "TargetGrant": {
      "type": "object",
      "properties": {
        "Grantee": {
          "type": "object",
          "properties": {
            "DisplayName": {
              "type": "string"
            },
            "EmailAddress": {
              "type": "string"
            },
            "ID": {
              "type": "string"
            },
            "Type": {
              "type": "string",
              "enum": ["CanonicalUser", "AmazonCustomerByEmail", "Group"]
            },
            "URI": {
              "type": "string"
            }
          }
        },
        "Permission": {
          "$ref": "#/definitions/BucketLogsPermission"
        }
      },
      "description": "Container for granting information."
    },
    "Tiering": {
      "type": "object",
      "properties": {
        "Days": {
          "type": "integer"
        },
        "AccessTier": {
          "type": "string",
          "enum": ["ARCHIVE_ACCESS", "DEEP_ARCHIVE_ACCESS"]
        }
      },
      "description": "The S3 Intelligent-Tiering storage class is designed to optimize storage costs by automatically moving data to the most cost-effective storage access tier, without additional operational overhead."
    }
  },
  "parameters":{
    "ACL": {
      "name":"x-amz-acl",
      "in":"header",
      "type":"string",
      "description":"The canned ACL to apply to the object."
    },
    "BucketKeyEnabled": {
      "name":"x-amz-server-side-encryption-bucket-key-enabled",
      "in":"header",
      "type":"string"
    },
    "BypassGovernanceRetention": {
      "name":"x-amz-bypass-governance-retention",
      "in":"header",
      "type":"string"
    },
    "CacheControl": {
      "name":"Cache-Control",
      "in":"header",
      "type":"string",
      "description":"Specifies caching behavior along the request/reply chain."
    },
    "ChecksumAlgorithm": {
      "name":"x-amz-checksum-algorithm",
      "in":"header",
      "type":"string",
      "description":"Indicates the algorithm you want Amazon S3 to use to create the checksum for the object."
    },
    "ChecksumCRC32": {
      "name":"x-amz-checksum-crc32",
      "in":"header",
      "type":"string",
      "description":"It can be used as a data integrity check to verify that the data received is the same data that was originally sent.This header specifies the base64-encoded, 32-bit CRC32 checksum of the object."
    },
    "ChecksumCRC32C": {
      "name":"x-amz-checksum-crc32c",
      "in":"header",
      "type":"string",
      "description":"It can be used as a data integrity check to verify that the data received is the same data that was originally sent.This header specifies the base64-encoded, 32-bit CRC32C checksum of the object."
    },
    "ChecksumSHA1": {
      "name":"x-amz-checksum-sha1",
      "in":"header",
      "type":"string",
      "description":"It can be used as a data integrity check to verify that the data received is the same data that was originally sent.This header specifies the base64-encoded, 160-bit SHA-1 digest of the object."
    },
    "ChecksumSHA256": {
      "name":"x-amz-checksum-sha256",
      "in":"header",
      "type":"string",
      "description":"This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 256-bit SHA-256 digest of the object."
    },
    "ChecksumMode": {
      "name":"x-amz-checksum-mode",
      "in":"header",
      "type":"string"
    },
    "ContentDisposition": {
      "name":"Content-Disposition",
      "in":"header",
      "type":"string",
      "description":"Specifies presentational information for the object."
    },
    "ContentEncoding": {
      "name":"Content-Encoding",
      "in":"header",
      "type":"string",
      "description":"Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field."
    },
    "ContentLanguage": {
      "name":"Content-Language",
      "in":"header",
      "type":"string",
      "description":"The language the content is in."
    },
    "ContentMD5": {
      "name":"Content-MD5",
      "in":"header",
      "type":"string",
      "description":"The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message integrity check to verify that the request body was not corrupted in transit."
    },
    "ContentType": {
      "name":"Content-Type",
      "in":"header",
      "type":"string",
      "description":"A standard MIME type describing the format of the object data."
    },
    "CopySource": {
      "name":"x-amz-copy-source",
      "in":"header",
      "type":"string"
    },
    "CopySourceIfMatch": {
      "name":"x-amz-copy-source-if-match",
      "in":"header",
      "type":"string"
    },
    "CopySourceIfModifiedSince": {
      "name":"x-amz-copy-source-if-modified-since",
      "in":"header",
      "type":"string"
    },
    "CopySourceIfNoneMatch": {
      "name":"x-amz-copy-source-if-none-match",
      "in":"header",
      "type":"string"
    },
    "CopySourceIfUnmodifiedSince": {
      "name":"x-amz-copy-source-if-unmodified-since",
      "in":"header",
      "type":"string"
    },
    "CopySourceSSECustomerAlgorithm": {
      "name":"x-amz-copy-source-server-side-encryption-customer-algorithm",
      "in":"header",
      "type":"string"
    },
    "CopySourceSSECustomerKey": {
      "name":"x-amz-copy-source-server-side-encryption-customer-key",
      "in":"header",
      "type":"string"
    },
    "CopySourceSSECustomerKeyMD5": {
      "name":"x-amz-copy-source-server-side-encryption-customer-key-MD5",
      "in":"header",
      "type":"string"
    },
    "Delimiter":{
      "name":"delimiter",
      "in":"query",
      "type":"string",
      "description":"Character you use to group keys."
    },
    "EncodingType":{
      "name":"encoding-type",
      "in":"query",
      "type":"string",
      "description":"Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. "
    },
    "ExpectedBucketOwner": {
      "name": "x-amz-expected-bucket-owner",
      "in": "header",
      "description": "The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.",
      "type": "string"
    },
    "ExpectedSourceBucketOwner": {
      "name":"x-amz-source-expected-bucket-owner",
      "in":"header",
      "type":"string"
    },
    "Expires": {
      "name":"Expires",
      "in":"header",
      "type":"string"
    },
    "GrantFullControl": {
      "name":"x-amz-grant-full-control",
      "in":"header",
      "type":"string"
    },
    "GrantRead": {
      "name":"x-amz-grant-read",
      "in":"header",
      "type":"string"
    },
    "GrantReadACP": {
      "name":"x-amz-grant-read-acp",
      "in":"header",
      "type":"string"
    },
    "GrantWrite": {
      "name":"x-amz-grant-write",
      "in":"header",
      "type":"string"
    },
    "GrantWriteACP": {
      "name":"x-amz-grant-write-acp",
      "in":"header",
      "type":"string"
    },
    "IfMatch": {
      "name":"If-Match",
      "in":"header",
      "type":"string"
    },
    "IfModifiedSince": {
      "name":"If-Modified-Since",
      "in":"header",
      "type":"string"
    },
    "IfNoneMatch": {
      "name":"If-None-Match",
      "in":"header",
      "type":"string"
    },
    "IfUnmodifiedSince": {
      "name":"If-Unmodified-Since",
      "in":"header",
      "type":"string"
    },
    "KeyMarker":{
      "name": "key-marker",
      "in": "query",
      "description": "Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.",
      "type": "string"
    },
    "MaxUploads":{
      "name": "max-uploads",
      "in": "query",
      "description": "Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.",
      "type": "string"
    },
    "MetadataDirective": {
      "name":"x-amz-metadata-directive",
      "in":"header",
      "type":"string"
    }, 
    "MFA": {
      "name":"x-amz-mfa",
      "in":"header",
      "type":"string"
    },
    "ObjectLockEnabledForBucket": {
      "name":"x-amz-bucket-object-lock-enabled",
      "in":"header",
      "type":"string"
    },
    "ObjectLockMode": {
      "name":"x-amz-object-lock-mode",
      "in":"header",
      "type":"string"
    },
    "ObjectLockRetainUntilDate": {
      "name":"x-amz-object-lock-retain-until-date",
      "in":"header",
      "type":"string"
    },
    "ObjectLockLegalHoldStatus": {
      "name":"x-amz-object-lock-legal-hold",
      "in":"header",
      "type":"string"
    },
    "ObjectOwnership": {
      "name":"x-amz-object-ownership",
      "in":"header",
      "type":"string"
    },
    "OptionalObjectAttributes": {
      "name":"x-amz-optional-object-attributes",
      "in":"header",
      "type":"string"
    },
    "Prefix":{
      "name": "prefix",
      "in": "query",
      "description": "You can use prefixes to separate a bucket into different grouping of keys. ",
      "type": "string"
    },
    "Range": {
      "name":"Range",
      "in":"header",
      "type":"string",
      "description":"The specified range bytes of an object. "
    },
    "ResponseCacheControl": {
      "name":"response-cache-control",
      "in":"query",
      "type":"string",
      "description":"Sets the Cache-Control header of the response."
    },
    "ResponseContentDisposition": {
      "name":"response-content-disposition",
      "in":"query",
      "type":"string",
      "description":"Sets the Content-Disposition header of the response"
    },
    "ResponseContentEncoding": {
      "name":"response-content-encoding",
      "in":"query",
      "type":"string",
      "description":"Sets the Content-Disposition header of the response"
    },
    "ResponseContentLanguage": {
      "name":"response-content-language",
      "in":"query",
      "type":"string",
      "description":"Sets the Content-Language header of the response."
    },
    "ResponseContentType": {
      "name":"response-content-type",
      "in":"query",
      "type":"string",
      "description":"Sets the Content-Type header of the response."
    },
    "ResponseExpires": {
      "name":"response-expires",
      "in":"header",
      "type":"string",
      "description":"Confirms that the requester knows that they will be charged for the request."
    },
    "RequestPayer": {
      "name":"x-amz-request-payer",
      "in":"header",
      "type":"string",
      "description":"Confirms that the requester knows that they will be charged for the request."
    },
    "SSECustomerAlgorithm": {
      "name":"x-amz-server-side-encryption-customer-algorithm",
      "in":"header",
      "type":"string",
      "description":"The server-side encryption (SSE) algorithm used to encrypt the object. This parameter is required only when the object was created using a checksum algorithm or if your bucket policy requires the use of SSE-C."
    },
    "SSECustomerKey": {
      "name":"x-amz-server-side-encryption-customer-key",
      "in":"header",
      "type":"string",
      "description":"The server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm."
    },
    "SSECustomerKeyMD5": {
      "name":"x-amz-server-side-encryption-customer-key-MD5",
      "in":"header",
      "type":"string",
      "description":"The MD5 server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm."
    },
    "SSEKMSKeyId": {
      "name":"x-amz-server-side-encryption-aws-kms-key-id",
      "in":"header",
      "type":"string"
    },
    "SSEKMSEncryptionContext": {
      "name":"x-amz-server-side-encryption-context",
      "in":"header",
      "type":"string"
    },
    "ServerSideEncryption": {
      "name":"x-amz-server-side-encryption",
      "in":"header",
      "type":"string"
    },
    "StorageClass": {
      "name":"x-amz-storage-class",
      "in":"header",
      "type":"string"
    },
    "Token": {
      "name":"x-amz-bucket-object-lock-token",
      "in":"header",
      "type":"string"
    },
    "Tagging": {
      "name":"x-amz-tagging",
      "in":"header",
      "type":"string"
    },
    "TaggingDirective": {
      "name":"x-amz-tagging-directive",
      "in":"header",
      "type":"string"
    },
    "UploadIdMarker":{
      "name": "upload-id-marker",
      "in": "query",
      "description": "Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored.",
      "type": "string"
    },
    "VersionId":{
      "name":"versionId",
      "type":"string",
      "in":"query"
    },
    "WebsiteRedirectLocation": {
      "name":"x-amz-website-redirect-location",
      "in":"header",
      "type":"string"
    }
  }
}
