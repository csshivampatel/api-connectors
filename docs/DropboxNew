{
  "swagger": "2.0", 
  "info": {
    "version": "1.0.0", 
    "description": "The Dropbox API allows developers to work with files in Dropbox, including advanced functionality like full-text search, thumbnails, and sharing.", 
    "title": "Dropbox User API v2"
  },
  "host": "api.dropboxapi.com",
  "basePath": "/2", 
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ], 
  "tags": [
    {
      "name": "Account"
    },
    {
      "name": "Auth"
    },
    {
      "name": "Check"
    },
    {
      "name": "Contacts"
    },
    {
      "name": "File Properties"
    },
    {
      "name": "File Requests"
    },
    {
      "name": "Files"
    },
    {
      "name": "Open Id"
    },
    {
      "name": "Sharing"
    },
    {
      "name": "Users"
    },
    {
      "name": "Team"
    },
    {
      "name": "Team Log"
    },
    {
      "name": "paper"
    }
  ],
  "paths": {
    "/account/set_profile_photo": {
      "post": {
        "tags": ["Account"],
        "summary": "Set Profile Photo",
        "operationId": "AccountSetProfilePhoto", 
        "description": "Sets a user's profile photo.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ProfilePhotoArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ProfilePhotoError"
            }
          }, 
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProfilePhotoResponse"
            }
          }
        }
      }
    },
    "/auth/token/from_oauth1": {
      "post": {
        "tags": ["Auth"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TokenFromOAuth1Error"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TokenFromOAuth1Result"
            }
          }
        }, 
        "operationId": "AuthTokenFromOauth1", 
        "description": "Creates an OAuth 2.0 access token from the supplied OAuth 1.0 access token.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TokenFromOAuth1Arg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Create Auth Token"
      }
    }, 
    "/auth/token/revoke": {
      "post": {
        "tags": ["Auth"],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "AuthTokenRevoke", 
        "description": "Disables the access token used to authenticate the call.", 
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Revoke Auth Token"
      }
    }, 
    "/check/app": {
      "post": {
        "tags": ["Check"],
        "summary": "App Authentication",
        "operationId": "CheckAppAuthentication", 
        "description": "This endpoint performs App Authentication, validating the supplied app key and secret, and returns the supplied string, to allow you to test your code and connection to the Dropbox API. ", 
        "parameters": [
          {
            "name": "body", 
            "in": "body",
            "description": "contains the arguments to be sent to the Dropbox servers.",
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string",
                  "description": "(max_length=500)The string that you'd like to be echoed back to you. The default for this field is \"\"."
                }
              }              
            }
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "description": "If everything worked correctly, this would be the same as query. The default for this field is \"\"."
                }
              }              
            }
          }
        }
      }
    },
    "/check/user": {
      "post": {
        "tags": ["Check"],
        "summary": "User Authentication",
        "operationId": "CheckUserAuthentication", 
        "description": "This endpoint performs User Authentication, validating the supplied access token, and returns the supplied string, to allow you to test your code and connection to the Dropbox API.", 
        "parameters": [
          {
            "name": "body", 
            "in": "body",
            "description": "contains the arguments to be sent to the Dropbox servers.",
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string",
                  "description": "(max_length=500)The string that you'd like to be echoed back to you. The default for this field is \"\"."
                }
              }              
            }
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "description": "If everything worked correctly, this would be the same as query. The default for this field is \"\"."
                }
              }              
            }
          }
        }
      }
    },
    "/contacts/delete_manual_contacts": {
      "post": {
        "tags": ["Contacts"],
        "summary": "Delete Manually Added Contacts",
        "operationId": "ContactsDeleteContacts", 
        "description": "Removes all manually added contacts. You'll still keep contacts who are on your team or who you imported. New contacts will be added when you share.", 
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/contacts/delete_manual_contacts_batch": {
      "post": {
        "tags": ["Contacts"],
        "summary": "Delete Manually Added Contacts From List",
        "operationId": "ContactsDeleteContactsBatch", 
        "description": "Removes manually added contacts from the given list.", 
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "type": "object",
            "schema": {
              "properties": {
                "email_addresses": {
                  "description": "List of manually added contacts to be deleted.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "properties": {
                "contacts_not_found": {
                  "description": "Can't delete contacts from this list.\nMake sure the list only has manually added contacts. The deletion was cancelled.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }, 
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/file_properties/properties/add": {
      "post": {
        "tags": ["File Properties"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/AddPropertiesError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "FilePropertiesPropertiesAdd", 
        "description": "Add property groups to a Dropbox file.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/AddPropertiesArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Add Properties To File"
      }
    }, 
    "/file_properties/properties/overwrite": {
      "post": {
        "tags": ["File Properties"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/InvalidPropertyGroupError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "FilePropertiesPropertiesOverwrite", 
        "description": "Overwrite property groups associated with a file. This endpoint should be used instead of :route:`properties/update` when property groups are being updated via a \"snapshot\" instead of via a \"delta\". In other words, this endpoint will delete all omitted fields from a property group, whereas :route:`properties/update` will only delete fields that are explicitly marked for deletion.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/OverwritePropertyGroupArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Overwrite File Properties"
      }
    }, 
    "/file_properties/properties/remove": {
      "post": {
        "tags": ["File Properties"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RemovePropertiesError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "FilePropertiesPropertiesRemove", 
        "description": "Permanently removes the specified property group from the file.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RemovePropertiesArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Remove File Properties"
      }
    }, 
    "/file_properties/properties/search": {
      "post": {
        "tags": ["File Properties"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PropertiesSearchError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/PropertiesSearchResult"
            }
          }
        }, 
        "operationId": "FilePropertiesPropertiesSearch", 
        "description": "Search across property templates for particular property field values.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PropertiesSearchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Search File Properties"
      }
    }, 
    "/file_properties/properties/search/continue": {
      "post": {
        "tags": ["File Properties"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PropertiesSearchContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/PropertiesSearchResult"
            }
          }
        }, 
        "operationId": "FilePropertiesPropertiesSearchContinue", 
        "description": "Once a cursor has been retrieved from :route:`properties/search`, use this to paginate through all search results.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PropertiesSearchContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Continue File Properties Search"
      }
    }, 
    "/file_properties/properties/update": {
      "post": {
        "tags": ["File Properties"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/UpdatePropertiesError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "FilePropertiesPropertiesUpdate", 
        "description": "Add, update or remove properties associated with the supplied file and templates. This endpoint should be used instead of :route:`properties/overwrite` when property groups are being updated via a \"delta\" instead of via a \"snapshot\" . In other words, this endpoint will not delete any omitted fields from a property group, whereas :route:`properties/overwrite` will delete any fields that are omitted from a property group.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UpdatePropertiesArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Update File Properties"
      }
    }, 
    "/file_properties/templates/add_for_user": {
      "post": {
        "tags": ["File Properties"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ModifyTemplateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/AddTemplateResult"
            }
          }
        }, 
        "operationId": "FilePropertiesTemplatesAddForUser", 
        "description": "Add a template associated with a user. See :route:`properties/add` to add properties to a file. This endpoint can't be called on a team member or admin's behalf.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/AddTemplateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Add Template Associated With User"
      }
    }, 
    "/file_properties/templates/get_for_user": {
      "post": {
        "tags": ["File Properties"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TemplateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GetTemplateResult"
            }
          }
        }, 
        "operationId": "FilePropertiesTemplatesGetForUser", 
        "description": "Get the schema for a specified template. This endpoint can't be called on a team member or admin's behalf.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetTemplateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Template For User"
      }
    }, 
    "/file_properties/templates/list_for_user": {
      "post": {
        "tags": ["File Properties"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TemplateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListTemplateResult"
            }
          }
        }, 
        "operationId": "FilePropertiesTemplatesListForUser", 
        "description": "Get the template identifiers for a team. To get the schema of each template use :route:`templates/get_for_user`. This endpoint can't be called on a team member or admin's behalf.", 
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Templates For User"
      }
    },
    "/file_properties/templates/remove_for_user": {
      "post": {
        "tags": ["File Properties"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TemplateError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "FilePropertiesTemplatesRemoveForUser", 
        "description": "Permanently removes the specified template created from :route:`templates/add_for_user`. All properties associated with the template will also be removed. This action cannot be undone.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RemoveTemplateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Remove Template For User"
      }
    }, 
    "/file_properties/templates/update_for_user": {
      "post": {
        "tags": ["File Properties"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ModifyTemplateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/UpdateTemplateResult"
            }
          }
        }, 
        "operationId": "FilePropertiesTemplatesUpdateForUser", 
        "description": "Update a template associated with a user. This route can update the template name, the template description and add optional properties to templates. This endpoint can't be called on a team member or admin's behalf.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UpdateTemplateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Update Template Associated With User"
      }
    }, 
    "/file_properties/templates/add_for_team": {
      "post": {
        "tags": [
          "File Properties"
        ],
        "summary": "Add Template Associated With Team",
        "operationId": "FilePropertiesTemplatesAddForTeam",
        "description": "Add a template associated with a team. See properties/add to add properties to a file or folder.Note: this endpoint will create team-owned templates.\n",
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ModifyTemplateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/AddTemplateResult"
            }
          }
        },   
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/AddTemplateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    
    "/file_properties/templates/get_for_team": {
      "post": {
        "tags": [
          "File Properties"
        ],
        "summary": "Get Template For Team",
        "operationId": "FilePropertiesTemplatesGetForTeam",
        "description": "Get the schema for a specified template.\n",
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TemplateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GetTemplateResult"
            }
          }
        },  
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetTemplateArg"
            }, 
            "name": "body",
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/file_properties/templates/list_for_team": {
      "post": {
        "tags": [
          "File Properties"
        ],
        "summary": "List Templates For Team",
        "operationId": "FilePropertiesTemplatesListForTeam",
        "description": "Get the template identifiers for a team. To get the schema of each template use templates/get_for_team.\n",
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TemplateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListTemplateResult"
            }
          }
        },   
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/file_properties/templates/remove_for_team": {
      "post": {
        "tags": [
          "File Properties"
        ],
        "summary": "Remove Template For Team",
        "operationId": "FilePropertiesTemplatesRemoveForTeam",
        "description": "Permanently removes the specified template created from templates/add_for_user. All properties associated with the template will also be removed. This action cannot be undone.\n",
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TemplateError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        },        
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RemoveTemplateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/file_properties/templates/update_for_team": {
      "post": {
        "tags": [
          "File Properties"
        ],
        "summary": "Update Template Associated With Team",
        "operationId": "FilePropertiesTemplatesUpdateForTeam",
        "description": "Update a template associated with a team. This route can update the template name, the template description and add optional properties to templates.\n",
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ModifyTemplateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/UpdateTemplateResult"
            }
          }
        },         
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UpdateTemplateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/file_requests/count": {
      "post": {
        "tags": ["File Requests"],
        "summary": "Count File Requests",
        "operationId": "FilesRequestsCount", 
        "description": "Returns the total number of file requests owned by this user. Includes both open and closed file requests.", 
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {                   
                    ".tag": {
                      "description": "disabled_for_team: This user's Dropbox Business team doesn't allow file requests.",
                      "type": "string",
                      "enum": [
                        "disabled_for_team",
                        "other"
                      ]
                    }
                  }
                },
                "error_summary": {
                "type": "string"
                } 
              }
            }
          }, 
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "file_request_count": {
                  "type": "number",
                  "description": "The number file requests owner by this user."
                }
              }
            }           
          }
        }
      }
    },
    "/file_requests/create": {
      "post": {
        "tags": ["File Requests"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/CreateFileRequestError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/FileRequest"
            }
          }
        }, 
        "operationId": "FileRequestsCreate", 
        "description": "Creates a file request for this user.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CreateFileRequestArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Create File Request"
      }
    }, 
    "/file_requests/delete": {
      "post": {
        "tags": ["File Requests"],
        "summary": "Delete File Requests",
        "operationId": "FileRequestsDelete", 
        "description": "Delete a batch of closed file requests.", 
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "type": "object",
            "schema": {
              "properties": {
                "ids": {
                  "description": "List IDs of the file requests to delete.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/UpdateFileRequestError"
            }
          }, 
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteFileResponse"
            }
          }
        }
      }
    },
    "/file_requests/delete_all_closed": {
      "post": {
        "tags": ["File Requests"],
        "summary": "Delete Closed File Requests",
        "operationId": "FileRequestsDeleteAllClosed", 
        "description": "Delete all closed file requests owned by this user.", 
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/UpdateFileRequestError"
            }
          }, 
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteFileResponse"
            }
          }
        }
      }
    },
    "/file_requests/get": {
      "post": {
        "tags": ["File Requests"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GetFileRequestError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/FileRequest"
            }
          }
        }, 
        "operationId": "FileRequestsGet", 
        "description": "Returns the specified file request.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetFileRequestArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Specific File Request"
      }
    },  
    "/file_requests/list_v2": {
      "post": {
        "tags": ["File Requests"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListFileRequestsError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListFileRequestsResult"
            }
          }
        }, 
        "operationId": "FileRequestsList", 
        "description": "Returns a list of file requests owned by this user. For apps with the app folder permission, this will only return file requests with destinations in the app folder.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFileRequestArgs"
            }, 
            "name": "body", 
            "in": "body"
          } ,
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }      
        ], 
        "summary": "Get a List of File Requests"
      }
    },
    "/file_requests/list/continue": {
      "post": {
        "tags": ["File Requests"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListFileRequestsError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListFileRequestsResult"
            }
          }
        }, 
        "operationId": "FileRequestsListContinue", 
        "description": "Once a cursor has been retrieved from list:2, use this to paginate through all file requests. The cursor must come from a previous call to list:2 or list/continue.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFileRequestContinueArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }     
        ], 
        "summary": "Paginate Through File Requests"
      }
    },
    "/file_requests/update": {
      "post": {
        "tags": ["File Requests"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/UpdateFileRequestError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/FileRequest"
            }
          }
        }, 
        "operationId": "FileRequestsUpdate", 
        "description": "Update a file request.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UpdateFileRequestArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Update a File Request"
      }
    },
    "/files/copy_v2": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RelocationError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/RelocationResult"
            }
          }
        }, 
        "operationId": "FilesCopyV2", 
        "description": "Copy a file or folder to a different location in the user's Dropbox.\nIf the source path is a folder all its contents will be copied.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RelocationArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Copy File or Folder"
      }
    }, 
    "/files/copy_batch_v2": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/RelocationBatchLaunch"
            }
          }
        }, 
        "operationId": "FilesCopyBatch", 
        "description": "Copy multiple files or folders to different locations at once in the user's Dropbox. This route will replace copy_batch:1. The main difference is this route will return status for each entry, while copy_batch:1 raises failure if any entry fails. This route will either finish synchronously, or return a job ID and do the async copy job in background. Please use copy_batch/check:2 to check the job status.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CopyFilesBatch"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Copy Multiple Files or Folders"
      }
    }, 
    "/files/copy_batch/check_v2": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/RelocationBatchJobStatus"
            }
          }
        }, 
        "operationId": "FilesCopyBatchCheck", 
        "description": "Returns the status of an asynchronous job for :route:`copy_batch`. If success, it returns list of results for each entry.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Check Status of Files Copy Batch Request"
      }
    }, 
    "/files/copy_reference/get": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GetCopyReferenceError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GetCopyReferenceResult"
            }
          }
        }, 
        "operationId": "FilesCopyReferenceGet", 
        "description": "Get a copy reference to a file or folder. This reference string can be used to save that file or folder to another user's Dropbox by passing it to :route:`copy_reference/save`.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetCopyReferenceArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get a Copy Reference to a File or Folder"
      }
    }, 
    "/files/copy_reference/save": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/SaveCopyReferenceError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SaveCopyReferenceResult"
            }
          }
        }, 
        "operationId": "FilesCopyReferenceSave", 
        "description": "Save a copy reference returned by :route:`copy_reference/get` to the user's Dropbox.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/SaveCopyReferenceArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Save a Copy Reference"
      }
    }, 
    "/files/create_folder_v2": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/CreateFolderError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/CreateFolderResult"
            }
          }
        }, 
        "operationId": "FilesCreateFolderV2", 
        "description": "Create a folder at a given path.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CreateFolderArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Create Folder"
      }
    }, 
    "/files/create_folder_batch": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/CreateFolderBatchLaunch"
            }
          }
        }, 
        "operationId": "FilesCreateFolderBatch", 
        "description": "Create multiple folders at once.\nThis route is asynchronous for large batches, which returns a job ID immediately and runs the create folder batch asynchronously. Otherwise, creates the folders and returns the result synchronously for smaller inputs. You can force asynchronous behaviour by using the :field:`CreateFolderBatchArg.force_async` flag.  Use :route:`create_folder_batch/check` to check the job status.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CreateFolderBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Create Multiple Folders"
      }
    },
    "/files/create_folder_batch/check": {
      "post": {
        "tags": ["Files"],
        "summary": "Get Status of Create Folder Batch",
        "operationId": "FilesCreateFolderBatchCheck", 
        "description": "Returns the status of an asynchronous job for :route:`create_folder_batch`. If success, it returns list of result for each entry.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/CreateFolderBatchJobStatus"
            }
          }
        }           
      }
    }, 
    "/files/delete_v2": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/DeleteError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/DeleteResult"
            }
          }
        }, 
        "operationId": "FilesDeleteV2", 
        "description": "Delete the file or folder at a given path.\nIf the path is a folder, all its contents will be deleted too.\nA successful response indicates that the file or folder was deleted. The returned metadata will be the corresponding :type:`FileMetadata` or :type:`FolderMetadata` for the item at time of deletion, and not a :type:`DeletedMetadata` object.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/DeleteArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Delete File or Folder"
      }
    }, 
    "/files/delete_batch": {
      "post": {
        "tags": ["Files"],
        "summary": "Delete  Multiple Files/Folders",
        "operationId": "FilesDeleteBatch", 
        "description": "Delete multiple files/folders at once.\nThis route is asynchronous, which returns a job ID immediately and runs the delete batch asynchronously. Use :route:`delete_batch/check` to check the job status.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/DeleteBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "No Errors" 
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/DeleteBatchLaunch"
            }
          }
        }
      }
    }, 
    "/files/delete_batch/check": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/DeleteBatchJobStatus"
            }
          }
        }, 
        "operationId": "FilesDeleteBatchCheck", 
        "description": "Returns the status of an asynchronous job for :route:`delete_batch`. If success, it returns list of result for each entry.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Check Status of Delete Batch Request"
      }
    }, 
    "/files/download": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/DownloadError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/FileMetadata"
            }
          }
        }, 
        "operationId": "FilesDownload", 
        "description": "Download a file from a user's Dropbox.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/DownloadArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Download File"
      }
    }, 
    "/files/download_zip": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/DownloadZipError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/DownloadZipResult"
            }
          }
        }, 
        "operationId": "FilesDownloadZip", 
        "description": "Download a folder from the user's Dropbox, as a zip file. The folder must be less than 1 GB in size and have fewer than 10,000 total files. The input cannot be a single file.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/DownloadZipArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Download Folder as a Zip File"
      }
    },
    "/files/export": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/FileExportError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ExportResult"
            }
          }
        }, 
        "operationId": "FilesExport", 
        "description": "Export a file from a user's Dropbox. This route only supports exporting files that cannot be downloaded directly and whose ExportResult.file_metadata has ExportInfo.export_as populated.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/FileExportArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Export File"
      }
    },
    "/files/get_file_lock_batch": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/FileLockBatchError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LockFileBatchResult"
            }
          }
        }, 
        "operationId": "FilesGetFileLockBatch", 
        "description": "Return the lock metadata for the given list of paths.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/FileLockBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get File Lock Batch Metadata"
      }
    },
    "/files/get_metadata": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GetMetadataError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          }
        }, 
        "operationId": "FilesGetMetadata", 
        "description": "Returns the metadata for a file or folder.\nNote: Metadata for the root folder is unsupported.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetMetadataArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Metadata For a File or Folder"
      }
    }, 
    "/files/get_preview": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PreviewError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/FileMetadata"
            }
          }
        }, 
        "operationId": "FilesGetPreview", 
        "description": "Get a preview for a file.\nCurrently, PDF previews are generated for files with the following extensions: .ai, .doc, .docm, .docx, .eps, .odp, .odt, .pps, .ppsm, .ppsx, .ppt, .pptm, .pptx, .rtf.\nHTML previews are generated for files with the following extensions: .csv, .ods, .xls, .xlsm, .xlsx.\nOther formats will return an unsupported extension error.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PreviewArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get File Preview"
      },
      "servers": [
        {
          "url": "content.dropboxapi.com/2"
        }
      ]
    }, 
    "/files/get_temporary_link": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GetTemporaryLinkError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GetTemporaryLinkResult"
            }
          }
        }, 
        "operationId": "FilesGetTemporaryLink", 
        "description": "Get a temporary link to stream content of a file. This link will expire in four hours and afterwards you will get 410 Gone. Content-Type of the link is determined automatically by the file's mime type.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetTemporaryLinkArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Temporary Link of a File"
      }
    },
    "/files/get_temporary_upload_link": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GetTemporaryUploadLinkResult"
            }
          }
        }, 
        "operationId": "FilesGetTemporaryUploadLink", 
        "description": "Get a one-time use temporary upload link to upload a file to a Dropbox location. This endpoint acts as a delayed upload.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetTemporaryUploadLinkArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Temporary File Upload Link"
      }
    },
    "/files/get_thumbnail": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ThumbnailError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/FileMetadata"
            }
          }
        }, 
        "operationId": "FilesGetThumbnail", 
        "description": "Get a thumbnail for an image.\nThis method currently supports files with the following file extensions: jpg, jpeg, png, tiff, tif, gif and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ThumbnailArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Thumbnail For an Image"
      },
      "servers": [
        {
          "url": "https://content.dropboxapi.com/2"
        }
      ]
    }, 
    "/files/get_thumbnail_batch": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GetThumbnailBatchError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GetThumbnailBatchResult"
            }
          }
        }, 
        "operationId": "FilesGetThumbnailBatch", 
        "description": "Get thumbnails for a list of images. We allow up to 25 thumbnails in a single batch.\nThis method currently supports files with the following file extensions: jpg, jpeg, png, tiff, tif, gif and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetThumbnailBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Thumbnails For List of Images"
      },
      "servers": [
        {
          "url": "https://content.dropboxapi.com/2"
        }
      ]
    }, 
    "/files/list_folder": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListFolderError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListFolderResult"
            }
          }
        }, 
        "operationId": "FilesListFolder", 
        "description": "Starts returning the contents of a folder. If the result's :field:`ListFolderResult.has_more` field is :val:`true`, call :route:`list_folder/continue` with the returned :field:`ListFolderResult.cursor` to retrieve more entries.\nIf you're using :field:`ListFolderArg.recursive` set to :val:`true` to keep a local cache of the contents of a Dropbox account, iterate through each entry in order and process them as follows to keep your local state in sync:\nFor each :type:`FileMetadata`, store the new entry at the given path in your local state. If the required parent folders don't exist yet, create them. If there's already something else at the given path, replace it and remove all its children.\nFor each :type:`FolderMetadata`, store the new entry at the given path in your local state. If the required parent folders don't exist yet, create them. If there's already something else at the given path, replace it but leave the children as they are. Check the new entry's :field:`FolderSharingInfo.read_only` and set all its children's read-only statuses to match.\nFor each :type:`DeletedMetadata`, if your local state has something at the given path, remove it and all its children. If there's nothing at the given path, ignore this entry.\nNote: :type:`auth.RateLimitError` may be returned if multiple :route:`list_folder` or :route:`list_folder/continue` calls with same parameters are made simultaneously by same API app for same user. If your app implements retry logic, please hold off the retry until the previous request finishes.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFolderArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Contents of a Folder"
      }
    }, 
    "/files/list_folder/continue": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListFolderContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListFolderResult"
            }
          }
        }, 
        "operationId": "FilesListFolderContinue", 
        "description": "Once a cursor has been retrieved from :route:`list_folder`, use this to paginate through all files and retrieve updates to the folder, following the same rules as documented for :route:`list_folder`.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFolderContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Paginate Through List Folders"
      }
    }, 
    "/files/list_folder/get_latest_cursor": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListFolderError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListFolderGetLatestCursorResult"
            }
          }
        }, 
        "operationId": "FilesListFolderGetLatestCursor", 
        "description": "A way to quickly get a cursor for the folder's state. Unlike :route:`list_folder`, :route:`list_folder/get_latest_cursor` doesn't return any entries. This endpoint is for app which only needs to know about new files and modifications and doesn't need to know about files that already exist in Dropbox.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFolderArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Quickly Get Cursor for Folder's State"
      }
    }, 
    "/files/list_folder/longpoll": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListFolderLongpollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListFolderLongpollResult"
            }
          }
        }, 
        "operationId": "FilesListFolderLongpoll", 
        "description": "A longpoll endpoint to wait for changes on an account. In conjunction with :route:`list_folder/continue`, this call gives you a low-latency way to monitor an account for file changes. The connection will block until there are changes available or a timeout occurs. This endpoint is useful mostly for client-side apps. If you're looking for server-side notifications, check out our :link:`webhooks documentation https://www.dropbox.com/developers/reference/webhooks`.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFolderLongpollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Wait for Changes on an Account"
      },
      "servers": [
        {
          "url": "https://notify.dropboxapi.com/2"
        }
      ]
    }, 
    "/files/list_revisions": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListRevisionsError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListRevisionsResult"
            }
          }
        }, 
        "operationId": "FilesListRevisions", 
        "description": "Returns revisions for files based on a file path or a file id. The file path or file id is identified from the latest file entry at the given file path or id. This end point allows your app to query either by file path or file id by setting the mode parameter appropriately.\nIn the :field:`ListRevisionsMode.path` (default) mode, all revisions at the same file path as the latest file entry are returned. If revisions with the same file id are desired, then mode must be set to :field:`ListRevisionsMode.id`. The :field:`ListRevisionsMode.id` mode is useful to retrieve revisions for a given file across moves or renames.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListRevisionsArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List File Revisions"
      }
    }, 
    "/files/lock_file_batch": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/LockFileBatchError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LockFileBatchResult"
            }
          }
        }, 
        "operationId": "FilesLockFileBatch", 
        "description": "Lock the files at the given paths.\nA locked file will be writable only by the lock holder.\nA successful response indicates that the file has been locked.\nReturns a list of the locked file paths and their metadata after this operation.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/LockFileBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Lock Files"
      }
    },
    "/files/move_v2": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RelocationError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/RelocationResult"
            }
          }
        }, 
        "operationId": "FilesMoveV2", 
        "description": "Move a file or folder to a different location in the user's Dropbox.\nIf the source path is a folder all its contents will be moved.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RelocationArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Move File/Folder"
      }
    }, 
    "/files/move_batch_v2": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/RelocationBatchLaunch"
            }
          }
        }, 
        "operationId": "FilesMoveBatch", 
        "description": "Move multiple files or folders to different locations at once in the user's Dropbox.\nThis route is 'all or nothing', which means if one entry fails, the whole transaction will abort.\nThis route will return job ID immediately and do the async moving job in background. Please use :route:`move_batch/check` to check the job status.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RelocationBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Move Multiple Files/Folders"
      }
    }, 
    "/files/move_batch/check_v2": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/RelocationBatchJobStatus"
            }
          }
        }, 
        "operationId": "FilesMoveBatchCheck", 
        "description": "Returns the status of an asynchronous job for :route:`move_batch`. If success, it returns list of results for each entry.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Status of Move Batch Request"
      }
    }, 
    "/files/paper/create": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PaperDocCreateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/PaperDocCreateUpdateResult"
            }
          }
        }, 
        "operationId": "FilesPaperCreate", 
        "description": "Creates a new Paper doc with the provided content.", 
        "parameters": [
          {
            "schema": {
              "type":"string"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "name":"Dropbox-API-Arg",
            "in":"header",
            "type":"string",
            "description":"Arguments are passed in the Dropbox-API-Arg request header or arg URL parameter.",
            "default":"{\"import_format\":\"html\",\"path\":\"/Paper Docs/New Doc.paper\"}"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Create New Paper Doc"
      }
    },
    "/files/paper/update": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "type":"string"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "type": "object",
              "properties": {
                "paper_revision": {
                  "type": "number",
                  "description": "The current doc revision."
                }
              }              
            }
          }
        }, 
        "operationId": "FilesPaperUpdate", 
        "description": "Updates an existing Paper doc with the provided content.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PaperDocUpdateArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "name":"Dropbox-API-Arg",
            "in":"header",
            "type":"string",
            "description":"Arguments are passed in the Dropbox-API-Arg request header or arg URL parameter.",
            "default":"{\"doc_update_policy\":\"update\",\"import_format\":\"html\",\"paper_revision\":123,\"path\":\"/Paper Docs/My Doc.paper\"}"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Update Paper Doc"
      }
    },
    "/files/permanently_delete": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/DeleteError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "FilesPermanentlyDelete", 
        "description": "Permanently delete the file or folder at a given path (see https://www.dropbox.com/en/help/40). If the given file or folder is not yet deleted, this route will first delete it. It is possible for this route to successfully delete, then fail to permanently delete.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/DeleteArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Permanently Delete File/Folder"
      }
    }, 
    "/files/restore": {
      "post": {
        "tags": ["Files"],
        "summary": "Restore Specific Revision of File",
        "operationId": "FilesRestore", 
        "description": "Restore a specific revision of a file to the given path.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RestoreArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RestoreError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/FileMetadata"
            }
          }
        }
      }
    }, 
    "/files/save_url": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/SaveUrlError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SaveUrlResult"
            }
          }
        }, 
        "operationId": "FilesSaveUrl", 
        "description": "Save the data from a specified URL into a file in user's Dropbox. Note that the transfer from the URL must complete within 5 minutes, or the operation will time out and the job will fail. If the given path already exists, the file will be renamed to avoid the conflict (e.g. myfile (1).txt).", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/SaveUrlArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Save Data into File from Url"
      }
    }, 
    "/files/save_url/check_job_status": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SaveUrlJobStatus"
            }
          }
        }, 
        "operationId": "FilesSaveUrlCheckJobStatus", 
        "description": "Check the status of a :route:`save_url` job.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Check Status of Save Url Request"
      }
    }, 
    "/files/search_v2": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/SearchError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SearchV2Result"
            }
          }
        }, 
        "operationId": "FilesSearch", 
        "description": "Searches for files and folders. Note: search:2 along with search/continue:2 can only be used to retrieve a maximum of 10,000 matches. Recent changes may not immediately be reflected in search results due to a short delay in indexing. Duplicate results may be returned across pages. Some results may not be returned.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/SearchV2Arg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Search Files/Folders"
      }
    },
    "/files/search/continue_v2": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/SearchError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SearchV2Result"
            }
          }
        }, 
        "operationId": "FilesSearchV2", 
        "description": "Fetches the next page of search results returned from search:2.\nNote: search:2 along with search/continue:2\ncan only be used to retrieve a maximum of 10,000 matches.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/SearchContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Continue Search Files/Folders"
      }
    },
    "/files/tags/add": {
      "post": {
        "tags": ["Files"],
        "summary": "Add Tag to File",
        "operationId": "FilesAddTag", 
        "description": "Add a tag to an item. A tag is a string. The strings are automatically converted to lowercase letters. No more than 20 tags can be added to a given item.", 
        "parameters": [
          {
            "name": "body", 
            "in": "body",
            "description": "path: Path to the item to be tagged.\ntag_text: The value of the tag to add.",
            "schema": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "Path to the item to be tagged."
                },
                "tag_text": {
                  "type": "string",
                  "description": "The value of the tag to add."
                }
              }              
            }
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/LookupError"
            }
          }, 
          "200": {
            "description": "Success"            
          }
        }
      }
    },
    "/files/tags/get": {
      "post": {
        "tags": ["Files"],
        "summary": "Get File Tags",
        "operationId": "FilesGetTag", 
        "description": "Get list of tags assigned to items.", 
        "parameters": [
          {
            "name": "body", 
            "in": "body",
            "description": "List of Path to the items.",
            "schema": {
              "type": "object",
              "properties": {
                "paths": {
                  "type": "array",
                  "description": "List of Path to the items.",
                  "items": {
                    "type": "string"
                  }
                }
              }              
            }
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/LookupError"
            }
          }, 
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTagsResult"
            }           
          }
        }
      }
    },
    "/files/tags/remove": {
      "post": {
        "tags": ["Files"],
        "summary": "Remove Tag from File",
        "operationId": "FilesRemoveTag", 
        "description": "Remove a tag from an item.", 
        "parameters": [
          {
            "name": "body", 
            "in": "body",
            "description": "path: Path to the item to be tagged.\ntag_text: The value of the tag to add.",
            "schema": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "Path to the item to be tagged."
                },
                "tag_text": {
                  "type": "string",
                  "description": "The value of the tag to add."
                }
              }              
            }
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/LookupError"
            }
          }, 
          "200": {
            "description": "Success"            
          }
        }
      }
    },
    "/files/unlock_file_batch": {
      "post": {
        "tags": ["Files"],
        "summary": "Unlock Files",
        "operationId": "FilesUnlockFileBatch", 
        "description": "Unlock the files at the given paths.\nA locked file can only be unlocked by the lock holder or, if a business account, a team admin.\nA successful response indicates that the file has been unlocked.\nReturns a list of the unlocked file paths and their metadata after this operation.", 
        "parameters": [
          {
            "name": "body", 
            "in": "body",
            "description": "entries: List of 'entries'. Each 'entry' contains a path of the file which will be unlocked. Duplicate path arguments in the batch are considered only once.",
            "schema": {
              "type": "object",
              "properties": {
                "entries": {
                  "type": "array",
                  "description": "List of 'entries'. Each 'entry' contains a path of the file which will be unlocked. Duplicate path arguments in the batch are considered only once.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "Path in the user's Dropbox to a file."
                      }
                    }
                  }
                }
              }              
            }
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/FileLockBatchError"
            }
          }, 
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LockFileBatchResult"
            }            
          }
        }
      }
    },
    "/files/upload": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/UploadError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/FileMetadata"
            }
          }
        }, 
        "operationId": "FilesUpload", 
        "description": "Create a new file with the contents provided in the request.\nDo not use this to upload a file larger than 150 MB. Instead, create an upload session with :route:`upload_session/start`.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CommitInfo"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Upload File"
      },
      "servers": [
        {
          "url": "https://content.dropboxapi.com/2"
        }
      ]
    }, 
    "/files/upload_session/append_v2": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/UploadSessionLookupError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "FilesUploadSessionAppendV2", 
        "description": "Append more data to an upload session.\nWhen the parameter close is set, this call will close the session.\nA single request should not upload more than 150 MB. The maximum size of a file one can upload to an upload session is 350 GB.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UploadSessionAppendArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Append Data To Upload Session"
      },
      "servers": [
        {
          "url": "https://content.dropboxapi.com/2"
        }
      ]
    }, 
    "/files/upload_session/finish": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/UploadSessionFinishError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/FileMetadata"
            }
          }
        }, 
        "operationId": "FilesUploadSessionFinish", 
        "description": "Finish an upload session and save the uploaded data to the given file path.\nA single request should not upload more than 150 MB. The maximum size of a file one can upload to an upload session is 350 GB.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UploadSessionFinishArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Finish an Upload Session"
      },
      "servers": [
        {
          "url": "https://content.dropboxapi.com/2"
        }
      ]
    },
    "/files/upload_session/finish_batch": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/UploadSessionFinishBatchResult"
            }
          }
        }, 
        "operationId": "FilesUploadSessionFinishBatch", 
        "description": "This route helps you commit many files at once into a user's Dropbox. Use :route:`upload_session/start` and :route:`upload_session/append_v2` to upload file contents. We recommend uploading many files in parallel to increase throughput. Once the file contents have been uploaded, rather than calling :route:`upload_session/finish`, use this route to finish all your upload sessions in a single request.\n:field:`UploadSessionStartArg.close` or :field:`UploadSessionAppendArg.close` needs to be true for the last :route:`upload_session/start` or :route:`upload_session/append_v2` call. The maximum size of a file one can upload to an upload session is 350 GB.\nThis route will return a job_id immediately and do the async commit job in background. Use :route:`upload_session/finish_batch/check` to check the job status.\nFor the same account, this route should be executed serially. That means you should not start the next job before current job finishes. We allow up to 1000 entries in a single request.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UploadSessionFinishBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Upload Many Files at Once"
      }
    }, 
    "/files/upload_session/finish_batch/check": {
      "post": {
        "tags": ["Files"],
        "summary": "Get Status of Upload Session Finish Batch Request",
        "operationId": "FilesUploadSessionFinishBatchCheck", 
        "description": "Returns the status of an asynchronous job for :route:`upload_session/finish_batch`. If success, it returns list of result for each entry.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/UploadSessionFinishBatchJobStatus"
            }
          }
        }    
      }
    }, 
    "/files/upload_session/start": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "type": "null"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/UploadSessionStartResult"
            }
          }
        }, 
        "operationId": "FilesUploadSessionStart", 
        "description": "Upload sessions allow you to upload a single file in one or more requests, for example where the size of the file is greater than 150 MB.  This call starts a new upload session with the given data. You can then use :route:`upload_session/append_v2` to add more data and :route:`upload_session/finish` to save all the data to a file in Dropbox.\nA single request should not upload more than 150 MB. The maximum size of a file one can upload to an upload session is 350 GB.\nAn upload session can be used for a maximum of 48 hours. Attempting to use an :field:`UploadSessionStartResult.session_id` with :route:`upload_session/append_v2` or :route:`upload_session/finish` more than 48 hours after its creation will return a :field:`UploadSessionLookupError.not_found`.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UploadSessionStartArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Start File Upload Session"
      }
    },
    "/files/upload_session/start_batch": {
      "post": {
        "tags": ["Files"],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/UploadSessionStartBatchResult"
            }
          }
        }, 
        "operationId": "FilesUploadSessionStartBatch", 
        "description": "This route starts batch of upload_sessions. Please refer to `upload_session/start` usage. Calls to this endpoint will count as data transport calls for any Dropbox Business teams with a limit on the number of data transport calls allowed per month.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UploadSessionStartBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Start Batch of File Upload Sessions"
      }
    },
    "/openid/userinfo": {
      "post": {
        "tags": ["Open Id"],
        "summary": "Refresh User Info",
        "operationId": "OpenIdUserinfo", 
        "description": "This route is used for refreshing the info that is found in the id_token during the OIDC flow.", 
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "type": "object",
              "properties": {
                "openid_error": {
                  "type": "string",
                  "enum": ["incorrect_openid_scopes"],
                  "description": "Missing openid claims for the associated access token."
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "family_name": {
                  "type": "string",
                  "description": "Last name of user. This field is optional."
                },
                "given_name": {
                  "type": "string",
                  "description": "First name of user. This field is optional."
                },
                "email": {
                  "type": "string",
                  "description": "Email address of user. This field is optional."
                },
                "email_verified": {
                  "type": "boolean",
                  "description": "If user is email verified. This field is optional."
                },
                "iss": {
                  "type": "string",
                  "description": "Issuer of token (in this case Dropbox). The default for this field is \"\"."
                },
                "sub": {
                  "type": "string",
                  "description": "An identifier for the user. \nThis is the Dropbox account_id, a string value such as dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc. \nThe default for this field is \"\"."
                }
              }              
            }
          }
        }
      }
    },
    "/sharing/add_file_member": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/AddFileMemberError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/FileMemberActionResult"
              }, 
              "type": "array"
            }
          }
        }, 
        "operationId": "SharingAddFileMember", 
        "description": "Adds specified members to a file.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/AddFileMemberArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Add Members to File"
      }
    }, 
    "/sharing/add_folder_member": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/AddFolderMemberError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "SharingAddFolderMember", 
        "description": "Allows an owner or editor (if the ACL update policy allows) of a shared folder to add another member.\nFor the new member to get access to all the functionality for this folder, you will need to call :route:`mount_folder` on their behalf.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/AddFolderMemberArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Add Member to Shared Folder"
      }
    }, 
    "/sharing/check_job_status": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/JobStatus"
            }
          }
        }, 
        "operationId": "SharingCheckJobStatus", 
        "description": "Returns the status of an asynchronous job.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Check Status of Job"
      }
    },
    "/sharing/check_remove_member_job_status": {
      "post": {
        "tags": ["Sharing"],
        "summary": "Check Remove Member Job Status",
        "operationId": "SharingCheckRemoveMemberJobStatus", 
        "description": "Returns the status of an asynchronous job for sharing a folder.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/RemoveMemberJobStatus"
            }
          }
        }  
      }
    }, 
    "/sharing/check_share_job_status": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ShareFolderJobStatus"
            }
          }
        }, 
        "operationId": "SharingCheckShareJobStatus", 
        "description": "Returns the status of an asynchronous job for sharing a folder.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Check Share Job Status"
      }
    }, 
    "/sharing/create_shared_link_with_settings": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/CreateSharedLinkWithSettingsError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SharedLinkWithSettingsMetadata"
            }
          }
        }, 
        "operationId": "SharingCreateSharedLinkWithSettings", 
        "description": "Create a shared link with custom settings. If no settings are given then the default visibility is :field:`RequestedVisibility.public` (The resolved visibility, though, may depend on other aspects such as team and shared folder settings).", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CreateSharedLinkWithSettingsArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Create Shared Link With Custom Settings"
      }
    }, 
    "/sharing/get_file_metadata": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GetFileMetadataError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SharedFileMetadata"
            }
          }
        }, 
        "operationId": "SharingGetFileMetadata", 
        "description": "Returns shared file metadata.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetFileMetadataArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Shared File Metadata"
      }
    }, 
    "/sharing/get_file_metadata/batch": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/SharingUserError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/GetFileMetadataBatchResult"
              }, 
              "type": "array"
            }
          }
        }, 
        "operationId": "SharingGetFileMetadataBatch", 
        "description": "Returns shared file metadata.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetFileMetadataBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Shared File Metadata in Batch"
      }
    }, 
    "/sharing/get_folder_metadata": {
      "post": {
        "tags": ["Sharing"],
        "summary": "Get Shared Folder Metadata",
        "operationId": "SharingGetFolderMetadata", 
        "description": "Returns shared folder metadata by its folder ID.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetMetadataArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/SharedFolderAccessError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SharedFolderMetadata"
            }
          }
        }           
      }
    }, 
    "/sharing/get_shared_link_file": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GetSharedLinkFileError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SharedLinkWithSettingsMetadata"
            }
          }
        }, 
        "operationId": "SharingGetSharedLinkFile", 
        "description": "Download the shared link's file from a user's Dropbox.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetSharedLinkMetadataArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Download the Shared Link File"
      },
      "servers": [
        {
          "url": "https://content.dropboxapi.com/2"
        }
      ]
    }, 
    "/sharing/get_shared_link_metadata": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/SharedLinkError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SharedLinkWithSettingsMetadata"
            }
          }
        }, 
        "operationId": "SharingGetSharedLinkMetadata", 
        "description": "Get the shared link's metadata.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetSharedLinkMetadataArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Shared Link's Metadata"
      }
    }, 
    "/sharing/list_file_members": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListFileMembersError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SharedFileMembers"
            }
          }
        }, 
        "operationId": "SharingListFileMembers", 
        "description": "Use to obtain the members who have been invited to a file, both inherited and uninherited members.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFileMembersArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Members Invited to a File"
      }
    },  
    "/sharing/list_file_members/batch": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/SharingUserError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/ListFileMembersBatchResult"
              }, 
              "type": "array"
            }
          }
        }, 
        "operationId": "SharingListFileMembersBatch", 
        "description": "Get members of multiple files at once. The arguments to this route are more limited, and the limit on query result size per file is more strict. To customize the results more, use the individual file endpoint.\nInherited users and groups are not included in the result, and permissions are not returned for this endpoint.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFileMembersBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Members of Multiple Files"
      }
    }, 
    "/sharing/list_file_members/continue": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListFileMembersContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SharedFileMembers"
            }
          }
        }, 
        "operationId": "SharingListFileMembersContinue", 
        "description": "Once a cursor has been retrieved from :route:`list_file_members` or :route:`list_file_members/batch`, use this to paginate through all shared file members.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFileMembersContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Paginate Through all Shared File Members"
      }
    }, 
    "/sharing/list_folder_members": {
      "post": {
        "tags": ["Sharing"],
        "summary": "Get Shared Folder Membership",
        "operationId": "SharingListFolderMembers", 
        "description": "Returns shared folder membership by its folder ID.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFolderMembersArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/SharedFolderAccessError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SharedFolderMembers"
            }
          }
        }
      }      
    }, 
    "/sharing/list_folder_members/continue": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListFolderMembersContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SharedFolderMembers"
            }
          }
        }, 
        "operationId": "SharingListFolderMembersContinue", 
        "description": "Once a cursor has been retrieved from :route:`list_folder_members`, use this to paginate through all shared folder members.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFolderMembersContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Paginate Through all Shared Folder Members"
      }
    }, 
    "/sharing/list_folders": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListFoldersResult"
            }
          }
        }, 
        "operationId": "SharingListFolders", 
        "description": "Return the list of all shared folders the current user has access to.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFoldersArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Shared Folders Accessible by Current User"
      }
    },
    "/sharing/list_folders/continue": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListFoldersContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListFoldersResult"
            }
          }
        }, 
        "operationId": "SharingListFoldersContinue", 
        "description": "Once a cursor has been retrieved from :route:`list_folders`, use this to paginate through all shared folders. The cursor must come from a previous call to :route:`list_folders` or :route:`list_folders/continue`.\nApps must have full Dropbox access to use this endpoint.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFoldersContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Paginate Through all Shared Folders"
      }
    }, 
    "/sharing/list_mountable_folders": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListFoldersResult"
            }
          }
        }, 
        "operationId": "SharingListMountableFolders", 
        "description": "Return the list of all shared folders the current user can mount or unmount.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFoldersArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Mountable Shared Folders"
      }
    },  
    "/sharing/list_mountable_folders/continue": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListFoldersContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListFoldersResult"
            }
          }
        }, 
        "operationId": "SharingListMountableFoldersContinue", 
        "description": "Once a cursor has been retrieved from :route:`list_mountable_folders`, use this to paginate through all mountable shared folders. The cursor must come from a previous call to :route:`list_mountable_folders` or :route:`list_mountable_folders/continue`.\nApps must have full Dropbox access to use this endpoint.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFoldersContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Paginate Through all Mountable Shared Folders"
      }
    }, 
    "/sharing/list_received_files": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/SharingUserError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListFilesResult"
            }
          }
        }, 
        "operationId": "SharingListReceivedFiles", 
        "description": "Returns a list of all files shared with current user.\n Does not include files the user has received via shared folders, and does  not include unclaimed invitations.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFilesArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Files Shared With Current User"
      }
    }, 
    "/sharing/list_received_files/continue": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListFilesContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListFilesResult"
            }
          }
        }, 
        "operationId": "SharingListReceivedFilesContinue", 
        "description": "Get more results with a cursor from :route:`list_received_files`.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListFilesContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Paginate Through all Received Files"
      }
    }, 
    "/sharing/list_shared_links": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListSharedLinksError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListSharedLinksResult"
            }
          }
        }, 
        "operationId": "SharingListSharedLinks", 
        "description": "List shared links of this user.\nIf no path is given, returns a list of all shared links for the current user.\nIf a non-empty path is given, returns a list of all shared links that allow access to the given path - direct links to the given path and links to parent folders of the given path. Links to parent folders can be suppressed by setting direct_only to true.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListSharedLinksArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Shared Links of User"
      }
    }, 
    "/sharing/modify_shared_link_settings": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ModifySharedLinkSettingsError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SharedLinkWithSettingsMetadata"
            }
          }
        }, 
        "operationId": "SharingModifySharedLinkSettings", 
        "description": "Modify the shared link's settings.\nIf the requested visibility conflict with the shared links policy of the team or the shared folder (in case the linked file is part of a shared folder) then the :field:`LinkPermissions.resolved_visibility` of the returned :type:`SharedLinkMetadata` will reflect the actual visibility of the shared link and the :field:`LinkPermissions.requested_visibility` will reflect the requested visibility.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ModifySharedLinkSettingsArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Modify Shared Link's Settings"
      }
    }, 
    "/sharing/mount_folder": {
      "post": {
        "tags": ["Sharing"],
        "summary": "Mount the Designated Folder",
        "operationId": "SharingMountFolder", 
        "description": "The current user mounts the designated folder.\nMount a shared folder for a user after they have been added as a member. Once mounted, the shared folder will appear in their Dropbox.\nApps must have full Dropbox access to use this endpoint.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MountFolderArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/MountFolderError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SharedFolderMetadata"
            }
          }
        }
      }
    }, 
    "/sharing/relinquish_file_membership": {
      "post": {
        "tags": ["Sharing"],
        "summary": "Relinquish Membership in the Designated File",
        "operationId": "SharingRelinquishFileMembership", 
        "description": "The current user relinquishes their membership in the designated file. Note that the current user may still have inherited access to this file through the parent folder.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RelinquishFileMembershipArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RelinquishFileMembershipError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }
      }
    }, 
    "/sharing/relinquish_folder_membership": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RelinquishFolderMembershipError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LaunchEmptyResult"
            }
          }
        }, 
        "operationId": "SharingRelinquishFolderMembership", 
        "description": "The current user relinquishes their membership in the designated shared folder and will no longer have access to the folder.  A folder owner cannot relinquish membership in their own folder.\nThis will run synchronously if leave_a_copy is false, and asynchronously if leave_a_copy is true. Apps must have full Dropbox access to use this endpoint.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RelinquishFolderMembershipArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Relinquish Membership in the Designated Folder"
      }
    }, 
    "/sharing/remove_file_member_2": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RemoveFileMemberError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/FileMemberRemoveActionResult"
            }
          }
        }, 
        "operationId": "SharingRemoveFileMember2", 
        "description": "Removes a specified member from the file.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RemoveFileMemberArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Remove Specified Member from File"
      }
    }, 
    "/sharing/remove_folder_member": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RemoveFolderMemberError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LaunchResultBase"
            }
          }
        }, 
        "operationId": "SharingRemoveFolderMember", 
        "description": "Allows an owner or editor (if the ACL update policy allows) of a shared folder to remove another member.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RemoveFolderMemberArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Remove Member from a Shared Folder"
      }
    }, 
    "/sharing/revoke_shared_link": {
      "post": {
        "tags": ["Sharing"],
        "summary": "Revoke Shared Link",
        "operationId": "SharingRevokeSharedLink", 
        "description": "Revoke a shared link.\nNote that even after revoking a shared link to a file, the file may be accessible if there are shared links leading to any of the file parent folders. To list all shared links that enable access to a specific file, you can use the :route:`list_shared_links` with the file as the :field:`ListSharedLinksArg.path` argument.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RevokeSharedLinkArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RevokeSharedLinkError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }
      }
    }, 
    "/sharing/set_access_inheritance": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/SetAccessInheritanceError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ShareFolderLaunch"
            }
          }
        }, 
        "operationId": "SharingSetAccessInheritance", 
        "description": "Change the inheritance policy of an existing Shared Folder. Only permitted for shared folders in a shared team root.\nIf a :field:`ShareFolderLaunch.async_job_id` is returned, you'll need to call :route:`check_share_job_status` until the action completes to get the metadata for the folder.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/SetAccessInheritanceArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Change the Inheritance Policy of Shared Folder"
      }
    }, 
    "/sharing/share_folder": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ShareFolderError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ShareFolderLaunch"
            }
          }
        }, 
        "operationId": "SharingShareFolder", 
        "description": "Share a folder with collaborators.\nMost sharing will be completed synchronously. Large folders will be completed asynchronously. To make testing the async case repeatable, set `ShareFolderArg.force_async`.\nIf a :field:`ShareFolderLaunch.async_job_id` is returned, you'll need to call :route:`check_share_job_status` until the action completes to get the metadata for the folder.\nApps must have full Dropbox access to use this endpoint.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ShareFolderArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Share Folder with Collaborators"
      }
    }, 
    "/sharing/transfer_folder": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TransferFolderError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "SharingTransferFolder", 
        "description": "Transfer ownership of a shared folder to a member of the shared folder.\nUser must have :field:`AccessLevel.owner` access to the shared folder to perform a transfer.\nApps must have full Dropbox access to use this endpoint.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TransferFolderArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Transfer Ownership of a Shared Folder"
      }
    }, 
    "/sharing/unmount_folder": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/UnmountFolderError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "SharingUnmountFolder", 
        "description": "The current user unmounts the designated folder. They can re-mount the folder at a later time using :route:`mount_folder`.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UnmountFolderArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Unmount the Designated Folder"
      }
    }, 
    "/sharing/unshare_file": {
      "post": {
        "tags": ["Sharing"],
        "summary": "Remove all Members from File",
        "operationId": "SharingUnshareFile", 
        "description": "Remove all members from this file. Does not remove inherited members.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UnshareFileArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/UnshareFileError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }
      }
    }, 
    "/sharing/unshare_folder": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/UnshareFolderError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LaunchEmptyResult"
            }
          }
        }, 
        "operationId": "SharingUnshareFolder", 
        "description": "Allows a shared folder owner to unshare the folder.\nYou'll need to call :route:`check_job_status` to determine if the action has completed successfully.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UnshareFolderArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Unshare the Folder"
      }
    }, 
    "/sharing/update_file_member": {
      "post": {
        "tags": ["Sharing"],
        "summary": "Change Member's Access on Shared File",
        "operationId": "SharingUpdateFileMember", 
        "description": "Changes a member's access on a shared file.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UpdateFileMemberArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/FileMemberActionError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/MemberAccessLevelResult"
            }
          }
        }     
      }
    }, 
    "/sharing/update_folder_member": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/UpdateFolderMemberError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/MemberAccessLevelResult"
            }
          }
        }, 
        "operationId": "SharingUpdateFolderMember", 
        "description": "Allows an owner or editor of a shared folder to update another member's permissions.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UpdateFolderMemberArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Update Folder Member's Permissions"
      }
    }, 
    "/sharing/update_folder_policy": {
      "post": {
        "tags": ["Sharing"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/UpdateFolderPolicyError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SharedFolderMetadata"
            }
          }
        }, 
        "operationId": "SharingUpdateFolderPolicy", 
        "description": "Update the sharing policies for a shared folder.\nUser must have :field:`AccessLevel.owner` access to the shared folder to update its policies.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UpdateFolderPolicyArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Update Shared Folder's Sharing Policies"
      }
    }, 
    "/users/features/get_values": {
      "post": {
        "tags": ["Users"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GetFeaturesError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/UserFeaturesGetValuesBatchResult"
            }
          }
        }, 
        "operationId": "UsersFeaturesGetvalues", 
        "description": "Get a list of feature values that may be configured for the current account.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetFeaturesArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Features Configured for the Current Account"
      }
    },
    "/users/get_account": {
      "post": {
        "tags": ["Users"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GetAccountError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/BasicAccount"
            }
          }
        }, 
        "operationId": "UsersGetAccount", 
        "description": "Get information about a user's account.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetAccountArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get User Account Information"
      }
    }, 
    "/users/get_account_batch": {
      "post": {
        "tags": ["Users"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GetAccountBatchError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/BasicAccount"
              }, 
              "type": "array"
            }
          }
        }, 
        "operationId": "UsersGetAccountBatch", 
        "description": "Get information about multiple user accounts.  At most 300 accounts may be queried per request.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetAccountBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Multiple Accounts Information"
      }
    },
    "/users/get_current_account": {
      "post": {
        "tags": ["Users"],
        "summary": "Get Current User's Account Information",
        "operationId": "UsersGetCurrentAccount", 
        "description": "Get information about the current user's account.", 
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/FullAccount"
            }
          }
        }
      }
    }, 
    "/users/get_space_usage": {
      "post": {
        "tags": ["Users"],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/SpaceUsage"
            }
          }
        }, 
        "operationId": "UsersGetSpaceUsage", 
        "description": "Get the space usage information for the current user's account.", 
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Space Usage Information for Current User"
      }
    },
    "/paper/docs/archive": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/archive",
        "description": "Marks the given Paper doc as archived.Note: This action can be performed or undone by anyone with edit permissions to the doc.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\"\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"error_summary\": \"insufficient_permissions/...\",\n    \"error\": {\n        \".tag\": \"insufficient_permissions\"\n    }\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/archive \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\"}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/create": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/create",
        "description": "Creates a new Paper doc with the provided content.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"import_format\": \"markdown\"\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\",\n    \"revision\": 456736745,\n    \"title\": \"Week one retention\"\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/create \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Dropbox-API-Arg: {\\\"import_format\\\": \\\"markdown\\\"}\" \\\n    --header \"Content-Type: application/octet-stream\" \\\n    --data-binary @local_file.txt</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "import_format",
            "in": "header",
            "description": "ImportFormat - The format of provided data."
          },
          {
            "type": "string",
            "name": "parent_folder_id",
            "in": "header",
            "description": "String? - The Paper folder ID where the Paper document should be created. The API user has to have write access to this folder or error is thrown. This field is optional.\n"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/download": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/download",
        "description": "Exports and downloads Paper doc either as HTML or markdown.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\",\n    \"export_format\": \"markdown\"\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"owner\": \"james@example.com\",\n    \"title\": \"Week one retention\",\n    \"revision\": 456736745,\n    \"mime_type\": \"text/x-markdown\"\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/download \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Dropbox-API-Arg: {\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\",\\\"export_format\\\": \\\"markdown\\\"}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "type": "string",
            "name": "export_format",
            "in": "header",
            "description": "ExportFormat -"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/folder_users/list": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/folder_users/list",
        "description": "Lists the users who are explicitly invited to the Paper folder in which the Paper doc is contained. For private folders all users (including owner) shared on the folder are listed and for team folders all non-team users shared on the folder are returned.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\",\n    \"limit\": 100\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"invitees\": [\n        {\n            \".tag\": \"email\",\n            \"email\": \"jessica@example.com\"\n        }\n    ],\n    \"users\": [\n        {\n            \"account_id\": \"dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc\",\n            \"email\": \"bob@example.com\",\n            \"display_name\": \"Robert Smith\",\n            \"same_team\": true,\n            \"team_member_id\": \"dbmid:abcd1234\"\n        }\n    ],\n    \"cursor\": {\n        \"value\": \"zHZvTPBnXilGgm1AmDgVyZ10zf7qb0qznd5sAVQbbIvoteSnWLjUdLU7aR25hb\",\n        \"expiration\": \"2016-08-07T14:56:15Z\"\n    },\n    \"has_more\": false\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/folder_users/list \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\",\\\"limit\\\": 100}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "type": "string",
            "name": "limit",
            "in": "header",
            "description": "Int32(min=1, max=1000) - Size limit per batch. The maximum number of users that can be retrieved per batch is 1000. Higher value results in invalid arguments error. The default for this field is 1000.\n"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/folder_users/list/continue": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/folder_users/list/continue",
        "description": "Once a cursor has been retrieved from docs/folder_users/list, use this to paginate through all users on the Paper folder.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\",\n    \"cursor\": \"U60b6BxT43ySd5sAVQbbIvoteSnWLjUdLU7aR25hbt3ySd5sAVQbbIvoteSnWLjUd\"\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"invitees\": [\n        {\n            \".tag\": \"email\",\n            \"email\": \"jessica@example.com\"\n        }\n    ],\n    \"users\": [\n        {\n            \"account_id\": \"dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc\",\n            \"email\": \"bob@example.com\",\n            \"display_name\": \"Robert Smith\",\n            \"same_team\": true,\n            \"team_member_id\": \"dbmid:abcd1234\"\n        }\n    ],\n    \"cursor\": {\n        \"value\": \"zHZvTPBnXilGgm1AmDgVyZ10zf7qb0qznd5sAVQbbIvoteSnWLjUdLU7aR25hb\",\n        \"expiration\": \"2016-08-07T14:56:15Z\"\n    },\n    \"has_more\": false\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/folder_users/list/continue \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\",\\\"cursor\\\": \\\"U60b6BxT43ySd5sAVQbbIvoteSnWLjUdLU7aR25hbt3ySd5sAVQbbIvoteSnWLjUd\\\"}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "header",
            "description": "String - The cursor obtained from docs/folder_users/list or docs/folder_users/list/continue. Allows for pagination.\n"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/get_folder_info": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/get_folder_info",
        "description": "Retrieves folder information for the given Paper doc. This includes:  - folder sharing policy; permissions for subfolders are set by the top-level folder.  - full 'filepath', i.e. the list of folders (both folderId and folderName) from     the root folder to the folder directly containing the Paper doc.Note: If the Paper doc is not in any folder (aka unfiled) the response will be empty.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\"\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"folder_sharing_policy_type\": {\n        \".tag\": \"team\"\n    },\n    \"folders\": [\n        {\n            \"id\": \"e.gGYT6HSafpMej9bUv306oGm60vrHiCHgEFnzziioPGCvHf\",\n            \"name\": \"Design docs\"\n        }\n    ]\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/get_folder_info \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\"}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/list": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/list",
        "description": "Return the list of all Paper docs according to the argument specifications. To iterate over through the full pagination, pass the cursor to docs/list/continue.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"filter_by\": \"docs_created\",\n    \"sort_by\": \"modified\",\n    \"sort_order\": \"descending\",\n    \"limit\": 100\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"doc_ids\": [\n        \"zO1E7coc54sE8IuMdUoxz\",\n        \"mm1AmDgVyZ10zf7qb0qzn\",\n        \"dByYHZvTPBnXilGgyc5mm\"\n    ],\n    \"cursor\": {\n        \"value\": \"zHZvTPBnXilGgm1AmDgVyZ10zf7qb0qznd5sAVQbbIvoteSnWLjUdLU7aR25hb\",\n        \"expiration\": \"2016-08-07T14:56:15Z\"\n    },\n    \"has_more\": true\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/list \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"filter_by\\\": \\\"docs_created\\\",\\\"sort_by\\\": \\\"modified\\\",\\\"sort_order\\\": \\\"descending\\\",\\\"limit\\\": 100}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "filter_by",
            "in": "header",
            "description": "ListPaperDocsFilterBy - Allows user to specify how the Paper docs should be filtered. The default for this union is docs_accessed."
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "header",
            "description": "ListPaperDocsSortBy - Allows user to specify how the Paper docs should be sorted. The default for this union is accessed."
          },
          {
            "type": "string",
            "name": "sort_order",
            "in": "header",
            "description": "ListPaperDocsSortOrder - Allows user to specify the sort order of the result. The default for this union is ascending."
          },
          {
            "type": "string",
            "name": "limit",
            "in": "header",
            "description": "Int32(min=1, max=1000) - Size limit per batch. The maximum number of docs that can be retrieved per batch is 1000. Higher value results in invalid arguments error. The default for this field is 1000.\n"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/list/continue": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/list/continue",
        "description": "Once a cursor has been retrieved from docs/list, use this to paginate through all Paper doc.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"cursor\": \"U60b6BxT43ySd5sAVQbbIvoteSnWLjUdLU7aR25hbt3ySd5sAVQbbIvoteSnWLjUd\"\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"doc_ids\": [\n        \"zO1E7coc54sE8IuMdUoxz\",\n        \"mm1AmDgVyZ10zf7qb0qzn\",\n        \"dByYHZvTPBnXilGgyc5mm\"\n    ],\n    \"cursor\": {\n        \"value\": \"zHZvTPBnXilGgm1AmDgVyZ10zf7qb0qznd5sAVQbbIvoteSnWLjUdLU7aR25hb\",\n        \"expiration\": \"2016-08-07T14:56:15Z\"\n    },\n    \"has_more\": true\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/list/continue \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"cursor\\\": \\\"U60b6BxT43ySd5sAVQbbIvoteSnWLjUdLU7aR25hbt3ySd5sAVQbbIvoteSnWLjUd\\\"}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "header",
            "description": "String - The cursor obtained from docs/list or docs/list/continue. Allows for pagination.\n"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/permanently_delete": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/permanently_delete",
        "description": "Permanently deletes the given Paper doc. This operation is final as the doc cannot be recovered.Note: This action can be performed only by the doc owner.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\"\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"error_summary\": \"insufficient_permissions/...\",\n    \"error\": {\n        \".tag\": \"insufficient_permissions\"\n    }\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/permanently_delete \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\"}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/sharing_policy/get": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/sharing_policy/get",
        "description": "Gets the default sharing policy for the given Paper doc.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\"\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"public_sharing_policy\": {\n        \".tag\": \"people_with_link_can_edit\"\n    },\n    \"team_sharing_policy\": {\n        \".tag\": \"people_with_link_can_edit\"\n    }\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/sharing_policy/get \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\"}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/sharing_policy/set": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/sharing_policy/set",
        "description": "Sets the default sharing policy for the given Paper doc. The default 'team_sharing_policy' can be changed only by teams, omit this field for personal accounts.Note: 'public_sharing_policy' cannot be set to the value 'disabled' because this setting can be changed only via the team admin console.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\",\n    \"sharing_policy\": {\n        \"public_sharing_policy\": \"people_with_link_can_edit\",\n        \"team_sharing_policy\": \"people_with_link_can_edit\"\n    }\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"error_summary\": \"insufficient_permissions/...\",\n    \"error\": {\n        \".tag\": \"insufficient_permissions\"\n    }\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/sharing_policy/set \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\",\\\"sharing_policy\\\": {\\\"public_sharing_policy\\\": \\\"people_with_link_can_edit\\\",\\\"team_sharing_policy\\\": \\\"people_with_link_can_edit\\\"}}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "type": "string",
            "name": "sharing_policy",
            "in": "header",
            "description": "SharingPolicy - The default sharing policy to be set for the Paper doc."
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/update": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/update",
        "description": "Updates an existing Paper doc with the provided content.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\",\n    \"doc_update_policy\": \"overwrite_all\",\n    \"revision\": 12345,\n    \"import_format\": \"html\"\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\",\n    \"revision\": 456736745,\n    \"title\": \"Week one retention\"\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/update \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Dropbox-API-Arg: {\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\",\\\"doc_update_policy\\\": \\\"overwrite_all\\\",\\\"revision\\\": 12345,\\\"import_format\\\": \\\"html\\\"}\" \\\n    --header \"Content-Type: application/octet-stream\" \\\n    --data-binary @local_file.txt</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "type": "string",
            "name": "doc_update_policy",
            "in": "header",
            "description": "PaperDocUpdatePolicy - The policy used for the current update call."
          },
          {
            "type": "string",
            "name": "revision",
            "in": "header",
            "description": "Int64 - The latest doc revision. This value must match the head revision or an error code will be returned. This is to prevent colliding writes.\n"
          },
          {
            "type": "string",
            "name": "import_format",
            "in": "header",
            "description": "ImportFormat - The format of provided data."
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/users/add": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/users/add",
        "description": "Allows an owner or editor to add users to a Paper doc or change their permissions using their email address or Dropbox account ID.Note: The Doc owner's permissions cannot be changed.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\",\n    \"members\": [\n        {\n            \"member\": {\n                \".tag\": \"email\",\n                \"email\": \"justin@example.com\"\n            },\n            \"permission_level\": \"view_and_comment\"\n        }\n    ],\n    \"custom_message\": \"Welcome to Paper.\",\n    \"quiet\": false\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"error_summary\": \"insufficient_permissions/...\",\n    \"error\": {\n        \".tag\": \"insufficient_permissions\"\n    }\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/users/add \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\",\\\"members\\\": [{\\\"member\\\": {\\\".tag\\\": \\\"email\\\",\\\"email\\\": \\\"justin@example.com\\\"},\\\"permission_level\\\": \\\"view_and_comment\\\"}],\\\"custom_message\\\": \\\"Welcome to Paper.\\\",\\\"quiet\\\": false}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "type": "string",
            "name": "members",
            "in": "header",
            "description": "List of (AddMember, max_items=20) - User which should be added to the Paper doc. Specify only email address or Dropbox account ID."
          },
          {
            "type": "string",
            "name": "custom_message",
            "in": "header",
            "description": "String? - A personal message that will be emailed to each successfully added member. This field is optional.\n"
          },
          {
            "type": "string",
            "name": "quiet",
            "in": "header",
            "description": "Boolean - Clients should set this to true if no email message shall be sent to added users. The default for this field is False.\n"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/users/list": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/users/list",
        "description": "Lists all users who visited the Paper doc or users with explicit access. This call excludes users who have been removed. The list is sorted by the date of the visit or the share date.The list will include both users, the explicitly shared ones as well as those who came in using the Paper url link.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\",\n    \"limit\": 100,\n    \"filter_by\": \"shared\"\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"invitees\": [\n        {\n            \"invitee\": {\n                \".tag\": \"email\",\n                \"email\": \"jessica@example.com\"\n            },\n            \"permission_level\": {\n                \".tag\": \"edit\"\n            }\n        }\n    ],\n    \"users\": [\n        {\n            \"user\": {\n                \"account_id\": \"dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc\",\n                \"email\": \"bob@example.com\",\n                \"display_name\": \"Robert Smith\",\n                \"same_team\": true,\n                \"team_member_id\": \"dbmid:abcd1234\"\n            },\n            \"permission_level\": {\n                \".tag\": \"view_and_comment\"\n            }\n        }\n    ],\n    \"doc_owner\": {\n        \"account_id\": \"dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc\",\n        \"email\": \"bob@example.com\",\n        \"display_name\": \"Robert Smith\",\n        \"same_team\": true,\n        \"team_member_id\": \"dbmid:abcd1234\"\n    },\n    \"cursor\": {\n        \"value\": \"zHZvTPBnXilGgm1AmDgVyZ10zf7qb0qznd5sAVQbbIvoteSnWLjUdLU7aR25hb\",\n        \"expiration\": \"2016-08-07T14:56:15Z\"\n    },\n    \"has_more\": false\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/users/list \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\",\\\"limit\\\": 100,\\\"filter_by\\\": \\\"shared\\\"}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "type": "string",
            "name": "limit",
            "in": "header",
            "description": "Int32(min=1, max=1000) - Size limit per batch. The maximum number of users that can be retrieved per batch is 1000. Higher value results in invalid arguments error. The default for this field is 1000.\n"
          },
          {
            "type": "string",
            "name": "filter_by",
            "in": "header",
            "description": "UserOnPaperDocFilter - Specify this attribute if you want to obtain users that have already accessed the Paper doc. The default for this union is shared."
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/users/list/continue": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/users/list/continue",
        "description": "Once a cursor has been retrieved from docs/users/list, use this to paginate through all users on the Paper doc.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\",\n    \"cursor\": \"U60b6BxT43ySd5sAVQbbIvoteSnWLjUdLU7aR25hbt3ySd5sAVQbbIvoteSnWLjUd\"\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"invitees\": [\n        {\n            \"invitee\": {\n                \".tag\": \"email\",\n                \"email\": \"jessica@example.com\"\n            },\n            \"permission_level\": {\n                \".tag\": \"edit\"\n            }\n        }\n    ],\n    \"users\": [\n        {\n            \"user\": {\n                \"account_id\": \"dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc\",\n                \"email\": \"bob@example.com\",\n                \"display_name\": \"Robert Smith\",\n                \"same_team\": true,\n                \"team_member_id\": \"dbmid:abcd1234\"\n            },\n            \"permission_level\": {\n                \".tag\": \"view_and_comment\"\n            }\n        }\n    ],\n    \"doc_owner\": {\n        \"account_id\": \"dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc\",\n        \"email\": \"bob@example.com\",\n        \"display_name\": \"Robert Smith\",\n        \"same_team\": true,\n        \"team_member_id\": \"dbmid:abcd1234\"\n    },\n    \"cursor\": {\n        \"value\": \"zHZvTPBnXilGgm1AmDgVyZ10zf7qb0qznd5sAVQbbIvoteSnWLjUdLU7aR25hb\",\n        \"expiration\": \"2016-08-07T14:56:15Z\"\n    },\n    \"has_more\": false\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/users/list/continue \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\",\\\"cursor\\\": \\\"U60b6BxT43ySd5sAVQbbIvoteSnWLjUdLU7aR25hbt3ySd5sAVQbbIvoteSnWLjUd\\\"}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "header",
            "description": "String - The cursor obtained from docs/users/list or docs/users/list/continue. Allows for pagination.\n"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/docs/users/remove": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/docs/users/remove",
        "description": "Allows an owner or editor to remove users from a Paper doc using their email address or Dropbox account ID.Note: Doc owner cannot be removed.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"doc_id\": \"uaSvRuxvnkFa12PTkBv5q\",\n    \"member\": {\n        \".tag\": \"email\",\n        \"email\": \"justin@example.com\"\n    }\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"error_summary\": \"insufficient_permissions/...\",\n    \"error\": {\n        \".tag\": \"insufficient_permissions\"\n    }\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/docs/users/remove \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"doc_id\\\": \\\"uaSvRuxvnkFa12PTkBv5q\\\",\\\"member\\\": {\\\".tag\\\": \\\"email\\\",\\\"email\\\": \\\"justin@example.com\\\"}}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "doc_id",
            "in": "header",
            "description": "String - The Paper doc ID.\n"
          },
          {
            "type": "string",
            "name": "member",
            "in": "header",
            "description": "MemberSelector - User which should be removed from the Paper doc. Specify only email address or Dropbox account ID."
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/paper/folders/create": {
      "post": {
        "tags": [
          "paper"
        ],
        "summary": "/folders/create",
        "description": "Create a new Paper folder with the provided info.\n",
        "externalDocs": {
          "description": "<table><tr><td>Request Sample</td></tr><tr><td>{\n    \"name\": \"my new folder\"\n}</td></tr><tr><td>Response Sample  </td></tr><tr><td>{\n    \"folder_id\": \"abcd\"\n}</td></tr><tr><td>Sample Request Url#]</td></tr><tr><td>curl -X POST https://api.dropboxapi.com/2/paper/folders/create \\\n    --header \"Authorization: Bearer \" \\\n    --header \"Content-Type: application/json\" \\\n    --data \"{\\\"name\\\": \\\"my new folder\\\"}\"</td></tr></table>"
        },
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "header",
            "description": "String - The name of the new Paper folder.\n"
          },
          {
            "type": "string",
            "name": "parent_folder_id",
            "in": "header",
            "description": "String? - The encrypted Paper folder Id where the new Paper folder should be created. The API user has to have write access to this folder or error is thrown. If not supplied, the new folder will be created at top level. This field is optional.\n"
          },
          {
            "type": "string",
            "name": "is_team_folder",
            "in": "header",
            "description": "Boolean? - Whether the folder to be created should be a team folder. This value will be ignored if parent_folder_id is supplied, as the new folder will inherit the type (private or team folder) from its parent. We will by default create a top-level private folder if both parent_folder_id and is_team_folder are not supplied. This field is optional.\n"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {},
        "callbacks": {},
        "servers": []
      }
    },
    "/team/devices/list_member_devices": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListMemberDevicesError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListMemberDevicesResult"
            }
          }
        }, 
        "operationId": "TeamDevicesListMemberDevices", 
        "description": "List all device sessions of a team's member.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListMemberDevicesArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Device Sessions of a Member"
      }
    }, 
    "/team/devices/list_members_devices": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListMembersDevicesError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListMembersDevicesResult"
            }
          }
        }, 
        "operationId": "TeamDevicesListMembersDevices", 
        "description": "List all device sessions of a team.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListMembersDevicesArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Team's All Device Sessions"
      }
    }, 
    "/team/devices/revoke_device_session": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RevokeDeviceSessionError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "TeamDevicesRevokeDeviceSession", 
        "description": "Revoke a device session of a team's member.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RevokeDeviceSessionArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Revoke Device Session of a Member"
      }
    }, 
    "/team/devices/revoke_device_session_batch": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RevokeDeviceSessionBatchError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/RevokeDeviceSessionBatchResult"
            }
          }
        }, 
        "operationId": "TeamDevicesRevokeDeviceSessionBatch", 
        "description": "Revoke a list of device sessions of team members.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RevokeDeviceSessionBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Revoke List of Device Session of Team Members"
      }
    }, 
    "/team/features/get_values": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/FeaturesGetValuesBatchError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/FeaturesGetValuesBatchResult"
            }
          }
        }, 
        "operationId": "TeamFeaturesGetValues", 
        "description": "Get the values for one or more featues. This route allows you to check your account's capability for what feature you can access or what value you have for certain features.\nPermission : Team information.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/FeaturesGetValuesBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Values for One or More Features"
      }
    }, 
    "/team/get_info": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "type": "null"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamGetInfoResult"
            }
          }
        }, 
        "operationId": "TeamGetInfo", 
        "description": "Retrieves information about a team.", 
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Team Information"
      }
    }, 
    "/team/groups/create": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GroupCreateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GroupFullInfo"
            }
          }
        }, 
        "operationId": "TeamGroupsCreate", 
        "description": "Creates a new, empty group, with a requested name.\nPermission : Team member management.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GroupCreateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Create New Group"
      }
    }, 
    "/team/groups/delete": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GroupDeleteError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LaunchEmptyResult"
            }
          }
        }, 
        "operationId": "TeamGroupsDelete", 
        "description": "Deletes a group.\nThe group is deleted immediately. However the revoking of group-owned resources may take additional time. Use the :route:`groups/job_status/get` to determine whether this process has completed.\nPermission : Team member management.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GroupSelector"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Delete a Group"
      }
    }, 
    "/team/groups/get_info": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GroupsGetInfoError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/GroupsGetInfoItem"
              }, 
              "type": "array"
            }
          }
        }, 
        "operationId": "TeamGroupsGetInfo", 
        "description": "Retrieves information about one or more groups. Note that the optional field  :field:`GroupFullInfo.members` is not returned for system-managed groups.\nPermission : Team Information.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GroupsSelector"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Information About One or More Groups"
      }
    }, 
    "/team/groups/job_status/get": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GroupsPollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/PollEmptyResult"
            }
          }
        }, 
        "operationId": "TeamGroupsJobStatusGet", 
        "description": "Once an async_job_id is returned from :route:`groups/delete`, :route:`groups/members/add` , or :route:`groups/members/remove` use this method to poll the status of granting/revoking group members' access to group-owned resources.\nPermission : Team member management.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Poll the Status of Granting/Revoking Group Members' Access"
      }
    }, 
    "/team/groups/list": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GroupsListResult"
            }
          }
        }, 
        "operationId": "TeamGroupsList", 
        "description": "Lists groups on a team.\nPermission : Team Information.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GroupsListArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Groups on a Team"
      }
    }, 
    "/team/groups/list/continue": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GroupsListContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GroupsListResult"
            }
          }
        }, 
        "operationId": "TeamGroupsListContinue", 
        "description": "Once a cursor has been retrieved from :route:`groups/list`, use this to paginate through all groups.\nPermission : Team Information.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GroupsListContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Paginate Through Groups"
      }
    }, 
    "/team/groups/members/add": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GroupMembersAddError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GroupMembersChangeResult"
            }
          }
        }, 
        "operationId": "TeamGroupsMembersAdd", 
        "description": "Adds members to a group.\nThe members are added immediately. However the granting of group-owned resources may take additional time. Use the :route:`groups/job_status/get` to determine whether this process has completed.\nPermission : Team member management.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GroupMembersAddArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Add Member to a Group"
      }
    }, 
    "/team/groups/members/list": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GroupSelectorError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GroupsMembersListResult"
            }
          }
        }, 
        "operationId": "TeamGroupsMembersList", 
        "description": "Lists members of a group.\nPermission : Team Information.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GroupsMembersListArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Members of a Group"
      }
    }, 
    "/team/groups/members/list/continue": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GroupsMembersListContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GroupsMembersListResult"
            }
          }
        }, 
        "operationId": "TeamGroupsMembersListContinue", 
        "description": "Once a cursor has been retrieved from :route:`groups/members/list`, use this to paginate through all members of the group.\nPermission : Team information.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GroupsMembersListContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Paginate Through Members of the Group"
      }
    }, 
    "/team/groups/members/remove": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GroupMembersRemoveError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GroupMembersChangeResult"
            }
          }
        }, 
        "operationId": "TeamGroupsMembersRemove", 
        "description": "Removes members from a group.\nThe members are removed immediately. However the revoking of group-owned resources may take additional time. Use the :route:`groups/job_status/get` to determine whether this process has completed.\nThis method permits removing the only owner of a group, even in cases where this is not possible via the web client.\nPermission : Team member management.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GroupMembersRemoveArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Remove Members From a Group"
      }
    }, 
    "/team/groups/members/set_access_type": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GroupMemberSetAccessTypeError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/GroupsGetInfoItem"
              }, 
              "type": "array"
            }
          }
        }, 
        "operationId": "TeamGroupsMembersSetAccessType", 
        "description": "Sets a member's access type in a group.\nPermission : Team member management.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GroupMembersSetAccessTypeArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Set Member's Access Type in a Group"
      }
    }, 
    "/team/groups/update": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GroupUpdateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GroupFullInfo"
            }
          }
        }, 
        "operationId": "TeamGroupsUpdate", 
        "description": "Updates a group's name and/or external ID.\nPermission : Team member management.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GroupUpdateArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Update Group's Details"
      }
    }, 
    "/team/legal_holds/create_policy":{
      "post": {
        "tags": ["Team"],
        "operationId": "TeamLegalHoldsCreatePolicy", 
        "description": "Creates new legal hold policy. Note: Legal Holds is a paid add-on. Not all teams have the feature. Permission : Team member file access.", 
        "summary": "Create new legal hold policy",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/LegalHoldCreatePolicyArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicy"
            }
          }
        }
      }
    },
    "/team/legal_holds/get_policy":{
      "post": {
        "tags": ["Team"],
        "operationId": "TeamLegalHoldsGetPolicy", 
        "description": "Gets a legal hold by Id. Note: Legal Holds is a paid add-on. Not all teams have the feature. Permission : Team member file access.", 
        "summary": "Gets a legal hold by Id",
        "parameters": [
          {
            "schema": {
              "type":"object",
              "properties":{
                "id":{
                  "type":"string",
                  "description":"The legal hold Id."
                }
              }
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicy"
            }
          }
        }
      }
    },
    "/team/legal_holds/list_held_revisions":{
      "post": {
        "tags": ["Team"],
        "operationId": "TeamLegalHoldsListHeldRevisionPolicy", 
        "description": "List the file metadata that's under the hold. Note: Legal Holds is a paid add-on. Not all teams have the feature. Permission : Team member file access.", 
        "summary": "List file metadata under the hold.",
        "parameters": [
          {
            "schema": {
              "type":"object",
              "properties":{
                "id":{
                  "type":"string",
                  "description":"The legal hold Id."
                }
              }
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LegalHoldsListHeldRevisionResult"
            }
          }
        }
      }
    },
    "/team/legal_holds/list_held_revisions_continue":{
      "post": {
        "tags": ["Team"],
        "operationId": "TeamLegalHoldsListHeldRevisionContinuePolicy", 
        "description": "List the file metadata that's under the hold. Note: Legal Holds is a paid add-on. Not all teams have the feature. Permission : Team member file access.", 
        "summary": "Continue listing the file metadata under the hold.",
        "parameters": [
          {
            "schema": {
              "type":"object",
              "properties":{
                "id":{
                  "type":"string",
                  "description":"The legal hold Id."
                },
                "cursor":{
                  "type":"string",
                  "description":"The cursor idicates where to continue reading file metadata entries for the next API call. When there are no more entries, the cursor will return none. "
                }
              }
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LegalHoldsListHeldRevisionResult"
            }
          }
        }
      }
    },
    "/team/legal_holds/list_policies":{
      "post": {
        "tags": ["Team"],
        "operationId": "TeamLegalHoldsListPolicy", 
        "description": "Lists legal holds on a team. Note: Legal Holds is a paid add-on. Not all teams have the feature. Permission : Team member file access.", 
        "summary": "Lists legal holds on a team",
        "parameters": [
          {
            "schema": {
              "type":"object",
              "properties":{
                "include_released":{
                  "type":"boolean"
                }
              }
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LegalHoldsListPoliciesResult"
            }
          }
        }
      }
    },
    "/team/legal_holds/release_policies":{
      "post": {
        "tags": ["Team"],
        "operationId": "TeamLegalHoldsReleasePolicy", 
        "description": "Releases a legal hold by Id. Note: Legal Holds is a paid add-on. Not all teams have the feature. Permission : Team member file access.", 
        "summary": "Releases a legal hold by Id",
        "parameters": [
          {
            "schema": {
              "type":"object",
              "properties":{
                "id":{
                  "type":"string",
                  "description":"The legal hold Id."
                }
              }
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/team/legal_holds/update_policies":{
      "post": {
        "tags": ["Team"],
        "operationId": "TeamLegalHoldsUpdatePolicy", 
        "description": "Updates a legal hold. Note: Legal Holds is a paid add-on. Not all teams have the feature. Permission : Team member file access.", 
        "summary": "Updates a legal hold",
        "parameters": [
          {
            "schema": {
              "$ref":"#/definitions/LegalHoldsPolicyUpdateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicy"
            }
          }
        }
      }
    },
    "/team/linked_apps/list_member_linked_apps": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListMemberAppsError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListMemberAppsResult"
            }
          }
        }, 
        "operationId": "TeamLinkedAppsListMemberLinkedApps", 
        "description": "List all linked applications of the team member.\nNote, this endpoint does not list any team-linked applications.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListMemberAppsArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List all Linked Apps of a Team Member"
      }
    },
    "/team/linked_apps/list_members_linked_apps": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ListMembersAppsError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ListMembersAppsResult"
            }
          }
        }, 
        "operationId": "TeamLinkedAppsListMembersLinkedApps", 
        "description": "List all applications linked to the team members' accounts.\nNote, this endpoint does not list any team-linked applications.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ListMembersAppsArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Apps Linked to a Team Member's Account"
      }
    },
    "/team/linked_apps/revoke_linked_app": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RevokeLinkedAppError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "TeamLinkedAppsRevokeLinkedApp", 
        "description": "Revoke a linked application of the team member.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RevokeLinkedApiAppArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Revoke a Linked Application of a Team Member"
      }
    }, 
    "/team/linked_apps/revoke_linked_app_batch": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/RevokeLinkedAppBatchError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/RevokeLinkedAppBatchResult"
            }
          }
        }, 
        "operationId": "TeamLinkedAppsRevokeLinkedAppBatch", 
        "description": "Revoke a list of linked applications of the team members.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/RevokeLinkedApiAppBatchArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Revoke a List of Linked Apps of the Team Members"
      }
    }, 
    "/team/member_space_limits/excluded_users/add": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ExcludedUsersUpdateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ExcludedUsersUpdateResult"
            }
          }
        }, 
        "operationId": "TeamMemberSpaceLimitsExcludedUsersAdd", 
        "description": "Add users to member space limits excluded users list.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ExcludedUsersUpdateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Add Users to Member Space Limits Excluded Users List"
      }
    }, 
    "/team/member_space_limits/excluded_users/list": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ExcludedUsersListError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ExcludedUsersListResult"
            }
          }
        }, 
        "operationId": "TeamMemberSpaceLimitsExcludedUsersList", 
        "description": "List member space limits excluded users.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ExcludedUsersListArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Member Space Limits Excluded Users"
      }
    }, 
    "/team/member_space_limits/excluded_users/list/continue": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ExcludedUsersListContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ExcludedUsersListResult"
            }
          }
        }, 
        "operationId": "TeamMemberSpaceLimitsExcludedUsersListContinue", 
        "description": "Continue listing member space limits excluded users.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ExcludedUsersListContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Continue Listing Member Space Limits Excluded Users"
      }
    }, 
    "/team/member_space_limits/excluded_users/remove": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/ExcludedUsersUpdateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ExcludedUsersUpdateResult"
            }
          }
        }, 
        "operationId": "TeamMemberSpaceLimitsExcludedUsersRemove", 
        "description": "Remove users from member space limits excluded users list.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ExcludedUsersUpdateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Remove Users From Member Space Limits Excluded Users List"
      }
    }, 
    "/team/member_space_limits/get_custom_quota": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/CustomQuotaError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/CustomQuotaResult"
              }, 
              "type": "array"
            }
          }
        }, 
        "operationId": "TeamMemberSpaceLimitsGetCustomQuota", 
        "description": "Get users custom quota. A maximum of 1000 members can be specified in a single call. Note: to apply a custom space limit, a team admin needs to set a member space limit for the team first. ", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomQuotaUsersArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Users Custom Quota"
      }
    }, 
    "/team/member_space_limits/remove_custom_quota": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/CustomQuotaError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/RemoveCustomQuotaResult"
              }, 
              "type": "array"
            }
          }
        }, 
        "operationId": "TeamMemberSpaceLimitsRemoveCustomQuota", 
        "description": "Remove users custom quota. A maximum of 1000 members can be specified in a single call.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomQuotaUsersArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Remove Users Custom Quota"
      }
    }, 
    "/team/member_space_limits/set_custom_quota": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/SetCustomQuotaError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/CustomQuotaResult"
              }, 
              "type": "array"
            }
          }
        }, 
        "operationId": "TeamMemberSpaceLimitsSetCustomQuota", 
        "description": "Set users custom quota. Custom quota has to be at least 15GB. A maximum of 1000 members can be specified in a single call.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/SetCustomQuotaArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Set Users Custom Quota"
      }
    }, 
    "/team/members/add": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "type": "null"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/MembersAddLaunch"
            }
          }
        }, 
        "operationId": "TeamMembersAdd", 
        "description": "Adds members to a team.\nPermission : Team member management\nA maximum of 20 members can be specified in a single call.\nIf no Dropbox account exists with the email address specified, a new Dropbox account will be created with the given email address, and that account will be invited to the team.\nIf a personal Dropbox account exists with the email address specified in the call, this call will create a placeholder Dropbox account for the user on the team and send an email inviting the user to migrate their existing personal account onto the team.\nTeam member management apps are required to set an initial given_name and surname for a user to use in the team invitation and for 'Perform as team member' actions taken on the user before they become 'active'.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersAddArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Adds Members to a Team"
      }
    }, 
    "/team/members/add/job_status/get": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/MembersAddJobStatus"
            }
          }
        }, 
        "operationId": "TeamMembersAddJobStatusGet", 
        "description": "Once an async_job_id is returned from :route:`members/add` , use this to poll the status of the asynchronous request.\nPermission : Team member management.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Poll Status of Members Add Request"
      }
    }, 
    "/team/members/delete_profile_photo": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/MembersDeleteProfilePhotoError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamMemberFullInfo"
            }
          }
        }, 
        "operationId": "TeamMembersDeleteProfilePhoto", 
        "description": "Deletes a team member's profile photo. Permission : Team member management.\nPermission : Team member management.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersDeleteProfilePhotoArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Delete a Team Member's Profile Photo"
      }
    },
    "/team/members/get_available_team_member_roles": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/MembersGetAvailableTeamMemberRolesResult"
            }
          }
        }, 
        "operationId": "TeamMembersGetAvailableTeamMemberRole", 
        "description": "Get available TeamMemberRoles for the connected team. To be used with members/set_admin_permissions:2. Permission : Team member management.", 
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get available TeamMemberRoles for the connected team"
      }
    },  
    "/team/members/get_info": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/MembersGetInfoError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/MembersGetInfoItem"
              }, 
              "type": "array"
            }
          }
        }, 
        "operationId": "TeamMembersGetInfo", 
        "description": "Returns information about multiple team members.\nPermission : Team information\nThis endpoint will return :field:`MembersGetInfoItem.id_not_found`, for IDs (or emails) that cannot be matched to a valid team member.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersGetInfoArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Information About Multiple Team Members"
      }
    }, 
    "/team/members/list": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/MembersListError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/MembersListResult"
            }
          }
        }, 
        "operationId": "TeamMembersList", 
        "description": "Lists members of a team.\nPermission : Team information.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersListArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List Members of a Team"
      }
    }, 
    "/team/members/list/continue": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/MembersListContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/MembersListResult"
            }
          }
        }, 
        "operationId": "TeamMembersListContinue", 
        "description": "Once a cursor has been retrieved from :route:`members/list`, use this to paginate through all team members.\nPermission : Team information.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersListContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Paginate Through Team Members"
      }
    }, 
    "/team/members/move_former_member_files": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Move Removed Member's Files to a Different Member",
        "description": "Moves removed member's files to a different member. This endpoint initiates an asynchronous job. To obtain the final result of the job, the client should periodically poll members/move_former_member_files/job_status/check.Permission : Team member management.\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersDataTransferArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LaunchEmptyResult"
            }
          },
          "default": {
            "description": "Error"
          }
        }
      }
    },
    "/team/members/move_former_member_files/job_status/check": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Poll Status of Move Former Member File Request",
        "description": "Once an async_job_id is returned from members/move_former_member_files , use this to poll the status of the asynchronous request.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/PollEmptyResult"
            }
          },
          "default": {
            "description": "Error"
          }
        }
      }
    },
    "/team/members/recover": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/MembersRecoverError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "TeamMembersRecover", 
        "description": "Recover a deleted member.\nPermission : Team member management\nExactly one of team_member_id, email, or external_id must be provided to identify the user account.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersRecoverArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Recover a Deleted Member"
      }
    }, 
    "/team/members/remove": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/MembersRemoveError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/LaunchEmptyResult"
            }
          }
        }, 
        "operationId": "TeamMembersRemove", 
        "description": "Removes a member from a team.\nPermission : Team member management\nExactly one of team_member_id, email, or external_id must be provided to identify the user account.\nAccounts can be recovered via :route:`members/recover` for a 7 day period or until the account has been permanently deleted or transferred to another account (whichever comes first). Calling :route:`members/add` while a user is still recoverable on your team will return with :field:`MemberAddResult.user_already_on_team`.\nAccounts can have their files transferred via the admin console for a limited time, based on the version history length associated with the team (120 days for most teams).\nThis endpoint may initiate an asynchronous job. To obtain the final result of the job, the client should periodically poll :route:`members/remove/job_status/get`.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersRemoveArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Removes a Member From a Team"
      }
    }, 
    "/team/members/remove/job_status/get": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/PollEmptyResult"
            }
          }
        }, 
        "operationId": "TeamMembersRemoveJobStatusGet", 
        "description": "Once an async_job_id is returned from :route:`members/remove` , use this to poll the status of the asynchronous request.\nPermission : Team member management.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Poll the Status of Members Remove Request"
      }
    }, 
    "/team/members/secondary_emails/add": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Add Secondary Emails to Users",
        "description": "Add secondary emails to users. Permission : Team member management. Emails that are on verified domains will be verified automatically. For each email address not on a verified domain a verification email will be sent.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/AddSecondaryEmailsArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/AddSecondaryEmailsResult"
            }
          },
          "default": {
            "description": "Error"
          }
        }
      }
    },
    "/team/members/secondary_emails/delete": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Delete Secondary Emails from Users",
        "description": "Delete secondary emails from users Permission : Team member management. Users will be notified of deletions of verified secondary emails at both the secondary email and their primary email.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/DeleteSecondaryEmailsArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/DeleteSecondaryEmailsResult"
            }
          },
          "default": {
            "description": "No Error"
          }
        }
      }
    },
    "/team/members/secondary_emails/resend_verification_emails": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Resend Emails for Secondary Emails Verification",
        "description": "Resend secondary email verification emails.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ResendVerificationEmailArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/ResendVerificationEmailResult"
            }
          },
          "default": {
            "description": "No Error"
          }
        }
      }
    },
    "/team/members/send_welcome_email": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/MembersSendWelcomeError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "TeamMembersSendWelcomeEmail", 
        "description": "Sends welcome email to pending team member.\nPermission : Team member management\nExactly one of team_member_id, email, or external_id must be provided to identify the user account.\nNo-op if team member is not pending.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UserSelectorArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Send Welcome Email to Pending Team Member"
      }
    }, 
    "/team/members/set_admin_permissions": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/MembersSetPermissionsError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/MembersSetPermissionsResult"
            }
          }
        }, 
        "operationId": "TeamMembersSetAdminPermissions", 
        "description": "Updates a team member's permissions.\nPermission : Team member management.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersSetPermissionsArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Update a Team Member's Permissions"
      }
    }, 
    "/team/members/set_profile": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/MembersSetProfileError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamMemberFullInfo"
            }
          }
        }, 
        "operationId": "TeamMembersSetProfile", 
        "description": "Updates a team member's profile.\nPermission : Team member management.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersSetProfileArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Update a Team Member's Profile"
      }
    }, 
    "/team/members/set_profile_photo": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Update Team Member's Profile Photo",
        "description": "Updates a team member's profile photo.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersSetProfilePhotoArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamMemberInfoV2Result"
            }
          },
          "default": {
            "description": "Error"
          }
        }
      }
    },
    "/team/members/suspend": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/MembersSuspendError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "TeamMembersSuspend", 
        "description": "Suspend a member from a team.\nPermission : Team member management\nExactly one of team_member_id, email, or external_id must be provided to identify the user account.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersDeactivateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Suspend a Member From a Team"
      }
    }, 
    "/team/members/unsuspend": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/MembersUnsuspendError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "TeamMembersUnsuspend", 
        "description": "Unsuspend a member from a team.\nPermission : Team member management\nExactly one of team_member_id, email, or external_id must be provided to identify the user account.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MembersUnsuspendArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Unsuspend a Member From a Team"
      }
    }, 
    "/team/namespaces/list": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TeamNamespacesListError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamNamespacesListResult"
            }
          }
        }, 
        "operationId": "TeamNamespacesList", 
        "description": "Returns a list of all team-accessible namespaces. This list includes team folders, shared folders containing team members, team members' home namespaces, and team members' app folders. Home namespaces and app folders are always owned by this team or members of the team, but shared folders may be owned by other users or other teams. Duplicates may occur in the list.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TeamNamespacesListArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get List of All Team-Accessible Namespaces"
      }
    }, 
    "/team/namespaces/list/continue": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TeamNamespacesListContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamNamespacesListResult"
            }
          }
        }, 
        "operationId": "TeamNamespacesListContinue", 
        "description": "Once a cursor has been retrieved from :route:`namespaces/list`, use this to paginate through all team-accessible namespaces. Duplicates may occur in the list.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TeamNamespacesListContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Paginate Through all Team-Accessible Namespaces"
      }
    }, 
    "/team/sharing_allowlist/add": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "type":"object",
              "properties":{}
            }
          }
        }, 
        "operationId": "TeamSharingAllowlistAdd", 
        "description": "Endpoint adds Approve List entries. Changes are effective immediately. Changes are committed in transaction.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/SharingAllowlistAddArgs"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Adds Approve List entries"
      }
    },
    "/team/sharing_allowlist/list": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref":"#/definitions/SharingAllowlistListResponse"
            }
          }
        }, 
        "operationId": "TeamSharingAllowlistList", 
        "description": "Lists Approve List entries for given team, from newest to oldest, returning up to `limit` entries at a time. ", 
        "parameters": [
          {
            "schema": {
              "type":"object",
              "properties":{
                "limit":{
                  "type":"integer"
                }
              }
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Lists Approve List entries for given team"
      }
    }, 
    "/team/sharing_allowlist/list/continue": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "$ref":"#/definitions/SharingAllowlistListResponse"
            }
          }
        }, 
        "operationId": "TeamSharingAllowlistListContinue", 
        "description": "Lists entries associated with given team, starting from a the cursor.", 
        "parameters": [
          {
            "schema": {
              "type":"object",
              "properties":{
                "cursor":{
                  "type":"string"
                }
              }
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Lists entries with team starting from cursor"
      }
    }, 
    "/team/sharing_allowlist/remove": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "200": {
            "description": "Success", 
            "schema": {
              "type":"object",
              "items":{}
            }
          }
        }, 
        "operationId": "TeamSharingAllowlistRemove", 
        "description": "Endpoint removes Approve List entries. Changes are effective immediately. Changes are committed in transaction. In case of single validation error - all entries are rejected. Valid domains (RFC-1034/5) and emails (RFC-5322/822) are accepted. Entries being removed have to be present on the list. Maximum 1000 entries per call is allowed.", 
        "parameters": [
          {
            "schema": {
              "type":"object",
              "properties":{
                "domains":{
                  "type":"array",
                  "items":{
                    "type":"string"
                  }
                },
                "emails":{
                  "type":"array",
                  "items":{
                    "type":"string"
                  }
                }
              }
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Removes Approve List entries"
      }
    }, 
    "/team/team_folder/activate": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TeamFolderActivateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamFolderMetadata"
            }
          }
        }, 
        "operationId": "TeamTeamFolderActivate", 
        "description": "Sets an archived team folder's status to active.\nPermission : Team member file access.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TeamFolderIdArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Set an Archived Team Folder's Status to Active"
      }
    },
    "/team/team_folder/archive": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TeamFolderArchiveError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamFolderArchiveLaunch"
            }
          }
        }, 
        "operationId": "TeamTeamFolderArchive", 
        "description": "Sets an active team folder's status to archived and removes all folder and file members.\nPermission : Team member file access.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TeamFolderArchiveArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Set an Active Team Folder's Status to Archived"
      }
    }, 
    "/team/team_folder/archive/check": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/PollError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamFolderArchiveJobStatus"
            }
          }
        }, 
        "operationId": "TeamTeamFolderArchiveCheck", 
        "description": "Returns the status of an asynchronous job for archiving a team folder.\nPermission : Team member file access.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PollArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Status of Archive Team Folder Request"
      }
    }, 
    "/team/team_folder/create": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TeamFolderCreateError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamFolderMetadata"
            }
          }
        }, 
        "operationId": "TeamTeamFolderCreate", 
        "description": "Creates a new, active, team folder with no members.\nPermission : Team member file access.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TeamFolderCreateArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Create a New Team Folder"
      }
    }, 
    "/team/team_folder/get_info": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "No Error"
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "items": {
                "$ref": "#/definitions/TeamFolderGetInfoItem"
              }, 
              "type": "array"
            }
          }
        }, 
        "operationId": "TeamTeamFolderGetInfo", 
        "description": "Retrieves metadata for team folders.\nPermission : Team member file access.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TeamFolderIdListArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Metadata For Team Folders"
      }
    }, 
    "/team/team_folder/list": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TeamFolderListError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamFolderListResult"
            }
          }
        }, 
        "operationId": "TeamTeamFolderList", 
        "description": "Lists all team folders.\nPermission : Team member file access.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TeamFolderListArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "List all Team Folders"
      }
    }, 
    "/team/team_folder/list/continue": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TeamFolderListContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamFolderListResult"
            }
          }
        }, 
        "operationId": "TeamTeamFolderListContinue", 
        "description": "Once a cursor has been retrieved from :route:`team_folder/list`, use this to paginate through all team folders.\nPermission : Team member file access.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TeamFolderListContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Paginate Through all Team Folders"
      }
    }, 
    "/team/team_folder/permanently_delete": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TeamFolderPermanentlyDeleteError"
            }
          }, 
          "200": {
            "description": "Success"
          }
        }, 
        "operationId": "TeamTeamFolderPermanentlyDelete", 
        "description": "Permanently deletes an archived team folder.\nPermission : Team member file access.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TeamFolderIdArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Permanently Delete an Archived Team Folder"
      }
    }, 
    "/team/team_folder/rename": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TeamFolderRenameError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamFolderMetadata"
            }
          }
        }, 
        "operationId": "TeamTeamFolderRename", 
        "description": "Changes an active team folder's name.\nPermission : Team member file access.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TeamFolderRenameArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Rename an Active Team Folder"
      }
    }, 
    "/team/team_folder/update_sync_settings": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TeamFolderUpdateSyncSettingsError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TeamFolderMetadata"
            }
          }
        }, 
        "operationId": "TeamTeamFolderUpdateSyncSettings", 
        "description": "Updates the sync settings on a team folder or its contents.  Use of this endpoint requires that the team has team selective sync enabled.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TeamFolderUpdateSyncSettingsArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Update Sync Settings on a Team Folder"
      }
    }, 
    "/team/token/get_authenticated_admin": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/TokenGetAuthenticatedAdminError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/TokenGetAuthenticatedAdminResult"
            }
          }
        }, 
        "operationId": "TeamTokenGetAuthenticatedAdmin", 
        "description": "Returns the member profile of the admin who generated the team access token used to make the call.", 
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get the Member Profile of the Admin"
      }
    },
    "/team_log/get_events": {
      "post": {
        "tags": ["Team Log"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GetTeamEventsError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GetTeamEventsResult"
            }
          }
        }, 
        "operationId": "TeamLogGetEvents", 
        "description": "Retrieves team events. If the result's GetTeamEventsResult.has_more field is true, call get_events/continue with the returned cursor to retrieve more entries. If end_time is not specified in your request, you may use the returned cursor to poll get_events/continue for new events.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetTeamEventsArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Get Team Events"
      }
    },
    "/team_log/get_events/continue": {
      "post": {
        "tags": ["Team Log"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/GetTeamEventsContinueError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GetTeamEventsResult"
            }
          }
        }, 
        "operationId": "TeamLogGetEventsContinue", 
        "description": "Once a cursor has been retrieved from :route:`get_events`, use this to paginate through all events.\nPermission : Team Auditing.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GetTeamEventsContinueArg"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "name":"Content-Type",
            "in":"header",
            "type":"string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Paginate Through All Events"
      }
    },
    "/team/reports/get_storage": {
      "post": {
        "tags": ["Team"],
        "responses": {
          "default": {
            "description": "Error", 
            "schema": {
              "$ref": "#/definitions/DateRangeError"
            }
          }, 
          "200": {
            "description": "Success", 
            "schema": {
              "$ref": "#/definitions/GetStorageReport"
            }
          }
        }, 
        "operationId": "TeamReportsGetStorage", 
        "description": "Deprecated - Retrieves reporting data about a team's storage usage.", 
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/DateRange"
            }, 
            "name": "body", 
            "in": "body"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ], 
        "summary": "Team - Reports - Get Storage"
      }
    }
  }, 
  "definitions": {
    "PreviewArg": {
      "type": "object", 
      "description": "path: The path of the file to preview.\nrev: Please specify revision in :field:`path` instead.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path of the file to preview."
        }
      }
    }, 
    "Metadata": {
      "type": "object", 
      "description": "Metadata for a file or folder.", 
      "properties": {
        "file": {
          "$ref": "#/definitions/FileMetadata"
        }, 
        "folder": {
          "$ref": "#/definitions/FolderMetadata"
        }, 
        "deleted": {
          "$ref": "#/definitions/DeletedMetadata"
        }
      }
    },
    "DeletedMetadata": {
      "type": "object",
      "description": "Indicates that there used to be a file or folder at this path, but it no longer exists.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The last component of the path (including extension). This never contains a slash."
        },
        "path_lower": {
          "type": "string",
          "description": "The lowercased full path in the user's Dropbox."
        },
        "path_display": {
          "type": "string",
          "description": "The cased path to be used for display purposes only."
        },
        "parent_shared_folder_id": {
          "type": "string"
        },
        "preview_url": {
          "type": "string",
          "description": "The preview URL of the file."
        }
      }
    },
    "ShareFolderArg": {
      "type": "object", 
      "description": "path: The path to the folder to share. If it does not exist, then a new one is created.\nacl_update_policy: Who can add and remove members of this shared folder.\nforce_async: Whether to force the share to happen asynchronously.\nmember_policy: Who can be a member of this shared folder. Only applicable if the current user is on a team.\nshared_link_policy: The policy to apply to shared links created for content inside this shared folder.  The current user must be on a team to set this policy to :field:`SharedLinkPolicy.members`.\nviewer_info_policy: Who can enable/disable viewer info for this shared folder.\nactions: A list of `FolderAction`s corresponding to `FolderPermission`s that should appear in the  response's :field:`SharedFolderMetadata.permissions` field describing the actions the  authenticated user can perform on the folder.\nlink_settings: Settings on the link for this folder.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path to the folder to share. If it does not exist, then a new one is created."
        }, 
        "acl_update_policy": {
          "$ref": "#/definitions/AclUpdatePolicy"
        },
        "force_async": {
          "type": "boolean", 
          "description": "Whether to force the share to happen asynchronously."
        }, 
        "member_policy": {
          "$ref": "#/definitions/MemberPolicy"
        },
        "shared_link_policy": {
          "$ref": "#/definitions/SharedLinkPolicy"
        }, 
        "viewer_info_policy": {
          "$ref": "#/definitions/ViewerInfoPolicy"
        }, 
        "access_inheritance": {
          "$ref": "#/definitions/AccessInheritance"
        },  
        "actions": {
          "items": {
            "$ref": "#/definitions/FolderAction"
          }, 
          "type": "array", 
          "description": "A list of `FolderAction`s corresponding to `FolderPermission`s that should appear in the  response's :field:`SharedFolderMetadata.permissions` field describing the actions the  authenticated user can perform on the folder."
        }, 
        "link_settings": {
          "$ref": "#/definitions/LinkSettings"
        }
      }
    }, 
    "UpdateFolderPolicyArg": {
      "type": "object", 
      "description": "If any of the policies are unset, then they retain their current setting.\nshared_folder_id: The ID for the shared folder.\nmember_policy: Who can be a member of this shared folder. Only applicable if the current user is on a team.\nacl_update_policy: Who can add and remove members of this shared folder.\nviewer_info_policy: Who can enable/disable viewer info for this shared folder.\nshared_link_policy: The policy to apply to shared links created for content inside this shared folder. The current user must be on a team to set this policy to :field:`SharedLinkPolicy.members`.\nlink_settings: Settings on the link for this folder.\nactions: A list of `FolderAction`s corresponding to `FolderPermission`s that should appear in the  response's :field:`SharedFolderMetadata.permissions` field describing the actions the  authenticated user can perform on the folder.\n", 
      "properties": {
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID for the shared folder."
        },
        "member_policy": {
          "$ref": "#/definitions/MemberPolicy"
        },
        "acl_update_policy": {
          "$ref": "#/definitions/AclUpdatePolicy"
        },
        "viewer_info_policy": {
          "$ref": "#/definitions/ViewerInfoPolicy"
        },  
        "shared_link_policy": {
          "$ref": "#/definitions/SharedLinkPolicy"
        }, 
        "link_settings": {
          "$ref": "#/definitions/LinkSettings"
        },
        "actions": {
          "items": {
            "$ref": "#/definitions/FolderAction"
          }, 
          "type": "array", 
          "description": "A list of `FolderAction`s corresponding to `FolderPermission`s that should appear in the  response's :field:`SharedFolderMetadata.permissions` field describing the actions the  authenticated user can perform on the folder."
        }
      }
    }, 
    "LogicalOperator": { 
      "description": "Logical operator to join search queries together.\nor_operator: Append a query with an \"or\" operator.", 
      "enum": [
            "or_operator"
          ], 
      "type": "string", 
      "title": "LogicalOperator"
    }, 
    "PropertyFieldTemplate": {
      "type": "object", 
      "description": "Defines how a single property field may be structured. Used exclusively by :type:`PropertyGroupTemplate`.\nname: Key of the property field being described. Property field keys can be up to 256 bytes.\ndescription: Description of the property field. Property field descriptions can be up to 1024 bytes.\ntype: Data type of the value of this property field. This type will be enforced upon property creation and modifications.\n", 
      "properties": {
        "type": {
          "$ref": "#/definitions/PropertyType"
        }, 
        "name": {
          "type": "string", 
          "description": "Key of the property field being described. Property field keys can be up to 256 bytes."
        }, 
        "description": {
          "type": "string", 
          "description": "Description of the property field. Property field descriptions can be up to 1024 bytes."
        }
      }
    }, 
    "ModifySharedLinkSettingsArgs": {
      "type": "object", 
      "description": "url: URL of the shared link to change its settings.\nsettings: Set of settings for the shared link.\nremove_expiration: If set to true, removes the expiration of the shared link.\n", 
      "properties": {
        "url": {
          "type": "string", 
          "description": "URL of the shared link to change its settings."
        }, 
        "remove_expiration": {
          "type": "boolean", 
          "description": "If set to true, removes the expiration of the shared link."
        }, 
        "settings": {
          "$ref": "#/definitions/SharedLinkSettings"
        }
      }
    }, 
    "SharedLinkError": {
      "type": "object", 
      "description": "shared_link_not_found: The shared link wasn't found.\nshared_link_access_denied: The caller is not allowed to access this shared link.\nunsupported_link_type: This type of link is not supported.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "shared_link_not_found", 
            "shared_link_access_denied", 
            "unsupported_link_type", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharedLinkError"
        }
      }
    }, 
    "UpdateTemplateArg": {
      "type": "object", 
      "description": "template_id: An identifier for template added by  See :route:`templates/add_for_user` or :route:`templates/add_for_team`.\nname: A display name for the template. template names can be up to 256 bytes.\ndescription: Description for the new template. Template descriptions can be up to 1024 bytes.\nadd_fields: Property field templates to be added to the group template. There can be up to 32 properties in a single template.\n", 
      "properties": {
        "add_fields": {
          "items": {
            "$ref": "#/definitions/PropertyFieldTemplate"
          }, 
          "type": "array", 
          "description": "Property field templates to be added to the group template. There can be up to 32 properties in a single template."
        }, 
        "description": {
          "type": "string", 
          "description": "Description for the new template. Template descriptions can be up to 1024 bytes."
        }, 
        "template_id": {
          "type": "string", 
          "description": "An identifier for template added by  See :route:`templates/add_for_user` or :route:`templates/add_for_team`."
        }, 
        "name": {
          "type": "string", 
          "description": "A display name for the template. template names can be up to 256 bytes."
        }
      }
    }, 
    "UploadSessionStartResult": {
      "type": "object", 
      "description": "session_id: A unique identifier for the upload session. Pass this to :route:`upload_session/append_v2` and :route:`upload_session/finish`.\n", 
      "properties": {
        "session_id": {
          "type": "string", 
          "description": "A unique identifier for the upload session. Pass this to :route:`upload_session/append_v2` and :route:`upload_session/finish`."
        }
      }
    },
    "UploadSessionStartBatchResult": {
      "type": "object", 
      "description": "session_ids: List of unique identifiers for the upload session. Pass each session_id to upload_session/append:2 and upload_session/finish.", 
      "properties": {
        "session_ids": {
          "type": "array", 
          "description": "A List of unique identifiers for the upload session. Pass each session_id to upload_session/append:2 and upload_session/finish.",
          "items": {
            "type":"string"
          }
        }
      }
    },  
    "CreateFolderBatchError": {
      "type": "object", 
      "description": "too_many_files: The operation would involve too many files or folders.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "too_many_files", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of CreateFolderBatchError"
        }
      }
    }, 
    "DeleteBatchResultData": {
      "type": "object", 
      "description": "metadata: Metadata of the deleted object.\n", 
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    }, 
    "FoldersContainingPaperDoc": {
      "type": "object", 
      "description": "Metadata about Paper folders containing the specififed Paper doc.\nfolder_sharing_policy_type: The sharing policy of the folder containing the Paper doc.\nfolders: The folder path. If present the first folder is the root folder.\n", 
      "properties": {
        "folders": {
          "items": {
            "$ref": "#/definitions/Folder"
          }, 
          "type": "array", 
          "description": "The folder path. If present the first folder is the root folder."
        }, 
        "folder_sharing_policy_type": {
          "$ref": "#/definitions/FolderSharingPolicyType"
        }
      }
    }, 
    "GetAccountBatchError": {
      "type": "object", 
      "description": "no_account: The value is an account ID specified in :field:`GetAccountBatchArg.account_ids` that does not exist.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "no_account", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GetAccountBatchError"
        }, 
        "no_account": {
          "type": "string", 
          "description": "The value is an account ID specified in :field:`GetAccountBatchArg.account_ids` that does not exist."
        }
      }
    }, 
    "BasicAccount": {
      "type": "object", 
      "description": "Basic information about any account.\naccount_id: The user's unique Dropbox ID.\nname: Details of a user's name.\nemail: The user's e-mail address. Do not rely on this without checking the :field:`email_verified` field. Even then, it's possible that the user has since lost access to their e-mail.\nemail_verified: Whether the user has verified their e-mail address.\ndisabled: Whether the user has been disabled.\nis_teammate: Whether this user is a teammate of the current user. If this account is the current user's account, then this will be :val:`true`.\nprofile_photo_url: URL for the photo representing the user, if one is set.\nteam_member_id: The user's unique team member id. This field will only be present if the user is part of a team and :field:`is_teammate` is :val:`true`.\n", 
      "properties": {
        "account_id": {
          "type": "string", 
          "description": "The user's unique Dropbox ID."
        }, 
        "is_teammate": {
          "type": "boolean", 
          "description": "Whether this user is a teammate of the current user. If this account is the current user's account, then this will be :val:`true`."
        }, 
        "email_verified": {
          "type": "boolean", 
          "description": "Whether the user has verified their e-mail address."
        }, 
        "team_member_id": {
          "type": "string", 
          "description": "The user's unique team member id. This field will only be present if the user is part of a team and :field:`is_teammate` is :val:`true`."
        }, 
        "disabled": {
          "type": "boolean", 
          "description": "Whether the user has been disabled."
        }, 
        "email": {
          "type": "string", 
          "description": "The user's e-mail address. Do not rely on this without checking the :field:`email_verified` field. Even then, it's possible that the user has since lost access to their e-mail."
        }, 
        "profile_photo_url": {
          "type": "string", 
          "description": "URL for the photo representing the user, if one is set."
        }, 
        "name": {
          "$ref": "#/definitions/Name"
        }
      }
    }, 
    "DeleteBatchResult": {
      "type": "object", 
      "description": "entries: None\n", 
      "properties": {
        "entries": {
          "items": {
            "$ref": "#/definitions/DeleteBatchResultEntry"
          }, 
          "type": "array"
        }
      }
    }, 
    "FolderPermission": {
      "type": "object", 
      "description": "Whether the user is allowed to take the action on the shared folder.\naction: The action that the user may wish to take on the folder.\nallow: True if the user is allowed to take the action.\nreason: The reason why the user is denied the permission. Not present if the action is allowed, or if no reason is available.\n", 
      "properties": {
        "action": {
          "$ref": "#/definitions/FolderAction"
        }, 
        "reason": {
          "$ref": "#/definitions/PermissionDeniedReason"
        }, 
        "allow": {
          "type": "boolean", 
          "description": "True if the user is allowed to take the action."
        }
      }
    }, 
    "UploadSessionFinishBatchResultEntry": {
      "type": "object", 
      "description": "success: None\nfailure: None\n", 
      "properties": {
        "failure": {
          "$ref": "#/definitions/UploadSessionFinishError"
        }, 
        ".tag": {
          "enum": [
            "success", 
            "failure"
          ], 
          "type": "string", 
          "title": "Choice of UploadSessionFinishBatchResultEntry"
        }, 
        "success": {
          "$ref": "#/definitions/FileMetadata"
        }
      }
    }, 
    "ExpectedSharedContentLinkMetadata": {
      "type": "object", 
      "description": "The expected metadata of a shared link for a file or folder when a link is first created for the content. Absent if the link already exists.\naudience_options: The audience options that are available for the content. Some audience options may be unavailable. For example, team_only may be unavailable if the content is not owned by a user on a team. The 'default' audience option is always available if the user can modify link settings.\ncurrent_audience: The current audience of the link.\nlink_permissions: A list of permissions for actions you can perform on the link.\npassword_protected: Whether the link is protected by a password.\naccess_level: The access level on the link for this file.\naudience_restricting_shared_folder: The shared folder that prevents the link audience for this link from being more restrictive.\nexpiry: Whether the link has an expiry set on it. A link with an expiry will have its  audience changed to members when the expiry is reached.\n", 
      "properties": {
        "current_audience": {
          "$ref": "#/definitions/LinkAudience"
        }, 
        "password_protected": {
          "type": "boolean", 
          "description": "Whether the link is protected by a password."
        }, 
        "expiry": {
          "type": "string", 
          "description": "Whether the link has an expiry set on it. A link with an expiry will have its  audience changed to members when the expiry is reached."
        }, 
        "access_level": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "audience_restricting_shared_folder": {
          "$ref": "#/definitions/AudienceRestrictingSharedFolder"
        }, 
        "link_permissions": {
          "items": {
            "$ref": "#/definitions/LinkPermission"
          }, 
          "type": "array", 
          "description": "A list of permissions for actions you can perform on the link."
        }, 
        "audience_options": {
          "items": {
            "$ref": "#/definitions/LinkAudience"
          }, 
          "type": "array", 
          "description": "The audience options that are available for the content. Some audience options may be unavailable. For example, team_only may be unavailable if the content is not owned by a user on a team. The 'default' audience option is always available if the user can modify link settings."
        }
      }
    }, 
    "UploadSessionAppendArg": {
      "type": "object", 
      "description": "cursor: Contains the upload session ID and the offset.\nclose: If true, the current session will be closed, at which point you won't be able to call :route:`upload_session/append_v2` anymore with the current session.\n", 
      "properties": {
        "cursor": {
          "$ref": "#/definitions/UploadSessionCursor"
        },
        "close": {
          "type": "boolean", 
          "description": "If true, the current session will be closed, at which point you won't be able to call :route:`upload_session/append_v2` anymore with the current session."
        },
        "content_hash": {
          "type": "string", 
          "description": "A hash of the file content uploaded in this call. If provided and the uploaded content does not match this hash, an error will be returned."
        }
      }
    }, 
    "ListUsersOnFolderArgs": {
      "type": "object", 
      "description": "doc_id: The Paper doc ID.\nlimit: Size limit per batch. The maximum number of users that can be retrieved per batch is 1000. Higher value results in invalid arguments error.\n", 
      "properties": {
        "limit": {
          "type": "number", 
          "description": "Size limit per batch. The maximum number of users that can be retrieved per batch is 1000. Higher value results in invalid arguments error."
        }, 
        "doc_id": {
          "type": "string", 
          "description": "The Paper doc ID."
        }
      }
    }, 
    "ListFileRequestsError": {
      "type": "object", 
      "description": "There was an error retrieving the file requests.\ndisabled_for_team: This user's Dropbox Business team doesn't allow file requests.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled_for_team", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListFileRequestsError"
        }
      }
    }, 
    "LaunchResultBase": {
      "type": "object", 
      "description": "Result returned by methods that launch an asynchronous job.\nA method who may either launch an asynchronous job, or complete the request synchronously, can use this union by extending it, and adding a 'complete' field with the type of the synchronous response.\nSee :type:`LaunchEmptyResult` for an example.\nasync_job_id: This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "async_job_id"
          ], 
          "type": "string", 
          "title": "Choice of LaunchResultBase"
        }, 
        "async_job_id": {
          "type": "string", 
          "description": "This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job."
        }
      }
    }, 
    "GetAccountBatchArg": {
      "type": "object", 
      "description": "account_ids: List of user account identifiers.  Should not contain any duplicate account IDs.\n", 
      "properties": {
        "account_ids": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "List of user account identifiers.  Should not contain any duplicate account IDs."
        }
      }
    }, 
    "LookUpPropertiesError": {
      "type": "object", 
      "description": "property_group_not_found: No property group was found.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "property_group_not_found", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of LookUpPropertiesError"
        }
      }
    }, 
    "RemovePaperDocUser": {
      "type": "object", 
      "description": "doc_id: The Paper doc ID.\nmember: User which should be removed from the Paper doc. Specify only email address or Dropbox account ID.\n", 
      "properties": {
        "member": {
          "$ref": "#/definitions/MemberSelector"
        }, 
        "doc_id": {
          "type": "string", 
          "description": "The Paper doc ID."
        }
      }
    }, 
    "MountFolderArg": {
      "type": "object", 
      "description": "shared_folder_id: The ID of the shared folder to mount.\n", 
      "properties": {
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID of the shared folder to mount."
        }
      }
    }, 
    "ListFoldersResult": {
      "type": "object", 
      "description": "Result for :route:`list_folders` or :route:`list_mountable_folders`, depending on which endpoint was requested.\nUnmounted shared folders can be identified by the absence of :field:`SharedFolderMetadata.path_lower`.\nentries: List of all shared folders the authenticated user has access to.\ncursor: Present if there are additional shared folders that have not been returned yet. Pass the cursor into the corresponding continue endpoint (either :route:`list_folders/continue` or :route:`list_mountable_folders/continue`) to list additional folders.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Present if there are additional shared folders that have not been returned yet. Pass the cursor into the corresponding continue endpoint (either :route:`list_folders/continue` or :route:`list_mountable_folders/continue`) to list additional folders."
        }, 
        "entries": {
          "items": {
            "$ref": "#/definitions/SharedFolderMetadata"
          }, 
          "type": "array", 
          "description": "List of all shared folders the authenticated user has access to."
        }
      }
    }, 
    "PaperDocPermissionLevel": {
      "description": "The access level to grant member to the shared folder. AccessLevel.owner is disallowed. The default for this union is viewer.", 
      "enum": [
            "owner",
            "editor",
            "viewer",
            "viewer_no_comment", 
            "traverse"
          ], 
      "type": "string", 
      "title": "Choice of Access Level"
    }, 
    "UnmountFolderArg": {
      "type": "object", 
      "description": "shared_folder_id: The ID for the shared folder.\n", 
      "properties": {
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID for the shared folder."
        }
      }
    }, 
    "GetSharedLinkMetadataArg": {
      "type": "object", 
      "description": "url: URL of the shared link.\npath: If the shared link is to a folder, this parameter can be used to retrieve the metadata for a specific file or sub-folder in this folder. A relative path should be used.\nlink_password: If the shared link has a password, this parameter can be used.\n", 
      "properties": {
        "url": {
          "type": "string", 
          "description": "URL of the shared link."
        }, 
        "path": {
          "type": "string", 
          "description": "If the shared link is to a folder, this parameter can be used to retrieve the metadata for a specific file or sub-folder in this folder. A relative path should be used."
        }, 
        "link_password": {
          "type": "string", 
          "description": "If the shared link has a password, this parameter can be used."
        }
      }
    }, 
    "MemberSpaceLimitType": {
      "type": "object", 
      "description": "The type of the space limit imposed on a team member.\noff: The team member does not have imposed space limit.\nalert_only: The team member has soft imposed space limit - the limit is used for display and for notifications.\nstop_sync: The team member has hard imposed space limit - Dropbox file sync will stop after the limit is reached.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "off", 
            "alert_only", 
            "stop_sync", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MemberSpaceLimitType"
        }
      }
    }, 
    "OverwritePropertyGroupArg": {
      "type": "object", 
      "description": "path: A unique identifier for the file or folder.\nproperty_groups: The property groups \"snapshot\" updates to force apply.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "A unique identifier for the file or folder."
        }, 
        "property_groups": {
          "items": {
            "$ref": "#/definitions/PropertyGroup"
          }, 
          "type": "array", 
          "description": "The property groups \"snapshot\" updates to force apply."
        }
      }
    }, 
    "RemoveFileMemberArg": {
      "type": "object", 
      "description": "Arguments for :route:`remove_file_member_2`.\nfile: File from which to remove members.\nmember: Member to remove from this file. Note that even if an email is specified, it may result in the removal of a user (not an invitee) if the user's main account corresponds to that email address.\n", 
      "properties": {
        "member": {
          "$ref": "#/definitions/MemberSelector"
        }, 
        "file": {
          "type": "string", 
          "description": "File from which to remove members."
        }
      }
    }, 
    "CreateFolderEntryResult": {
      "type": "object", 
      "description": "metadata: Metadata of the created folder.\n", 
      "properties": {
        "metadata": {
          "$ref": "#/definitions/FolderMetadata"
        }
      }
    }, 
    "DeleteResult": {
      "type": "object", 
      "description": "metadata: Metadata of the deleted object.\n", 
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    }, 
    "TransferFolderError": {
      "type": "object", 
      "description": "access_error: None\ninvalid_dropbox_id: :field:`TransferFolderArg.to_dropbox_id` is invalid.\nnew_owner_not_a_member: The new designated owner is not currently a member of the shared folder.\nnew_owner_unmounted: The new designated owner has not added the folder to their Dropbox.\nnew_owner_email_unverified: The new designated owner's e-mail address is unverified.\nteam_folder: This action cannot be performed on a team shared folder.\nno_permission: The current user does not have permission to perform this action.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharedFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "invalid_dropbox_id", 
            "new_owner_not_a_member", 
            "new_owner_unmounted", 
            "new_owner_email_unverified", 
            "team_folder", 
            "no_permission", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TransferFolderError"
        }
      }
    }, 
    "GetFileRequestArgs": {
      "type": "object", 
      "description": "Arguments for :route:`get`.\nid: The ID of the file request to retrieve.\n", 
      "properties": {
        "id": {
          "type": "string", 
          "description": "The ID of the file request to retrieve."
        }
      }
    }, 
    "ListFileMembersCountResult": {
      "type": "object", 
      "description": "members: A list of members on this file.\nmember_count: The number of members on this file. This does not include inherited members.\n", 
      "properties": {
        "member_count": {
          "type": "number", 
          "description": "The number of members on this file. This does not include inherited members."
        }, 
        "members": {
          "$ref": "#/definitions/SharedFileMembers"
        }
      }
    }, 
    "ThumbnailError": {
      "type": "object", 
      "description": "path: An error occurs when downloading metadata for the image.\nunsupported_extension: The file extension doesn't allow conversion to a thumbnail.\nunsupported_image: The image cannot be converted to a thumbnail.\nconversion_error: An error occurs during thumbnail conversion.\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "unsupported_extension", 
            "unsupported_image", 
            "conversion_error"
          ], 
          "type": "string", 
          "title": "Choice of ThumbnailError"
        }
      }
    }, 
    "FileExportArg": {
      "type": "object", 
      "description": "path: The path of the folder to download.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path of the file to be exported."
        },
        "export_format": {
          "type": "string", 
          "description": "The file format to which the file should be exported.\nThis must be one of the formats listed in the file's export_options returned by get_metadata.\nIf none is specified, the default format (specified in export_as in file metadata) will be used. This field is optional."
        }
      }
    },
    "FileLockBatchArg": {
      "type": "object", 
      "description": "List of 'entries'. Each 'entry' contains a path of the file which will be locked or queried. Duplicate path arguments in the batch are considered only once.\n", 
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "properties": {
            "path": {
            "type": "string",
            "description": "Path in the user's Dropbox to a file."
          }
        }
      }
    }
  }
},
    "DownloadZipArg": {
      "type": "object", 
      "description": "path: The path of the folder to download.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path of the folder to download."
        }
      }
    }, 
    "SharedFolderMembers": {
      "type": "object", 
      "description": "Shared folder user and group membership.\nusers: The list of user members of the shared folder.\ngroups: The list of group members of the shared folder.\ninvitees: The list of invitees to the shared folder.\ncursor: Present if there are additional shared folder members that have not been returned yet. Pass the cursor into :route:`list_folder_members/continue` to list additional members.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Present if there are additional shared folder members that have not been returned yet. Pass the cursor into :route:`list_folder_members/continue` to list additional members."
        }, 
        "users": {
          "items": {
            "$ref": "#/definitions/UserMembershipInfo"
          }, 
          "type": "array", 
          "description": "The list of user members of the shared folder."
        }, 
        "groups": {
          "items": {
            "$ref": "#/definitions/GroupMembershipInfo"
          }, 
          "type": "array", 
          "description": "The list of group members of the shared folder."
        }, 
        "invitees": {
          "items": {
            "$ref": "#/definitions/InviteeMembershipInfo"
          }, 
          "type": "array", 
          "description": "The list of invitees to the shared folder."
        }
      }
    },
    "FileExportError": {
      "type": "object", 
      "description": "path: None\nnon_exportable: This file type cannot be exported.\ninvalid_export_format: The specified export format is not a valid option for this file type.\nretry_error: The exportable content is not yet available. Please retry later.\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "non_exportable", 
            "invalid_export_format", 
            "retry_error"
          ], 
          "type": "string", 
          "title": "Choice of FileExportError"
        }
      }
    },
    "FileLockBatchError": {
      "type": "object", 
      "description": "", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        },
        ".tag": {
          "enum": [
            "path", 
            "too_many_write_operations", 
            "too_many_files", 
            "no_write_permission",
            "cannot_be_locked",
            "file_not_shared",
            "internal_error",
            "lock_conflict"
          ], 
          "type": "string", 
          "title": "Choice of FileExportError"
        }
      }
    },

    
    "DownloadZipError": {
      "type": "object", 
      "description": "path: None\ntoo_large: The folder is too large to download.\ntoo_many_files: The folder has too many files to download.\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "too_large", 
            "too_many_files", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of DownloadZipError"
        }
      }
    }, 
    "SharedLinkSettings": {
      "type": "object", 
      "description": "requested_visibility: The requested access for this shared link.\nlink_password: If :field:`requested_visibility` is :field:`RequestedVisibility.password` this is needed to specify the password to access the link.\nexpires: Expiration time of the shared link. By default the link won't expire.\n", 
      "properties": {
        "require_password": {
          "type": "boolean", 
          "description": "Boolean flag to enable or disable password protection. This field is optional."
        },
        "allow_download": {
          "type": "boolean", 
          "description": "Boolean flag to allow or not download capabilities for shared links. This field is optional."
        },
        "link_password": {
          "type": "string", 
          "description": "If :field:`requested_visibility` is :field:`RequestedVisibility.password` this is needed to specify the password to access the link."
        }, 
        "expires": {
          "type": "string", 
          "description": "Expiration time of the shared link. By default the link won't expire."
        },
        "audience": {
          "type": "string",
          "description": "The new audience who can benefit from the access level specified by the link's access level specified in the `link_access_level` field of `LinkPermissions`.",
          "enum": [
            "public",
            "team",
            "no_one"
          ]
        },
        "access": {
          "type": "string",
          "description": "Requested access level you want the audience to gain from this link. Note, modifying access level for an existing link is not supported.",
          "enum": [
            "viewer",
            "editor",
            "max",
            "default"
          ]
        }
      }
    }, 
    "RevokeSharedLinkArg": {
      "type": "object", 
      "description": "url: URL of the shared link.\n", 
      "properties": {
        "url": {
          "type": "string", 
          "description": "URL of the shared link."
        }
      }
    }, 
    "GetMetadataError": {
      "type": "object", 
      "description": "path: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path"
          ], 
          "type": "string", 
          "title": "Choice of GetMetadataError"
        }
      }
    }, 
    "SharingPublicPolicyType": {
      "type": "object", 
      "description": "people_with_link_can_edit: Users who have a link to this doc can edit it.\npeople_with_link_can_view_and_comment: Users who have a link to this doc can view and comment on it.\ninvite_only: Users must be explicitly invited to this doc.\ndisabled: Value used to indicate that doc sharing is enabled only within team.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "people_with_link_can_edit", 
            "people_with_link_can_view_and_comment", 
            "invite_only", 
            "disabled"
          ], 
          "type": "string", 
          "title": "Choice of SharingPublicPolicyType"
        }
      }
    }, 
    "UpdateFileRequestDeadline": {
      "type": "object", 
      "description": "no_update: Do not change the file request's deadline.\nupdate: If :val:`null`, the file request's deadline is cleared.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "no_update", 
            "update", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of UpdateFileRequestDeadline"
        }, 
        "update": {
          "$ref": "#/definitions/FileRequestDeadline"
        }
      }
    }, 
    "UpdatePropertiesError": {
      "type": "object", 
      "description": "template_not_found: Template does not exist for the given identifier.\nrestricted_content: You do not have permission to modify this template.\nother: None\npath: None\nunsupported_folder: This folder cannot be tagged. Tagging folders is not supported for team-owned templates.\nproperty_field_too_large: One or more of the supplied property field values is too large.\ndoes_not_fit_template: One or more of the supplied property fields does not conform to the template specifications.\nproperty_group_lookup: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "template_not_found", 
            "restricted_content", 
            "other", 
            "path", 
            "unsupported_folder", 
            "property_field_too_large", 
            "does_not_fit_template", 
            "property_group_lookup"
          ], 
          "type": "string", 
          "title": "Choice of UpdatePropertiesError"
        }, 
        "property_group_lookup": {
          "$ref": "#/definitions/LookUpPropertiesError"
        }, 
        "template_not_found": {
          "type": "string", 
          "description": "Template does not exist for the given identifier."
        }
      }
    }, 
    "RemovePropertiesArg": {
      "type": "object", 
      "description": "path: A unique identifier for the file or folder.\nproperty_template_ids: A list of identifiers for a template created by :route:`templates/add_for_user` or :route:`templates/add_for_team`.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "A unique identifier for the file or folder."
        }, 
        "property_template_ids": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "A list of identifiers for a template created by :route:`templates/add_for_user` or :route:`templates/add_for_team`."
        }
      }
    },
    "ListFileRequestArgs": {
      "type": "object", 
      "description": "limit: The maximum number of file requests that should be returned per request. The default for this field is 1000.", 
      "properties": {
        "limit": {
          "type": "integer", 
          "description": "The maximum number of file requests that should be returned per request. The default for this field is 1000."
        }
      }
    },
    "ListFileRequestContinueArgs": {
      "type": "object", 
      "description": "limit: The maximum number of file requests that should be returned per request. The default for this field is 1000.", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "The cursor returned by the previous API call specified in the endpoint description."
        }
      }
    },
    "UpdateFolderMemberArg": {
      "type": "object", 
      "description": "shared_folder_id: The ID for the shared folder.\nmember: The member of the shared folder to update.  Only the :field:`MemberSelector.dropbox_id` may be set at this time.\naccess_level: The new access level for :field:`member`. :field:`AccessLevel.owner` is disallowed.\n", 
      "properties": {
        "member": {
          "$ref": "#/definitions/MemberSelector"
        }, 
        "access_level": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID for the shared folder."
        }
      }
    }, 
    "CreateSharedLinkWithSettingsError": {
      "type": "object", 
      "description": "path: None\nemail_not_verified: User's email should be verified.\nshared_link_already_exists: The shared link already exists. You can call :route:`list_shared_links` to get the existing link.\nsettings_error: There is an error with the given settings.\naccess_denied: Access to the requested path is forbidden.\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "email_not_verified", 
            "shared_link_already_exists", 
            "settings_error", 
            "access_denied"
          ], 
          "type": "string", 
          "title": "Choice of CreateSharedLinkWithSettingsError"
        }, 
        "settings_error": {
          "$ref": "#/definitions/SharedLinkSettingsError"
        }
      }
    }, 
    "SearchMode": {
      "type": "object", 
      "description": "filename: Search file and folder names.\nfilename_and_content: Search file and folder names as well as file contents.\ndeleted_filename: Search for deleted file and folder names.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "filename", 
            "filename_and_content", 
            "deleted_filename"
          ], 
          "type": "string", 
          "title": "Choice of SearchMode"
        }
      }
    }, 
    "SharedFileMetadata": {
      "type": "object", 
      "description": "Properties of the shared file.\nid: The ID of the file.\nname: The name of this file.\npolicy: Policies governing this shared file.\npreview_url: URL for displaying a web preview of the shared file.\naccess_type: The current user's access level for this shared file.\nexpected_link_metadata: The expected metadata of the link associated for the file when it is first shared. Absent if the link already exists. This is for an unreleased feature so it may not be returned yet.\nlink_metadata: The metadata of the link associated for the file. This is for an unreleased feature so it may not be returned yet.\nowner_display_names: The display names of the users that own the file. If the file is part of a team folder, the display names of the team admins are also included. Absent if the owner display names cannot be fetched.\nowner_team: The team that owns the file. This field is not present if the file is not owned by a team.\nparent_shared_folder_id: The ID of the parent shared folder. This field is present only if the file is contained within a shared folder.\npath_display: The cased path to be used for display purposes only. In rare instances the casing will not correctly match the user's filesystem, but this behavior will match the path provided in the Core API v1. Absent for unmounted files.\npath_lower: The lower-case full path of this file. Absent for unmounted files.\npermissions: The sharing permissions that requesting user has on this file. This corresponds to the entries given in :field:`GetFileMetadataBatchArg.actions` or :field:`GetFileMetadataArg.actions`.\ntime_invited: Timestamp indicating when the current user was invited to this shared file. If the user was not invited to the shared file, the timestamp will indicate when the user was invited to the parent shared folder. This value may be absent.\n", 
      "properties": {
        "id": {
          "type": "string", 
          "description": "The ID of the file."
        },
        "name": {
          "type": "string", 
          "description": "The name of this file."
        }, 
        "policy": {
          "$ref": "#/definitions/FolderPolicy"
        },
        "preview_url": {
          "type": "string", 
          "description": "URL for displaying a web preview of the shared file."
        },
        "access_type": {
          "$ref": "#/definitions/AccessLevel"
        },
        "expected_link_metadata": {
          "$ref": "#/definitions/ExpectedSharedContentLinkMetadata"
        },
        "link_metadata": {
          "$ref": "#/definitions/SharedContentLinkMetadata"
        },
        "owner_display_names": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "The display names of the users that own the file. If the file is part of a team folder, the display names of the team admins are also included. Absent if the owner display names cannot be fetched."
        },
        "owner_team": {
          "$ref": "#/definitions/Team"
        }, 
        "parent_shared_folder_id": {
          "type": "string", 
          "description": "The ID of the parent shared folder. This field is present only if the file is contained within a shared folder."
        },
        "path_display": {
          "type": "string", 
          "description": "The cased path to be used for display purposes only. In rare instances the casing will not correctly match the user's filesystem, but this behavior will match the path provided in the Core API v1. Absent for unmounted files."
        }, 
        "path_lower": {
          "type": "string", 
          "description": "The lower-case full path of this file. Absent for unmounted files."
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/FilePermission"
          }, 
          "type": "array", 
          "description": "The sharing permissions that requesting user has on this file. This corresponds to the entries given in :field:`GetFileMetadataBatchArg.actions` or :field:`GetFileMetadataArg.actions`."
        },
        "time_invited": {
          "type": "string", 
          "description": "Timestamp indicating when the current user was invited to this shared file. If the user was not invited to the shared file, the timestamp will indicate when the user was invited to the parent shared folder. This value may be absent."
        }
      }
    }, 
    "ThumbnailMode": {
      "description": "strict: Scale down the image to fit within the given size.\nbestfit: Scale down the image to fit within the given size or its transpose.\nfitone_bestfit: Scale down the image to completely cover the given size or its transpose.\n",
      "enum": [
            "strict", 
            "bestfit", 
            "fitone_bestfit"
          ], 
      "type": "string", 
      "title": "Choice of ThumbnailMode"
    }, 
    "AddFileMemberArgs": {
      "type": "object", 
      "description": "Arguments for :route:`add_file_member`.\nfile: File to which to add members.\nmembers: Members to add. Note that even an email address is given, this may result in a user being directy added to the membership if that email is the user's main account email.\ncustom_message: Message to send to added members in their invitation.\nquiet: Whether added members should be notified via device notifications of their invitation.\naccess_level: AccessLevel union object, describing what access level we want to give new members.\nadd_message_as_comment: If the custom message should be added as a comment on the file.\n", 
      "properties": {
        "members": {
          "items": {
            "$ref": "#/definitions/MemberSelector"
          }, 
          "type": "array", 
          "description": "Members to add. Note that even an email address is given, this may result in a user being directy added to the membership if that email is the user's main account email."
        }, 
        "quiet": {
          "type": "boolean", 
          "description": "Whether added members should be notified via device notifications of their invitation."
        }, 
        "add_message_as_comment": {
          "type": "boolean", 
          "description": "If the custom message should be added as a comment on the file."
        }, 
        "access_level": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "file": {
          "type": "string", 
          "description": "File to which to add members."
        }, 
        "custom_message": {
          "type": "string", 
          "description": "Message to send to added members in their invitation."
        }
      }
    }, 
    "ShareFolderJobStatus": {
      "type": "object", 
      "description": "in_progress: The asynchronous job is still in progress.\ncomplete: The share job has finished. The value is the metadata for the folder.\nfailed: None\n", 
      "properties": {
        "failed": {
          "$ref": "#/definitions/ShareFolderError"
        }, 
        ".tag": {
          "enum": [
            "in_progress", 
            "complete", 
            "failed"
          ], 
          "type": "string", 
          "title": "Choice of ShareFolderJobStatus"
        }, 
        "complete": {
          "$ref": "#/definitions/SharedFolderMetadata"
        }
      }
    }, 
    "RelocationPath": {
      "type": "object", 
      "description": "from_path: Path in the user's Dropbox to be copied or moved.\nto_path: Path in the user's Dropbox that is the destination.\n", 
      "properties": {
        "from_path": {
          "type": "string", 
          "description": "Path in the user's Dropbox to be copied or moved."
        }, 
        "to_path": {
          "type": "string", 
          "description": "Path in the user's Dropbox that is the destination."
        }
      }
    },
    "GroupCreationPolicy": {
      "type": "object", 
      "description": "", 
      "properties": {
        ".tag": {
          "type": "string"
        }
      }
    },  
    "SharedFolderJoinPolicy": {
      "type": "object", 
      "description": "Policy governing which shared folders a team member can join.\nfrom_team_only: Team members can only join folders shared by teammates.\nfrom_anyone: Team members can join any shared folder, including those shared by users outside the team.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "from_team_only", 
            "from_anyone", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharedFolderJoinPolicy"
        }
      }
    }, 
    "IndividualSpaceAllocation": {
      "type": "object", 
      "description": "allocated: The total space allocated to the user's account (bytes).\n", 
      "properties": {
        "allocated": {
          "type": "number", 
          "description": "The total space allocated to the user's account (bytes)."
        }
      }
    },
    "Lock": {
      "type": "object", 
      "description": "allocated: The total space allocated to the user's account (bytes).\n", 
      "properties": {
        "allocated": {
          "type": "number", 
          "description": "The total space allocated to the user's account (bytes)."
        }
      }
    },
    "LockFileBatchArg": {
      "type": "object", 
      "description": "List of 'entries'. Each 'entry' contains a path of the file which will be locked or queried.\nDuplicate path arguments in the batch are considered only once.\n", 
      "properties": {
        "entries": {
          "type": "array", 
          "description": "List of 'entries'. Each 'entry' contains a path of the file which will be locked or queried.\nDuplicate path arguments in the batch are considered only once.",
          "items": {
            "type": "object",
            "properties": {
              "path": {
              "type": "string",
              "description": "Path in the user's Dropbox to a file." 
            }
          }
          }
        }
      }
    },  
    "ListRevisionsArg": {
      "type": "object", 
      "description": "path: The path to the file you want to see the revisions of.\nmode: Determines the behavior of the API in listing the revisions for a given file path or id.\nlimit: The maximum number of revision entries returned.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path to the file you want to see the revisions of."
        }, 
        "limit": {
          "type": "integer", 
          "description": "The maximum number of revision entries returned."
        }, 
        "mode": {
          "$ref": "#/definitions/ListRevisionsMode"
        }
      }
    }, 
    "CommitInfoWithProperties": {
      "type": "object", 
      "description": "path: Path in the user's Dropbox to save the file.\nmode: Selects what to do if the file already exists.\nautorename: If there's a conflict, as determined by :field:`mode`, have the Dropbox server try to autorename the file to avoid conflict.\nclient_modified: The value to store as the :field:`client_modified` timestamp. Dropbox automatically records the time at which the file was written to the Dropbox servers. It can also record an additional timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of when the file was actually created or modified.\nmute: Normally, users are made aware of any file modifications in their Dropbox account via notifications in the client software. If :val:`true`, this tells the clients that this modification shouldn't result in a user notification.\nproperty_groups: List of custom properties to add to file.\n", 
      "properties": {
        "autorename": {
          "type": "boolean", 
          "description": "If there's a conflict, as determined by :field:`mode`, have the Dropbox server try to autorename the file to avoid conflict."
        }, 
        "mute": {
          "type": "boolean", 
          "description": "Normally, users are made aware of any file modifications in their Dropbox account via notifications in the client software. If :val:`true`, this tells the clients that this modification shouldn't result in a user notification."
        }, 
        "client_modified": {
          "type": "string", 
          "description": "The value to store as the :field:`client_modified` timestamp. Dropbox automatically records the time at which the file was written to the Dropbox servers. It can also record an additional timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of when the file was actually created or modified."
        }, 
        "mode": {
          "$ref": "#/definitions/WriteMode"
        }, 
        "path": {
          "type": "string", 
          "description": "Path in the user's Dropbox to save the file."
        }, 
        "property_groups": {
          "items": {
            "$ref": "#/definitions/PropertyGroup"
          }, 
          "type": "array", 
          "description": "List of custom properties to add to file."
        }
      }
    }, 
    "ListUsersOnPaperDocArgs": {
      "type": "object", 
      "description": "doc_id: The Paper doc ID.\nlimit: Size limit per batch. The maximum number of users that can be retrieved per batch is 1000. Higher value results in invalid arguments error.\nfilter_by: Specify this attribute if you want to obtain users that have already accessed the Paper doc.\n", 
      "properties": {
        "limit": {
          "type": "number", 
          "description": "Size limit per batch. The maximum number of users that can be retrieved per batch is 1000. Higher value results in invalid arguments error."
        }, 
        "doc_id": {
          "type": "string", 
          "description": "The Paper doc ID."
        }, 
        "filter_by": {
          "$ref": "#/definitions/UserOnPaperDocFilter"
        }
      }
    }, 
    "ListFilesArg": {
      "type": "object", 
      "description": "Arguments for :route:`list_received_files`.\nlimit: Number of files to return max per query. Defaults to 100 if no limit is specified.\nactions: A list of `FileAction`s corresponding to `FilePermission`s that should appear in the  response's :field:`SharedFileMetadata.permissions` field describing the actions the  authenticated user can perform on the file.\n", 
      "properties": {
        "limit": {
          "type": "integer", 
          "description": "Number of files to return max per query. Defaults to 100 if no limit is specified."
        }, 
        "actions": {
          "items": {
            "$ref": "#/definitions/FileAction"
          }, 
          "type": "array", 
          "description": "A list of `FileAction`s corresponding to `FilePermission`s that should appear in the  response's :field:`SharedFileMetadata.permissions` field describing the actions the  authenticated user can perform on the file."
        }
      }
    }, 
    "ListFoldersContinueArg": {
      "type": "object", 
      "description": "cursor: The cursor returned by the previous API call specified in the endpoint description.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "The cursor returned by the previous API call specified in the endpoint description."
        }
      }
    }, 
    "ListPaperDocsSortBy": {
      "type": "object", 
      "description": "accessed: Sorts the Paper docs by the time they were last accessed.\nmodified: Sorts the Paper docs by the time they were last modified.\ncreated: Sorts the Paper docs by the creation time.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "accessed", 
            "modified", 
            "created", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListPaperDocsSortBy"
        }
      }
    }, 
    "FolderPolicy": {
      "type": "object", 
      "description": "A set of policies governing membership and privileges for a shared folder.\nacl_update_policy: Who can add and remove members from this shared folder.\nshared_link_policy: Who links can be shared with.\nmember_policy: Who can be a member of this shared folder, as set on the folder itself. The effective policy may differ from this value if the team-wide policy is more restrictive. Present only if the folder is owned by a team.\nresolved_member_policy: Who can be a member of this shared folder, taking into account both the folder and the team-wide policy. This value may differ from that of member_policy if the team-wide policy is more restrictive than the folder policy. Present only if the folder is owned by a team.\nviewer_info_policy: Who can enable/disable viewer info for this shared folder.\n", 
      "properties": {
        "viewer_info_policy": {
          "$ref": "#/definitions/ViewerInfoPolicy"
        }, 
        "resolved_member_policy": {
          "$ref": "#/definitions/MemberPolicy"
        }, 
        "acl_update_policy": {
          "$ref": "#/definitions/AclUpdatePolicy"
        }, 
        "shared_link_policy": {
          "$ref": "#/definitions/SharedLinkPolicy"
        }, 
        "member_policy": {
          "$ref": "#/definitions/MemberPolicy"
        }
      }
    }, 
    "GetCopyReferenceArg": {
      "type": "object", 
      "description": "path: The path to the file or folder you want to get a copy reference to.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path to the file or folder you want to get a copy reference to."
        }
      }
    }, 
    "CreateFolderBatchArg": {
      "type": "object", 
      "description": "paths: List of paths to be created in the user's Dropbox. Duplicate path arguments in the batch are considered only once.\nautorename: If there's a conflict, have the Dropbox server try to autorename the folder to avoid the conflict.\nforce_async: Whether to force the create to happen asynchronously.\n", 
      "properties": {
        "paths": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "List of paths to be created in the user's Dropbox. Duplicate path arguments in the batch are considered only once."
        }, 
        "force_async": {
          "type": "boolean", 
          "description": "Whether to force the create to happen asynchronously."
        }, 
        "autorename": {
          "type": "boolean", 
          "description": "If there's a conflict, have the Dropbox server try to autorename the folder to avoid the conflict."
        }
      }
    }, 
    "SharedLinkSettingsError": {
      "type": "object", 
      "description": "invalid_settings: The given settings are invalid (for example, all attributes of the :type:`SharedLinkSettings` are empty, the requested visibility is :field:`RequestedVisibility.password` but the :field:`SharedLinkSettings.link_password` is missing, :field:`SharedLinkSettings.expires` is set to the past, etc.).\nnot_authorized: User is not allowed to modify the settings of this link. Note that basic users can only set :field:`RequestedVisibility.public` as the :field:`SharedLinkSettings.requested_visibility` and cannot set :field:`SharedLinkSettings.expires`.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_settings", 
            "not_authorized"
          ], 
          "type": "string", 
          "title": "Choice of SharedLinkSettingsError"
        }
      }
    },
    "MembersSetProfilePhotoArg": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        },
        "photo": {
          "$ref": "#/definitions/PhotoSourceArg"
        }
      }
    },
    "PhotoSourceArg": {
      "type": "object",
      "properties": {
        ".tag": {
          "type": "string",
          "enum": [
            "base64_data"
          ]
        },
        "base64_data": {
          "type": "string"
        }
      }
    },
    "TeamMemberInfoV2Result": {
      "type": "object",
      "properties": {
        "member_info": {
          "$ref": "#/definitions/TeamMemberInfoV2"
        }
      }
    },
    "TeamMemberInfoV2": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/TeamMemberProfile"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TeamMemberRole"
          }
        }
      }
    },
    "TeamMemberRole": {
      "type": "object",
      "properties": {
        "role_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "TeamMemberFullInfo": {
      "type": "object", 
      "description": "Information about a team member", 
      "properties": {
        "profile": {
          "$ref": "#/definitions/TeamMemberProfile"
        }, 
        "role": {
          "$ref": "#/definitions/AdminTier"
        }
      }
    }, 
    "TeamMemberInfo": {
      "type": "object", 
      "description": "Information about a team member.\nteam_info: Information about the member's team.\ndisplay_name: The display name of the user.\nmember_id: ID of user as a member of a team. This field will only be present if the member is in the same team as current user.\n", 
      "properties": {
        "member_id": {
          "type": "string", 
          "description": "ID of user as a member of a team. This field will only be present if the member is in the same team as current user."
        }, 
        "display_name": {
          "type": "string", 
          "description": "The display name of the user."
        }, 
        "team_info": {
          "$ref": "#/definitions/Team"
        }
      }
    }, 
    "SaveCopyReferenceError": {
      "type": "object", 
      "description": "path: None\ninvalid_copy_reference: The copy reference is invalid.\nno_permission: You don't have permission to save the given copy reference. Please make sure this app is same app which created the copy reference and the source user is still linked to the app.\nnot_found: The file referenced by the copy reference cannot be found.\ntoo_many_files: The operation would involve more than 10,000 files and folders.\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/WriteError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "invalid_copy_reference", 
            "no_permission", 
            "not_found", 
            "too_many_files", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SaveCopyReferenceError"
        }
      }
    }, 
    "ListFoldersArgs": {
      "type": "object", 
      "description": "limit: The maximum number of results to return per request.\nactions: A list of `FolderAction`s corresponding to `FolderPermission`s that should appear in the  response's :field:`SharedFolderMetadata.permissions` field describing the actions the  authenticated user can perform on the folder.\n", 
      "properties": {
        "limit": {
          "type": "integer", 
          "description": "The maximum number of results to return per request."
        }, 
        "actions": {
          "items": {
            "$ref": "#/definitions/FolderAction"
          }, 
          "type": "array", 
          "description": "A list of `FolderAction`s corresponding to `FolderPermission`s that should appear in the  response's :field:`SharedFolderMetadata.permissions` field describing the actions the  authenticated user can perform on the folder."
        }
      }
    }, 
    "FileMemberRemoveActionResult": {
      "type": "object", 
      "description": "success: Member was successfully removed from this file.\nmember_error: User was not able to remove this member.\nother: None\n", 
      "properties": {
        "member_error": {
          "$ref": "#/definitions/FileMemberActionError"
        }, 
        ".tag": {
          "enum": [
            "success", 
            "member_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of FileMemberRemoveActionResult"
        }, 
        "success": {
          "$ref": "#/definitions/MemberAccessLevelResult"
        }
      }
    }, 
    "SharedLinkPolicy": { 
      "description": "Who can view shared links in this folder.\nanyone: Links can be shared with anyone.\nteam: Links can be shared with anyone on the same team as the owner.\nmembers: Links can only be shared among members of the shared folder.\nother: None\n", 
      "enum": [
            "anyone", 
            "team", 
            "members"
          ], 
      "type": "string", 
      "title": "Choice of SharedLinkPolicy"
    }, 
    "ListFileMembersBatchResult": {
      "type": "object", 
      "description": "Per-file result for :route:`list_file_members/batch`.\nfile: This is the input file identifier, whether an ID or a path.\nresult: The result for this particular file.\n", 
      "properties": {
        "result": {
          "$ref": "#/definitions/ListFileMembersIndividualResult"
        }, 
        "file": {
          "type": "string", 
          "description": "This is the input file identifier, whether an ID or a path."
        }
      }
    }, 
    "AudienceExceptionContentInfo": {
      "type": "object", 
      "description": "Information about the content that has a link audience different than that of this folder.\nname: The name of the content, which is either a file or a folder.\n", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "The name of the content, which is either a file or a folder."
        }
      }
    }, 
    "ListUsersOnFolderResponse": {
      "type": "object", 
      "description": "invitees: List of email addresses that are invited on the Paper folder.\nusers: List of users that are invited on the Paper folder.\ncursor: Pass the cursor into :route:`docs/folder_users/list/continue` to paginate through all users. The cursor preserves all properties as specified in the original call to :route:`docs/folder_users/list`.\nhas_more: Will be set to True if a subsequent call with the provided cursor to :route:`docs/folder_users/list/continue` returns immediately with some results. If set to False please allow some delay before making another call to :route:`docs/folder_users/list/continue`.\n", 
      "properties": {
        "cursor": {
          "$ref": "#/definitions/Cursor"
        }, 
        "has_more": {
          "type": "boolean", 
          "description": "Will be set to True if a subsequent call with the provided cursor to :route:`docs/folder_users/list/continue` returns immediately with some results. If set to False please allow some delay before making another call to :route:`docs/folder_users/list/continue`."
        }, 
        "users": {
          "items": {
            "$ref": "#/definitions/UserInfo"
          }, 
          "type": "array", 
          "description": "List of users that are invited on the Paper folder."
        }, 
        "invitees": {
          "items": {
            "$ref": "#/definitions/InviteeInfo"
          }, 
          "type": "array", 
          "description": "List of email addresses that are invited on the Paper folder."
        }
      }
    }, 
    "MountFolderError": {
      "type": "object", 
      "description": "access_error: None\ninside_shared_folder: Mounting would cause a shared folder to be inside another, which is disallowed.\ninsufficient_quota: The current user does not have enough space to mount the shared folder.\nalready_mounted: The shared folder is already mounted.\nno_permission: The current user does not have permission to perform this action.\nnot_mountable: The shared folder is not mountable. One example where this can occur is when the shared folder belongs within a team folder in the user's Dropbox.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharedFolderAccessError"
        }, 
        "insufficient_quota": {
          "$ref": "#/definitions/InsufficientQuotaAmounts"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "inside_shared_folder", 
            "insufficient_quota", 
            "already_mounted", 
            "no_permission", 
            "not_mountable", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MountFolderError"
        }
      }
    }, 
    "GetSharedLinkFileError": {
      "type": "object", 
      "description": "shared_link_not_found: The shared link wasn't found.\nshared_link_access_denied: The caller is not allowed to access this shared link.\nunsupported_link_type: This type of link is not supported.\nother: None\nshared_link_is_directory: Directories cannot be retrieved by this endpoint.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "shared_link_not_found", 
            "shared_link_access_denied", 
            "unsupported_link_type", 
            "other", 
            "shared_link_is_directory"
          ], 
          "type": "string", 
          "title": "Choice of GetSharedLinkFileError"
        }
      }
    }, 
    "DownloadError": {
      "type": "object", 
      "description": "path: None\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of DownloadError"
        }
      }
    }, 
    "RefPaperDoc": {
      "type": "object", 
      "description": "doc_id: The Paper doc ID.\n", 
      "properties": {
        "doc_id": {
          "type": "string", 
          "description": "The Paper doc ID."
        }
      }
    }, 
    "CommitInfo": {
      "type": "object", 
      "description": "path: Path in the user's Dropbox to save the file.\nmode: Selects what to do if the file already exists.\nautorename: If there's a conflict, as determined by :field:`mode`, have the Dropbox server try to autorename the file to avoid conflict.\nclient_modified: The value to store as the :field:`client_modified` timestamp. Dropbox automatically records the time at which the file was written to the Dropbox servers. It can also record an additional timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of when the file was actually created or modified.\nmute: Normally, users are made aware of any file modifications in their Dropbox account via notifications in the client software. If :val:`true`, this tells the clients that this modification shouldn't result in a user notification.\nproperty_groups: List of custom properties to add to file.\n", 
      "properties": {
        "strict_conflict": {
          "type": "boolean", 
          "description": "Be more strict about how each WriteMode detects conflict."
        },
        "autorename": {
          "type": "boolean", 
          "description": "If there's a conflict, as determined by :field:`mode`, have the Dropbox server try to autorename the file to avoid conflict."
        }, 
        "mute": {
          "type": "boolean", 
          "description": "Normally, users are made aware of any file modifications in their Dropbox account via notifications in the client software. If :val:`true`, this tells the clients that this modification shouldn't result in a user notification."
        }, 
        "client_modified": {
          "type": "string", 
          "description": "The value to store as the :field:`client_modified` timestamp. Dropbox automatically records the time at which the file was written to the Dropbox servers. It can also record an additional timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of when the file was actually created or modified."
        },
        "mode": {
          "$ref": "#/definitions/WriteMode"
        }, 
        "path": {
          "type": "string", 
          "description": "Path in the user's Dropbox to save the file."
        }, 
        "property_groups": {
          "items": {
            "$ref": "#/definitions/PropertyGroup"
          }, 
          "type": "array", 
          "description": "List of custom properties to add to file."
        },
        "content_hash":{
          "type":"string"
        }
      }
    },
    "TempLinkCommitInfo": {
      "type": "object", 
      "description": "path: Path in the user's Dropbox to save the file.\nmode: Selects what to do if the file already exists.\nautorename: If there's a conflict, as determined by :field:`mode`, have the Dropbox server try to autorename the file to avoid conflict.\nclient_modified: The value to store as the :field:`client_modified` timestamp. Dropbox automatically records the time at which the file was written to the Dropbox servers. It can also record an additional timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of when the file was actually created or modified.\nmute: Normally, users are made aware of any file modifications in their Dropbox account via notifications in the client software. If :val:`true`, this tells the clients that this modification shouldn't result in a user notification.\nproperty_groups: List of custom properties to add to file.\n", 
      "properties": {
        "strict_conflict": {
          "type": "boolean", 
          "description": "Be more strict about how each WriteMode detects conflict."
        },
        "autorename": {
          "type": "boolean", 
          "description": "If there's a conflict, as determined by :field:`mode`, have the Dropbox server try to autorename the file to avoid conflict."
        }, 
        "mute": {
          "type": "boolean", 
          "description": "Normally, users are made aware of any file modifications in their Dropbox account via notifications in the client software. If :val:`true`, this tells the clients that this modification shouldn't result in a user notification."
        }, 
        "client_modified": {
          "type": "string", 
          "description": "The value to store as the :field:`client_modified` timestamp. Dropbox automatically records the time at which the file was written to the Dropbox servers. It can also record an additional timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of when the file was actually created or modified."
        }, 
        "mode": {
          "$ref": "#/definitions/WriteMode"
        }, 
        "path": {
          "type": "string", 
          "description": "Path in the user's Dropbox to save the file."
        }, 
        "property_groups": {
          "items": {
            "$ref": "#/definitions/PropertyGroup"
          }, 
          "type": "array", 
          "description": "List of custom properties to add to file."
        }
      }
    }, 
    "UserMembershipInfo": {
      "type": "object", 
      "description": "The information about a user member of the shared content.\naccess_type: The access type for this member.\nuser: The account information for the membership user.\npermissions: The permissions that requesting user has on this member. The set of permissions corresponds to the MemberActions in the request.\ninitials: Never set.\nis_inherited: True if the member has access from a parent folder.\n", 
      "properties": {
        "initials": {
          "type": "string", 
          "description": "Never set."
        }, 
        "permissions": {
          "items": {
            "$ref": "#/definitions/MemberPermission"
          }, 
          "type": "array", 
          "description": "The permissions that requesting user has on this member. The set of permissions corresponds to the MemberActions in the request."
        }, 
        "user": {
          "$ref": "#/definitions/UserInfo"
        }, 
        "access_type": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "is_inherited": {
          "type": "boolean", 
          "description": "True if the member has access from a parent folder."
        }
      }
    }, 
    "SpaceAllocation": {
      "type": "object", 
      "description": "Space is allocated differently based on the type of account.\nindividual: The user's space allocation applies only to their individual account.\nteam: The user shares space with other members of their team.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "individual", 
            "team", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SpaceAllocation"
        }, 
        "individual": {
          "$ref": "#/definitions/IndividualSpaceAllocation"
        }, 
        "team": {
          "$ref": "#/definitions/TeamSpaceAllocation"
        }
      }
    }, 
    "PaperDocSharingPolicy": {
      "type": "object", 
      "description": "doc_id: The Paper doc ID.\nsharing_policy: The default sharing policy to be set for the Paper doc.\n", 
      "properties": {
        "doc_id": {
          "type": "string", 
          "description": "The Paper doc ID."
        }, 
        "sharing_policy": {
          "$ref": "#/definitions/SharingPolicy"
        }
      }
    }, 
    "InsufficientQuotaAmounts": {
      "type": "object", 
      "description": "space_needed: The amount of space needed to add the item (the size of the item).\nspace_shortage: The amount of extra space needed to add the item.\nspace_left: The amount of space left in the user's Dropbox, less than space_needed.\n", 
      "properties": {
        "space_shortage": {
          "type": "number", 
          "description": "The amount of extra space needed to add the item."
        }, 
        "space_left": {
          "type": "number", 
          "description": "The amount of space left in the user's Dropbox, less than space_needed."
        }, 
        "space_needed": {
          "type": "number", 
          "description": "The amount of space needed to add the item (the size of the item)."
        }
      }
    }, 
    "AccountType": {
      "type": "object", 
      "description": "What type of account this user has.\nbasic: The basic account type.\npro: The Dropbox Pro account type.\nbusiness: The Dropbox Business account type.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "basic", 
            "pro", 
            "business"
          ], 
          "type": "string", 
          "title": "Choice of AccountType"
        }
      }
    }, 
    "GpsCoordinates": {
      "type": "object", 
      "description": "GPS coordinates for a photo or video.\nlatitude: Latitude of the GPS coordinates.\nlongitude: Longitude of the GPS coordinates.\n", 
      "properties": {
        "latitude": {
          "type": "number", 
          "description": "Latitude of the GPS coordinates."
        }, 
        "longitude": {
          "type": "number", 
          "description": "Longitude of the GPS coordinates."
        }
      }
    }, 
    "FullTeam": {
      "type": "object", 
      "description": "Detailed information about a team.\nid: The team's unique ID.\nname: The name of the team.\nsharing_policies: Team policies governing sharing.\noffice_addin_policy: Team policy governing the use of the Office Add-In.\n", 
      "properties": {
        "sharing_policies": {
          "$ref": "#/definitions/TeamSharingPolicies"
        }, 
        "office_addin_policy": {
          "$ref": "#/definitions/OfficeAddInPolicy"
        }, 
        "id": {
          "type": "string", 
          "description": "The team's unique ID."
        }, 
        "name": {
          "type": "string", 
          "description": "The name of the team."
        }
      }
    }, 
    "ListFolderMembersContinueArg": {
      "type": "object", 
      "description": "cursor: The cursor returned by your last call to :route:`list_folder_members` or :route:`list_folder_members/continue`.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "The cursor returned by your last call to :route:`list_folder_members` or :route:`list_folder_members/continue`."
        }
      }
    }, 
    "ListUsersOnPaperDocContinueArgs": {
      "type": "object", 
      "description": "doc_id: The Paper doc ID.\ncursor: The cursor obtained from :route:`docs/users/list` or :route:`docs/users/list/continue`. Allows for pagination.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "The cursor obtained from :route:`docs/users/list` or :route:`docs/users/list/continue`. Allows for pagination."
        }, 
        "doc_id": {
          "type": "string", 
          "description": "The Paper doc ID."
        }
      }
    }, 
    "ListFilesContinueError": {
      "type": "object", 
      "description": "Error results for :route:`list_received_files/continue`.\nuser_error: User account had a problem.\ninvalid_cursor: :field:`ListFilesContinueArg.cursor` is invalid.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "user_error", 
            "invalid_cursor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListFilesContinueError"
        }, 
        "user_error": {
          "$ref": "#/definitions/SharingUserError"
        }
      }
    }, 
    "ListFolderContinueArg": {
      "type": "object", 
      "description": "cursor: The cursor returned by your last call to :route:`list_folder` or :route:`list_folder/continue`.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "The cursor returned by your last call to :route:`list_folder` or :route:`list_folder/continue`."
        }
      }
    }, 
    "InviteeInfo": {
      "type": "object", 
      "description": "Information about the recipient of a shared content invitation.\nemail: E-mail address of invited user.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "email", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of InviteeInfo"
        }, 
        "email": {
          "type": "string", 
          "description": "E-mail address of invited user."
        }
      }
    }, 
    "RemoveMemberJobStatus": {
      "type": "object", 
      "description": "in_progress: The asynchronous job is still in progress.\ncomplete: Removing the folder member has finished. The value is information about whether the member has another form of access.\nfailed: None\n", 
      "properties": {
        "failed": {
          "$ref": "#/definitions/RemoveFolderMemberError"
        }, 
        ".tag": {
          "enum": [
            "in_progress", 
            "complete", 
            "failed"
          ], 
          "type": "string", 
          "title": "Choice of RemoveMemberJobStatus"
        }, 
        "complete": {
          "$ref": "#/definitions/MemberAccessLevelResult"
        }
      }
    }, 
    "TeamSpaceAllocation": {
      "type": "object", 
      "description": "used: The total space currently used by the user's team (bytes).\nallocated: The total space allocated to the user's team (bytes).\nuser_within_team_space_allocated: The total space allocated to the user within its team allocated space (0 means that no restriction is imposed on the user's quota within its team).\nuser_within_team_space_limit_type: The type of the space limit imposed on the team member (off, alert_only, stop_sync).\n", 
      "properties": {
        "allocated": {
          "type": "number", 
          "description": "The total space allocated to the user's team (bytes)."
        }, 
        "used": {
          "type": "number", 
          "description": "The total space currently used by the user's team (bytes)."
        }, 
        "user_within_team_space_limit_type": {
          "$ref": "#/definitions/MemberSpaceLimitType"
        }, 
        "user_within_team_space_allocated": {
          "type": "number", 
          "description": "The total space allocated to the user within its team allocated space (0 means that no restriction is imposed on the user's quota within its team)."
        },
        "user_within_team_space_used_cached": {
          "type": "number", 
          "description": "An accurate cached calculation of a team member's total space usage (bytes)."
        }
      }
    }, 
    "FolderSharingInfo": {
      "type": "object", 
      "description": "Sharing info for a folder which is contained in a shared folder or is a shared folder mount point.\nread_only: True if the file or folder is inside a read-only shared folder.\nparent_shared_folder_id: Set if the folder is contained by a shared folder.\nshared_folder_id: If this folder is a shared folder mount point, the ID of the shared folder mounted at this location.\ntraverse_only: Specifies that the folder can only be traversed and the user can only see a limited subset of the contents of this folder because they don't have read access to this folder. They do, however, have access to some sub folder.\nno_access: Specifies that the folder cannot be accessed by the user.\n", 
      "properties": {
        "read_only": {
          "type": "boolean", 
          "description": "True if the file or folder is inside a read-only shared folder."
        }, 
        "parent_shared_folder_id": {
          "type": "string", 
          "description": "Set if the folder is contained by a shared folder."
        }, 
        "traverse_only": {
          "type": "boolean", 
          "description": "Specifies that the folder can only be traversed and the user can only see a limited subset of the contents of this folder because they don't have read access to this folder. They do, however, have access to some sub folder."
        }, 
        "shared_folder_id": {
          "type": "string", 
          "description": "If this folder is a shared folder mount point, the ID of the shared folder mounted at this location."
        }, 
        "no_access": {
          "type": "boolean", 
          "description": "Specifies that the folder cannot be accessed by the user."
        }
      }
    }, 
    "ListFileMembersArg": {
      "type": "object", 
      "description": "Arguments for :route:`list_file_members`.\nfile: The file for which you want to see members.\nactions: The actions for which to return permissions on a member.\ninclude_inherited: Whether to include members who only have access from a parent shared folder.\nlimit: Number of members to return max per query. Defaults to 100 if no limit is specified.\n", 
      "properties": {
        "include_inherited": {
          "type": "boolean", 
          "description": "Whether to include members who only have access from a parent shared folder."
        }, 
        "limit": {
          "type": "integer", 
          "description": "Number of members to return max per query. Defaults to 100 if no limit is specified."
        }, 
        "actions": {
          "items": {
            "$ref": "#/definitions/MemberAction"
          }, 
          "type": "array", 
          "description": "The actions for which to return permissions on a member."
        }, 
        "file": {
          "type": "string", 
          "description": "The file for which you want to see members."
        }
      }
    }, 
    "RemovePropertiesError": {
      "type": "object", 
      "description": "template_not_found: Template does not exist for the given identifier.\nrestricted_content: You do not have permission to modify this template.\nother: None\npath: None\nunsupported_folder: This folder cannot be tagged. Tagging folders is not supported for team-owned templates.\nproperty_group_lookup: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "template_not_found", 
            "restricted_content", 
            "other", 
            "path", 
            "unsupported_folder", 
            "property_group_lookup"
          ], 
          "type": "string", 
          "title": "Choice of RemovePropertiesError"
        }, 
        "property_group_lookup": {
          "$ref": "#/definitions/LookUpPropertiesError"
        }, 
        "template_not_found": {
          "type": "string", 
          "description": "Template does not exist for the given identifier."
        }
      }
    }, 
    "LinkSettings": {
      "type": "object", 
      "description": "Settings that apply to a link.\naccess_level: The access level on the link for this file. Currently, it only accepts 'viewer' and 'viewer_no_comment'.\naudience: The type of audience on the link for this file.\nexpiry: An expiry timestamp to set on a link.\npassword: The password for the link.\n", 
      "properties": {
        "access_level": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "audience": {
          "$ref": "#/definitions/LinkAudience"
        }, 
        "password": {
          "$ref": "#/definitions/LinkPassword"
        }, 
        "expiry": {
          "$ref": "#/definitions/LinkExpiry"
        }
      }
    }, 
    "GetTemporaryLinkResult": {
      "type": "object", 
      "description": "metadata: Metadata of the file.\nlink: The temporary link which can be used to stream content the file.\n", 
      "properties": {
        "link": {
          "type": "string", 
          "description": "The temporary link which can be used to stream content the file."
        }, 
        "metadata": {
          "$ref": "#/definitions/FileMetadata"
        }
      }
    },
    "GetTemporaryUploadLinkResult": {
      "type": "object", 
      "description": "link: The temporary link which can be used to stream a file to a Dropbox location.\n", 
      "properties": {
        "link": {
          "type": "string", 
          "description": "The temporary link which can be used to stream a file to a Dropbox location."
        }
      }
    },
    "ListPaperDocsContinueArgs": {
      "type": "object", 
      "description": "cursor: The cursor obtained from :route:`docs/list` or :route:`docs/list/continue`. Allows for pagination.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "The cursor obtained from :route:`docs/list` or :route:`docs/list/continue`. Allows for pagination."
        }
      }
    }, 
    "TeamSharingPolicies": {
      "type": "object", 
      "description": "Policies governing sharing within and outside of the team.\nshared_folder_member_policy: Who can join folders shared by team members.\nshared_folder_join_policy: Which shared folders team members can join.\nshared_link_create_policy: Who can view shared links owned by team members.\n", 
      "properties": {
        "group_creation_policy": {
          "$ref": "#/definitions/GroupCreationPolicy"
        }, 
        "shared_folder_join_policy": {
          "$ref": "#/definitions/SharedFolderJoinPolicy"
        }, 
        "shared_folder_member_policy": {
          "$ref": "#/definitions/SharedFolderMemberPolicy"
        }, 
        "shared_link_create_policy": {
          "$ref": "#/definitions/SharedLinkCreatePolicy"
        }
      }
    }, 
    "FolderAction": {
      "description": "Actions that may be taken on shared folders.\nchange_options: Change folder options, such as who can be invited to join the folder.\ndisable_viewer_info: Disable viewer information for this folder.\nedit_contents: Change or edit contents of the folder.\nenable_viewer_info: Enable viewer information on the folder.\ninvite_editor: Invite a user or group to join the folder with read and write permission.\ninvite_viewer: Invite a user or group to join the folder with read permission.\ninvite_viewer_no_comment: Invite a user or group to join the folder with read permission but no comment permissions.\nrelinquish_membership: Relinquish one's own membership in the folder.\nunmount: Unmount the folder.\nunshare: Stop sharing this folder.\nleave_a_copy: Keep a copy of the contents upon leaving or being kicked from the folder.\nshare_link: Use create_link instead.\ncreate_link: Create a shared link for folder.\nset_access_inheritance: Set whether the folder inherits permissions from its parent.\nother: None\n", 
      "enum": [
            "change_options", 
            "disable_viewer_info", 
            "edit_contents", 
            "enable_viewer_info", 
            "invite_editor", 
            "invite_viewer", 
            "invite_viewer_no_comment", 
            "relinquish_membership", 
            "unmount", 
            "unshare", 
            "leave_a_copy", 
            "share_link", 
            "create_link", 
            "set_access_inheritance"
          ], 
      "type": "string", 
      "title": "Choice of FolderAction"
    }, 
    "RequestedVisibility": {
      "type": "object", 
      "description": "The access permission that can be requested by the caller for the shared link. Note that the final resolved visibility of the shared link takes into account other aspects, such as team and shared folder settings. Check the :type:`ResolvedVisibility` for more info on the possible resolved visibility values of shared links.\npublic: Anyone who has received the link can access it. No login required.\nteam_only: Only members of the same team can access the link. Login is required.\npassword: A link-specific password is required to access the link. Login is not required.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "public", 
            "team_only", 
            "password"
          ], 
          "type": "string", 
          "title": "Choice of RequestedVisibility"
        }
      }
    }, 
    "RelocationResult": {
      "type": "object", 
      "description": "metadata: Metadata of the relocated object.\n", 
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    }, 
    "ViewerInfoPolicy": { 
      "description": "enabled: Viewer information is available on this file.\ndisabled: Viewer information is disabled on this file.\nother: None\n", 
          "enum": [
            "enabled", 
            "disabled"
          ], 
          "type": "string", 
          "title": "Choice of ViewerInfoPolicy"
    }, 
    "PaperDocExport": {
      "type": "object", 
      "description": "doc_id: The Paper doc ID.\nexport_format: None\n", 
      "properties": {
        "export_format": {
          "$ref": "#/definitions/ExportFormat"
        }, 
        "doc_id": {
          "type": "string", 
          "description": "The Paper doc ID."
        }
      }
    }, 
    "ShareFolderLaunch": {
      "type": "object", 
      "description": "async_job_id: This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job.\ncomplete: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "async_job_id", 
            "complete"
          ], 
          "type": "string", 
          "title": "Choice of ShareFolderLaunch"
        }, 
        "async_job_id": {
          "type": "string", 
          "description": "This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job."
        }, 
        "complete": {
          "$ref": "#/definitions/SharedFolderMetadata"
        }
      }
    }, 
    "ListPaperDocsArgs": {
      "type": "object", 
      "description": "filter_by: Allows user to specify how the Paper docs should be filtered.\nsort_by: Allows user to specify how the Paper docs should be sorted.\nsort_order: Allows user to specify the sort order of the result.\nlimit: Size limit per batch. The maximum number of docs that can be retrieved per batch is 1000. Higher value results in invalid arguments error.\n", 
      "properties": {
        "sort_by": {
          "$ref": "#/definitions/ListPaperDocsSortBy"
        }, 
        "sort_order": {
          "$ref": "#/definitions/ListPaperDocsSortOrder"
        }, 
        "limit": {
          "type": "number", 
          "description": "Size limit per batch. The maximum number of docs that can be retrieved per batch is 1000. Higher value results in invalid arguments error."
        }, 
        "filter_by": {
          "$ref": "#/definitions/ListPaperDocsFilterBy"
        }
      }
    }, 
    "GetThumbnailBatchResultEntry": {
      "type": "object", 
      "description": "success: None\nfailure: The result for this file if it was an error.\nother: None\n", 
      "properties": {
        "failure": {
          "$ref": "#/definitions/ThumbnailError"
        }, 
        ".tag": {
          "enum": [
            "success", 
            "failure", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GetThumbnailBatchResultEntry"
        }, 
        "success": {
          "$ref": "#/definitions/GetThumbnailBatchResultData"
        }
      }
    }, 
    "UploadSessionLookupError": {
      "type": "object", 
      "description": "not_found: The upload session ID was not found or has expired. Upload sessions are valid for 48 hours.\nincorrect_offset: The specified offset was incorrect. See the value for the correct offset. This error may occur when a previous request was received and processed successfully but the client did not receive the response, e.g. due to a network error.\nclosed: You are attempting to append data to an upload session that has alread been closed (i.e. committed).\nnot_closed: The session must be closed before calling upload_session/finish_batch.\ntoo_large: You can not append to the upload session because the size of a file should not reach the max file size limit (i.e. 350GB).\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "not_found", 
            "incorrect_offset", 
            "closed", 
            "not_closed", 
            "too_large", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of UploadSessionLookupError"
        }, 
        "incorrect_offset": {
          "$ref": "#/definitions/UploadSessionOffsetError"
        }
      }
    }, 
    "ListPaperDocsSortOrder": {
      "type": "object", 
      "description": "ascending: Sorts the search result in ascending order.\ndescending: Sorts the search result in descending order.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "ascending", 
            "descending", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListPaperDocsSortOrder"
        }
      }
    }, 
    "SaveUrlArg": {
      "type": "object", 
      "description": "path: The path in Dropbox where the URL will be saved to.\nurl: The URL to be saved.\n", 
      "properties": {
        "url": {
          "type": "string", 
          "description": "The URL to be saved."
        }, 
        "path": {
          "type": "string", 
          "description": "The path in Dropbox where the URL will be saved to."
        }
      }
    },
    "SearchV2Result": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean"
        },
        "matches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchMatchV2"
          }
        }
      }
    },
    "SearchMatchV2": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/MetadataV2"
        },
        "match_type": {
          "type": "string",
          "enum": [
            "filename",
            "file_content",
            "filename_and_content",
            "image_content"
          ]
        },
        "highlight_spans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HighlightSpan"
          }          
        }
      }
    },
    "MetadataV2": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "HighlightSpan": {
      "type": "object",
      "properties": {
        "highlight_str": {
          "type": "string"
        },
        "is_highlighted": {
          "type": "boolean"
        }
      }
    },
    "SearchResult": {
      "type": "object", 
      "description": "matches: A list (possibly empty) of matches for the query.\nmore: Used for paging. If true, indicates there is another page of results available that can be fetched by calling :route:`search` again.\nstart: Used for paging. Value to set the start argument to when calling :route:`search` to fetch the next page of results.\n", 
      "properties": {
        "matches": {
          "items": {
            "$ref": "#/definitions/SearchMatch"
          }, 
          "type": "array", 
          "description": "A list (possibly empty) of matches for the query."
        }, 
        "start": {
          "type": "number", 
          "description": "Used for paging. Value to set the start argument to when calling :route:`search` to fetch the next page of results."
        }, 
        "more": {
          "type": "boolean", 
          "description": "Used for paging. If true, indicates there is another page of results available that can be fetched by calling :route:`search` again."
        }
      }
    }, 
    "AddPaperDocUserResult": {
      "type": "object", 
      "description": "success: User was successfully added to the Paper doc.\nunknown_error: Something unexpected happened when trying to add the user to the Paper doc.\nsharing_outside_team_disabled: The Paper doc can be shared only with team members.\ndaily_limit_reached: The daily limit of how many users can be added to the Paper doc was reached.\nuser_is_owner: Owner's permissions cannot be changed.\nfailed_user_data_retrieval: User data could not be retrieved. Clients should retry.\npermission_already_granted: This user already has the correct permission to the Paper doc.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "success", 
            "unknown_error", 
            "sharing_outside_team_disabled", 
            "daily_limit_reached", 
            "user_is_owner", 
            "failed_user_data_retrieval", 
            "permission_already_granted", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of AddPaperDocUserResult"
        }
      }
    },
    "ExportResult": {
      "type": "object",
      "properties": {
        "export_metadata": {
          "$ref": "#/definitions/ExportMetadata"
        },
        "file_metadata": {
          "$ref": "#/definitions/FileMetadata"
        }
      }
    },
    "ExportMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The last component of the path (including extension). This never contains a slash."
        },
        "size": {
          "type": "number",
          "description": "The file size in bytes."
        },
        "export_hash": {
          "type": "string",
          "description": "A hash based on the exported file content."
        },
        "paper_revision": {
          "type": "number",
          "description": "If the file is a Paper doc, this gives the latest doc revision which can be used in paper/update. "
        }
      }
    },
    "LockFileBatchResult": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockFileResultEntry"
          }
        }
      }
    },
    "LockFileResultEntry": {
      "type": "object",
      "properties": {
        "success": {
          "$ref": "#/definitions/LockFileResult"
        },
        "failure": {
          "$ref": "#/definitions/LockFileError"
        }
      }
    },
    "LockFileResult": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "LockFileError": {
      "type": "object",
      "properties": {
        ".tag": {
          "type": "string",
          "enum": [
            "path_lookup",
            "too_many_write_operations",
            "too_many_files",
            "no_write_permission",
            "cannot_be_locked",
            "file_not_shared",
            "lock_conflict",
            "internal_error"
          ]
        },
        "path_lookup": {
          "$ref": "#/definitions/LookupError"
        },
      "lock_conflict": {
        "$ref": "#/definitions/LockConflictError"
      }
    }   
  },
    "LockConflictError": {
      "type": "object",
      "properties": {
        "lock": {
          "$ref": "#/definitions/FileLock"
        }
      }
    },
    "FileLock": {
      "type": "object",
      "properties": {
        "content": {
          "$ref": "#/definitions/FileLockContent"
        }
      }
    },
    "FileLockContent": {
      "type": "object",
      "properties": {
        ".tag": {
          "type": "string",
          "enum": [
            "unlocked",
            "single_user"
          ]
        },
        "single_user": {
          "$ref": "#/definitions/SingleUserLock"
        }
      }
    },
    "SingleUserLock": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string"
        },
        "lock_holder_account_id": {
          "type": "string"
        },
        "lock_holder_team_id": {
          "type": "string"
        }
      }
    },
    "DownloadZipResult": {
      "type": "object", 
      "description": "metadata: None\n", 
      "properties": {
        "metadata": {
          "$ref": "#/definitions/FolderMetadata"
        }
      }
    }, 
    "ListFolderResult": {
      "type": "object", 
      "description": "entries: The files and (direct) subfolders in the folder.\ncursor: Pass the cursor into :route:`list_folder/continue` to see what's changed in the folder since your previous query.\nhas_more: If true, then there are more entries available. Pass the cursor to :route:`list_folder/continue` to retrieve the rest.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`list_folder/continue` to see what's changed in the folder since your previous query."
        }, 
        "has_more": {
          "type": "boolean", 
          "description": "If true, then there are more entries available. Pass the cursor to :route:`list_folder/continue` to retrieve the rest."
        }, 
        "entries": {
          "items": {
            "$ref": "#/definitions/Metadata"
          }, 
          "type": "array", 
          "description": "The files and (direct) subfolders in the folder."
        }
      }
    }, 
    "SharedFolderMemberError": {
      "type": "object", 
      "description": "invalid_dropbox_id: The target dropbox_id is invalid.\nnot_a_member: The target dropbox_id is not a member of the shared folder.\nno_explicit_access: The target member only has inherited access to the shared folder.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_dropbox_id", 
            "not_a_member", 
            "no_explicit_access", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharedFolderMemberError"
        }, 
        "no_explicit_access": {
          "$ref": "#/definitions/MemberAccessLevelResult"
        }
      }
    }, 
    "RevokeSharedLinkError": {
      "type": "object", 
      "description": "shared_link_not_found: The shared link wasn't found.\nshared_link_access_denied: The caller is not allowed to access this shared link.\nunsupported_link_type: This type of link is not supported.\nother: None\nshared_link_malformed: Shared link is malformed.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "shared_link_not_found", 
            "shared_link_access_denied", 
            "unsupported_link_type", 
            "other", 
            "shared_link_malformed"
          ], 
          "type": "string", 
          "title": "Choice of RevokeSharedLinkError"
        }
      }
    }, 
    "WriteMode": {
      "description": "Your intent when writing a file to some path. This is used to determine what constitutes a conflict and what the autorename strategy is.\nIn some situations, the conflict behavior is identical: (a) If the target path doesn't refer to anything, the file is always written; no conflict. (b) If the target path refers to a folder, it's always a conflict. (c) If the target path refers to a file with identical contents, nothing gets written; no conflict.\nThe conflict checking differs in the case where there's a file at the target path with contents different from the contents you're trying to write.\nadd: Do not overwrite an existing file if there is a conflict. The autorename strategy is to append a number to the file name. For example, \"document.txt\" might become \"document (2).txt\".\noverwrite: Always overwrite the existing file. The autorename strategy is the same as it is for :field:`add`.\nupdate: Overwrite if the given \"rev\" matches the existing file's \"rev\". The autorename strategy is to append the string \"conflicted copy\" to the file name. For example, \"document.txt\" might become \"document (conflicted copy).txt\" or \"document (Panda's conflicted copy).txt\".\n", 
          "enum": [
            "add", 
            "overwrite", 
            "update"
          ],
          "type": "string"
    }, 
    "GroupInfo": {
      "type": "object", 
      "description": "The information about a group. Groups is a way to manage a list of users  who need same access permission to the shared folder.\ngroup_name: None\ngroup_id: None\ngroup_management_type: Who is allowed to manage the group.\ngroup_type: The type of group.\nis_member: If the current user is a member of the group.\nis_owner: If the current user is an owner of the group.\nsame_team: If the group is owned by the current user's team.\ngroup_external_id: External ID of group. This is an arbitrary ID that an admin can attach to a group.\nmember_count: The number of members in the group.\n", 
      "properties": {
        "group_external_id": {
          "type": "string", 
          "description": "External ID of group. This is an arbitrary ID that an admin can attach to a group."
        }, 
        "is_owner": {
          "type": "boolean", 
          "description": "If the current user is an owner of the group."
        }, 
        "member_count": {
          "type": "number", 
          "description": "The number of members in the group."
        }, 
        "same_team": {
          "type": "boolean", 
          "description": "If the group is owned by the current user's team."
        }, 
        "is_member": {
          "type": "boolean", 
          "description": "If the current user is a member of the group."
        }, 
        "group_management_type": {
          "$ref": "#/definitions/GroupManagementType"
        }, 
        "group_name": {
          "type": "string"
        }, 
        "group_id": {
          "type": "string"
        }, 
        "group_type": {
          "$ref": "#/definitions/GroupType"
        }
      }
    }, 
    "ListSharedLinksError": {
      "type": "object", 
      "description": "path: None\nreset: Indicates that the cursor has been invalidated. Call :route:`list_shared_links` to obtain a new cursor.\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "reset", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListSharedLinksError"
        }
      }
    }, 
    "AddTemplateArg": {
      "type": "object", 
      "description": "name: Display name for the template. Template names can be up to 256 bytes.\ndescription: Description for the template. Template descriptions can be up to 1024 bytes.\nfields: Definitions of the property fields associated with this template. There can be up to 32 properties in a single template.\n", 
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/PropertyFieldTemplate"
          }, 
          "type": "array", 
          "description": "Definitions of the property fields associated with this template. There can be up to 32 properties in a single template."
        }, 
        "name": {
          "type": "string", 
          "description": "Display name for the template. Template names can be up to 256 bytes."
        }, 
        "description": {
          "type": "string", 
          "description": "Description for the template. Template descriptions can be up to 1024 bytes."
        }
      }
    }, 
    "Cursor": {
      "type": "object", 
      "description": "value: The actual cursor value.\nexpiration: Expiration time of :field:`value`.\nSome cursors might have expiration time assigned. This is a UTC value after which the cursor is no longer valid and the API starts returning an error. If cursor expires a new one needs to be obtained and pagination needs to be restarted. Some cursors might be short-lived some cursors might be long-lived.\nThis really depends on the sorting type and order, e.g.:\n1. on one hand, listing docs created by the user, sorted by the created time ascending will have undefinite expiration because the results cannot change while the iteration is happening. This cursor would be suitable for long term polling.\n2. on the other hand, listing docs sorted by the last modified time will have a very short expiration as docs do get modified very often and the modified time can be changed while the iteration is happening thus altering the results.\n", 
      "properties": {
        "expiration": {
          "type": "string", 
          "description": "Expiration time of :field:`value`.\nSome cursors might have expiration time assigned. This is a UTC value after which the cursor is no longer valid and the API starts returning an error. If cursor expires a new one needs to be obtained and pagination needs to be restarted. Some cursors might be short-lived some cursors might be long-lived.\nThis really depends on the sorting type and order, e.g.:\n1. on one hand, listing docs created by the user, sorted by the created time ascending will have undefinite expiration because the results cannot change while the iteration is happening. This cursor would be suitable for long term polling.\n2. on the other hand, listing docs sorted by the last modified time will have a very short expiration as docs do get modified very often and the modified time can be changed while the iteration is happening thus altering the results."
        }, 
        "value": {
          "type": "string", 
          "description": "The actual cursor value."
        }
      }
    }, 
    "AddTemplateResult": {
      "type": "object", 
      "description": "template_id: An identifier for template added by  See :route:`templates/add_for_user` or :route:`templates/add_for_team`.\n", 
      "properties": {
        "template_id": {
          "type": "string", 
          "description": "An identifier for template added by  See :route:`templates/add_for_user` or :route:`templates/add_for_team`."
        }
      }
    }, 
    "UnshareFolderError": {
      "type": "object", 
      "description": "access_error: None\nteam_folder: This action cannot be performed on a team shared folder.\nno_permission: The current user does not have permission to perform this action.\ntoo_many_files: This shared folder has too many files to be unshared.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharedFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "team_folder", 
            "no_permission", 
            "too_many_files", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of UnshareFolderError"
        }
      }
    }, 
    "MemberPermission": {
      "type": "object", 
      "description": "Whether the user is allowed to take the action on the associated member.\naction: The action that the user may wish to take on the member.\nallow: True if the user is allowed to take the action.\nreason: The reason why the user is denied the permission. Not present if the action is allowed.\n", 
      "properties": {
        "action": {
          "$ref": "#/definitions/MemberAction"
        }, 
        "reason": {
          "$ref": "#/definitions/PermissionDeniedReason"
        }, 
        "allow": {
          "type": "boolean", 
          "description": "True if the user is allowed to take the action."
        }
      }
    }, 
    "SharingFileAccessError": {
      "type": "object", 
      "description": "User could not access this file.\nno_permission: Current user does not have sufficient privileges to perform the desired action.\ninvalid_file: File specified was not found.\nis_folder: A folder can't be shared this way. Use folder sharing or a shared link instead.\ninside_public_folder: A file inside a public folder can't be shared this way. Use a public link instead.\ninside_osx_package: A Mac OS X package can't be shared this way. Use a shared link instead.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "no_permission", 
            "invalid_file", 
            "is_folder", 
            "inside_public_folder", 
            "inside_osx_package", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharingFileAccessError"
        }
      }
    }, 
    "SearchMatch": {
      "type": "object", 
      "description": "match_type: The type of the match.\nmetadata: The metadata for the matched file or folder.\n", 
      "properties": {
        "match_type": {
          "$ref": "#/definitions/SearchMatchType"
        }, 
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    }, 
    "ListFileMembersContinueError": {
      "type": "object", 
      "description": "Error for :route:`list_file_members/continue`.\nuser_error: None\naccess_error: None\ninvalid_cursor: :field:`ListFileMembersContinueArg.cursor` is invalid.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharingFileAccessError"
        }, 
        ".tag": {
          "enum": [
            "user_error", 
            "access_error", 
            "invalid_cursor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListFileMembersContinueError"
        }, 
        "user_error": {
          "$ref": "#/definitions/SharingUserError"
        }
      }
    },
    "GetTemporaryUploadLinkArg": {
      "type": "object", 
      "description": "", 
      "properties": {
        "commit_info": {
          "$ref": "#/definitions/TempLinkCommitInfo", 
          "description": "Contains the path and other optional modifiers for the future upload commit."
        },
        "duration": {
          "type": "number",
          "description": "How long before this link expires, in seconds. Attempting to start an upload with this link longer than this period of time after link creation will result in an error. The default for this field is 14400.0."
        }
      }
    }, 
    "GetTemporaryLinkArg": {
      "type": "object", 
      "description": "path: The path to the file you want a temporary link to.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path to the file you want a temporary link to."
        }
      }
    },
    "GetTagsResult": {
      "type": "object",
      "properties": {
        "paths_to_tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PathToTags"
          }
        }
      }
    },
    "PathToTags": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        ".tag": {
          "type": "string",
          "enum": [
            "user_generated_tag"
          ]
        },
        "tag_text": {
          "type": "string"
        }
      }
    },
    "GetCopyReferenceError": {
      "type": "object", 
      "description": "path: None\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GetCopyReferenceError"
        }
      }
    }, 
    "AudienceRestrictingSharedFolder": {
      "type": "object", 
      "description": "Information about the shared folder that prevents the link audience for this link from being more restrictive.\nshared_folder_id: The ID of the shared folder.\nname: The name of the shared folder.\naudience: The link audience of the shared folder.\n", 
      "properties": {
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID of the shared folder."
        }, 
        "audience": {
          "$ref": "#/definitions/LinkAudience"
        }, 
        "name": {
          "type": "string", 
          "description": "The name of the shared folder."
        }
      }
    }, 
    "GetTemporaryLinkError": {
      "type": "object", 
      "description": "path: None\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GetTemporaryLinkError"
        }
      }
    }, 
    "PollArg": {
      "type": "object", 
      "description": "Arguments for methods that poll the status of an asynchronous job.\nasync_job_id: Id of the asynchronous job. This is the value of a response returned from the method that launched the job.\n", 
      "properties": {
        "async_job_id": {
          "type": "string", 
          "description": "Id of the asynchronous job. This is the value of a response returned from the method that launched the job."
        }
      }
    }, 
    "UserInfo": {
      "type": "object", 
      "description": "Basic information about a user. Use :route:`users.get_account` and :route:`users.get_account_batch` to obtain more detailed information.\naccount_id: The account ID of the user.\nemail: Email address of user.\ndisplay_name: The display name of the user.\nsame_team: If the user is in the same team as current user.\nteam_member_id: The team member ID of the shared folder member. Only present if :field:`same_team` is true.\n", 
      "properties": {
        "email": {
          "type": "string", 
          "description": "Email address of user."
        }, 
        "team_member_id": {
          "type": "string", 
          "description": "The team member ID of the shared folder member. Only present if :field:`same_team` is true."
        }, 
        "display_name": {
          "type": "string", 
          "description": "The display name of the user."
        }, 
        "account_id": {
          "type": "string", 
          "description": "The account ID of the user."
        }, 
        "same_team": {
          "type": "boolean", 
          "description": "If the user is in the same team as current user."
        }
      }
    }, 
    "UploadErrorWithProperties": {
      "type": "object", 
      "description": "path: Unable to save the uploaded contents to a file.\nproperties_error: The supplied property group is invalid. The file has uploaded without property groups.\nother: None\n", 
      "properties": {
        "properties_error": {
          "$ref": "#/definitions/InvalidPropertyGroupError"
        }, 
        "path": {
          "$ref": "#/definitions/UploadWriteFailed"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "properties_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of UploadErrorWithProperties"
        }
      }
    }, 
    "AccessLevel": {
      "description": "Defines the access levels for collaborators.\nowner: The collaborator is the owner of the shared folder. Owners can view and edit the shared folder as well as set the folder's policies using :route:`update_folder_policy`.\neditor: The collaborator can both view and edit the shared folder.\nviewer: The collaborator can only view the shared folder.\nviewer_no_comment: The collaborator can only view the shared folder and does not have any access to comments.\nother: None\n", 
          "enum": [
            "owner", 
            "editor", 
            "viewer", 
            "viewer_no_comment", 
            "traverse"
          ], 
          "type": "string", 
          "title": "Choice of AccessLevel"
    }, 
    "ThumbnailFormat": {
      "description": "jpeg: None\npng: None\n",
      "enum": [
            "jpeg", 
            "png"
          ], 
      "type": "string", 
      "title": "Choice of ThumbnailFormat"
    }, 
    "CreateSharedLinkArg": {
      "type": "object", 
      "description": "path: The path to share.\nshort_url: Whether to return a shortened URL.\npending_upload: If it's okay to share a path that does not yet exist, set this to either :field:`PendingUploadMode.file` or :field:`PendingUploadMode.folder` to indicate whether to assume it's a file or folder.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path to share."
        }, 
        "pending_upload": {
          "$ref": "#/definitions/PendingUploadMode"
        }, 
        "short_url": {
          "type": "boolean", 
          "description": "Whether to return a shortened URL."
        }
      }
    }, 
    "ShareFolderError": {
      "type": "object", 
      "description": "email_unverified: The current user's e-mail address is unverified.\nbad_path: :field:`ShareFolderArg.path` is invalid.\nteam_policy_disallows_member_policy: Team policy is more restrictive than :field:`ShareFolderArg.member_policy`.\ndisallowed_shared_link_policy: The current user's account is not allowed to select the specified :field:`ShareFolderArg.shared_link_policy`.\nother: None\nno_permission: The current user does not have permission to perform this action.\n", 
      "properties": {
        "bad_path": {
          "$ref": "#/definitions/SharePathError"
        }, 
        ".tag": {
          "enum": [
            "email_unverified", 
            "bad_path", 
            "team_policy_disallows_member_policy", 
            "disallowed_shared_link_policy", 
            "other", 
            "no_permission"
          ], 
          "type": "string", 
          "title": "Choice of ShareFolderError"
        }
      }
    },
    "UserFeaturesGetValuesBatchResult": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserFeatureValue"
          }
        }
      }
    },
    "UserFeatureValue": {
      "type": "object",
      "properties": {
        ".tag": {
          "type": "string",
          "enum": [
            "paper_as_files",
            "file_locking"
          ]
        },
        "paper_as_files": {
          "$ref": "#/definitions/PaperAsFilesValue"
        },
        "file_locking": {
          "$ref": "#/definitions/FileLockingValue"
        }
      }
    },
    "PaperAsFilesValue": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "FileLockingValue": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "GetFeaturesArg": {
      "type": "object", 
      "description": "A list of features in UserFeature.\n", 
      "properties": {
        "features": {
          "type": "array", 
          "description": "paper_as_files: This feature contains information about how the user's Paper files are stored.\nfile_locking: This feature allows users to lock files in order to restrict other users from editing them.",
          "items": {
            "type": "object",
            "properties": {
              ".tag": {
                "type": "string",
                "enum": [
                  "paper_as_files",
                  "file_locking"
                ]
              }
            }
          }
        }
      }
    }, 
    "GetAccountArg": {
      "type": "object", 
      "description": "account_id: A user's account identifier.\n", 
      "properties": {
        "account_id": {
          "type": "string", 
          "description": "A user's account identifier."
        }
      }
    }, 
    "SymlinkInfo": {
      "type": "object", 
      "description": "target: The target this symlink points to.\n", 
      "properties": {
        "target": {
          "type": "string", 
          "description": "The target this symlink points to."
        }
      }
    }, 
    "SharingUserError": {
      "type": "object", 
      "description": "User account had a problem preventing this action.\nemail_unverified: The current user must verify the account e-mail address before performing this action.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "email_unverified", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharingUserError"
        }
      }
    }, 
    "SharedFolderAccessError": {
      "type": "object", 
      "description": "There is an error accessing the shared folder.\ninvalid_id: This shared folder ID is invalid.\nnot_a_member: The user is not a member of the shared folder thus cannot access it.\nemail_unverified: Never set.\nunmounted: The shared folder is unmounted.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_id", 
            "not_a_member", 
            "email_unverified", 
            "unmounted", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharedFolderAccessError"
        }
      }
    }, 
    "FolderSharingPolicyType": {
      "type": "object", 
      "description": "The sharing policy of a Paper folder.\n\nNote: The sharing policy of subfolders is inherited from the root folder.\nteam: Everyone in your team and anyone directly invited can access this folder.\ninvite_only: Only people directly invited can access this folder.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "team", 
            "invite_only"
          ], 
          "type": "string", 
          "title": "Choice of FolderSharingPolicyType"
        }
      }
    }, 
    "GroupManagementType": {
      "type": "object", 
      "description": "The group type determines how a group is managed.\nuser_managed: A group which is managed by selected users.\ncompany_managed: A group which is managed by team admins only.\nsystem_managed: A group which is managed automatically by Dropbox.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "user_managed", 
            "company_managed", 
            "system_managed", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GroupManagementType"
        }
      }
    }, 
    "AddPaperDocUserMemberResult": {
      "type": "object", 
      "description": "Per-member result for :route:`docs/users/add`.\nmember: One of specified input members.\nresult: The outcome of the action on this member.\n", 
      "properties": {
        "member": {
          "$ref": "#/definitions/MemberSelector"
        }, 
        "result": {
          "$ref": "#/definitions/AddPaperDocUserResult"
        }
      }
    }, 
    "DocLookupError": {
      "type": "object", 
      "description": "insufficient_permissions: Your account does not have permissions to perform this action.\nother: None\ndoc_not_found: The required doc was not found.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "insufficient_permissions", 
            "other", 
            "doc_not_found"
          ], 
          "type": "string", 
          "title": "Choice of DocLookupError"
        }
      }
    }, 
    "ListFolderLongpollArg": {
      "type": "object", 
      "description": "cursor: A cursor as returned by :route:`list_folder` or :route:`list_folder/continue`. Cursors retrieved by setting :field:`ListFolderArg.include_media_info` to :val:`true` are not supported.\ntimeout: A timeout in seconds. The request will block for at most this length of time, plus up to 90 seconds of random jitter added to avoid the thundering herd problem. Care should be taken when using this parameter, as some network infrastructure does not support long timeouts.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "A cursor as returned by :route:`list_folder` or :route:`list_folder/continue`. Cursors retrieved by setting :field:`ListFolderArg.include_media_info` to :val:`true` are not supported."
        }, 
        "timeout": {
          "type": "integer", 
          "description": "A timeout in seconds. The request will block for at most this length of time, plus up to 90 seconds of random jitter added to avoid the thundering herd problem. Care should be taken when using this parameter, as some network infrastructure does not support long timeouts."
        }
      }
    }, 
    "UploadError": {
      "type": "object", 
      "description": "path: Unable to save the uploaded contents to a file.\nproperties_error: The supplied property group is invalid. The file has uploaded without property groups.\nother: None\n", 
      "properties": {
        "properties_error": {
          "$ref": "#/definitions/InvalidPropertyGroupError"
        }, 
        "path": {
          "$ref": "#/definitions/UploadWriteFailed"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "properties_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of UploadError"
        }
      }
    }, 
    "PaperDocUpdateArgs": {
      "type": "object", 
      "description": "path: Path in the user's Dropbox to update.\ndoc_update_policy: How the provided content should be applied to the doc.\npaper_revision: The latest doc revision.\nimport_format: The format of provided data.\n", 
      "properties": {
        "doc_update_policy": {
          "$ref": "#/definitions/PaperDocUpdatePolicy"
        }, 
        "path": {
          "type": "string", 
          "description": "Path in the user's Dropbox to update."
        }, 
        "import_format": {
          "$ref": "#/definitions/ImportFormat"
        }, 
        "paper_revision": {
          "type": "number", 
          "description": "The latest doc revision. Required when doc_update_policy is update."
        }
      }
    }, 
    "GetFileMetadataIndividualResult": {
      "type": "object", 
      "description": "metadata: The result for this file if it was successful.\naccess_error: The result for this file if it was an error.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharingFileAccessError"
        }, 
        ".tag": {
          "enum": [
            "metadata", 
            "access_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GetFileMetadataIndividualResult"
        }, 
        "metadata": {
          "$ref": "#/definitions/SharedFileMetadata"
        }
      }
    }, 
    "SaveCopyReferenceResult": {
      "type": "object", 
      "description": "metadata: The metadata of the saved file or folder in the user's Dropbox.\n", 
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    }, 
    "SaveUrlJobStatus": {
      "type": "object", 
      "description": "in_progress: The asynchronous job is still in progress.\ncomplete: Metadata of the file where the URL is saved to.\nfailed: None\n", 
      "properties": {
        "failed": {
          "$ref": "#/definitions/SaveUrlError"
        }, 
        ".tag": {
          "enum": [
            "in_progress", 
            "complete", 
            "failed"
          ], 
          "type": "string", 
          "title": "Choice of SaveUrlJobStatus"
        }, 
        "complete": {
          "$ref": "#/definitions/FileMetadata"
        }
      }
    }, 
    "GetMetadataArg": {
      "type": "object", 
      "description": "path: The path of a file or folder on Dropbox.\ninclude_media_info: If true, :field:`FileMetadata.media_info` is set for photo and video.\ninclude_deleted: If true, :type:`DeletedMetadata` will be returned for deleted file or folder, otherwise :field:`LookupError.not_found` will be returned.\ninclude_has_explicit_shared_members: If true, the results will include a flag for each file indicating whether or not  that file has any explicit members.\ninclude_property_groups: If set to a valid list of template IDs, :field:`FileMetadata.property_groups` is set if there exists property data associated with the file and each of the listed templates.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path of a file or folder on Dropbox."
        }, 
        "include_has_explicit_shared_members": {
          "type": "boolean", 
          "description": "If true, the results will include a flag for each file indicating whether or not  that file has any explicit members."
        }, 
        "include_property_groups": {
          "$ref": "#/definitions/TemplateFilterBase"
        }, 
        "include_deleted": {
          "type": "boolean", 
          "description": "If true, :type:`DeletedMetadata` will be returned for deleted file or folder, otherwise :field:`LookupError.not_found` will be returned."
        }, 
        "include_media_info": {
          "type": "boolean", 
          "description": "If true, :field:`FileMetadata.media_info` is set for photo and video."
        }
      }
    }, 
    "SharedFolderMemberPolicy": {
      "type": "object", 
      "description": "Policy governing who can be a member of a folder shared by a team member.\nteam: Only a teammate can be a member of a folder shared by a team member.\nanyone: Anyone can be a member of a folder shared by a team member.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "team", 
            "anyone", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharedFolderMemberPolicy"
        }
      }
    }, 
    "GetTemplateArg": {
      "type": "object", 
      "description": "template_id: An identifier for template added by route  See :route:`templates/add_for_user` or :route:`templates/add_for_team`.\n", 
      "properties": {
        "template_id": {
          "type": "string", 
          "description": "An identifier for template added by route  See :route:`templates/add_for_user` or :route:`templates/add_for_team`."
        }
      }
    }, 
    "RestoreError": {
      "type": "object", 
      "description": "path_lookup: An error occurs when downloading metadata for the file.\npath_write: An error occurs when trying to restore the file to that path.\ninvalid_revision: The revision is invalid. It may point to a different file.\nother: None\n", 
      "properties": {
        "path_lookup": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path_lookup", 
            "path_write", 
            "invalid_revision", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of RestoreError"
        }, 
        "path_write": {
          "$ref": "#/definitions/WriteError"
        }
      }
    }, 
    "RelocationBatchResult": {
      "type": "object", 
      "description": "entries: None\n", 
      "properties": {
        "entries": {
          "items": {
            "$ref": "#/definitions/RelocationBatchResultData"
          }, 
          "type": "array"
        }
      }
    }, 
    "FileMemberActionResult": {
      "type": "object", 
      "description": "Per-member result for :route:`add_file_member`", 
      "properties": {
        "sckey_sha1": {
          "type": "string"
        },
        "invitation_signature": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "member": {
          "$ref": "#/definitions/MemberSelector"
        }, 
        "result": {
          "$ref": "#/definitions/FileMemberActionIndividualResult"
        }
      }
    }, 
    "ModifySharedLinkSettingsError": {
      "type": "object", 
      "description": "shared_link_not_found: The shared link wasn't found.\nshared_link_access_denied: The caller is not allowed to access this shared link.\nunsupported_link_type: This type of link is not supported.\nother: None\nsettings_error: There is an error with the given settings.\nemail_not_verified: The caller's email should be verified.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "shared_link_not_found", 
            "shared_link_access_denied", 
            "unsupported_link_type", 
            "other", 
            "settings_error", 
            "email_not_verified"
          ], 
          "type": "string", 
          "title": "Choice of ModifySharedLinkSettingsError"
        }, 
        "settings_error": {
          "$ref": "#/definitions/SharedLinkSettingsError"
        }
      }
    }, 
    "UpdateFileRequestArgs": {
      "type": "object", 
      "description": "Arguments for :route:`update`.\nid: The ID of the file request to update.\ntitle: The new title of the file request. Must not be empty.\ndestination: The new path of the folder in the Dropbox where uploaded files will be sent. For apps with the app folder permission, this will be relative to the app folder.\ndeadline: The new deadline for the file request.\nopen: Whether to set this file request as open or closed.\n", 
      "properties": {
        "open": {
          "type": "boolean", 
          "description": "Whether to set this file request as open or closed."
        },
        "description": {
          "type": "string"
        },
        "destination": {
          "type": "string", 
          "description": "The new path of the folder in the Dropbox where uploaded files will be sent. For apps with the app folder permission, this will be relative to the app folder."
        }, 
        "deadline": {
          "$ref": "#/definitions/UpdateFileRequestDeadline"
        }, 
        "id": {
          "type": "string", 
          "description": "The ID of the file request to update."
        }, 
        "title": {
          "type": "string", 
          "description": "The new title of the file request. Must not be empty."
        }
      }
    }, 
    "TokenFromOAuth1Result": {
      "type": "object", 
      "description": "oauth2_token: The OAuth 2.0 token generated from the supplied OAuth 1.0 token.\n", 
      "properties": {
        "oauth2_token": {
          "type": "string", 
          "description": "The OAuth 2.0 token generated from the supplied OAuth 1.0 token."
        }
      }
    }, 
    "Folder": {
      "type": "object", 
      "description": "Data structure representing a Paper folder.\nid: Paper folder ID. This ID uniquely identifies the folder.\nname: Paper folder name.\n", 
      "properties": {
        "id": {
          "type": "string", 
          "description": "Paper folder ID. This ID uniquely identifies the folder."
        }, 
        "name": {
          "type": "string", 
          "description": "Paper folder name."
        }
      }
    }, 
    "RelinquishFolderMembershipArg": {
      "type": "object", 
      "description": "shared_folder_id: The ID for the shared folder.\nleave_a_copy: Keep a copy of the folder's contents upon relinquishing membership.\n", 
      "properties": {
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID for the shared folder."
        }, 
        "leave_a_copy": {
          "type": "boolean", 
          "description": "Keep a copy of the folder's contents upon relinquishing membership."
        }
      }
    }, 
    "SaveUrlError": {
      "type": "object", 
      "description": "path: None\ndownload_failed: Failed downloading the given URL.\ninvalid_url: The given URL is invalid.\nnot_found: The file where the URL is saved to no longer exists.\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/WriteError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "download_failed", 
            "invalid_url", 
            "not_found", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SaveUrlError"
        }
      }
    }, 
    "SharingPolicy": {
      "type": "object", 
      "description": "Sharing policy of Paper doc.\npublic_sharing_policy: This value applies to the non-team members.\nteam_sharing_policy: This value applies to the team members only. The value is null for all personal accounts.\n", 
      "properties": {
        "team_sharing_policy": {
          "$ref": "#/definitions/SharingTeamPolicyType"
        }, 
        "public_sharing_policy": {
          "$ref": "#/definitions/SharingPublicPolicyType"
        }
      }
    }, 
    "LinkAudience": {
      "description": "public: Link is accessible by anyone.\nteam: Link is accessible only by team members.\nmembers: Link is accessible only by members of the content.\nother: None\n", 
      "enum": [
            "public", 
            "team", 
            "members", 
            "no_one",
            "password"
          ], 
      "type": "string", 
      "title": "Choice of LinkAudience"
    }, 
    "SharedLinkAccessFailureReason": {
      "type": "object", 
      "description": "login_required: User is not logged in.\nemail_verify_required: User's email is not verified.\npassword_required: The link is password protected.\nteam_only: Access is allowed for team members only.\nowner_only: Access is allowed for the shared link's owner only.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "login_required", 
            "email_verify_required", 
            "password_required", 
            "team_only", 
            "owner_only", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharedLinkAccessFailureReason"
        }
      }
    }, 
    "PropertiesSearchQuery": {
      "type": "object", 
      "description": "query: The property field value for which to search across templates.\nmode: The mode with which to perform the search.\nlogical_operator: The logical operator with which to append the query.\n", 
      "properties": {
        "query": {
          "type": "string", 
          "description": "The property field value for which to search across templates."
        }, 
        "logical_operator": {
          "$ref": "#/definitions/LogicalOperator"
        }, 
        "mode": {
          "$ref": "#/definitions/PropertiesSearchMode"
        }
      }
    }, 
    "PropertyGroupUpdate": {
      "type": "object", 
      "description": "template_id: A unique identifier for a property template.\nadd_or_update_fields: Property fields to update. If the property field already exists, it is updated. If the property field doesn't exist, the property group is added.\nremove_fields: Property fields to remove (by name), provided they exist.\n", 
      "properties": {
        "remove_fields": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Property fields to remove (by name), provided they exist."
        }, 
        "template_id": {
          "type": "string", 
          "description": "A unique identifier for a property template."
        }, 
        "add_or_update_fields": {
          "items": {
            "$ref": "#/definitions/PropertyField"
          }, 
          "type": "array", 
          "description": "Property fields to update. If the property field already exists, it is updated. If the property field doesn't exist, the property group is added."
        }
      }
    }, 
    "ExportFormat": {
      "type": "object", 
      "description": "The desired export format of the Paper doc.\nhtml: The HTML export format.\nmarkdown: The markdown export format.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "html", 
            "markdown", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ExportFormat"
        }
      }
    }, 
    "FileSharingInfo": {
      "type": "object", 
      "description": "Sharing info for a file which is contained by a shared folder.\nread_only: True if the file or folder is inside a read-only shared folder.\nparent_shared_folder_id: ID of shared folder that holds this file.\nmodified_by: The last user who modified the file. This field will be null if the user's account has been deleted.\n", 
      "properties": {
        "read_only": {
          "type": "boolean", 
          "description": "True if the file or folder is inside a read-only shared folder."
        }, 
        "parent_shared_folder_id": {
          "type": "string", 
          "description": "ID of shared folder that holds this file."
        }, 
        "modified_by": {
          "type": "string", 
          "description": "The last user who modified the file. This field will be null if the user's account has been deleted."
        }
      }
    }, 
    "SharedLink": {
      "type": "object", 
      "description": "url: Shared link url.\npassword: Password for the shared link.\n", 
      "properties": {
        "url": {
          "type": "string", 
          "description": "Shared link url."
        }, 
        "password": {
          "type": "string", 
          "description": "Password for the shared link."
        }
      }
    }, 
    "PaperDocCreateArgs": {
      "type": "object", 
      "description": "import_format: The format of provided data.\npath: The fully qualified path to the location in the user's Dropbox where the Paper Doc should be created. This should include the document's title and end with .paper.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The fully qualified path to the location in the user's Dropbox where the Paper Doc should be created. This should include the document's title and end with .paper."
        }, 
        "import_format": {
          "$ref": "#/definitions/ImportFormat"
        }
      }
    }, 
    "Name": {
      "type": "object", 
      "description": "Representations for a person's name to assist with internationalization.\ngiven_name: Also known as a first name.\nsurname: Also known as a last name or family name.\nfamiliar_name: Locale-dependent name. In the US, a person's familiar name is their :field:`given_name`, but elsewhere, it could be any combination of a person's :field:`given_name` and :field:`surname`.\ndisplay_name: A name that can be used directly to represent the name of a user's Dropbox account.\nabbreviated_name: An abbreviated form of the person's name. Their initials in most locales.\n", 
      "properties": {
        "familiar_name": {
          "type": "string", 
          "description": "Locale-dependent name. In the US, a person's familiar name is their :field:`given_name`, but elsewhere, it could be any combination of a person's :field:`given_name` and :field:`surname`."
        }, 
        "surname": {
          "type": "string", 
          "description": "Also known as a last name or family name."
        }, 
        "display_name": {
          "type": "string", 
          "description": "A name that can be used directly to represent the name of a user's Dropbox account."
        }, 
        "given_name": {
          "type": "string", 
          "description": "Also known as a first name."
        }, 
        "abbreviated_name": {
          "type": "string", 
          "description": "An abbreviated form of the person's name. Their initials in most locales."
        }
      }
    }, 
    "ParentFolderAccessInfo": {
      "type": "object", 
      "description": "Contains information about a parent folder that a member has access to.\nfolder_name: Display name for the folder.\nshared_folder_id: The identifier of the parent shared folder.\npermissions: The user's permissions for the parent shared folder.\npath: The full path to the parent shared folder relative to the acting user's root.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The full path to the parent shared folder relative to the acting user's root."
        }, 
        "shared_folder_id": {
          "type": "string", 
          "description": "The identifier of the parent shared folder."
        }, 
        "folder_name": {
          "type": "string", 
          "description": "Display name for the folder."
        }, 
        "permissions": {
          "items": {
            "$ref": "#/definitions/MemberPermission"
          }, 
          "type": "array", 
          "description": "The user's permissions for the parent shared folder."
        }
      }
    }, 
    "InvalidPropertyGroupError": {
      "type": "object", 
      "description": "template_not_found: Template does not exist for the given identifier.\nrestricted_content: You do not have permission to modify this template.\nother: None\npath: None\nunsupported_folder: This folder cannot be tagged. Tagging folders is not supported for team-owned templates.\nproperty_field_too_large: One or more of the supplied property field values is too large.\ndoes_not_fit_template: One or more of the supplied property fields does not conform to the template specifications.\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "template_not_found", 
            "restricted_content", 
            "other", 
            "path", 
            "unsupported_folder", 
            "property_field_too_large", 
            "does_not_fit_template"
          ], 
          "type": "string", 
          "title": "Choice of InvalidPropertyGroupError"
        }, 
        "template_not_found": {
          "type": "string", 
          "description": "Template does not exist for the given identifier."
        }
      }
    }, 
    "UploadSessionFinishBatchResult": {
      "type": "object", 
      "description": "entries: Commit result for each file in the batch.\n", 
      "properties": {
        "entries": {
          "items": {
            "$ref": "#/definitions/UploadSessionFinishBatchResultEntry"
          }, 
          "type": "array", 
          "description": "Commit result for each file in the batch."
        }
      }
    }, 
    "FileMemberActionIndividualResult": {
      "type": "object", 
      "description": "success: Member was successfully removed from this file. If AccessLevel is given, the member still has access via a parent shared folder.\nmember_error: User was not able to perform this action.\n", 
      "properties": {
        "member_error": {
          "$ref": "#/definitions/FileMemberActionError"
        }, 
        ".tag": {
          "enum": [
            "success", 
            "member_error"
          ], 
          "type": "string", 
          "title": "Choice of FileMemberActionIndividualResult"
        }, 
        "success": {
          "$ref": "#/definitions/AccessLevel"
        }
      }
    }, 
    "UpdateTemplateResult": {
      "type": "object", 
      "description": "template_id: An identifier for template added by route  See :route:`templates/add_for_user` or :route:`templates/add_for_team`.\n", 
      "properties": {
        "template_id": {
          "type": "string", 
          "description": "An identifier for template added by route  See :route:`templates/add_for_user` or :route:`templates/add_for_team`."
        }
      }
    }, 
    "UpdateFolderPolicyError": {
      "type": "object", 
      "description": "access_error: None\nnot_on_team: :field:`UpdateFolderPolicyArg.member_policy` was set even though user is not on a team.\nteam_policy_disallows_member_policy: Team policy is more restrictive than :field:`ShareFolderArg.member_policy`.\ndisallowed_shared_link_policy: The current account is not allowed to select the specified :field:`ShareFolderArg.shared_link_policy`.\nno_permission: The current user does not have permission to perform this action.\nteam_folder: This action cannot be performed on a team shared folder.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharedFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "not_on_team", 
            "team_policy_disallows_member_policy", 
            "disallowed_shared_link_policy", 
            "no_permission", 
            "team_folder", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of UpdateFolderPolicyError"
        }
      }
    }, 
    "GroupMembershipInfo": {
      "type": "object", 
      "description": "The information about a group member of the shared content.\naccess_type: The access type for this member.\ngroup: The information about the membership group.\npermissions: The permissions that requesting user has on this member. The set of permissions corresponds to the MemberActions in the request.\ninitials: Never set.\nis_inherited: True if the member has access from a parent folder.\n", 
      "properties": {
        "initials": {
          "type": "string", 
          "description": "Never set."
        }, 
        "permissions": {
          "items": {
            "$ref": "#/definitions/MemberPermission"
          }, 
          "type": "array", 
          "description": "The permissions that requesting user has on this member. The set of permissions corresponds to the MemberActions in the request."
        }, 
        "group": {
          "$ref": "#/definitions/GroupInfo"
        }, 
        "access_type": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "is_inherited": {
          "type": "boolean", 
          "description": "True if the member has access from a parent folder."
        }
      }
    }, 
    "AudienceExceptions": {
      "type": "object", 
      "description": "The total count and truncated list of information of content inside this folder that has a different audience than the link on this folder. This is only returned for folders.\ncount: None\nexceptions: A truncated list of some of the content that is an exception. The length of this list could be smaller than the count since it is only a sample but will not be empty as long as count is not 0.\n", 
      "properties": {
        "count": {
          "type": "number"
        }, 
        "exceptions": {
          "items": {
            "$ref": "#/definitions/AudienceExceptionContentInfo"
          }, 
          "type": "array", 
          "description": "A truncated list of some of the content that is an exception. The length of this list could be smaller than the count since it is only a sample but will not be empty as long as count is not 0."
        }
      }
    }, 
    "PropertyType": {
      "description": "Data type of the given property field added.\nstring: The associated property field will be of type string. Unicode is supported.\nother: None\n",  
      "type": "string"
    }, 
    "AddFolderMemberError": {
      "type": "object", 
      "description": "access_error: Unable to access shared folder.\nemail_unverified: The current user's e-mail address is unverified.\nbad_member: :field:`AddFolderMemberArg.members` contains a bad invitation recipient.\ncant_share_outside_team: Your team policy does not allow sharing outside of the team.\ntoo_many_members: The value is the member limit that was reached.\ntoo_many_pending_invites: The value is the pending invite limit that was reached.\nrate_limit: The current user has hit the limit of invites they can send per day. Try again in 24 hours.\ntoo_many_invitees: The current user is trying to share with too many people at once.\ninsufficient_plan: The current user's account doesn't support this action. An example of this is when adding a read-only member. This action can only be performed by users that have upgraded to a Pro or Business plan.\nteam_folder: This action cannot be performed on a team shared folder.\nno_permission: The current user does not have permission to perform this action.\nother: None\n", 
      "properties": {
        "too_many_members": {
          "type": "number", 
          "description": "The value is the member limit that was reached."
        }, 
        "access_error": {
          "$ref": "#/definitions/SharedFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "email_unverified", 
            "bad_member", 
            "cant_share_outside_team", 
            "too_many_members", 
            "too_many_pending_invites", 
            "rate_limit", 
            "too_many_invitees", 
            "insufficient_plan", 
            "team_folder", 
            "no_permission", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of AddFolderMemberError"
        }, 
        "bad_member": {
          "$ref": "#/definitions/AddMemberSelectorError"
        }, 
        "too_many_pending_invites": {
          "type": "number", 
          "description": "The value is the pending invite limit that was reached."
        }
      }
    },
    "RootInfo": {
      "type": "object", 
      "description": "The root info for this account.", 
      "properties": {
        "team": {
          "$ref": "#/definitions/TeamRootInfo"
        }, 
        "user": {
          "$ref": "#/definitions/UserRootInfo"
        }
      }
    },  
    "TeamRootInfo": {
      "type": "object", 
      "description": "The root info for this account.", 
      "properties": {
        "root_namespace_id": {
          "type": "string", 
          "description": "The namespace ID for user's root namespace. It will be the namespace ID of the shared team root if the user is member of a team with a separate team root. Otherwise it will be same as :field:`RootInfo.home_namespace_id`."
        }, 
        "home_namespace_id": {
          "type": "string", 
          "description": "The namespace ID for user's home namespace."
        },
        "home_path": {
          "type": "string", 
          "description": "The path for user's home directory under the shared team root."
        }
      }
    },
    "UserRootInfo": {
      "type": "object", 
      "description": "The root info for this account.", 
      "properties": {
        "root_namespace_id": {
          "type": "string", 
          "description": "The namespace ID for user's root namespace. It will be the namespace ID of the shared team root if the user is member of a team with a separate team root. Otherwise it will be same as :field:`RootInfo.home_namespace_id`."
        }, 
        "home_namespace_id": {
          "type": "string", 
          "description": "The namespace ID for user's home namespace."
        }
      }
    }, 
    "UploadSessionFinishBatchLaunch": {
      "type": "object", 
      "description": "Result returned by :route:`upload_session/finish_batch` that may either launch an asynchronous job or complete synchronously.\nasync_job_id: This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job.\ncomplete: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "async_job_id", 
            "complete", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of UploadSessionFinishBatchLaunch"
        }, 
        "async_job_id": {
          "type": "string", 
          "description": "This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job."
        }, 
        "complete": {
          "$ref": "#/definitions/UploadSessionFinishBatchResult"
        }
      }
    }, 
    "ListFileRequestsResult": {
      "type": "object", 
      "description": "Result for :route:`list`.\nfile_requests: The file requests owned by this user. Apps with the app folder permission will only see file requests in their app folder.\n", 
      "properties": {
        "cursor": {
          "type": "string",
          "description": "Pass the cursor into list/continue to obtain additional file requests."
        },
        "file_requests": {
          "items": {
            "$ref": "#/definitions/FileRequest"
          }, 
          "type": "array", 
          "description": "The file requests owned by this user. Apps with the app folder permission will only see file requests in their app folder."
        },
        "has_more": {
          "type": "boolean",
          "description": "Is true if there are additional file requests that have not been returned yet. An additional call to :route:list/continue` can retrieve them."
        }
      }
    }, 
    "ListRevisionsError": {
      "type": "object", 
      "description": "path: None\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListRevisionsError"
        }
      }
    },
    "LockFileBatchError": {
      "type": "object", 
      "description": "", 
      "properties": {
        "path_lookup": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path_lookup", 
            "too_many_write_operations",
            "too_many_files",
            "no_write_permission",
            "cannot_be_locked",
            "file_not_shared",
            "internal_error"
          ], 
          "type": "string", 
          "title": "Choice of LockFileBatchError"
        }
      }
    },  
    "FilePermission": {
      "type": "object", 
      "description": "Whether the user is allowed to take the sharing action on the file.\naction: The action that the user may wish to take on the file.\nallow: True if the user is allowed to take the action.\nreason: The reason why the user is denied the permission. Not present if the action is allowed.\n", 
      "properties": {
        "action": {
          "$ref": "#/definitions/FileAction"
        }, 
        "reason": {
          "$ref": "#/definitions/PermissionDeniedReason"
        }, 
        "allow": {
          "type": "boolean", 
          "description": "True if the user is allowed to take the action."
        }
      }
    }, 
    "ListFolderError": {
      "type": "object", 
      "description": "path: None\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListFolderError"
        }
      }
    },
    "DeleteFileResponse": {
      "properties": {
        "file_requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileRequest"
          }
        }
      }

    },
    "FileRequest": {
      "type": "object", 
      "description": "A :link:`file request https://www.dropbox.com/help/9090` for receiving files into the user's Dropbox account.\nid: The ID of the file request.\nurl: The URL of the file request.\ntitle: The title of the file request.\ncreated: When this file request was created.\nis_open: Whether or not the file request is open. If the file request is closed, it will not accept any more file submissions.\nfile_count: The number of files this file request has received.\ndestination: The path of the folder in the Dropbox where uploaded files will be sent. This can be :val:`null` if the destination was removed. For apps with the app folder permission, this will be relative to the app folder.\ndeadline: The deadline for this file request. Only set if the request has a deadline.\n", 
      "properties": {
        "title": {
          "type": "string", 
          "description": "The title of the file request."
        }, 
        "url": {
          "type": "string", 
          "description": "The URL of the file request."
        }, 
        "destination": {
          "type": "string", 
          "description": "The path of the folder in the Dropbox where uploaded files will be sent. This can be :val:`null` if the destination was removed. For apps with the app folder permission, this will be relative to the app folder."
        },
        "description": {
          "type": "string", 
          "description": "A description of the file request. This field is optional."
        },
        "created": {
          "type": "string", 
          "description": "When this file request was created."
        }, 
        "file_count": {
          "type": "number", 
          "description": "The number of files this file request has received."
        }, 
        "deadline": {
          "$ref": "#/definitions/FileRequestDeadline"
        }, 
        "id": {
          "type": "string", 
          "description": "The ID of the file request."
        }, 
        "is_open": {
          "type": "boolean", 
          "description": "Whether or not the file request is open. If the file request is closed, it will not accept any more file submissions."
        }
      }
    }, 
    "InviteeInfoWithPermissionLevel": {
      "type": "object", 
      "description": "invitee: Email address invited to the Paper doc.\npermission_level: Permission level for the invitee.\n", 
      "properties": {
        "permission_level": {
          "$ref": "#/definitions/PaperDocPermissionLevel"
        }, 
        "invitee": {
          "$ref": "#/definitions/InviteeInfo"
        }
      }
    }, 
    "SearchError": {
      "type": "object", 
      "description": "path: None\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SearchError"
        }
      }
    }, 
    "AddPropertiesError": {
      "type": "object", 
      "description": "template_not_found: Template does not exist for the given identifier.\nrestricted_content: You do not have permission to modify this template.\nother: None\npath: None\nunsupported_folder: This folder cannot be tagged. Tagging folders is not supported for team-owned templates.\nproperty_field_too_large: One or more of the supplied property field values is too large.\ndoes_not_fit_template: One or more of the supplied property fields does not conform to the template specifications.\nproperty_group_already_exists: A property group associated with this template and file already exists.\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "template_not_found", 
            "restricted_content", 
            "other", 
            "path", 
            "unsupported_folder", 
            "property_field_too_large", 
            "does_not_fit_template", 
            "property_group_already_exists"
          ], 
          "type": "string", 
          "title": "Choice of AddPropertiesError"
        }, 
        "template_not_found": {
          "type": "string", 
          "description": "Template does not exist for the given identifier."
        }
      }
    }, 
    "DeleteArg": {
      "type": "object", 
      "description": "path: Path in the user's Dropbox to delete.\nparent_rev: Perform delete if given \"rev\" matches the existing file's latest \"rev\". This field does not support deleting a folder.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Path in the user's Dropbox to delete."
        }, 
        "parent_rev": {
          "type": "string", 
          "description": "Perform delete if given \"rev\" matches the existing file's latest \"rev\". This field does not support deleting a folder."
        }
      }
    }, 
    "SharedLinkMetadata": {
      "type": "object", 
      "description": "The metadata of a shared link.\nurl: URL of the shared link.\nname: The linked file name (including extension). This never contains a slash.\nlink_permissions: The link's access permissions.\nid: A unique identifier for the linked file.\nexpires: Expiration time, if set. By default the link won't expire.\npath_lower: The lowercased full path in the user's Dropbox. This always starts with a slash. This field will only be present only if the linked file is in the authenticated user's  dropbox.\nteam_member_info: The team membership information of the link's owner.  This field will only be present  if the link's owner is a team member.\ncontent_owner_team_info: The team information of the content's owner. This field will only be present if the content's owner is a team member and the content's owner team is different from the link's owner team.\n", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "The linked file name (including extension). This never contains a slash."
        }, 
        "url": {
          "type": "string", 
          "description": "URL of the shared link."
        }, 
        "expires": {
          "type": "string", 
          "description": "Expiration time, if set. By default the link won't expire."
        }, 
        "path_lower": {
          "type": "string", 
          "description": "The lowercased full path in the user's Dropbox. This always starts with a slash. This field will only be present only if the linked file is in the authenticated user's  dropbox."
        }, 
        "content_owner_team_info": {
          "$ref": "#/definitions/Team"
        }, 
        "link_permissions": {
          "$ref": "#/definitions/LinkPermissions"
        }, 
        "team_member_info": {
          "$ref": "#/definitions/TeamMemberInfo"
        }, 
        "id": {
          "type": "string", 
          "description": "A unique identifier for the linked file."
        }
      }
    }, 
    "AddMemberSelectorError": {
      "type": "object", 
      "description": "automatic_group: Automatically created groups can only be added to team folders.\ninvalid_dropbox_id: The value is the ID that could not be identified.\ninvalid_email: The value is the e-email address that is malformed.\nunverified_dropbox_id: The value is the ID of the Dropbox user with an unverified e-mail address.  Invite unverified users by e-mail address instead of by their Dropbox ID.\ngroup_deleted: At least one of the specified groups in :field:`AddFolderMemberArg.members` is deleted.\ngroup_not_on_team: Sharing to a group that is not on the current user's team.\nother: None\n", 
      "properties": {
        "invalid_dropbox_id": {
          "type": "string", 
          "description": "The value is the ID that could not be identified."
        }, 
        "invalid_email": {
          "type": "string", 
          "description": "The value is the e-email address that is malformed."
        }, 
        ".tag": {
          "enum": [
            "automatic_group", 
            "invalid_dropbox_id", 
            "invalid_email", 
            "unverified_dropbox_id", 
            "group_deleted", 
            "group_not_on_team", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of AddMemberSelectorError"
        }, 
        "unverified_dropbox_id": {
          "type": "string", 
          "description": "The value is the ID of the Dropbox user with an unverified e-mail address.  Invite unverified users by e-mail address instead of by their Dropbox ID."
        }
      }
    }, 
    "MemberAction": {
      "type": "object", 
      "description": "Actions that may be taken on members of a shared folder.\nleave_a_copy: Allow the member to keep a copy of the folder when removing.\nmake_editor: Make the member an editor of the folder.\nmake_owner: Make the member an owner of the folder.\nmake_viewer: Make the member a viewer of the folder.\nmake_viewer_no_comment: Make the member a viewer of the folder without commenting permissions.\nremove: Remove the member from the folder.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "leave_a_copy", 
            "make_editor", 
            "make_owner", 
            "make_viewer", 
            "make_viewer_no_comment", 
            "remove", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MemberAction"
        }
      }
    },  
    "ListRevisionsResult": {
      "type": "object", 
      "description": "is_deleted: If the file identified by the latest revision in the response is either deleted or moved.\nentries: The revisions for the file. Only revisions that are not deleted will show up here.\nserver_deleted: The time of deletion if the file was deleted.\n", 
      "properties": {
        "is_deleted": {
          "type": "boolean", 
          "description": "If the file identified by the latest revision in the response is either deleted or moved."
        }, 
        "server_deleted": {
          "type": "string", 
          "description": "The time of deletion if the file was deleted."
        }, 
        "entries": {
          "items": {
            "$ref": "#/definitions/FileMetadata"
          }, 
          "type": "array", 
          "description": "The revisions for the file. Only revisions that are not deleted will show up here."
        }
      }
    }, 
    "RelocationError": {
      "type": "object", 
      "description": "User errors that retry won't help.", 
      "properties": {
        "from_lookup": {
          "$ref": "#/definitions/LookupError"
        },
        "from_write": {
          "$ref": "#/definitions/WriteError"
        },
        "to": {
          "$ref": "#/definitions/WriteError"
        }, 
        ".tag": {
          "enum": [
            "from_lookup", 
            "from_write", 
            "to", 
            "cant_copy_shared_folder", 
            "cant_nest_shared_folder", 
            "cant_move_folder_into_itself", 
            "too_many_files", 
            "duplicated_or_nested_paths", 
            "cant_transfer_ownership", 
            "insufficient_quota",
            "internal_error",
            "cant_move_shared_folder",
            "cant_move_into_vault",
            "cant_move_into_family"
          ], 
          "type": "string", 
          "title": "Choice of RelocationError"
        },
        "cant_move_into_vault": {
          "$ref": "#/definitions/MoveIntoVaultError"
        },
        "cant_move_into_family": {
          "$ref": "#/definitions/MoveIntoFamilyError"
        }
      }
    },
    "MoveIntoVaultError": {
      "type": "object",
      "properties": {
        ".tag": {
          "type": "string",
          "enum": [
            "is_shared_folder"
          ]
        }
      }
    },
    "MoveIntoFamilyError": {
      "type": "object",
      "properties": {
        ".tag": {
          "type": "string",
          "enum": [
            "is_shared_folder"
          ]
        }
      }
    },
    "LinkPassword": {
      "type": "object", 
      "description": "remove_password: Remove the currently set password for the link.\nset_password: Set a new password or change an existing password.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "remove_password", 
            "set_password", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of LinkPassword"
        }, 
        "set_password": {
          "type": "string", 
          "description": "Set a new password or change an existing password."
        }
      }
    }, 
    "UnmountFolderError": {
      "type": "object", 
      "description": "access_error: None\nno_permission: The current user does not have permission to perform this action.\nnot_unmountable: The shared folder can't be unmounted. One example where this can occur is when the shared folder's parent folder is also a shared folder that resides in the current user's Dropbox.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharedFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "no_permission", 
            "not_unmountable", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of UnmountFolderError"
        }
      }
    }, 
    "GroupType": {
      "type": "object", 
      "description": "The group type determines how a group is created and managed.\nteam: A group to which team members are automatically added. Applicable to :link:`team folders https://www.dropbox.com/help/986` only.\nuser_managed: A group is created and managed by a user.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "team", 
            "user_managed", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GroupType"
        }
      }
    }, 
    "ThumbnailArg": {
      "type": "object", 
      "description": "path: The path to the image file you want to thumbnail.\nformat: The format for the thumbnail image, jpeg (default) or png. For  images that are photos, jpeg should be preferred, while png is  better for screenshots and digital arts.\nsize: The size for the thumbnail image.\nmode: How to resize and crop the image to achieve the desired size.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path to the image file you want to thumbnail."
        }, 
        "size": {
          "$ref": "#/definitions/ThumbnailSize"
        }, 
        "mode": {
          "$ref": "#/definitions/ThumbnailMode"
        }, 
        "format": {
          "$ref": "#/definitions/ThumbnailFormat"
        },
        "resource":{
          "type":"object",
          "properties":{
            "path":{
              "type":"string"
            },
            "link":{
              "type":"object",
              "properties":{
                "url":{
                  "type":"string"
                },
                "path":{
                  "type":"string"
                },
                "password":{
                  "type":"string"
                }
              }
            }
          }
        }
      }
    }, 
    "ListSharedLinksArg": {
      "type": "object", 
      "description": "path: See :route:`list_shared_links` description.\ncursor: The cursor returned by your last call to :route:`list_shared_links`.\ndirect_only: See :route:`list_shared_links` description.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "The cursor returned by your last call to :route:`list_shared_links`."
        }, 
        "path": {
          "type": "string", 
          "description": "See :route:`list_shared_links` description."
        }, 
        "direct_only": {
          "type": "boolean", 
          "description": "See :route:`list_shared_links` description."
        }
      }
    }, 
    "ListFileMembersError": {
      "type": "object", 
      "description": "Error for :route:`list_file_members`.\nuser_error: None\naccess_error: None\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharingFileAccessError"
        }, 
        ".tag": {
          "enum": [
            "user_error", 
            "access_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListFileMembersError"
        }, 
        "user_error": {
          "$ref": "#/definitions/SharingUserError"
        }
      }
    }, 
    "UnshareFileArg": {
      "type": "object", 
      "description": "Arguments for :route:`unshare_file`.\nfile: The file to unshare.\n", 
      "properties": {
        "file": {
          "type": "string", 
          "description": "The file to unshare."
        }
      }
    }, 
    "PaperDocCreateError": {
      "type": "object", 
      "description": "insufficient_permissions: Your account does not have permissions to perform this action.\nother: None\ncontent_malformed: The provided content was malformed and cannot be imported to Paper.\nfolder_not_found: The specified Paper folder is cannot be found.\ndoc_length_exceeded: The newly created Paper doc would be too large. Please split the content into multiple docs.\nimage_size_exceeded: The imported document contains an image that is too large. The current limit is 1MB. Note: This only applies to HTML with data uri.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "insufficient_permissions", 
            "other", 
            "content_malformed", 
            "folder_not_found", 
            "doc_length_exceeded", 
            "image_size_exceeded"
          ], 
          "type": "string", 
          "title": "Choice of PaperDocCreateError"
        }
      }
    }, 
    "PropertiesSearchArg": {
      "type": "object", 
      "description": "queries: Queries to search.\ntemplate_filter: Filter results to contain only properties associated with these template IDs.\n", 
      "properties": {
        "template_filter": {
          "$ref": "#/definitions/TemplateFilter"
        }, 
        "queries": {
          "items": {
            "$ref": "#/definitions/PropertiesSearchQuery"
          }, 
          "type": "array", 
          "description": "Queries to search."
        }
      }
    }, 
    "FileMetadata": {
      "type": "object", 
      "description": "name: The last component of the path (including extension). This never contains a slash.\nid: A unique identifier for the file.\nclient_modified: For files, this is the modification time set by the desktop client when the file was added to Dropbox. Since this time is not verified (the Dropbox server stores whatever the desktop client sends up), this should only be used for display purposes (such as sorting) and not, for example, to determine if a file has changed or not.\nserver_modified: The last time the file was modified on Dropbox.\nrev: A unique identifier for the current revision of a file. This field is the same rev as elsewhere in the API and can be used to detect changes and avoid conflicts.\nsize: The file size in bytes.\npath_lower: The lowercased full path in the user's Dropbox. This always starts with a slash. This field will be null if the file or folder is not mounted.\npath_display: The cased path to be used for display purposes only. In rare instances the casing will not correctly match the user's filesystem, but this behavior will match the path provided in the Core API v1, and at least the last path component will have the correct casing. Changes to only the casing of paths won't be returned by :route:`list_folder/continue`. This field will be null if the file or folder is not mounted.\nparent_shared_folder_id: Please use :field:`FileSharingInfo.parent_shared_folder_id` or :field:`FolderSharingInfo.parent_shared_folder_id` instead.\nmedia_info: Additional information if the file is a photo or video.\nsymlink_info: Set if this file is a symlink.\nsharing_info: Set if this file is contained in a shared folder.\nproperty_groups: Additional information if the file has custom properties with the property template specified.\nhas_explicit_shared_members: This flag will only be present if include_has_explicit_shared_members  is true in :route:`list_folder` or :route:`get_metadata`. If this  flag is present, it will be true if this file has any explicit shared  members. This is different from sharing_info in that this could be true  in the case where a file has explicit members but is not contained within  a shared folder.\ncontent_hash: A hash of the file content. This field can be used to verify data integrity. For more information see our :link:`Content hash /developers/reference/content-hash` page.\n", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "The last component of the path (including extension). This never contains a slash."
        },
        "id": {
          "type": "string", 
          "description": "A unique identifier for the file."
        },
        "client_modified": {
          "type": "string", 
          "description": "For files, this is the modification time set by the desktop client when the file was added to Dropbox. Since this time is not verified (the Dropbox server stores whatever the desktop client sends up), this should only be used for display purposes (such as sorting) and not, for example, to determine if a file has changed or not."
        }, 
        "server_modified": {
          "type": "string", 
          "description": "The last time the file was modified on Dropbox."
        },
        "rev": {
          "type": "string", 
          "description": "A unique identifier for the current revision of a file. This field is the same rev as elsewhere in the API and can be used to detect changes and avoid conflicts."
        },
        "size": {
          "type": "number", 
          "description": "The file size in bytes."
        },
        "path_lower": {
          "type": "string", 
          "description": "The lowercased full path in the user's Dropbox. This always starts with a slash. This field will be null if the file or folder is not mounted."
        },
        "path_display": {
          "type": "string", 
          "description": "The cased path to be used for display purposes only. In rare instances the casing will not correctly match the user's filesystem, but this behavior will match the path provided in the Core API v1, and at least the last path component will have the correct casing. Changes to only the casing of paths won't be returned by :route:`list_folder/continue`. This field will be null if the file or folder is not mounted."
        },
        "parent_shared_folder_id": {
          "type": "string", 
          "description": "Please use :field:`FileSharingInfo.parent_shared_folder_id` or :field:`FolderSharingInfo.parent_shared_folder_id` instead."
        },
        "preview_url": {
          "type": "string", 
          "description": "The preview URL of the file. This field is optional."
        },
        "media_info": {
          "$ref": "#/definitions/MediaInfo"
        },
        "symlink_info": {
          "$ref": "#/definitions/SymlinkInfo"
        },
        "sharing_info": {
          "$ref": "#/definitions/FileSharingInfo"
        },
        "is_downloadable": {
          "type": "boolean",
          "description": "If true, file can be downloaded directly; else the file must be exported. The default for this field is True."
        },
        "export_info": {
          "$ref": "#/definitions/ExportInfo"
        } ,
        "property_groups": {
          "items": {
            "$ref": "#/definitions/PropertyGroup"
          }, 
          "type": "array", 
          "description": "Additional information if the file has custom properties with the property template specified."
        },   
        "has_explicit_shared_members": {
          "type": "boolean", 
          "description": "This flag will only be present if include_has_explicit_shared_members  is true in :route:`list_folder` or :route:`get_metadata`. If this  flag is present, it will be true if this file has any explicit shared  members. This is different from sharing_info in that this could be true  in the case where a file has explicit members but is not contained within  a shared folder."
        },  
        "content_hash": {
          "type": "string", 
          "description": "A hash of the file content. This field can be used to verify data integrity. For more information see our :link:`Content hash /developers/reference/content-hash` page."
        },
        "file_lock_info": {
          "$ref": "#/definitions/FileLockMetadata"
        }
      }
    },
    "ExportInfo": {
      "type": "object",
      "description": "Export information for a file.",
      "properties": {
        "export_as": {
          "type": "string"
        },
        "export_options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FileLockMetadata": {
      "type": "object",
      "description": "If present, the metadata associated with the file's current lock.",
      "properties":
      {
        "is_lockholder": {
          "type": "boolean"
        },
        "lockholder_name": {
          "type": "string"
        },
        "lockholder_account_id": {
          "type": "string"
        },
        "created": {
          "type": "string"
        }
      }
    },
    "UploadSessionStartArg": {
      "type": "object", 
      "description": "close: If true, the current session will be closed, at which point you won't be able to call :route:`upload_session/append_v2` anymore with the current session.\n", 
      "properties": {
        "close": {
          "type": "boolean", 
          "description": "If true, the current session will be closed, at which point you won't be able to call :route:`upload_session/append_v2` anymore with the current session."
        },
        "content_hash": {
          "type": "string", 
          "description": "A hash of the file content uploaded in this call. If provided and the uploaded content does not match this hash, an error will be returned."
        },
        "session_type": {
          "type": "string", 
          "description": "Type of upload session you want to start. If not specified, default is UploadSessionType.sequential. This field is optional.",
          "enum": [
            "sequential",
            "concurrent"
          ]
        }
      }
    },
    "UploadSessionStartBatchArg": {
      "type": "object", 
      "description": "num_sessions: (min=1, max=1000)The number of upload sessions to start.\nsession_type: Type of upload session you want to start.", 
      "properties": {
        "num_sessions": {
          "type": "number", 
          "description": "(min=1, max=1000)The number of upload sessions to start."
        },
        "session_type": {
          "description": "Type of upload session you want to start. If not specified, default is UploadSessionType.sequential.",
          "type": "string",
          "enum": [
            "sequential",
            "concurrent"
          ]
        }
      }
    },
    "SearchContinueArg": {
      "type": "object", 
      "description": "cursor: The cursor returned by call to search:2. Used to fetch the next page of results.", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "The cursor returned by call to search:2. Used to fetch the next page of results."
        }
      }
    },
    "SearchV2Arg": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/SearchOptions"
        },
        "match_field_options": {
          "$ref": "#/definitions/SearchMatchFieldOptions"
        }
      }
    },
    "SearchMatchFieldOptions": {
      "type": "object",
      "properties": {
        "include_highlights": {
          "type": "boolean"
        }
      }
    },
    "SearchOptions": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "max_results": {
          "type": "number"
        },
        "order_by": {
          "type": "string",
          "enum": [
            "relevance",
            "last_modified_time"
          ]
        },
        "file_status": {
          "type": "string",
          "enum": [
            "active",
            "deleted"
          ]
        },
        "filename_only": {
          "type": "boolean"
        },
        "file_extensions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "file_categories": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "image",
              "document",
              "pdf",
              "spreadsheet",
              "presentation",
              "audio",
              "video",
              "folder",
              "paper",
              "others"
            ]
          }
        },
        "account_id": {
          "type": "string"
        }
      }
    },
    "SearchArg": {
      "type": "object", 
      "description": "path: The path in the user's Dropbox to search. Should probably be a folder.\nquery: The string to search for. The search string is split on spaces into multiple tokens. For file name searching, the last token is used for prefix matching (i.e. \"bat c\" matches \"bat cave\" but not \"batman car\").\nstart: The starting index within the search results (used for paging).\nmax_results: The maximum number of search results to return.\nmode: The search mode (filename, filename_and_content, or deleted_filename). Note that searching file content is only available for Dropbox Business accounts.\n", 
      "properties": {
        "start": {
          "type": "number", 
          "description": "The starting index within the search results (used for paging)."
        }, 
        "max_results": {
          "type": "number", 
          "description": "The maximum number of search results to return."
        }, 
        "path": {
          "type": "string", 
          "description": "The path in the user's Dropbox to search. Should probably be a folder."
        }, 
        "mode": {
          "$ref": "#/definitions/SearchMode"
        }, 
        "query": {
          "type": "string", 
          "description": "The string to search for. The search string is split on spaces into multiple tokens. For file name searching, the last token is used for prefix matching (i.e. \"bat c\" matches \"bat cave\" but not \"batman car\")."
        }
      }
    }, 
    "RelinquishFolderMembershipError": {
      "type": "object", 
      "description": "access_error: None\nfolder_owner: The current user is the owner of the shared folder. Owners cannot relinquish membership to their own folders. Try unsharing or transferring ownership first.\nmounted: The shared folder is currently mounted.  Unmount the shared folder before relinquishing membership.\ngroup_access: The current user has access to the shared folder via a group.  You can't relinquish membership to folders shared via groups.\nteam_folder: This action cannot be performed on a team shared folder.\nno_permission: The current user does not have permission to perform this action.\nno_explicit_access: The current user only has inherited access to the shared folder.  You can't relinquish inherited membership to folders.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharedFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "folder_owner", 
            "mounted", 
            "group_access", 
            "team_folder", 
            "no_permission", 
            "no_explicit_access", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of RelinquishFolderMembershipError"
        }
      }
    }, 
    "ListFolderArg": {
      "type": "object", 
      "description": "path: A unique identifier for the file.\nrecursive: If true, the list folder operation will be applied recursively to all subfolders and the response will contain contents of all subfolders.\ninclude_media_info: If true, :field:`FileMetadata.media_info` is set for photo and video.\ninclude_deleted: If true, the results will include entries for files and folders that used to exist but were deleted.\ninclude_has_explicit_shared_members: If true, the results will include a flag for each file indicating whether or not  that file has any explicit members.\ninclude_mounted_folders: If true, the results will include entries under mounted folders which includes app folder, shared folder and team folder.\nlimit: The maximum number of results to return per request. Note: This is an approximate number and there can be slightly more entries returned in some cases.\nshared_link: A shared link to list the contents of. If the link is password-protected, the password must be provided. If this field is present, :field:`ListFolderArg.path` will be relative to root of the shared link. Only non-recursive mode is supported for shared link.\ninclude_property_groups: If set to a valid list of template IDs, :field:`FileMetadata.property_groups` is set if there exists property data associated with the file and each of the listed templates.\n", 
      "properties": {
        "shared_link": {
          "$ref": "#/definitions/SharedLink"
        }, 
        "include_property_groups": {
          "$ref": "#/definitions/TemplateFilterBase"
        },
        "include_non_downloadable_files": {
          "type": "boolean", 
          "description": "If true, include files that are not downloadable, i.e. Google Docs."
        }, 
        "recursive": {
          "type": "boolean", 
          "description": "If true, the list folder operation will be applied recursively to all subfolders and the response will contain contents of all subfolders."
        }, 
        "include_has_explicit_shared_members": {
          "type": "boolean", 
          "description": "If true, the results will include a flag for each file indicating whether or not  that file has any explicit members."
        }, 
        "include_deleted": {
          "type": "boolean", 
          "description": "If true, the results will include entries for files and folders that used to exist but were deleted."
        }, 
        "limit": {
          "type": "number", 
          "description": "The maximum number of results to return per request. Note: This is an approximate number and there can be slightly more entries returned in some cases."
        }, 
        "include_media_info": {
          "type": "boolean", 
          "description": "If true, :field:`FileMetadata.media_info` is set for photo and video."
        }, 
        "include_mounted_folders": {
          "type": "boolean", 
          "description": "If true, the results will include entries under mounted folders which includes app folder, shared folder and team folder."
        }, 
        "path": {
          "type": "string", 
          "description": "A unique identifier for the file."
        }
      }
    }, 
    "AddPaperDocUser": {
      "type": "object", 
      "description": "doc_id: The Paper doc ID.\nmembers: User which should be added to the Paper doc. Specify only email address or Dropbox account ID.\ncustom_message: A personal message that will be emailed to each successfully added member.\nquiet: Clients should set this to true if no email message shall be sent to added users.\n", 
      "properties": {
        "doc_id": {
          "type": "string", 
          "description": "The Paper doc ID."
        }, 
        "quiet": {
          "type": "boolean", 
          "description": "Clients should set this to true if no email message shall be sent to added users."
        }, 
        "members": {
          "items": {
            "$ref": "#/definitions/AddMember"
          }, 
          "type": "array", 
          "description": "User which should be added to the Paper doc. Specify only email address or Dropbox account ID."
        }, 
        "custom_message": {
          "type": "string", 
          "description": "A personal message that will be emailed to each successfully added member."
        }
      }
    }, 
    "AddMember": {
      "type": "object", 
      "description": "member: User which should be added to the Paper doc. Specify only email address or Dropbox account ID.\npermission_level: Permission for the user.\n", 
      "properties": {
        "member": {
          "$ref": "#/definitions/MemberSelector"
        }, 
        "access_level": {
          "$ref": "#/definitions/PaperDocPermissionLevel"
        }
      }
    }, 
    "GracePeriod": {
      "description": "one_day: None\ntwo_days: None\nseven_days: None\nthirty_days: None\nalways: None\nother: None\n", 
          "enum": [
            "one_day", 
            "two_days", 
            "seven_days", 
            "thirty_days", 
            "always", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GracePeriod"
    }, 
    "UserInfoWithPermissionLevel": {
      "type": "object", 
      "description": "user: User shared on the Paper doc.\npermission_level: Permission level for the user.\n", 
      "properties": {
        "permission_level": {
          "$ref": "#/definitions/PaperDocPermissionLevel"
        }, 
        "user": {
          "$ref": "#/definitions/UserInfo"
        }
      }
    }, 
    "PollError": {
      "type": "object", 
      "description": "Error returned by methods for polling the status of asynchronous job.\ninvalid_async_job_id: The job ID is invalid.\ninternal_error: Something went wrong with the job on Dropbox's end. You'll need to verify that the action you were taking succeeded, and if not, try again. This should happen very rarely.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_async_job_id", 
            "internal_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PollError"
        }
      }
    }, 
    "DeleteBatchArg": {
      "type": "object", 
      "description": "entries: None\n", 
      "properties": {
        "entries": {
          "items": {
            "$ref": "#/definitions/DeleteArg"
          }, 
          "type": "array"
        }
      }
    }, 
    "ProfilePhotoError": {
      "type": "object", 
      "description": "SetProfilePhotoError", 
      "properties": {
        "error": {
          "$ref": "#/definitions/ProfilePhotoErrorTypes"
        }
      }
    },
  "ProfilePhotoErrorTypes": {
    "type": "object", 
    "description": "Various porfile photo error types", 
    "properties": {
      ".tag": {
        "enum": [
          "file_type_error", 
          "file_size_error", 
          "dimension_error", 
          "thumbnail_error",
          "transient_error"
        ], 
        "type": "string", 
        "title": "Choice of ProfilePhotoError"
      },
      "error_summary": {
        "type": "string"
      }
    }
  },
    "RelinquishFileMembershipError": {
      "type": "object", 
      "description": "access_error: None\ngroup_access: The current user has access to the shared file via a group.  You can't relinquish membership to a file shared via groups.\nno_permission: The current user does not have permission to perform this action.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharingFileAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "group_access", 
            "no_permission", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of RelinquishFileMembershipError"
        }
      }
    }, 
    "ListFileMembersBatchArg": {
      "type": "object", 
      "description": "Arguments for :route:`list_file_members/batch`.\nfiles: Files for which to return members.\nlimit: Number of members to return max per query. Defaults to 10 if no limit is specified.\n", 
      "properties": {
        "files": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Files for which to return members."
        }, 
        "limit": {
          "type": "integer", 
          "description": "Number of members to return max per query. Defaults to 10 if no limit is specified."
        }
      }
    }, 
    "GetThumbnailBatchResult": {
      "type": "object", 
      "description": "entries: List of files and their thumbnails.\n", 
      "properties": {
        "entries": {
          "items": {
            "$ref": "#/definitions/GetThumbnailBatchResultEntry"
          }, 
          "type": "array", 
          "description": "List of files and their thumbnails."
        }
      }
    }, 
    "CreateFolderArg": {
      "type": "object", 
      "description": "path: Path in the user's Dropbox to create.\nautorename: If there's a conflict, have the Dropbox server try to autorename the folder to avoid the conflict.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Path in the user's Dropbox to create."
        }, 
        "autorename": {
          "type": "boolean", 
          "description": "If there's a conflict, have the Dropbox server try to autorename the folder to avoid the conflict."
        }
      }
    }, 
    "PlatformType": {
      "type": "object", 
      "description": "Possible platforms on which a user may view content.\nweb: The content was viewed on the web.\nmobile: The content was viewed on a mobile client.\ndesktop: The content was viewed on a desktop client.\nunknown: The content was viewed on an unknown platform.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "web", 
            "mobile", 
            "desktop", 
            "unknown", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PlatformType"
        }
      }
    }, 
    "SharedContentLinkMetadata": {
      "type": "object", 
      "description": "Metadata of a shared link for a file or folder.\naudience_options: The audience options that are available for the content. Some audience options may be unavailable. For example, team_only may be unavailable if the content is not owned by a user on a team. The 'default' audience option is always available if the user can modify link settings.\ncurrent_audience: The current audience of the link.\nlink_permissions: A list of permissions for actions you can perform on the link.\npassword_protected: Whether the link is protected by a password.\nurl: The URL of the link.\naccess_level: The access level on the link for this file.\naudience_restricting_shared_folder: The shared folder that prevents the link audience for this link from being more restrictive.\nexpiry: Whether the link has an expiry set on it. A link with an expiry will have its  audience changed to members when the expiry is reached.\naudience_exceptions: The content inside this folder with link audience different than this folder's. This is only returned when an endpoint that returns metadata for a single shared folder is called, e.g. /get_folder_metadata.\n", 
      "properties": {
        "current_audience": {
          "$ref": "#/definitions/LinkAudience"
        }, 
        "url": {
          "type": "string", 
          "description": "The URL of the link."
        }, 
        "password_protected": {
          "type": "boolean", 
          "description": "Whether the link is protected by a password."
        }, 
        "audience_exceptions": {
          "$ref": "#/definitions/AudienceExceptions"
        }, 
        "expiry": {
          "type": "string", 
          "description": "Whether the link has an expiry set on it. A link with an expiry will have its  audience changed to members when the expiry is reached."
        }, 
        "access_level": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "audience_restricting_shared_folder": {
          "$ref": "#/definitions/AudienceRestrictingSharedFolder"
        }, 
        "link_permissions": {
          "items": {
            "$ref": "#/definitions/LinkPermission"
          }, 
          "type": "array", 
          "description": "A list of permissions for actions you can perform on the link."
        }, 
        "audience_options": {
          "items": {
            "$ref": "#/definitions/LinkAudience"
          }, 
          "type": "array", 
          "description": "The audience options that are available for the content. Some audience options may be unavailable. For example, team_only may be unavailable if the content is not owned by a user on a team. The 'default' audience option is always available if the user can modify link settings."
        }
      }
    }, 
    "InviteeMembershipInfo": {
      "type": "object", 
      "description": "Information about an invited member of a shared content.\naccess_type: The access type for this member.\ninvitee: Recipient of the invitation.\npermissions: The permissions that requesting user has on this member. The set of permissions corresponds to the MemberActions in the request.\ninitials: Never set.\nis_inherited: True if the member has access from a parent folder.\nuser: The user this invitation is tied to, if available.\n", 
      "properties": {
        "invitee": {
          "$ref": "#/definitions/InviteeInfo"
        }, 
        "access_type": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "user": {
          "$ref": "#/definitions/UserInfo"
        }, 
        "is_inherited": {
          "type": "boolean", 
          "description": "True if the member has access from a parent folder."
        }, 
        "initials": {
          "type": "string", 
          "description": "Never set."
        }, 
        "permissions": {
          "items": {
            "$ref": "#/definitions/MemberPermission"
          }, 
          "type": "array", 
          "description": "The permissions that requesting user has on this member. The set of permissions corresponds to the MemberActions in the request."
        }
      }
    }, 
    "GetAccountError": {
      "type": "object", 
      "description": "no_account: The specified :field:`GetAccountArg.account_id` does not exist.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "no_account", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GetAccountError"
        }
      }
    },
    "GetFeaturesError": {
      "type": "object", 
      "description": "empty_features_list: At least one UserFeature must be included in the UserFeaturesGetValuesBatchArg.features list.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "empty_features_list", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GetFeaturesError"
        }
      }
    }, 
    "JobStatus": {
      "type": "object", 
      "description": "in_progress: The asynchronous job is still in progress.\ncomplete: The asynchronous job has finished.\nfailed: The asynchronous job returned an error.\n", 
      "properties": {
        "failed": {
          "$ref": "#/definitions/JobError"
        }, 
        ".tag": {
          "enum": [
            "in_progress", 
            "complete", 
            "failed"
          ], 
          "type": "string", 
          "title": "Choice of JobStatus"
        }
      }
    }, 
    "WriteConflictError": {
      "type": "object", 
      "description": "file: There's a file in the way.\nfolder: There's a folder in the way.\nfile_ancestor: There's a file at an ancestor path, so we couldn't create the required parent folders.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "file", 
            "folder", 
            "file_ancestor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of WriteConflictError"
        }
      }
    }, 
    "LinkPermission": {
      "type": "object", 
      "description": "Permissions for actions that can be performed on a link.\naction: None\nallow: None\nreason: None\n", 
      "properties": {
        "action": {
          "$ref": "#/definitions/LinkAction"
        }, 
        "reason": {
          "$ref": "#/definitions/PermissionDeniedReason"
        }, 
        "allow": {
          "type": "boolean"
        }
      }
    }, 
    "Team": {
      "type": "object", 
      "description": "Information about a team.\nid: The team's unique ID.\nname: The name of the team.\n", 
      "properties": {
        "id": {
          "type": "string", 
          "description": "The team's unique ID."
        }, 
        "name": {
          "type": "string", 
          "description": "The name of the team."
        }
      }
    }, 
    "SaveUrlResult": {
      "type": "object", 
      "description": "async_job_id: This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job.\ncomplete: Metadata of the file where the URL is saved to.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "async_job_id", 
            "complete"
          ], 
          "type": "string", 
          "title": "Choice of SaveUrlResult"
        }, 
        "async_job_id": {
          "type": "string", 
          "description": "This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job."
        }, 
        "complete": {
          "$ref": "#/definitions/FileMetadata"
        }
      }
    }, 
    "SetAccessInheritanceArg": {
      "type": "object", 
      "description": "shared_folder_id: The ID for the shared folder.\naccess_inheritance: The access inheritance settings for the folder.\n", 
      "properties": {
        "access_inheritance": {
          "$ref": "#/definitions/AccessInheritance"
        }, 
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID for the shared folder."
        }
      }
    }, 
    "ListFolderLongpollError": {
      "type": "object", 
      "description": "reset: Indicates that the cursor has been invalidated. Call :route:`list_folder` to obtain a new cursor.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "reset", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListFolderLongpollError"
        }
      }
    }, 
    "ListFilesResult": {
      "type": "object", 
      "description": "Success results for :route:`list_received_files`.\nentries: Information about the files shared with current user.\ncursor: Cursor used to obtain additional shared files.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Cursor used to obtain additional shared files."
        }, 
        "entries": {
          "items": {
            "$ref": "#/definitions/SharedFileMetadata"
          }, 
          "type": "array", 
          "description": "Information about the files shared with current user."
        }
      }
    },
    "SharedLinkWithSettingsMetadata": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/FileLinkMetadata"
        },
        "folder": {
          "$ref": "#/definitions/FolderLinkMetadata"
        }
      }
    },
    "FileLinkMetadata": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "link_permissions": {
          "$ref": "#/definitions/SharedLinkPermissions"
        },
        "client_modified": {
          "type": "string"
        },
        "server_modified": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "size": {
          "type": "number"
        },
        "id": {
          "type": "string"
        },
        "expires": {
          "type": "string"
        },
        "path_lower": {
          "type": "string"
        },
        "team_member_info": {
          "$ref": "#/definitions/TeamMemberInfo"
        },
        "content_owner_team_info": {
          "$ref": "#/definitions/Team"
        }
      }
    },
    "FolderLinkMetadata": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "link_permissions": {
          "$ref": "#/definitions/SharedLinkPermissions"
        },
        "id": {
          "type": "string"
        },
        "expires": {
          "type": "string"
        },
        "path_lower": {
          "type": "string"
        },
        "team_member_info": {
          "$ref": "#/definitions/TeamMemberInfo"
        },
        "content_owner_team_info": {
          "$ref": "#/definitions/Team"
        }
      }
    },
    "SharedLinkPermissions": {
      "type": "object",
      "properties": {
        "can_revoke": {
          "type": "boolean"
        },
        "visibility_policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VisibilityPolicy"
          }        
        },
        "can_set_expiry": {
          "type": "boolean"
        },
        "can_remove_expiry": {
          "type": "boolean"
        },
        "allow_download": {
          "type": "boolean"
        },
        "can_allow_download": {
          "type": "boolean"
        },
        "can_disallow_download": {
          "type": "boolean"
        },
        "allow_comments": {
          "type": "boolean"
        },
        "team_restricts_comments": {
          "type": "boolean"
        },
        "resolved_visibility": {
          "type": "string",
          "enum": [
            "public",
            "team_only",
            "password"
          ]
        },
        "requested_visibility": {
          "type": "string",
          "enum": [
            "public",
            "team_only",
            "password"
          ]
        },
        "revoke_failure_reason": {
          "type": "string",
          "enum": [
            "login_required",
            "email_verify_required",
            "password_required"
          ]
        },
        "effective_audience": {
          "type": "string",
          "enum": [
            "public",
            "team",
            "no_one"
          ]
        },
        "link_access_level": {
          "type": "string",
          "enum": [
            "viewer",
            "editor"
          ]
        },
        "audience_options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkAudienceOption"
          }
        },
        "can_set_password": {
          "type": "boolean"
        },
        "can_remove_password": {
          "type": "boolean"
        },
        "require_password": {
          "type": "boolean"
        },
        "can_use_extended_sharing_controls": {
          "type": "boolean"
        }
      }
    },
    "VisibilityPolicy": {
      "type": "object",
      "properties": {
        "policy": {
          "type": "string",
          "enum": [
            "public",
            "team_only",
            "password"
          ]
        },
        "resolved_policy": {
          "type": "string",
          "enum": [
            "public",
            "team_only",
            "password"
          ]
        },
        "allowed": {
          "type": "boolean"
        },
        "disallowed_reason": {
          "type": "string",
          "enum": [
            "delete_and_recreate",
            "restricted_by_shared_folder",
            "restricted_by_team"
          ]
        }
      }
    },
    "LinkAudienceOption": {
      "type": "object",
      "properties": {
        "audience": {
          "type": "string",
          "enum": [
            "public",
            "team",
            "no_one"
          ]
        },
        "allowed": {
          "type": "boolean"
        },
        "disallowed_reason": {
          "type": "string",
          "enum": [
            "delete_and_recreate",
            "restricted_by_shared_folder",
            "restricted_by_team"
          ]
        }
      }
    },
    "CreateSharedLinkWithSettingsArg": {
      "type": "object", 
      "description": "path: The path to be shared by the shared link.\nsettings: The requested settings for the newly created shared link.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path to be shared by the shared link."
        }, 
        "settings": {
          "$ref": "#/definitions/SharedLinkSettings"
        }
      }
    }, 
    "ModifyTemplateError": {
      "type": "object", 
      "description": "template_not_found: Template does not exist for the given identifier.\nrestricted_content: You do not have permission to modify this template.\nother: None\nconflicting_property_names: A property field key with that name already exists in the template.\ntoo_many_properties: There are too many properties in the changed template. The maximum number of properties per template is 32.\ntoo_many_templates: There are too many templates for the team.\ntemplate_attribute_too_large: The template name, description or one or more of the property field keys is too large.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "template_not_found", 
            "restricted_content", 
            "other", 
            "conflicting_property_names", 
            "too_many_properties", 
            "too_many_templates", 
            "template_attribute_too_large"
          ], 
          "type": "string", 
          "title": "Choice of ModifyTemplateError"
        }, 
        "template_not_found": {
          "type": "string", 
          "description": "Template does not exist for the given identifier."
        }
      }
    }, 
    "GetFileMetadataBatchArg": {
      "type": "object", 
      "description": "Arguments of :route:`get_file_metadata/batch`.\nfiles: The files to query.\nactions: A list of `FileAction`s corresponding to `FilePermission`s that should appear in the  response's :field:`SharedFileMetadata.permissions` field describing the actions the  authenticated user can perform on the file.\n", 
      "properties": {
        "files": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "The files to query."
        }, 
        "actions": {
          "items": {
            "$ref": "#/definitions/FileAction"
          }, 
          "type": "array", 
          "description": "A list of `FileAction`s corresponding to `FilePermission`s that should appear in the  response's :field:`SharedFileMetadata.permissions` field describing the actions the  authenticated user can perform on the file."
        }
      }
    }, 
    "PropertiesSearchContinueArg": {
      "type": "object", 
      "description": "cursor: The cursor returned by your last call to :route:`properties/search` or :route:`properties/search/continue`.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "The cursor returned by your last call to :route:`properties/search` or :route:`properties/search/continue`."
        }
      }
    }, 
    "GetFileMetadataArg": {
      "type": "object", 
      "description": "Arguments of :route:`get_file_metadata`.\nfile: The file to query.\nactions: A list of `FileAction`s corresponding to `FilePermission`s that should appear in the  response's :field:`SharedFileMetadata.permissions` field describing the actions the  authenticated user can perform on the file.\n", 
      "properties": {
        "actions": {
          "items": {
            "$ref": "#/definitions/FileAction"
          }, 
          "type": "array", 
          "description": "A list of `FileAction`s corresponding to `FilePermission`s that should appear in the  response's :field:`SharedFileMetadata.permissions` field describing the actions the  authenticated user can perform on the file."
        }, 
        "file": {
          "type": "string", 
          "description": "The file to query."
        }
      }
    }, 
    "AddFolderMemberArg": {
      "type": "object", 
      "description": "shared_folder_id: The ID for the shared folder.\nmembers: The intended list of members to add.  Added members will receive invites to join the shared folder.\nquiet: Whether added members should be notified via email and device notifications of their invite.\ncustom_message: Optional message to display to added members in their invitation.\n", 
      "properties": {
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID for the shared folder."
        }, 
        "quiet": {
          "type": "boolean", 
          "description": "Whether added members should be notified via email and device notifications of their invite."
        }, 
        "members": {
          "items": {
            "$ref": "#/definitions/AddMember"
          }, 
          "type": "array", 
          "description": "The intended list of members to add.  Added members will receive invites to join the shared folder."
        }, 
        "custom_message": {
          "type": "string", 
          "description": "Optional message to display to added members in their invitation."
        }
      }
    }, 
    "UpdateFileMemberArgs": {
      "type": "object", 
      "description": "Arguments for :route:`update_file_member`.\nfile: File for which we are changing a member's access.\nmember: The member whose access we are changing.\naccess_level: The new access level for the member.\n", 
      "properties": {
        "member": {
          "$ref": "#/definitions/MemberSelector"
        }, 
        "access_level": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "file": {
          "type": "string", 
          "description": "File for which we are changing a member's access."
        }
      }
    }, 
    "SpaceUsage": {
      "type": "object", 
      "description": "Information about a user's space usage and quota.\nused: The user's total space usage (bytes).\nallocation: The user's space allocation.\n", 
      "properties": {
        "allocation": {
          "$ref": "#/definitions/SpaceAllocation"
        }, 
        "used": {
          "type": "number", 
          "description": "The user's total space usage (bytes)."
        }
      }
    }, 
    "CreateFolderBatchResultEntry": {
      "type": "object", 
      "description": "success: None\nfailure: None\n", 
      "properties": {
        "failure": {
          "$ref": "#/definitions/CreateFolderEntryError"
        }, 
        ".tag": {
          "enum": [
            "success", 
            "failure"
          ], 
          "type": "string", 
          "title": "Choice of CreateFolderBatchResultEntry"
        }, 
        "success": {
          "$ref": "#/definitions/CreateFolderEntryResult"
        }
      }
    }, 
    "UpdateFolderMemberError": {
      "type": "object", 
      "description": "access_error: None\nmember_error: None\nno_explicit_access: If updating the access type required the member to be added to the shared folder and there was an error when adding the member.\ninsufficient_plan: The current user's account doesn't support this action. An example of this is when downgrading a member from editor to viewer. This action can only be performed by users that have upgraded to a Pro or Business plan.\nno_permission: The current user does not have permission to perform this action.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharedFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "member_error", 
            "no_explicit_access", 
            "insufficient_plan", 
            "no_permission", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of UpdateFolderMemberError"
        }, 
        "no_explicit_access": {
          "$ref": "#/definitions/AddFolderMemberError"
        }, 
        "member_error": {
          "$ref": "#/definitions/SharedFolderMemberError"
        }
      }
    }, 
    "PaperDocExportResult": {
      "type": "object", 
      "description": "owner: The Paper doc owner's email address.\ntitle: The Paper doc title.\nrevision: The Paper doc revision. Simply an ever increasing number.\nmime_type: MIME type of the export. This corresponds to :type:`ExportFormat` specified in the request.\n", 
      "properties": {
        "owner": {
          "type": "string", 
          "description": "The Paper doc owner's email address."
        }, 
        "revision": {
          "type": "number", 
          "description": "The Paper doc revision. Simply an ever increasing number."
        }, 
        "mime_type": {
          "type": "string", 
          "description": "MIME type of the export. This corresponds to :type:`ExportFormat` specified in the request."
        }, 
        "title": {
          "type": "string", 
          "description": "The Paper doc title."
        }
      }
    }, 
    "DeleteBatchError": {
      "type": "object", 
      "description": "too_many_write_operations: Use :field:`DeleteError.too_many_write_operations`. :route:`delete_batch` now provides smaller granularity about which entry has failed because of this.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "too_many_write_operations", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of DeleteBatchError"
        }
      }
    }, 
    "UserFileMembershipInfo": {
      "type": "object", 
      "description": "The information about a user member of the shared content with an appended last seen timestamp.\naccess_type: The access type for this member.\nuser: The account information for the membership user.\npermissions: The permissions that requesting user has on this member. The set of permissions corresponds to the MemberActions in the request.\ninitials: Never set.\nis_inherited: True if the member has access from a parent folder.\ntime_last_seen: The UTC timestamp of when the user has last seen the content, if they have.\nplatform_type: The platform on which the user has last seen the content, or unknown.\n", 
      "properties": {
        "access_type": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "platform_type": {
          "$ref": "#/definitions/PlatformType"
        }, 
        "user": {
          "$ref": "#/definitions/UserInfo"
        }, 
        "time_last_seen": {
          "type": "string", 
          "description": "The UTC timestamp of when the user has last seen the content, if they have."
        }, 
        "is_inherited": {
          "type": "boolean", 
          "description": "True if the member has access from a parent folder."
        }, 
        "permissions": {
          "items": {
            "$ref": "#/definitions/MemberPermission"
          }, 
          "type": "array", 
          "description": "The permissions that requesting user has on this member. The set of permissions corresponds to the MemberActions in the request."
        }, 
        "initials": {
          "type": "string", 
          "description": "Never set."
        }
      }
    }, 
    "MemberAccessLevelResult": {
      "type": "object", 
      "description": "Contains information about a member's access level to content after an operation.\naccess_level: The member still has this level of access to the content through a parent folder.\nwarning: A localized string with additional information about why the user has this access level to the content.\naccess_details: The parent folders that a member has access to. The field is present if the user has access to the first parent folder where the member gains access.\n", 
      "properties": {
        "access_level": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "access_details": {
          "items": {
            "$ref": "#/definitions/ParentFolderAccessInfo"
          }, 
          "type": "array", 
          "description": "The parent folders that a member has access to. The field is present if the user has access to the first parent folder where the member gains access."
        }, 
        "warning": {
          "type": "string", 
          "description": "A localized string with additional information about why the user has this access level to the content."
        }
      }
    }, 
    "JobError": {
      "type": "object", 
      "description": "Error occurred while performing an asynchronous job from :route:`unshare_folder` or :route:`remove_folder_member`.\nunshare_folder_error: Error occurred while performing :route:`unshare_folder` action.\nremove_folder_member_error: Error occurred while performing :route:`remove_folder_member` action.\nrelinquish_folder_membership_error: Error occurred while performing :route:`relinquish_folder_membership` action.\nother: None\n", 
      "properties": {
        "remove_folder_member_error": {
          "$ref": "#/definitions/RemoveFolderMemberError"
        }, 
        "unshare_folder_error": {
          "$ref": "#/definitions/UnshareFolderError"
        }, 
        ".tag": {
          "enum": [
            "unshare_folder_error", 
            "remove_folder_member_error", 
            "relinquish_folder_membership_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of JobError"
        }, 
        "relinquish_folder_membership_error": {
          "$ref": "#/definitions/RelinquishFolderMembershipError"
        }
      }
    }, 
    "PreviewError": {
      "type": "object", 
      "description": "path: An error occurs when downloading metadata for the file.\nin_progress: This preview generation is still in progress and the file is not ready  for preview yet.\nunsupported_extension: The file extension is not supported preview generation.\nunsupported_content: The file content is not supported for preview generation.\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "in_progress", 
            "unsupported_extension", 
            "unsupported_content"
          ], 
          "type": "string", 
          "title": "Choice of PreviewError"
        }
      }
    }, 
    "CreateFileRequestError": {
      "type": "object", 
      "description": "There was an error creating the file request.\ndisabled_for_team: This user's Dropbox Business team doesn't allow file requests.\nother: None\nnot_found: This file request ID was not found.\nnot_a_folder: The specified path is not a folder.\napp_lacks_access: This file request is not accessible to this app. Apps with the app folder permission can only access file requests in their app folder.\nno_permission: This user doesn't have permission to access or modify this file request.\nemail_unverified: This user's email address is not verified. File requests are only available on accounts with a verified email address. Users can verify their email address :link:`here https://www.dropbox.com/help/317`.\nvalidation_error: There was an error validating the request. For example, the title was invalid, or there were disallowed characters in the destination path.\ninvalid_location: File requests are not available on the specified folder.\nrate_limit: The user has reached the rate limit for creating file requests. The limit is currently 100 file requests per day.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled_for_team", 
            "other", 
            "not_found", 
            "not_a_folder", 
            "app_lacks_access", 
            "no_permission", 
            "email_unverified", 
            "validation_error", 
            "invalid_location", 
            "rate_limit"
          ], 
          "type": "string", 
          "title": "Choice of CreateFileRequestError"
        }
      }
    }, 
    "SharingTeamPolicyType": {
      "type": "object", 
      "description": "The sharing policy type of the Paper doc.\npeople_with_link_can_edit: Users who have a link to this doc can edit it.\npeople_with_link_can_view_and_comment: Users who have a link to this doc can view and comment on it.\ninvite_only: Users must be explicitly invited to this doc.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "people_with_link_can_edit", 
            "people_with_link_can_view_and_comment", 
            "invite_only"
          ], 
          "type": "string", 
          "title": "Choice of SharingTeamPolicyType"
        }
      }
    }, 
    "ThumbnailSize": { 
      "description": "w32h32: 32 by 32 px.\nw64h64: 64 by 64 px.\nw128h128: 128 by 128 px.\nw256h256: 256 by 256 px.\nw480h320: 480 by 320 px.\nw640h480: 640 by 480 px.\nw960h640: 960 by 640 px.\nw1024h768: 1024 by 768 px.\nw2048h1536: 2048 by 1536 px.\n",
      "enum": [
            "w32h32", 
            "w64h64", 
            "w128h128", 
            "w256h256", 
            "w480h320", 
            "w640h480", 
            "w960h640", 
            "w1024h768", 
            "w2048h1536"
          ], 
      "type": "string", 
      "title": "Choice of ThumbnailSize"
    }, 
    "UpdatePropertiesArg": {
      "type": "object", 
      "description": "path: A unique identifier for the file or folder.\nupdate_property_groups: The property groups \"delta\" updates to apply.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "A unique identifier for the file or folder."
        }, 
        "update_property_groups": {
          "items": {
            "$ref": "#/definitions/PropertyGroupUpdate"
          }, 
          "type": "array", 
          "description": "The property groups \"delta\" updates to apply."
        }
      }
    }, 
    "GetThumbnailBatchArg": {
      "type": "object", 
      "description": "Arguments for :route:`get_thumbnail_batch`.\nentries: List of files to get thumbnails.\n", 
      "properties": {
        "entries": {
          "items": {
            "$ref": "#/definitions/ThumbnailArg"
          }, 
          "type": "array", 
          "description": "List of files to get thumbnails."
        }
      }
    }, 
    "AddFileMemberError": {
      "type": "object", 
      "description": "Errors for :route:`add_file_member`.\nuser_error: None\naccess_error: None\nrate_limit: The user has reached the rate limit for invitations.\ninvalid_comment: The custom message did not pass comment permissions checks.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharingFileAccessError"
        }, 
        ".tag": {
          "enum": [
            "user_error", 
            "access_error", 
            "rate_limit", 
            "invalid_comment", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of AddFileMemberError"
        }, 
        "user_error": {
          "$ref": "#/definitions/SharingUserError"
        }
      }
    },
    "CopyFilesBatch": {
      "type": "object", 
      "description": "entries: List of entries to be moved or copied. Each entry is :type:`RelocationPath`.\nallow_shared_folder: If true, :route:`copy_batch` will copy contents in shared folder, otherwise :field:`RelocationError.cant_copy_shared_folder` will be returned if :field:`RelocationPath.from_path` contains shared folder.  This field is always true for :route:`move_batch`.\nautorename: If there's a conflict with any file, have the Dropbox server try to autorename that file to avoid the conflict.\nallow_ownership_transfer: Allow moves by owner even if it would result in an ownership transfer for the content being moved. This does not apply to copies.\n", 
      "properties": {
        "autorename": {
          "type": "boolean", 
          "description": "If there's a conflict with any file, have the Dropbox server try to autorename that file to avoid the conflict."
        }, 
        "entries": {
          "items": {
            "$ref": "#/definitions/RelocationPath"
          }, 
          "type": "array", 
          "description": "List of entries to be moved or copied. Each entry is :type:`RelocationPath`."
        }
      }
    }, 
    "RelocationBatchArg": {
      "type": "object", 
      "description": "entries: List of entries to be moved or copied. Each entry is :type:`RelocationPath`.\nallow_shared_folder: If true, :route:`copy_batch` will copy contents in shared folder, otherwise :field:`RelocationError.cant_copy_shared_folder` will be returned if :field:`RelocationPath.from_path` contains shared folder.  This field is always true for :route:`move_batch`.\nautorename: If there's a conflict with any file, have the Dropbox server try to autorename that file to avoid the conflict.\nallow_ownership_transfer: Allow moves by owner even if it would result in an ownership transfer for the content being moved. This does not apply to copies.\n", 
      "properties": {
        "allow_ownership_transfer": {
          "type": "boolean", 
          "description": "Allow moves by owner even if it would result in an ownership transfer for the content being moved. This does not apply to copies."
        },  
        "autorename": {
          "type": "boolean", 
          "description": "If there's a conflict with any file, have the Dropbox server try to autorename that file to avoid the conflict."
        }, 
        "entries": {
          "items": {
            "$ref": "#/definitions/RelocationPath"
          }, 
          "type": "array", 
          "description": "List of entries to be moved or copied. Each entry is :type:`RelocationPath`."
        }
      }
    }, 
    "CreateFolderBatchResult": {
      "type": "object", 
      "description": "entries: None\n", 
      "properties": {
        "entries": {
          "items": {
            "$ref": "#/definitions/CreateFolderBatchResultEntry"
          }, 
          "type": "array"
        }
      }
    }, 
    "GetSharedLinksArg": {
      "type": "object", 
      "description": "path: See :route:`get_shared_links` description.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "See :route:`get_shared_links` description."
        }
      }
    }, 
    "ListFolderMembersArgs": {
      "type": "object", 
      "description": "shared_folder_id: The ID for the shared folder.\nactions: This is a list indicating whether each returned member will include a boolean value :field:`MemberPermission.allow` that describes whether the current user can perform the MemberAction on the member.\nlimit: The maximum number of results that include members, groups and invitees to return per request.\n", 
      "properties": {
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID for the shared folder."
        }, 
        "limit": {
          "type": "integer", 
          "description": "The maximum number of results that include members, groups and invitees to return per request."
        }, 
        "actions": {
          "items": {
            "$ref": "#/definitions/MemberAction"
          }, 
          "type": "array", 
          "description": "This is a list indicating whether each returned member will include a boolean value :field:`MemberPermission.allow` that describes whether the current user can perform the MemberAction on the member."
        }
      }
    }, 
    "SaveCopyReferenceArg": {
      "type": "object", 
      "description": "copy_reference: A copy reference returned by :route:`copy_reference/get`.\npath: Path in the user's Dropbox that is the destination.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Path in the user's Dropbox that is the destination."
        }, 
        "copy_reference": {
          "type": "string", 
          "description": "A copy reference returned by :route:`copy_reference/get`."
        }
      }
    }, 
    "PropertiesSearchContinueError": {
      "type": "object", 
      "description": "reset: Indicates that the cursor has been invalidated. Call :route:`properties/search` to obtain a new cursor.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "reset", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PropertiesSearchContinueError"
        }
      }
    }, 
    "RemoveFolderMemberArg": {
      "type": "object", 
      "description": "shared_folder_id: The ID for the shared folder.\nmember: The member to remove from the folder.\nleave_a_copy: If true, the removed user will keep their copy of the folder after it's unshared, assuming it was mounted. Otherwise, it will be removed from their Dropbox. Also, this must be set to false when kicking a group.\n", 
      "properties": {
        "member": {
          "$ref": "#/definitions/MemberSelector"
        }, 
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID for the shared folder."
        }, 
        "leave_a_copy": {
          "type": "boolean", 
          "description": "If true, the removed user will keep their copy of the folder after it's unshared, assuming it was mounted. Otherwise, it will be removed from their Dropbox. Also, this must be set to false when kicking a group."
        }
      }
    }, 
    "TokenFromOAuth1Error": {
      "type": "object", 
      "description": "invalid_oauth1_token_info: Part or all of the OAuth 1.0 access token info is invalid.\napp_id_mismatch: The authorized app does not match the app associated with the supplied access token.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_oauth1_token_info", 
            "app_id_mismatch", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TokenFromOAuth1Error"
        }
      }
    }, 
    "PaperApiCursorError": {
      "type": "object", 
      "description": "expired_cursor: The provided cursor is expired.\ninvalid_cursor: The provided cursor is invalid.\nwrong_user_in_cursor: The provided cursor contains invalid user.\nreset: Indicates that the cursor has been invalidated. Call the corresponding non-continue endpoint to obtain a new cursor.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "expired_cursor", 
            "invalid_cursor", 
            "wrong_user_in_cursor", 
            "reset", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PaperApiCursorError"
        }
      }
    }, 
    "GetMetadataArgs": {
      "type": "object", 
      "description": "shared_folder_id: The ID for the shared folder.\nactions: A list of `FolderAction`s corresponding to `FolderPermission`s that should appear in the  response's :field:`SharedFolderMetadata.permissions` field describing the actions the  authenticated user can perform on the folder.\n", 
      "properties": {
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID for the shared folder."
        }, 
        "actions": {
          "items": {
            "$ref": "#/definitions/FolderAction"
          }, 
          "type": "array", 
          "description": "A list of `FolderAction`s corresponding to `FolderPermission`s that should appear in the  response's :field:`SharedFolderMetadata.permissions` field describing the actions the  authenticated user can perform on the folder."
        }
      }
    }, 
    "GetThumbnailBatchResultData": {
      "type": "object", 
      "description": "metadata: None\nthumbnail: None\n", 
      "properties": {
        "thumbnail": {
          "type": "string"
        }, 
        "metadata": {
          "$ref": "#/definitions/FileMetadata"
        }
      }
    }, 
    "ListFolderGetLatestCursorResult": {
      "type": "object", 
      "description": "cursor: Pass the cursor into :route:`list_folder/continue` to see what's changed in the folder since your previous query.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`list_folder/continue` to see what's changed in the folder since your previous query."
        }
      }
    }, 
    "PermissionDeniedReason": {
      "type": "object", 
      "description": "Possible reasons the user is denied a permission.\nuser_not_same_team_as_owner: User is not on the same team as the folder owner.\nuser_not_allowed_by_owner: User is prohibited by the owner from taking the action.\ntarget_is_indirect_member: Target is indirectly a member of the folder, for example by being part of a group.\ntarget_is_owner: Target is the owner of the folder.\ntarget_is_self: Target is the user itself.\ntarget_not_active: Target is not an active member of the team.\nfolder_is_limited_team_folder: Folder is team folder for a limited team.\nowner_not_on_team: The content owner needs to be on a Dropbox team to perform this action.\npermission_denied: The user does not have permission to perform this action on the link.\nrestricted_by_team: The user's team policy prevents performing this action on the link.\nuser_account_type: The user's account type does not support this action.\nuser_not_on_team: The user needs to be on a Dropbox team to perform this action.\nfolder_is_inside_shared_folder: Folder is inside of another shared folder.\nrestricted_by_parent_folder: Policy cannot be changed due to restrictions from parent folder.\ninsufficient_plan: None\nother: None\n", 
      "properties": {
        "insufficient_plan": {
          "$ref": "#/definitions/InsufficientPlan"
        }, 
        ".tag": {
          "enum": [
            "user_not_same_team_as_owner", 
            "user_not_allowed_by_owner", 
            "target_is_indirect_member", 
            "target_is_owner", 
            "target_is_self", 
            "target_not_active", 
            "folder_is_limited_team_folder", 
            "owner_not_on_team", 
            "permission_denied", 
            "restricted_by_team", 
            "user_account_type", 
            "user_not_on_team", 
            "folder_is_inside_shared_folder", 
            "restricted_by_parent_folder", 
            "insufficient_plan", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PermissionDeniedReason"
        }
      }
    }, 
    "UploadSessionFinishBatchJobStatus": {
      "type": "object", 
      "description": "in_progress: The asynchronous job is still in progress.\ncomplete: The :route:`upload_session/finish_batch` has finished.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "in_progress", 
            "complete"
          ], 
          "type": "string", 
          "title": "Choice of UploadSessionFinishBatchJobStatus"
        }, 
        "complete": {
          "$ref": "#/definitions/UploadSessionFinishBatchResult"
        }
      }
    }, 
    "SharedLinkCreatePolicy": {
      "type": "object", 
      "description": "Policy governing the visibility of shared links. This policy can apply to newly created shared links, or all shared links.\ndefault_public: By default, anyone can access newly created shared links. No login will be required to access the shared links unless overridden.\ndefault_team_only: By default, only members of the same team can access newly created shared links. Login will be required to access the shared links unless overridden.\nteam_only: Only members of the same team can access all shared links. Login will be required to access all shared links.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "default_public", 
            "default_team_only", 
            "team_only", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharedLinkCreatePolicy"
        }
      }
    }, 
    "ImportFormat": {
      "description": "The import format of the incoming data.\nhtml: The provided data is interpreted as standard HTML.\nmarkdown: The provided data is interpreted as markdown.\nNote: The first line of the provided document will be used as the doc title.\nplain_text: The provided data is interpreted as plain text.\nNote: The first line of the provided document will be used as the doc title.", 
          "enum": [
            "html", 
            "markdown", 
            "plain_text"
          ], 
          "type": "string", 
          "title": "Choice of ImportFormat"
    }, 
    "MemberSelector": {
      "type": "object", 
      "description": "Includes different ways to identify a member of a shared folder.\ndropbox_id: Dropbox account, team member, or group ID of member.\nemail: E-mail address of member.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "dropbox_id", 
            "email", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MemberSelector"
        }, 
        "dropbox_id": {
          "type": "string", 
          "description": "Dropbox account, team member, or group ID of member."
        }, 
        "email": {
          "type": "string", 
          "description": "E-mail address of member."
        }
      }
    }, 
    "RelocationBatchLaunch": {
      "type": "object", 
      "description": "Result returned by :route:`copy_batch` or :route:`move_batch` that may either launch an asynchronous job or complete synchronously.\nasync_job_id: This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job.\ncomplete: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "async_job_id", 
            "complete", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of RelocationBatchLaunch"
        }, 
        "async_job_id": {
          "type": "string", 
          "description": "This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job."
        }, 
        "complete": {
          "$ref": "#/definitions/RelocationBatchResult"
        }
      }
    }, 
    "GetFileMetadataBatchResult": {
      "type": "object", 
      "description": "Per file results of :route:`get_file_metadata/batch`.\nfile: This is the input file identifier corresponding to one of :field:`GetFileMetadataBatchArg.files`.\nresult: The result for this particular file.\n", 
      "properties": {
        "result": {
          "$ref": "#/definitions/GetFileMetadataIndividualResult"
        }, 
        "file": {
          "type": "string", 
          "description": "This is the input file identifier corresponding to one of :field:`GetFileMetadataBatchArg.files`."
        }
      }
    }, 
    "ListFilesContinueArg": {
      "type": "object", 
      "description": "Arguments for :route:`list_received_files/continue`.\ncursor: Cursor in :field:`ListFilesResult.cursor`.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Cursor in :field:`ListFilesResult.cursor`."
        }
      }
    }, 
    "ListDocsCursorError": {
      "type": "object", 
      "description": "cursor_error: None\nother: None\n", 
      "properties": {
        "cursor_error": {
          "$ref": "#/definitions/PaperApiCursorError"
        }, 
        ".tag": {
          "enum": [
            "cursor_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListDocsCursorError"
        }
      }
    }, 
    "FileMemberActionError": {
      "type": "object", 
      "description": "invalid_member: Specified member was not found.\nno_permission: User does not have permission to perform this action on this member.\naccess_error: Specified file was invalid or user does not have access.\nno_explicit_access: The action cannot be completed because the target member does not have explicit access to the file. The return value is the access that the member has to the file from a parent folder.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharingFileAccessError"
        }, 
        ".tag": {
          "enum": [
            "invalid_member", 
            "no_permission", 
            "access_error", 
            "no_explicit_access", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of FileMemberActionError"
        }, 
        "no_explicit_access": {
          "$ref": "#/definitions/MemberAccessLevelResult"
        }
      }
    }, 
    "TemplateFilter": {
      "type": "object", 
      "description": "filter_some: Only templates with an ID in the supplied list will be returned (a subset of templates will be returned).\nother: None\nfilter_none: No templates will be filtered from the result (all templates will be returned).\n", 
      "properties": {
        "filter_some": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Only templates with an ID in the supplied list will be returned (a subset of templates will be returned)."
        }, 
        ".tag": {
          "enum": [
            "filter_some", 
            "other", 
            "filter_none"
          ], 
          "type": "string", 
          "title": "Choice of TemplateFilter"
        }
      }
    }, 
    "SetAccessInheritanceError": {
      "type": "object", 
      "description": "access_error: Unable to access shared folder.\nno_permission: The current user does not have permission to perform this action.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharedFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "no_permission", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SetAccessInheritanceError"
        }
      }
    }, 
    "ListFoldersContinueError": {
      "type": "object", 
      "description": "invalid_cursor: :field:`ListFoldersContinueArg.cursor` is invalid.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_cursor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListFoldersContinueError"
        }
      }
    }, 
    "AddPropertiesArg": {
      "type": "object", 
      "description": "path: A unique identifier for the file or folder.\nproperty_groups: The property groups which are to be added to a Dropbox file.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "A unique identifier for the file or folder."
        }, 
        "property_groups": {
          "items": {
            "$ref": "#/definitions/PropertyGroup"
          }, 
          "type": "array", 
          "description": "The property groups which are to be added to a Dropbox file."
        }
      }
    }, 
    "MediaInfo": {
      "type": "object", 
      "description": "pending: Indicate the photo/video is still under processing and metadata is not available yet.\nmetadata: The metadata for the photo/video.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "pending", 
            "metadata"
          ], 
          "type": "string", 
          "title": "Choice of MediaInfo"
        }, 
        "metadata": {
          "$ref": "#/definitions/MediaMetadata"
        }
      }
    }, 
    "LinkPermissions": {
      "type": "object", 
      "description": "can_revoke: Whether the caller can revoke the shared link.\nresolved_visibility: The current visibility of the link after considering the shared links policies of the the team (in case the link's owner is part of a team) and the shared folder (in case the linked file is part of a shared folder). This field is shown only if the caller has access to this info (the link's owner always has access to this data).\nrequested_visibility: The shared link's requested visibility. This can be overridden by the team and shared folder policies. The final visibility, after considering these policies, can be found in :field:`resolved_visibility`. This is shown only if the caller is the link's owner.\nrevoke_failure_reason: The failure reason for revoking the link. This field will only be present if the :field:`can_revoke` is :val:`false`.\n", 
      "properties": {
        "requested_visibility": {
          "$ref": "#/definitions/RequestedVisibility"
        }, 
        "resolved_visibility": {
          "$ref": "#/definitions/ResolvedVisibility"
        }, 
        "can_revoke": {
          "type": "boolean", 
          "description": "Whether the caller can revoke the shared link."
        }, 
        "revoke_failure_reason": {
          "$ref": "#/definitions/SharedLinkAccessFailureReason"
        }
      }
    }, 
    "DeleteBatchResultEntry": {
      "type": "object", 
      "description": "success: None\nfailure: None\n", 
      "properties": {
        "failure": {
          "$ref": "#/definitions/DeleteError"
        }, 
        ".tag": {
          "enum": [
            "success", 
            "failure"
          ], 
          "type": "string", 
          "title": "Choice of DeleteBatchResultEntry"
        }, 
        "success": {
          "$ref": "#/definitions/DeleteBatchResultData"
        }
      }
    }, 
    "PropertyGroup": {
      "type": "object", 
      "description": "A subset of the property fields described by the corresponding :type:`PropertyGroupTemplate`. Properties are always added to a Dropbox file as a :type:`PropertyGroup`. The possible key names and value types in this group are defined by the corresponding :type:`PropertyGroupTemplate`.\ntemplate_id: A unique identifier for the associated template.\nfields: The actual properties associated with the template. There can be up to 32 property types per template.\n", 
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/PropertyField"
          }, 
          "type": "array", 
          "description": "The actual properties associated with the template. There can be up to 32 property types per template."
        }, 
        "template_id": {
          "type": "string", 
          "description": "A unique identifier for the associated template."
        }
      }
    }, 
    "CreateFolderBatchLaunch": {
      "type": "object", 
      "description": "Result returned by :route:`create_folder_batch` that may either launch an asynchronous job or complete synchronously.\nasync_job_id: This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job.\ncomplete: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "async_job_id", 
            "complete", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of CreateFolderBatchLaunch"
        }, 
        "async_job_id": {
          "type": "string", 
          "description": "This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job."
        }, 
        "complete": {
          "$ref": "#/definitions/CreateFolderBatchResult"
        }
      }
    }, 
    "ListUsersOnFolderContinueArgs": {
      "type": "object", 
      "description": "doc_id: The Paper doc ID.\ncursor: The cursor obtained from :route:`docs/folder_users/list` or :route:`docs/folder_users/list/continue`. Allows for pagination.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "The cursor obtained from :route:`docs/folder_users/list` or :route:`docs/folder_users/list/continue`. Allows for pagination."
        }, 
        "doc_id": {
          "type": "string", 
          "description": "The Paper doc ID."
        }
      }
    }, 
    "RelocationBatchError": {
      "type": "object", 
      "description": "from_lookup: None\nfrom_write: None\nto: None\ncant_copy_shared_folder: Shared folders can't be copied.\ncant_nest_shared_folder: Your move operation would result in nested shared folders.  This is not allowed.\ncant_move_folder_into_itself: You cannot move a folder into itself.\ntoo_many_files: The operation would involve more than 10,000 files and folders.\nduplicated_or_nested_paths: There are duplicated/nested paths among :field:`RelocationArg.from_path` and :field:`RelocationArg.to_path`.\ncant_transfer_ownership: Your move operation would result in an ownership transfer. You may reissue the request with the field :field:`RelocationArg.allow_ownership_transfer` to true.\ninsufficient_quota: The current user does not have enough space to move or copy the files.\nother: None\ntoo_many_write_operations: There are too many write operations in user's Dropbox. Please retry this request.\n", 
      "properties": {
        "to": {
          "$ref": "#/definitions/WriteError"
        }, 
        "from_lookup": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "from_lookup", 
            "from_write", 
            "to", 
            "cant_copy_shared_folder", 
            "cant_nest_shared_folder", 
            "cant_move_folder_into_itself", 
            "too_many_files", 
            "duplicated_or_nested_paths", 
            "cant_transfer_ownership", 
            "insufficient_quota", 
            "other", 
            "too_many_write_operations"
          ], 
          "type": "string", 
          "title": "Choice of RelocationBatchError"
        }, 
        "from_write": {
          "$ref": "#/definitions/WriteError"
        }
      }
    }, 
    "UnshareFileError": {
      "type": "object", 
      "description": "Error result for :route:`unshare_file`.\nuser_error: None\naccess_error: None\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharingFileAccessError"
        }, 
        ".tag": {
          "enum": [
            "user_error", 
            "access_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of UnshareFileError"
        }, 
        "user_error": {
          "$ref": "#/definitions/SharingUserError"
        }
      }
    }, 
    "SearchMatchType": {
      "type": "object", 
      "description": "Indicates what type of match was found for a given item.\nfilename: This item was matched on its file or folder name.\ncontent: This item was matched based on its file contents.\nboth: This item was matched based on both its contents and its file name.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "filename", 
            "content", 
            "both"
          ], 
          "type": "string", 
          "title": "Choice of SearchMatchType"
        }
      }
    }, 
    "SharedFileMembers": {
      "type": "object", 
      "description": "Shared file user, group, and invitee membership.\nUsed for the results of :route:`list_file_members` and :route:`list_file_members/continue`, and used as part of the results for :route:`list_file_members/batch`.\nusers: The list of user members of the shared file.\ngroups: The list of group members of the shared file.\ninvitees: The list of invited members of a file, but have not logged in and claimed this.\ncursor: Present if there are additional shared file members that have not been returned yet. Pass the cursor into :route:`list_file_members/continue` to list additional members.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Present if there are additional shared file members that have not been returned yet. Pass the cursor into :route:`list_file_members/continue` to list additional members."
        }, 
        "users": {
          "items": {
            "$ref": "#/definitions/UserFileMembershipInfo"
          }, 
          "type": "array", 
          "description": "The list of user members of the shared file."
        }, 
        "groups": {
          "items": {
            "$ref": "#/definitions/GroupMembershipInfo"
          }, 
          "type": "array", 
          "description": "The list of group members of the shared file."
        }, 
        "invitees": {
          "items": {
            "$ref": "#/definitions/InviteeMembershipInfo"
          }, 
          "type": "array", 
          "description": "The list of invited members of a file, but have not logged in and claimed this."
        }
      }
    }, 
    "WriteError": {
      "type": "object", 
      "description": "malformed_path: None\nconflict: Couldn't write to the target path because there was something in the way.\nno_write_permission: The user doesn't have permissions to write to the target location.\ninsufficient_space: The user doesn't have enough available space (bytes) to write more data.\ndisallowed_name: Dropbox will not save the file or folder because of its name.\nteam_folder: This endpoint cannot move or delete team folders.\ntoo_many_write_operations: There are too many write operations in user's Dropbox. Please retry this request.\nother: None\n", 
      "properties": {
        "malformed_path": {
          "type": "string"
        }, 
        ".tag": {
          "enum": [
            "malformed_path", 
            "conflict", 
            "no_write_permission", 
            "insufficient_space", 
            "disallowed_name", 
            "team_folder", 
            "too_many_write_operations", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of WriteError"
        }, 
        "conflict": {
          "$ref": "#/definitions/WriteConflictError"
        }
      }
    }, 
    "FileAction": {
      "type": "object", 
      "description": "Sharing actions that may be taken on files.\ndisable_viewer_info: Disable viewer information on the file.\nedit_contents: Change or edit contents of the file.\nenable_viewer_info: Enable viewer information on the file.\ninvite_viewer: Add a member with view permissions.\ninvite_viewer_no_comment: Add a member with view permissions but no comment permissions.\nunshare: Stop sharing this file.\nrelinquish_membership: Relinquish one's own membership to the file.\nshare_link: Use create_link instead.\ncreate_link: Create a shared link to the file.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disable_viewer_info", 
            "edit_contents", 
            "enable_viewer_info", 
            "invite_viewer", 
            "invite_viewer_no_comment",
            "invite_editor", 
            "unshare", 
            "relinquish_membership", 
            "create_view_link", 
            "create_edit_link"
          ], 
          "type": "string", 
          "title": "Choice of FileAction"
        }
      }
    }, 
    "PropertiesSearchMatch": {
      "type": "object", 
      "description": "id: The ID for the matched file or folder.\npath: The path for the matched file or folder.\nis_deleted: Whether the file or folder is deleted.\nproperty_groups: List of custom property groups associated with the file.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path for the matched file or folder."
        }, 
        "is_deleted": {
          "type": "boolean", 
          "description": "Whether the file or folder is deleted."
        }, 
        "id": {
          "type": "string", 
          "description": "The ID for the matched file or folder."
        }, 
        "property_groups": {
          "items": {
            "$ref": "#/definitions/PropertyGroup"
          }, 
          "type": "array", 
          "description": "List of custom property groups associated with the file."
        }
      }
    }, 
    "MemberPolicy": {
      "description": "Policy governing who can be a member of a shared folder. Only applicable to folders owned by a user on a team.\nteam: Only a teammate can become a member.\nanyone: Anyone can become a member.\nother: None\n", 
      "enum": [
            "team", 
            "anyone"
          ], 
      "type": "string", 
      "title": "Choice of MemberPolicy"
    }, 
    "UploadWriteFailed": {
      "type": "object", 
      "description": "reason: The reason why the file couldn't be saved.\nupload_session_id: The upload session ID; data has already been uploaded to the corresponding upload session and this ID may be used to retry the commit with :route:`upload_session/finish`.\n", 
      "properties": {
        "reason": {
          "$ref": "#/definitions/WriteError"
        }, 
        "upload_session_id": {
          "type": "string", 
          "description": "The upload session ID; data has already been uploaded to the corresponding upload session and this ID may be used to retry the commit with :route:`upload_session/finish`."
        }
      }
    },
    "MembersDataTransferArg": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        },
        "transfer_dest_id": {
          "$ref": "#/definitions/UserSelectorArg"
        },
        "transfer_admin_id": {
          "$ref": "#/definitions/UserSelectorArg"
        }
      }
    },
    "LaunchEmptyResult": {
      "type": "object", 
      "description": "Result returned by methods that may either launch an asynchronous job or complete synchronously. Upon synchronous completion of the job, no additional information is returned.\nasync_job_id: This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job.\ncomplete: The job finished synchronously and successfully.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "async_job_id", 
            "complete"
          ], 
          "type": "string", 
          "title": "Choice of LaunchEmptyResult"
        }, 
        "async_job_id": {
          "type": "string", 
          "description": "This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job."
        }
      }
    }, 
    "OfficeAddInPolicy": {
      "type": "object", 
      "description": "disabled: Office Add-In is disabled.\nenabled: Office Add-In is enabled.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of OfficeAddInPolicy"
        }
      }
    }, 
    "SuggestMemberPolicy": {
      "type": "object", 
      "description": "The team policy on if teammembers are allowed to suggest users for admins to invite to the team.", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of OfficeAddInPolicy"
        }
      }
    },
    "PaperDocUpdateError": {
      "type": "object", 
      "description": "insufficient_permissions: Your account does not have permissions to perform this action.\nother: None\ndoc_not_found: The required doc was not found.\ncontent_malformed: The provided content was malformed and cannot be imported to Paper.\nrevision_mismatch: The provided revision does not match the document head.\ndoc_length_exceeded: The newly created Paper doc would be too large, split the content into multiple docs.\nimage_size_exceeded: The imported document contains an image that is too large. The current limit is 1MB. Note: This only applies to HTML with data uri.\ndoc_archived: This operation is not allowed on archived Paper docs.\ndoc_deleted: This operation is not allowed on deleted Paper docs.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "insufficient_permissions", 
            "other", 
            "doc_not_found", 
            "content_malformed", 
            "revision_mismatch", 
            "doc_length_exceeded", 
            "image_size_exceeded", 
            "doc_archived", 
            "doc_deleted"
          ], 
          "type": "string", 
          "title": "Choice of PaperDocUpdateError"
        }
      }
    }, 
    "UploadSessionFinishError": {
      "type": "object", 
      "description": "lookup_failed: The session arguments are incorrect; the value explains the reason.\npath: Unable to save the uploaded contents to a file. Data has already been appended to the upload session. Please retry with empty data body and updated offset.\nproperties_error: The supplied property group is invalid. The file has uploaded without property groups.\ntoo_many_shared_folder_targets: The batch request commits files into too many different shared folders. Please limit your batch request to files contained in a single shared folder.\ntoo_many_write_operations: There are too many write operations happening in the user's Dropbox. You should retry uploading this file.\nother: None\n", 
      "properties": {
        "lookup_failed": {
          "$ref": "#/definitions/UploadSessionLookupError"
        },
        "path": {
          "$ref": "#/definitions/WriteError"
        },
        "properties_error": {
          "$ref": "#/definitions/InvalidPropertyGroupError"
        }, 
        ".tag": {
          "enum": [
            "lookup_failed", 
            "path", 
            "properties_error", 
            "too_many_shared_folder_targets", 
            "too_many_write_operations", 
            "concurrent_session_data_not_allowed",
            "concurrent_session_not_closed",
            "concurrent_session_missing_data",
            "payload_too_large",
            "content_hash_mismatch"
          ], 
          "type": "string", 
          "title": "Choice of UploadSessionFinishError"
        }
      }
    }, 
    "RemoveTemplateArg": {
      "type": "object", 
      "description": "template_id: An identifier for a template created by :route:`templates/add_for_user` or :route:`templates/add_for_team`.\n", 
      "properties": {
        "template_id": {
          "type": "string", 
          "description": "An identifier for a template created by :route:`templates/add_for_user` or :route:`templates/add_for_team`."
        }
      }
    }, 
    "ResolvedVisibility": {
      "type": "object", 
      "description": "The actual access permissions values of shared links after taking into account user preferences and the team and shared folder settings. Check the :type:`RequestedVisibility` for more info on the possible visibility values that can be set by the shared link's owner.\npublic: Anyone who has received the link can access it. No login required.\nteam_only: Only members of the same team can access the link. Login is required.\npassword: A link-specific password is required to access the link. Login is not required.\nteam_and_password: Only members of the same team who have the link-specific password can access the link. Login is required.\nshared_folder_only: Only members of the shared folder containing the linked file can access the link. Login is required.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "public", 
            "team_only", 
            "password", 
            "team_and_password", 
            "shared_folder_only", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ResolvedVisibility"
        }
      }
    }, 
    "PaperDocCreateUpdateResult": {
      "type": "object", 
      "description": "file_id: The id to use in Dropbox APIs when referencing the Paper Doc.\npaper_revision: The current doc revision.\nurl: URL to open the Paper Doc.\nresult_path: The fully qualified path the Paper Doc was actually created at.", 
      "properties": {
        "file_id": {
          "type": "string", 
          "description": "The id to use in Dropbox APIs when referencing the Paper Doc."
        }, 
        "result_path": {
          "type": "string", 
          "description": "The fully qualified path the Paper Doc was actually created at."
        },
        "url": {
          "type": "string", 
          "description": "URL to open the Paper Doc."
        },
        "paper_revision": {
          "type": "number", 
          "description": "The current doc revision."
        }
      }
    }, 
    "FolderMetadata": {
      "type": "object", 
      "description": "name: The last component of the path (including extension). This never contains a slash.\nid: A unique identifier for the folder.\npath_lower: The lowercased full path in the user's Dropbox. This always starts with a slash. This field will be null if the file or folder is not mounted.\npath_display: The cased path to be used for display purposes only. In rare instances the casing will not correctly match the user's filesystem, but this behavior will match the path provided in the Core API v1, and at least the last path component will have the correct casing. Changes to only the casing of paths won't be returned by :route:`list_folder/continue`. This field will be null if the file or folder is not mounted.\nparent_shared_folder_id: Please use :field:`FileSharingInfo.parent_shared_folder_id` or :field:`FolderSharingInfo.parent_shared_folder_id` instead.\nshared_folder_id: Please use :field:`sharing_info` instead.\nsharing_info: Set if the folder is contained in a shared folder or is a shared folder mount point.\nproperty_groups: Additional information if the file has custom properties with the property template specified. Note that only properties associated with user-owned templates, not team-owned templates, can be attached to folders.\n", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "The last component of the path (including extension). This never contains a slash."
        },
        "id": {
          "type": "string", 
          "description": "A unique identifier for the folder."
        },
        "path_lower": {
          "type": "string", 
          "description": "The lowercased full path in the user's Dropbox. This always starts with a slash. This field will be null if the file or folder is not mounted."
        },
        "path_display": {
          "type": "string", 
          "description": "The cased path to be used for display purposes only. In rare instances the casing will not correctly match the user's filesystem, but this behavior will match the path provided in the Core API v1, and at least the last path component will have the correct casing. Changes to only the casing of paths won't be returned by :route:`list_folder/continue`. This field will be null if the file or folder is not mounted."
        }, 
        "parent_shared_folder_id": {
          "type": "string", 
          "description": "Please use :field:`FileSharingInfo.parent_shared_folder_id` or :field:`FolderSharingInfo.parent_shared_folder_id` instead."
        },
        "preview_url": {
          "type": "string", 
          "description": "The preview URL of the file. This field is optional."
        },
        "shared_folder_id": {
          "type": "string", 
          "description": "Please use :field:`sharing_info` instead."
        },
        "sharing_info": {
          "$ref": "#/definitions/FolderSharingInfo"
        }, 
        "property_groups": {
          "items": {
            "$ref": "#/definitions/PropertyGroup"
          }, 
          "type": "array", 
          "description": "Additional information if the file has custom properties with the property template specified. Note that only properties associated with user-owned templates, not team-owned templates, can be attached to folders."
        }
      }
    }, 
    "UploadSessionOffsetError": {
      "type": "object", 
      "description": "correct_offset: The offset up to which data has been collected.\n", 
      "properties": {
        "correct_offset": {
          "type": "number", 
          "description": "The offset up to which data has been collected."
        }
      }
    }, 
    "LinkMetadata": {
      "type": "object", 
      "description": "Metadata for a shared link. This can be either a :type:`PathLinkMetadata` or :type:`CollectionLinkMetadata`.\nurl: URL of the shared link.\nvisibility: Who can access the link.\nexpires: Expiration time, if set. By default the link won't expire.\n", 
      "properties": {
        "url": {
          "type": "string", 
          "description": "URL of the shared link."
        }, 
        "expires": {
          "type": "string", 
          "description": "Expiration time, if set. By default the link won't expire."
        }, 
        "visibility": {
          "$ref": "#/definitions/Visibility"
        }
      }
    }, 
    "SharedFolderMetadata": {
      "type": "object", 
      "description": "The metadata which includes basic information about the shared folder.\naccess_type: The current user's access level for this shared folder.\nis_inside_team_folder: Whether this folder is inside of a team folder.\nis_team_folder: Whether this folder is a :link:`team folder https://www.dropbox.com/en/help/986`.\nname: The name of the this shared folder.\npolicy: Policies governing this shared folder.\npreview_url: URL for displaying a web preview of the shared folder.\nshared_folder_id: The ID of the shared folder.\ntime_invited: Timestamp indicating when the current user was invited to this shared folder.\nowner_display_names: The display names of the users that own the folder. If the folder is part of a team folder, the display names of the team admins are also included. Absent if the owner display names cannot be fetched.\nowner_team: The team that owns the folder. This field is not present if the folder is not owned by a team.\nparent_shared_folder_id: The ID of the parent shared folder. This field is present only if the folder is contained within another shared folder.\npath_lower: The lower-cased full path of this shared folder. Absent for unmounted folders.\nlink_metadata: The metadata of the shared content link to this shared folder. Absent if there is no link on the folder. This is for an unreleased feature so it may not be returned yet.\npermissions: Actions the current user may perform on the folder and its contents. The set of permissions corresponds to the FolderActions in the request.\naccess_inheritance: Whether the folder inherits its members from its parent.\n", 
      "properties": {
        "access_type": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "is_inside_team_folder": {
          "type": "boolean", 
          "description": "Whether this folder is inside of a team folder."
        },
        "is_team_folder": {
          "type": "boolean", 
          "description": "Whether this folder is a :link:`team folder https://www.dropbox.com/en/help/986`."
        },
        "name": {
          "type": "string", 
          "description": "The name of the this shared folder."
        }, 
        "policy": {
          "$ref": "#/definitions/FolderPolicy"
        }, 
        "preview_url": {
          "type": "string", 
          "description": "URL for displaying a web preview of the shared folder."
        }, 
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID of the shared folder."
        },
        "time_invited": {
          "type": "string", 
          "description": "Timestamp indicating when the current user was invited to this shared folder."
        },
        "owner_display_names": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "The display names of the users that own the folder. If the folder is part of a team folder, the display names of the team admins are also included. Absent if the owner display names cannot be fetched."
        }, 
        "owner_team": {
          "$ref": "#/definitions/Team"
        }, 
        "parent_shared_folder_id": {
          "type": "string", 
          "description": "The ID of the parent shared folder. This field is present only if the folder is contained within another shared folder."
        }, 
        "path_lower": {
          "type": "string", 
          "description": "The lower-cased full path of this shared folder. Absent for unmounted folders."
        },
        "parent_folder_name": {
          "type": "string", 
          "description": "Display name for the parent folder."
        },
        "link_metadata": {
          "$ref": "#/definitions/SharedContentLinkMetadata"
        }, 
        "permissions": {
          "items": {
            "$ref": "#/definitions/FolderPermission"
          }, 
          "type": "array", 
          "description": "Actions the current user may perform on the folder and its contents. The set of permissions corresponds to the FolderActions in the request."
        }, 
        "access_inheritance": {
          "$ref": "#/definitions/AccessInheritance"
        }
      }
    }, 
    "ListSharedLinksResult": {
      "type": "object", 
      "description": "links: Shared links applicable to the path argument.\nhas_more: Is true if there are additional shared links that have not been returned yet. Pass the cursor into :route:`list_shared_links` to retrieve them.\ncursor: Pass the cursor into :route:`list_shared_links` to obtain the additional links. Cursor is returned only if no path is given.\n", 
      "properties": {
        "has_more": {
          "type": "boolean", 
          "description": "Is true if there are additional shared links that have not been returned yet. Pass the cursor into :route:`list_shared_links` to retrieve them."
        }, 
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`list_shared_links` to obtain the additional links. Cursor is returned only if no path is given."
        }, 
        "links": {
          "items": {
            "$ref": "#/definitions/SharedLinkWithSettingsMetadata"
          }, 
          "type": "array", 
          "description": "Shared links applicable to the path argument."
        }
      }
    }, 
    "UpdateFileRequestError": {
      "type": "object", 
      "description": "There is an error updating the file request.\ndisabled_for_team: This user's Dropbox Business team doesn't allow file requests.\nother: None\nnot_found: This file request ID was not found.\nnot_a_folder: The specified path is not a folder.\napp_lacks_access: This file request is not accessible to this app. Apps with the app folder permission can only access file requests in their app folder.\nno_permission: This user doesn't have permission to access or modify this file request.\nemail_unverified: This user's email address is not verified. File requests are only available on accounts with a verified email address. Users can verify their email address :link:`here https://www.dropbox.com/help/317`.\nvalidation_error: There was an error validating the request. For example, the title was invalid, or there were disallowed characters in the destination path.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled_for_team", 
            "other", 
            "not_found", 
            "not_a_folder", 
            "app_lacks_access", 
            "no_permission", 
            "email_unverified", 
            "validation_error"
          ], 
          "type": "string", 
          "title": "Choice of UpdateFileRequestError"
        }
      }
    }, 
    "CreateFolderResult": {
      "type": "object", 
      "description": "metadata: Metadata of the created folder.\n", 
      "properties": {
        "metadata": {
          "$ref": "#/definitions/FolderMetadata"
        }
      }
    }, 
    "RelocationBatchResultData": {
      "type": "object", 
      "description": "metadata: Metadata of the relocated object.\n", 
      "properties": {
        "success": {
          "$ref": "#/definitions/Metadata"
        },
        "failure": {
          "$ref": "#/definitions/RelocationBatchErrorEntry"
        }
      }
    },
    "RelocationBatchErrorEntry": {
      "type": "object",
      "properties": {
        ".tag": {
          "enum": [
            "internal_error",
            "too_many_write_operations",
            "relocation_error"
          ],
          "type": "string"
        },
        "relocation_error": {
          "$ref": "#/definitions/RelocationError"
        }
      }
    },
    "Visibility": {
      "type": "object", 
      "description": "Who can access a shared link. The most open visibility is :field:`public`. The default depends on many aspects, such as team and user preferences and shared folder settings.\npublic: Anyone who has received the link can access it. No login required.\nteam_only: Only members of the same team can access the link. Login is required.\npassword: A link-specific password is required to access the link. Login is not required.\nteam_and_password: Only members of the same team who have the link-specific password can access the link.\nshared_folder_only: Only members of the shared folder containing the linked file can access the link. Login is required.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "public", 
            "team_only", 
            "password", 
            "team_and_password", 
            "shared_folder_only", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of Visibility"
        }
      }
    }, 
    "DownloadArg": {
      "type": "object", 
      "description": "path: The path of the file to download.\nrev: Please specify revision in :field:`path` instead.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path of the file to download."
        }
      }
    }, 
    "SharePathError": {
      "type": "object", 
      "description": "is_file: A file is at the specified path.\ninside_shared_folder: We do not support sharing a folder inside a shared folder.\ncontains_shared_folder: We do not support shared folders that contain shared folders.\ncontains_app_folder: We do not support shared folders that contain app folders.\ncontains_team_folder: We do not support shared folders that contain team folders.\nis_app_folder: We do not support sharing an app folder.\ninside_app_folder: We do not support sharing a folder inside an app folder.\nis_public_folder: A public folder can't be shared this way. Use a public link instead.\ninside_public_folder: A folder inside a public folder can't be shared this way. Use a public link instead.\nalready_shared: Folder is already shared. Contains metadata about the existing shared folder.\ninvalid_path: Path is not valid.\nis_osx_package: We do not support sharing a Mac OS X package.\ninside_osx_package: We do not support sharing a folder inside a Mac OS X package.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "is_file", 
            "inside_shared_folder", 
            "contains_shared_folder", 
            "contains_app_folder", 
            "contains_team_folder", 
            "is_app_folder", 
            "inside_app_folder", 
            "is_public_folder", 
            "inside_public_folder", 
            "already_shared", 
            "invalid_path", 
            "is_osx_package", 
            "inside_osx_package", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharePathError"
        }, 
        "already_shared": {
          "$ref": "#/definitions/SharedFolderMetadata"
        }
      }
    },
    "MembersDeleteProfilePhotoError": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/MemberNotFound"
        }
      }
    },
    "MemberNotFound": {
      "properties": {
        ".tag": {
          "type": "string",
          "enum": [
            "user_not_found",
            "user_not_in_team",
            "set_profile_disallowed"
          ]
        }
      }

    },
    "DeleteError": {
      "type": "object", 
      "description": "path_lookup: None\npath_write: None\ntoo_many_write_operations: There are too many write operations in user's Dropbox. Please retry this request.\ntoo_many_files: There are too many files in one request. Please retry with fewer files.\nother: None\n", 
      "properties": {
        "path_lookup": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path_lookup", 
            "path_write", 
            "too_many_write_operations", 
            "too_many_files", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of DeleteError"
        }, 
        "path_write": {
          "$ref": "#/definitions/WriteError"
        }
      }
    }, 
    "CreateFileRequestArgs": {
      "type": "object", 
      "description": "Arguments for :route:`create`.\ntitle: The title of the file request. Must not be empty.\ndestination: The path of the folder in the Dropbox where uploaded files will be sent. For apps with the app folder permission, this will be relative to the app folder.\ndeadline: The deadline for the file request. Deadlines can only be set by Pro and Business accounts.\nopen: Whether or not the file request should be open. If the file request is closed, it will not accept any file submissions, but it can be opened later.\n", 
      "properties": {
        "open": {
          "type": "boolean", 
          "description": "Whether or not the file request should be open. If the file request is closed, it will not accept any file submissions, but it can be opened later."
        }, 
        "destination": {
          "type": "string", 
          "description": "The path of the folder in the Dropbox where uploaded files will be sent. For apps with the app folder permission, this will be relative to the app folder."
        }, 
        "deadline": {
          "$ref": "#/definitions/FileRequestDeadline"
        }, 
        "title": {
          "type": "string", 
          "description": "The title of the file request. Must not be empty."
        }
      }
    }, 
    "ChangeFileMemberAccessArgs": {
      "type": "object", 
      "description": "Arguments for :route:`change_file_member_access`.\nfile: File for which we are changing a member's access.\nmember: The member whose access we are changing.\naccess_level: The new access level for the member.\n", 
      "properties": {
        "member": {
          "$ref": "#/definitions/MemberSelector"
        }, 
        "access_level": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "file": {
          "type": "string", 
          "description": "File for which we are changing a member's access."
        }
      }
    }, 
    "ListFolderContinueError": {
      "type": "object", 
      "description": "path: None\nreset: Indicates that the cursor has been invalidated. Call :route:`list_folder` to obtain a new cursor.\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "reset", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListFolderContinueError"
        }
      }
    }, 
    "UnshareFolderArg": {
      "type": "object", 
      "description": "shared_folder_id: The ID for the shared folder.\nleave_a_copy: If true, members of this shared folder will get a copy of this folder after it's unshared. Otherwise, it will be removed from their Dropbox. The current user, who is an owner, will always retain their copy.\n", 
      "properties": {
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID for the shared folder."
        }, 
        "leave_a_copy": {
          "type": "boolean", 
          "description": "If true, members of this shared folder will get a copy of this folder after it's unshared. Otherwise, it will be removed from their Dropbox. The current user, who is an owner, will always retain their copy."
        }
      }
    }, 
    "TemplateFilterBase": {
      "type": "object", 
      "description": "filter_some: Only templates with an ID in the supplied list will be returned (a subset of templates will be returned).\nother: None\n", 
      "properties": {
        "filter_some": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Only templates with an ID in the supplied list will be returned (a subset of templates will be returned)."
        }, 
        ".tag": {
          "enum": [
            "filter_some", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TemplateFilterBase"
        }
      }
    }, 
    "UserOnPaperDocFilter": {
      "type": "object", 
      "description": "visited: all users who have visited the Paper doc.\nshared: All uses who are shared on the Paper doc. This includes all users who have visited the Paper doc as well as those who have not.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "visited", 
            "shared", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of UserOnPaperDocFilter"
        }
      }
    }, 
    "UploadSessionFinishArg": {
      "type": "object", 
      "description": "cursor: Contains the upload session ID and the offset.\ncommit: Contains the path and other optional modifiers for the commit.\n", 
      "properties": {
        "content_hash": {
          "type": "string", 
          "description": "A hash of the file content uploaded in this call. If provided and the uploaded content does not match this hash, an error will be returned."
        },
        "cursor": {
          "$ref": "#/definitions/UploadSessionCursor"
        }, 
        "commit": {
          "$ref": "#/definitions/CommitInfo"
        }
      }
    }, 
    "FullAccount": {
      "type": "object", 
      "description": "Detailed information about the current user's account.\naccount_id: The user's unique Dropbox ID.\nname: Details of a user's name.\nemail: The user's e-mail address. Do not rely on this without checking the :field:`email_verified` field. Even then, it's possible that the user has since lost access to their e-mail.\nemail_verified: Whether the user has verified their e-mail address.\ndisabled: Whether the user has been disabled.\nlocale: The language that the user specified. Locale tags will be :link:`IETF language tags http://en.wikipedia.org/wiki/IETF_language_tag`.\nreferral_link: The user's :link:`referral link https://www.dropbox.com/referrals`.\nis_paired: Whether the user has a personal and work account. If the current account is personal, then :field:`team` will always be :val:`null`, but :field:`is_paired` will indicate if a work account is linked.\naccount_type: What type of account this user has.\nroot_info: The root info for this account.\nprofile_photo_url: URL for the photo representing the user, if one is set.\ncountry: The user's two-letter country code, if available. Country codes are based on :link:`ISO 3166-1 http://en.wikipedia.org/wiki/ISO_3166-1`.\nteam: If this account is a member of a team, information about that team.\nteam_member_id: This account's unique team member id. This field will only be present if :field:`team` is present.\n", 
      "properties": {
        "account_id": {
          "type": "string", 
          "description": "The user's unique Dropbox ID."
        },
        "name": {
          "$ref": "#/definitions/Name"
        },
        "email": {
          "type": "string", 
          "description": "The user's e-mail address. Do not rely on this without checking the :field:`email_verified` field. Even then, it's possible that the user has since lost access to their e-mail."
        },
        "email_verified": {
          "type": "boolean", 
          "description": "Whether the user has verified their e-mail address."
        },
        "disabled": {
          "type": "boolean", 
          "description": "Whether the user has been disabled."
        },
        "locale": {
          "type": "string", 
          "description": "The language that the user specified. Locale tags will be :link:`IETF language tags http://en.wikipedia.org/wiki/IETF_language_tag`."
        },
        "referral_link": {
          "type": "string", 
          "description": "The user's :link:`referral link https://www.dropbox.com/referrals`."
        },
        "is_paired": {
          "type": "boolean", 
          "description": "Whether the user has a personal and work account. If the current account is personal, then :field:`team` will always be :val:`null`, but :field:`is_paired` will indicate if a work account is linked."
        }, 
        "account_type": {
          "$ref": "#/definitions/AccountType"
        },
        "root_info": {
          "$ref": "#/definitions/RootInfo"
        },
        "profile_photo_url": {
          "type": "string", 
          "description": "URL for the photo representing the user, if one is set."
        },
        "country": {
          "type": "string", 
          "description": "The user's two-letter country code, if available. Country codes are based on :link:`ISO 3166-1 http://en.wikipedia.org/wiki/ISO_3166-1`."
        },
        "team": {
          "$ref": "#/definitions/FullTeam"
        },
        "team_member_id": {
          "type": "string", 
          "description": "This account's unique team member id. This field will only be present if :field:`team` is present."
        }
      }
    }, 
    "CreateSharedLinkError": {
      "type": "object", 
      "description": "path: None\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of CreateSharedLinkError"
        }
      }
    }, 
    "PathLinkMetadata": {
      "type": "object", 
      "description": "Metadata for a path-based shared link.\nurl: URL of the shared link.\nvisibility: Who can access the link.\npath: Path in user's Dropbox.\nexpires: Expiration time, if set. By default the link won't expire.\n", 
      "properties": {
        "url": {
          "type": "string", 
          "description": "URL of the shared link."
        }, 
        "path": {
          "type": "string", 
          "description": "Path in user's Dropbox."
        }, 
        "expires": {
          "type": "string", 
          "description": "Expiration time, if set. By default the link won't expire."
        }, 
        "visibility": {
          "$ref": "#/definitions/Visibility"
        }
      }
    }, 
    "TransferFolderArg": {
      "type": "object", 
      "description": "shared_folder_id: The ID for the shared folder.\nto_dropbox_id: A account or team member ID to transfer ownership to.\n", 
      "properties": {
        "shared_folder_id": {
          "type": "string", 
          "description": "The ID for the shared folder."
        }, 
        "to_dropbox_id": {
          "type": "string", 
          "description": "A account or team member ID to transfer ownership to."
        }
      }
    }, 
    "AlphaGetMetadataError": {
      "type": "object", 
      "description": "path: None\nproperties_error: None\n", 
      "properties": {
        "properties_error": {
          "$ref": "#/definitions/LookUpPropertiesError"
        }, 
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "properties_error"
          ], 
          "type": "string", 
          "title": "Choice of AlphaGetMetadataError"
        }
      }
    }, 
    "RemoveFolderMemberError": {
      "type": "object", 
      "description": "access_error: None\nmember_error: None\nfolder_owner: The target user is the owner of the shared folder. You can't remove this user until ownership has been transferred to another member.\ngroup_access: The target user has access to the shared folder via a group.\nteam_folder: This action cannot be performed on a team shared folder.\nno_permission: The current user does not have permission to perform this action.\ntoo_many_files: This shared folder has too many files for leaving a copy. You can still remove this user without leaving a copy.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharedFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "member_error", 
            "folder_owner", 
            "group_access", 
            "team_folder", 
            "no_permission", 
            "too_many_files", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of RemoveFolderMemberError"
        }, 
        "member_error": {
          "$ref": "#/definitions/SharedFolderMemberError"
        }
      }
    }, 
    "GetFileRequestError": {
      "type": "object", 
      "description": "There was an error retrieving the specified file request.\ndisabled_for_team: This user's Dropbox Business team doesn't allow file requests.\nother: None\nnot_found: This file request ID was not found.\nnot_a_folder: The specified path is not a folder.\napp_lacks_access: This file request is not accessible to this app. Apps with the app folder permission can only access file requests in their app folder.\nno_permission: This user doesn't have permission to access or modify this file request.\nemail_unverified: This user's email address is not verified. File requests are only available on accounts with a verified email address. Users can verify their email address :link:`here https://www.dropbox.com/help/317`.\nvalidation_error: There was an error validating the request. For example, the title was invalid, or there were disallowed characters in the destination path.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled_for_team", 
            "other", 
            "not_found", 
            "not_a_folder", 
            "app_lacks_access", 
            "no_permission", 
            "email_unverified", 
            "validation_error"
          ], 
          "type": "string", 
          "title": "Choice of GetFileRequestError"
        }
      }
    }, 
    "FileRequestDeadline": {
      "type": "object", 
      "description": "deadline: The deadline for this file request.\nallow_late_uploads: If set, allow uploads after the deadline has passed. These     uploads will be marked overdue.\n", 
      "properties": {
        "deadline": {
          "type": "string", 
          "description": "The deadline for this file request."
        }, 
        "allow_late_uploads": {
          "$ref": "#/definitions/GracePeriod"
        }
      }
    }, 
    "InsufficientPlan": {
      "type": "object", 
      "description": "message: A message to tell the user to upgrade in order to support expected action.\nupsell_url: A URL to send the user to in order to obtain the account type they need, e.g. upgrading. Absent if there is no action the user can take to upgrade.\n", 
      "properties": {
        "message": {
          "type": "string", 
          "description": "A message to tell the user to upgrade in order to support expected action."
        }, 
        "upsell_url": {
          "type": "string", 
          "description": "A URL to send the user to in order to obtain the account type they need, e.g. upgrading. Absent if there is no action the user can take to upgrade."
        }
      }
    }, 
    "PaperDocUpdatePolicy": {
      "description": "How the provided content should be applied to the doc.", 
          "enum": [
            "append", 
            "prepend", 
            "overwrite", 
            "update"
          ], 
          "type": "string", 
          "title": "Choice of PaperDocUpdatePolicy"
    }, 
    "UploadSessionFinishBatchArg": {
      "type": "object", 
      "description": "entries: Commit information for each file in the batch.\n", 
      "properties": {
        "entries": {
          "items": {
            "$ref": "#/definitions/UploadSessionFinishArg"
          }, 
          "type": "array", 
          "description": "Commit information for each file in the batch."
        }
      }
    }, 
    "Dimensions": {
      "type": "object", 
      "description": "Dimensions for a photo or video.\nheight: Height of the photo/video.\nwidth: Width of the photo/video.\n", 
      "properties": {
        "width": {
          "type": "number", 
          "description": "Width of the photo/video."
        }, 
        "height": {
          "type": "number", 
          "description": "Height of the photo/video."
        }
      }
    }, 
    "PropertiesSearchError": {
      "type": "object", 
      "description": "property_group_lookup: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "property_group_lookup", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PropertiesSearchError"
        }, 
        "property_group_lookup": {
          "$ref": "#/definitions/LookUpPropertiesError"
        }
      }
    }, 
    "GetFileMetadataError": {
      "type": "object", 
      "description": "Error result for :route:`get_file_metadata`.\nuser_error: None\naccess_error: None\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharingFileAccessError"
        }, 
        ".tag": {
          "enum": [
            "user_error", 
            "access_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GetFileMetadataError"
        }, 
        "user_error": {
          "$ref": "#/definitions/SharingUserError"
        }
      }
    }, 
    "GetTemplateResult": {
      "type": "object", 
      "description": "name: Display name for the template. Template names can be up to 256 bytes.\ndescription: Description for the template. Template descriptions can be up to 1024 bytes.\nfields: Definitions of the property fields associated with this template. There can be up to 32 properties in a single template.\n", 
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/PropertyFieldTemplate"
          }, 
          "type": "array", 
          "description": "Definitions of the property fields associated with this template. There can be up to 32 properties in a single template."
        }, 
        "name": {
          "type": "string", 
          "description": "Display name for the template. Template names can be up to 256 bytes."
        }, 
        "description": {
          "type": "string", 
          "description": "Description for the template. Template descriptions can be up to 1024 bytes."
        }
      }
    }, 
    "LookupError": {
      "type": "object", 
      "description": "malformed_path: None\nnot_found: There is nothing at the given path.\nnot_file: We were expecting a file, but the given path refers to something that isn't a file.\nnot_folder: We were expecting a folder, but the given path refers to something that isn't a folder.\nrestricted_content: The file cannot be transferred because the content is restricted.  For example, sometimes there are legal restrictions due to copyright claims.\nother: None\n", 
      "properties": {
        "malformed_path": {
          "type": "string"
        }, 
        ".tag": {
          "enum": [
            "malformed_path", 
            "not_found", 
            "not_file", 
            "not_folder", 
            "restricted_content", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of LookupError"
        }
      }
    }, 
    "CreateFolderBatchJobStatus": {
      "type": "object", 
      "description": "in_progress: The asynchronous job is still in progress.\ncomplete: The batch create folder has finished.\nfailed: The batch create folder has failed.\nother: None\n", 
      "properties": {
        "failed": {
          "$ref": "#/definitions/CreateFolderBatchError"
        }, 
        ".tag": {
          "enum": [
            "in_progress", 
            "complete", 
            "failed", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of CreateFolderBatchJobStatus"
        }, 
        "complete": {
          "$ref": "#/definitions/CreateFolderBatchResult"
        }
      }
    }, 
    "ListTemplateResult": {
      "type": "object", 
      "description": "template_ids: List of identifiers for templates added by  See :route:`templates/add_for_user` or :route:`templates/add_for_team`.\n", 
      "properties": {
        "template_ids": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "List of identifiers for templates added by  See :route:`templates/add_for_user` or :route:`templates/add_for_team`."
        }
      }
    }, 
    "TemplateError": {
      "type": "object", 
      "description": "template_not_found: Template does not exist for the given identifier.\nrestricted_content: You do not have permission to modify this template.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "template_not_found", 
            "restricted_content", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TemplateError"
        }, 
        "template_not_found": {
          "type": "string", 
          "description": "Template does not exist for the given identifier."
        }
      }
    }, 
    "GetCopyReferenceResult": {
      "type": "object", 
      "description": "metadata: Metadata of the file or folder.\ncopy_reference: A copy reference to the file or folder.\nexpires: The expiration date of the copy reference. This value is currently set to be far enough in the future so that expiration is effectively not an issue.\n", 
      "properties": {
        "expires": {
          "type": "string", 
          "description": "The expiration date of the copy reference. This value is currently set to be far enough in the future so that expiration is effectively not an issue."
        }, 
        "copy_reference": {
          "type": "string", 
          "description": "A copy reference to the file or folder."
        }, 
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    }, 
    "PropertiesSearchMode": {
      "type": "object", 
      "description": "field_name: Search for a value associated with this field name.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "field_name", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PropertiesSearchMode"
        }, 
        "field_name": {
          "type": "string", 
          "description": "Search for a value associated with this field name."
        }
      }
    }, 
    "RelocationArg": {
      "type": "object", 
      "description": "from_path: Path in the user's Dropbox to be copied or moved.\nto_path: Path in the user's Dropbox that is the destination.\nallow_shared_folder: If true, :route:`copy` will copy contents in shared folder, otherwise :field:`RelocationError.cant_copy_shared_folder` will be returned if :field:`from_path` contains shared folder. This field is always true for :route:`move`.\nautorename: If there's a conflict, have the Dropbox server try to autorename the file to avoid the conflict.\nallow_ownership_transfer: Allow moves by owner even if it would result in an ownership transfer for the content being moved. This does not apply to copies.\n", 
      "properties": {
        "allow_ownership_transfer": {
          "type": "boolean", 
          "description": "Allow moves by owner even if it would result in an ownership transfer for the content being moved. This does not apply to copies."
        }, 
        "from_path": {
          "type": "string", 
          "description": "Path in the user's Dropbox to be copied or moved."
        }, 
        "to_path": {
          "type": "string", 
          "description": "Path in the user's Dropbox that is the destination."
        }, 
        "autorename": {
          "type": "boolean", 
          "description": "If there's a conflict, have the Dropbox server try to autorename the file to avoid the conflict."
        }
      }
    }, 
    "AlphaGetMetadataArg": {
      "type": "object", 
      "description": "path: The path of a file or folder on Dropbox.\ninclude_media_info: If true, :field:`FileMetadata.media_info` is set for photo and video.\ninclude_deleted: If true, :type:`DeletedMetadata` will be returned for deleted file or folder, otherwise :field:`LookupError.not_found` will be returned.\ninclude_has_explicit_shared_members: If true, the results will include a flag for each file indicating whether or not  that file has any explicit members.\ninclude_property_groups: If set to a valid list of template IDs, :field:`FileMetadata.property_groups` is set if there exists property data associated with the file and each of the listed templates.\ninclude_property_templates: If set to a valid list of template IDs, :field:`FileMetadata.property_groups` is set for files with custom properties.\n", 
      "properties": {
        "include_property_groups": {
          "$ref": "#/definitions/TemplateFilterBase"
        }, 
        "include_property_templates": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "If set to a valid list of template IDs, :field:`FileMetadata.property_groups` is set for files with custom properties."
        }, 
        "include_has_explicit_shared_members": {
          "type": "boolean", 
          "description": "If true, the results will include a flag for each file indicating whether or not  that file has any explicit members."
        }, 
        "include_deleted": {
          "type": "boolean", 
          "description": "If true, :type:`DeletedMetadata` will be returned for deleted file or folder, otherwise :field:`LookupError.not_found` will be returned."
        }, 
        "include_media_info": {
          "type": "boolean", 
          "description": "If true, :field:`FileMetadata.media_info` is set for photo and video."
        }, 
        "path": {
          "type": "string", 
          "description": "The path of a file or folder on Dropbox."
        }
      }
    }, 
    "ListUsersCursorError": {
      "type": "object", 
      "description": "insufficient_permissions: Your account does not have permissions to perform this action.\nother: None\ndoc_not_found: The required doc was not found.\ncursor_error: None\n", 
      "properties": {
        "cursor_error": {
          "$ref": "#/definitions/PaperApiCursorError"
        }, 
        ".tag": {
          "enum": [
            "insufficient_permissions", 
            "other", 
            "doc_not_found", 
            "cursor_error"
          ], 
          "type": "string", 
          "title": "Choice of ListUsersCursorError"
        }
      }
    }, 
    "UploadSessionCursor": {
      "type": "object", 
      "description": "session_id: The upload session ID (returned by :route:`upload_session/start`).\noffset: The amount of data that has been uploaded so far. We use this to make sure upload data isn't lost or duplicated in the event of a network error.\n", 
      "properties": {
        "session_id": {
          "type": "string", 
          "description": "The upload session ID (returned by :route:`upload_session/start`)."
        }, 
        "offset": {
          "type": "number", 
          "description": "The amount of data that has been uploaded so far. We use this to make sure upload data isn't lost or duplicated in the event of a network error."
        }
      }
    }, 
    "ListFolderMembersContinueError": {
      "type": "object", 
      "description": "access_error: None\ninvalid_cursor: :field:`ListFolderMembersContinueArg.cursor` is invalid.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharedFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "invalid_cursor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListFolderMembersContinueError"
        }
      }
    }, 
    "RestoreArg": {
      "type": "object", 
      "description": "path: The path to the file you want to restore.\nrev: The revision to restore for the file.\n", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path to the file you want to restore."
        }, 
        "rev": {
          "type": "string", 
          "description": "The revision to restore for the file."
        }
      }
    },
    "MediaMetadata": {
      "type": "object", 
      "description": "Metadata for a photo or video.", 
      "properties": {
        "photo": {
          "$ref": "#/definitions/PhotoMetadata"
        }, 
        "video": {
          "$ref": "#/definitions/VideoMetadata"
        }
      }
    }, 
    "PhotoMetadata": {
      "type": "object", 
      "description": "Metadata for a photo.", 
      "properties": {
        "dimensions": {
          "$ref": "#/definitions/Dimensions"
        }, 
        "location": {
          "$ref": "#/definitions/GpsCoordinates"
        }, 
        "time_taken": {
          "type": "string", 
          "description": "The timestamp when the photo/video is taken."
        }
      }
    },
    "VideoMetadata": {
      "type": "object", 
      "description": "Metadata for a video.", 
      "properties": {
        "dimensions": {
          "$ref": "#/definitions/Dimensions"
        }, 
        "location": {
          "$ref": "#/definitions/GpsCoordinates"
        }, 
        "time_taken": {
          "type": "string", 
          "description": "The timestamp when the photo/video is taken."
        },
        "duration": {
          "type": "number", 
          "description": "The duration of the video in milliseconds."
        }
      }
    },  
    "DeleteBatchJobStatus": {
      "type": "object", 
      "description": "in_progress: The asynchronous job is still in progress.\ncomplete: The batch delete has finished.\nfailed: The batch delete has failed.\nother: None\n", 
      "properties": {
        "failed": {
          "$ref": "#/definitions/DeleteBatchError"
        }, 
        ".tag": {
          "enum": [
            "in_progress", 
            "complete", 
            "failed", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of DeleteBatchJobStatus"
        }, 
        "complete": {
          "$ref": "#/definitions/DeleteBatchResult"
        }
      }
    }, 
    "RemoveFileMemberError": {
      "type": "object", 
      "description": "Errors for :route:`remove_file_member_2`.\nuser_error: None\naccess_error: None\nno_explicit_access: This member does not have explicit access to the file and therefore cannot be removed. The return value is the access that a user might have to the file from a parent folder.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharingFileAccessError"
        }, 
        ".tag": {
          "enum": [
            "user_error", 
            "access_error", 
            "no_explicit_access", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of RemoveFileMemberError"
        }, 
        "user_error": {
          "$ref": "#/definitions/SharingUserError"
        }, 
        "no_explicit_access": {
          "$ref": "#/definitions/MemberAccessLevelResult"
        }
      }
    }, 
    "CreateFolderError": {
      "type": "object", 
      "description": "path: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/WriteError"
        }, 
        ".tag": {
          "enum": [
            "path"
          ], 
          "type": "string", 
          "title": "Choice of CreateFolderError"
        }
      }
    }, 
    "ListRevisionsMode": {
      "description": "path: Returns revisions with the same file path as identified by the latest file entry at the given file path or id.\nid: Returns revisions with the same file id as identified by the latest file entry at the given file path or id.\nother: None\n", 
      "enum": [
            "path", 
            "id"
          ], 
      "type": "string", 
      "title": "Choice of ListRevisionsMode"
    }, 
    "DeleteBatchLaunch": {
      "type": "object", 
      "description": "Result returned by :route:`delete_batch` that may either launch an asynchronous job or complete synchronously.\nasync_job_id: This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job.\ncomplete: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "async_job_id", 
            "complete", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of DeleteBatchLaunch"
        }, 
        "async_job_id": {
          "type": "string", 
          "description": "This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job."
        }, 
        "complete": {
          "$ref": "#/definitions/DeleteBatchResult"
        }
      }
    }, 
    "TokenFromOAuth1Arg": {
      "type": "object", 
      "description": "oauth1_token: The supplied OAuth 1.0 access token.\noauth1_token_secret: The token secret associated with the supplied access token.\n", 
      "properties": {
        "oauth1_token": {
          "type": "string", 
          "description": "The supplied OAuth 1.0 access token."
        }, 
        "oauth1_token_secret": {
          "type": "string", 
          "description": "The token secret associated with the supplied access token."
        }
      }
    }, 
    "ListUsersOnPaperDocResponse": {
      "type": "object", 
      "description": "invitees: List of email addresses with their respective permission levels that are invited on the Paper doc.\nusers: List of users with their respective permission levels that are invited on the Paper folder.\ndoc_owner: The Paper doc owner. This field is populated on every single response.\ncursor: Pass the cursor into :route:`docs/users/list/continue` to paginate through all users. The cursor preserves all properties as specified in the original call to :route:`docs/users/list`.\nhas_more: Will be set to True if a subsequent call with the provided cursor to :route:`docs/users/list/continue` returns immediately with some results. If set to False please allow some delay before making another call to :route:`docs/users/list/continue`.\n", 
      "properties": {
        "cursor": {
          "$ref": "#/definitions/Cursor"
        }, 
        "has_more": {
          "type": "boolean", 
          "description": "Will be set to True if a subsequent call with the provided cursor to :route:`docs/users/list/continue` returns immediately with some results. If set to False please allow some delay before making another call to :route:`docs/users/list/continue`."
        }, 
        "doc_owner": {
          "$ref": "#/definitions/UserInfo"
        }, 
        "users": {
          "items": {
            "$ref": "#/definitions/UserInfoWithPermissionLevel"
          }, 
          "type": "array", 
          "description": "List of users with their respective permission levels that are invited on the Paper folder."
        }, 
        "invitees": {
          "items": {
            "$ref": "#/definitions/InviteeInfoWithPermissionLevel"
          }, 
          "type": "array", 
          "description": "List of email addresses with their respective permission levels that are invited on the Paper doc."
        }
      }
    }, 
    "GetThumbnailBatchError": {
      "type": "object", 
      "description": "too_many_files: The operation involves more than 25 files.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "too_many_files", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GetThumbnailBatchError"
        }
      }
    }, 
    "ListFileMembersIndividualResult": {
      "type": "object", 
      "description": "result: The results of the query for this file if it was successful.\naccess_error: The result of the query for this file if it was an error.\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/SharingFileAccessError"
        }, 
        ".tag": {
          "enum": [
            "result", 
            "access_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListFileMembersIndividualResult"
        }, 
        "result": {
          "$ref": "#/definitions/ListFileMembersCountResult"
        }
      }
    }, 
    "PropertyField": {
      "type": "object", 
      "description": "Raw key/value data to be associated with a Dropbox file. Property fields are added to Dropbox files as a :type:`PropertyGroup`.\nname: Key of the property field associated with a file and template. Keys can be up to 256 bytes.\nvalue: Value of the property field associated with a file and template. Values can be up to 1024 bytes.\n", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Key of the property field associated with a file and template. Keys can be up to 256 bytes."
        }, 
        "value": {
          "type": "string", 
          "description": "Value of the property field associated with a file and template. Values can be up to 1024 bytes."
        }
      }
    }, 
    "PropertiesSearchResult": {
      "type": "object", 
      "description": "matches: A list (possibly empty) of matches for the query.\ncursor: Pass the cursor into :route:`properties/search/continue` to continue to receive search results. Cursor will be null when there are no more results.\n", 
      "properties": {
        "matches": {
          "items": {
            "$ref": "#/definitions/PropertiesSearchMatch"
          }, 
          "type": "array", 
          "description": "A list (possibly empty) of matches for the query."
        }, 
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`properties/search/continue` to continue to receive search results. Cursor will be null when there are no more results."
        }
      }
    }, 
    "ListPaperDocsFilterBy": {
      "type": "object", 
      "description": "docs_accessed: Fetches all Paper doc IDs that the user has ever accessed.\ndocs_created: Fetches only the Paper doc IDs that the user has created.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "docs_accessed", 
            "docs_created", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListPaperDocsFilterBy"
        }
      }
    }, 
    "AccessInheritance": { 
      "description": "Information about the inheritance policy of a shared folder.\ninherit: The shared folder inherits its members from the parent folder.\nno_inherit: The shared folder does not inherit its members from the parent folder.\nother: None\n", 
      "enum": [
            "inherit", 
            "no_inherit"
          ], 
      "type": "string", 
      "title": "Choice of AccessInheritance"
    }, 
    "ListFolderLongpollResult": {
      "type": "object", 
      "description": "changes: Indicates whether new changes are available. If true, call :route:`list_folder/continue` to retrieve the changes.\nbackoff: If present, backoff for at least this many seconds before calling :route:`list_folder/longpoll` again.\n", 
      "properties": {
        "changes": {
          "type": "boolean", 
          "description": "Indicates whether new changes are available. If true, call :route:`list_folder/continue` to retrieve the changes."
        }, 
        "backoff": {
          "type": "number", 
          "description": "If present, backoff for at least this many seconds before calling :route:`list_folder/longpoll` again."
        }
      }
    }, 
    "AclUpdatePolicy": { 
      "description": "Who can change a shared folder's access control list (ACL). In other words, who can add, remove, or change the privileges of members.\nowner: Only the owner can update the ACL.\neditors: Any editor can update the ACL. This may be further restricted to editors on the same team.\nother: None\n", 
      "enum": [
            "owner", 
            "editors"
          ], 
      "type": "string",
      "title": "Choice of AclUpdatePolicy"
    }, 
    "ListFileMembersContinueArg": {
      "type": "object", 
      "description": "Arguments for :route:`list_file_members/continue`.\ncursor: The cursor returned by your last call to :route:`list_file_members`, :route:`list_file_members/continue`, or :route:`list_file_members/batch`.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "The cursor returned by your last call to :route:`list_file_members`, :route:`list_file_members/continue`, or :route:`list_file_members/batch`."
        }
      }
    }, 
    "ListPaperDocsResponse": {
      "type": "object", 
      "description": "doc_ids: The list of Paper doc IDs that can be used to access the given Paper docs or supplied to other API methods. The list is sorted in the order specified by the initial call to :route:`docs/list`.\ncursor: Pass the cursor into :route:`docs/list/continue` to paginate through all files. The cursor preserves all properties as specified in the original call to :route:`docs/list`.\nhas_more: Will be set to True if a subsequent call with the provided cursor to :route:`docs/list/continue` returns immediately with some results. If set to False please allow some delay before making another call to :route:`docs/list/continue`.\n", 
      "properties": {
        "cursor": {
          "$ref": "#/definitions/Cursor"
        }, 
        "has_more": {
          "type": "boolean", 
          "description": "Will be set to True if a subsequent call with the provided cursor to :route:`docs/list/continue` returns immediately with some results. If set to False please allow some delay before making another call to :route:`docs/list/continue`."
        }, 
        "doc_ids": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "The list of Paper doc IDs that can be used to access the given Paper docs or supplied to other API methods. The list is sorted in the order specified by the initial call to :route:`docs/list`."
        }
      }
    },
    "ProfilePhotoResponse": {
      "type": "object", 
      "description": "URL for the photo representing the user, if one is set.", 
      "properties": {
        "profile_photo_url": {
          "type": "string"
        }
      }
    },
    "ProfilePhotoArg": {
      "type": "object", 
      "description": "Image to set as the user's new profile photo.", 
      "properties": {
        "photo": {
          "$ref": "#/definitions/ImageMetaData"
        }
      }
    },
    "ImageMetaData": {
      "type": "object", 
      "description": "Image to set as the user's new profile photo.", 
      "properties": {
        ".tag": {
          "type": "string"
        },
        "base64_data": {
          "type": "string", 
          "description": "Image data in base64-encoded bytes."
        }
      }
    },
    "RelinquishFileMembershipArg": {
      "type": "object", 
      "description": "file: The path or id for the file.\n", 
      "properties": {
        "file": {
          "type": "string", 
          "description": "The path or id for the file."
        }
      }
    }, 
    "GetSharedLinksResult": {
      "type": "object", 
      "description": "links: Shared links applicable to the path argument.\n", 
      "properties": {
        "links": {
          "items": {
            "$ref": "#/definitions/LinkMetadata"
          }, 
          "type": "array", 
          "description": "Shared links applicable to the path argument."
        }
      }
    }, 
    "CreateFolderEntryError": {
      "type": "object", 
      "description": "path: None\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/WriteError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of CreateFolderEntryError"
        }
      }
    }, 
    "LinkAction": {
      "type": "object", 
      "description": "Actions that can be performed on a link.\nchange_access_level: Change the access level of the link.\nchange_audience: Change the audience of the link.\nremove_expiry: Remove the expiry date of the link.\nremove_password: Remove the password of the link.\nset_expiry: Create or modify the expiry date of the link.\nset_password: Create or modify the password of the link.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "change_access_level", 
            "change_audience", 
            "remove_expiry", 
            "remove_password", 
            "set_expiry", 
            "set_password", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of LinkAction"
        }
      }
    }, 
    "LinkExpiry": {
      "type": "object", 
      "description": "remove_expiry: Remove the currently set expiry for the link.\nset_expiry: Set a new expiry or change an existing expiry.\nother: None\n", 
      "properties": {
        "set_expiry": {
          "type": "string", 
          "description": "Set a new expiry or change an existing expiry."
        }, 
        ".tag": {
          "enum": [
            "remove_expiry", 
            "set_expiry"
          ], 
          "type": "string", 
          "title": "Choice of LinkExpiry"
        }
      }
    }, 
    "PendingUploadMode": {
      "type": "object", 
      "description": "Flag to indicate pending upload default (for linking to not-yet-existing paths).\nfile: Assume pending uploads are files.\nfolder: Assume pending uploads are folders.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "file", 
            "folder"
          ], 
          "type": "string", 
          "title": "Choice of PendingUploadMode"
        }
      }
    }, 
    "GetSharedLinksError": {
      "type": "object", 
      "description": "path: None\nother: None\n", 
      "properties": {
        "path": {
          "type": "string"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GetSharedLinksError"
        }
      }
    }, 
    "RelocationBatchJobStatus": {
      "type": "object", 
      "description": "in_progress: The asynchronous job is still in progress.\ncomplete: The copy or move batch job has finished.\nfailed: The copy or move batch job has failed with exception.\n", 
      "properties": { 
        ".tag": {
          "enum": [
            "in_progress", 
            "complete"
          ], 
          "type": "string", 
          "title": "Choice of RelocationBatchJobStatus"
        }, 
        "complete": {
          "$ref": "#/definitions/RelocationBatchV2Result"
        }
      }
    },
    "RelocationBatchV2Result": {
      "type": "object", 
      "description": "entries: None\n", 
      "properties": {
        "entries": {
          "items": {
            "$ref": "#/definitions/RelocationBatchResultData"
          }, 
          "type": "array"
        }
      }
    }, 
    "GroupsPollError": {
      "type": "object", 
      "description": "invalid_async_job_id: The job ID is invalid.\ninternal_error: Something went wrong with the job on Dropbox's end. You'll need to verify that the action you were taking succeeded, and if not, try again. This should happen very rarely.\nother: None\naccess_denied: You are not allowed to poll this job.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_async_job_id", 
            "internal_error", 
            "other", 
            "access_denied"
          ], 
          "type": "string", 
          "title": "Choice of GroupsPollError"
        }
      }
    },
    "AddSecondaryEmailsArg": {
      "type": "object",
      "properties": {
        "new_secondary_emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSecondaryEmailsArg"
          }
        }
      }
    },
    "UserSecondaryEmailsArg": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        },
        "secondary_emails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddSecondaryEmailsResult": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAddResult"
          }
        }
      }
    },
    "UserAddResult": {
      "type": "object",
      "properties": {
        ".tag": {
          "type": "string",
          "enum": [
            "success",
            "invalid_user",
            "unverified",
            "placeholder_user"
          ]
        },
        "success": {
          "$ref": "#/definitions/UserSecondaryEmailsResult"
        },
        "invalid_user": {
          "$ref": "#/definitions/UserSelectorArg"
        },
        "unverified": {
          "$ref": "#/definitions/UserSelectorArg"
        },
        "placeholder_user": {
          "$ref": "#/definitions/UserSelectorArg"
        }
      }
    },
    "UserSecondaryEmailsResult": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddSecondaryEmailResult"
          }
        }
      }
    },
    "AddSecondaryEmailResult": {
      "type": "object",
      "properties": {
        ".tag": {
          "type": "string",
          "enum": [
            "success",
            "unavailable",
            "already_pending",
            "already_owned_by_user",
            "reached_limit",
            "transient_error",
            "too_many_updates",
            "unknown_error",
            "rate_limited"
          ]
        },
        "success": {
          "$ref": "#/definitions/SecondaryEmail"
        },
        "unavailable": {
          "type": "string"
        },
        "already_pending": {
          "type": "string"
        },
        "already_owned_by_user": {
          "type": "string"
        },
        "reached_limit": {
          "type": "string"
        },
        "transient_error": {
          "type": "string"
        },
        "too_many_updates": {
          "type": "string"
        },
        "unknown_error": {
          "type": "string"
        },
        "rate_limited": {
          "type": "string"
        }
      }
    },
    "ResendVerificationEmailArg": {
      "type": "object",
      "properties": {
        "emails_to_resend": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSecondaryEmailsArg"
          }
        }
      }
    },
    "ResendVerificationEmailResult": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserResendResult"
          }
        }
      }
    },
    "UserResendResult": {
      "type": "object",
      "properties": {
        ".tag": {
          "type": "string",
          "enum": [
            "success",
            "invalid_user"
          ]
        },
        "success": {
          "$ref": "#/definitions/UserResendEmailsResult"
        },
        "invalid_user": {
          "$ref": "#/definitions/UserSelectorArg"
        }
      }
    },
    "UserResendEmailsResult": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResendSecondaryEmailResult"
          }
        }
      }
    },
    "ResendSecondaryEmailResult": {
      "type": "object",
      "properties": {
        ".tag": {
          "type": "string",
          "enum": [
            "success",
            "not_pending",
            "rate_limited"
          ]
        },
        "success": {
          "type": "string"
        },
        "not_pending": {
          "type": "string"
        },
        "rate_limited": {
          "type": "string"
        }
      }
    },
    "DeleteSecondaryEmailsArg": {
      "type": "object",
      "properties": {
        "emails_to_delete": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSecondaryEmailsArg"
          }
        }
      }
    },
    "DeleteSecondaryEmailsResult": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDeleteResult"
          }
        }
      }
    },
    "UserDeleteResult": {
      "type": "object",
      "properties": {
        "success": {
          "$ref": "#/definitions/UserDeleteEmailsResult"
        },
        "invalid_user": {
            "$ref": "#/definitions/UserSelectorArg"
          }
        }
      },
      "UserDeleteEmailsResult": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/definitions/UserSelectorArg"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DeleteSecondaryEmailResult"
            }
          }
        }
      },
      "DeleteSecondaryEmailResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "string"
          },
          "not_found": {
            "type": "string"
          },
          "cannot_remove_primary": {
            "type": "string"
          }
        }
      },
    "PollEmptyResult": {
      "type": "object", 
      "description": "Result returned by methods that poll for the status of an asynchronous job. Upon completion of the job, no additional information is returned.\nin_progress: The asynchronous job is still in progress.\ncomplete: The asynchronous job has completed successfully.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "in_progress", 
            "complete"
          ], 
          "type": "string", 
          "title": "Choice of PollEmptyResult"
        }
      }
    },
    "MembersRecoverError": {
      "type": "object", 
      "description": "user_not_found: No matching user found. The provided team_member_id, email, or external_id does not exist on this team.\nuser_unrecoverable: The user is not recoverable.\nuser_not_in_team: The user is not a member of the team.\nteam_license_limit: Team is full. The organization has no available licenses.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "user_not_found", 
            "user_unrecoverable", 
            "user_not_in_team", 
            "team_license_limit", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MembersRecoverError"
        }
      }
    },
    "MembersRecoverArg": {
      "type": "object", 
      "description": "Exactly one of team_member_id, email, or external_id must be provided to identify the user account.\nuser: Identity of user to recover.\n", 
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        }
      }
    },
    "UserSelectorArg": {
      "type": "object", 
      "description": "Argument for selecting a single user, either by team_member_id, external_id or email.\nteam_member_id: None\nexternal_id: None\nemail: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "team_member_id", 
            "external_id", 
            "email"
          ], 
          "type": "string", 
          "title": "Choice of UserSelectorArg"
        }, 
        "external_id": {
          "type": "string"
        }, 
        "team_member_id": {
          "type": "string"
        }, 
        "email": {
          "type": "string"
        }
      }
    },
    "DateRangeError": {
      "type": "object", 
      "description": "Errors that can originate from problems in input arguments to reports.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "other"
          ], 
          "type": "string", 
          "title": "Choice of DateRangeError"
        }
      }
    },
    "GetDevicesReport": {
      "type": "object", 
      "description": "Devices Report Result. Contains subsections for different time ranges of activity. Each of the items in each subsection of the storage report is an array of values, one value per day. If there is no data for a day, then the value will be None.\nstart_date: First date present in the results as 'YYYY-MM-DD' or None.\nactive_1_day: Report of the number of devices active in the last day.\nactive_7_day: Report of the number of devices active in the last 7 days.\nactive_28_day: Report of the number of devices active in the last 28 days.\n", 
      "properties": {
        "active_28_day": {
          "$ref": "#/definitions/DevicesActive"
        }, 
        "active_7_day": {
          "$ref": "#/definitions/DevicesActive"
        }, 
        "start_date": {
          "type": "string", 
          "description": "First date present in the results as 'YYYY-MM-DD' or None."
        }, 
        "active_1_day": {
          "$ref": "#/definitions/DevicesActive"
        }
      }
    },
    "DevicesActive": {
      "type": "object", 
      "description": "Each of the items is an array of values, one value per day. The value is the number of devices active within a time window, ending with that day.\nIf there is no data for a day, then the value will be None.\nwindows: Array of number of linked windows (desktop) clients with activity.\nmacos: Array of number of linked mac (desktop) clients with activity.\nlinux: Array of number of linked linus (desktop) clients with activity.\nios: Array of number of linked ios devices with activity.\nandroid: Array of number of linked android devices with activity.\nother: Array of number of other linked devices (blackberry, windows phone, etc)  with activity.\ntotal: Array of total number of linked clients with activity.\n", 
      "properties": {
        "macos": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of number of linked mac (desktop) clients with activity."
        }, 
        "windows": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of number of linked windows (desktop) clients with activity."
        }, 
        "ios": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of number of linked ios devices with activity."
        }, 
        "other": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of number of other linked devices (blackberry, windows phone, etc)  with activity."
        }, 
        "linux": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of number of linked linus (desktop) clients with activity."
        }, 
        "android": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of number of linked android devices with activity."
        }, 
        "total": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of total number of linked clients with activity."
        }
      }
    },
    "DateRange": {
      "type": "object", 
      "description": "Input arguments that can be provided for most reports.\nstart_date: Optional starting date (inclusive).\nend_date: Optional ending date (exclusive).\n", 
      "properties": {
        "start_date": {
          "type": "string", 
          "description": "Optional starting date (inclusive)."
        }, 
        "end_date": {
          "type": "string", 
          "description": "Optional ending date (exclusive)."
        }
      }
    },
    "ListTeamDevicesError": {
      "type": "object", 
      "description": "reset: Indicates that the cursor has been invalidated. Call :route:`devices/list_team_devices` again with an empty cursor to obtain a new cursor.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "reset", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListTeamDevicesError"
        }
      }
    },
    "ListTeamDevicesResult": {
      "type": "object", 
      "description": "devices: The devices of each member of the team.\nhas_more: If true, then there are more devices available. Pass the cursor to :route:`devices/list_team_devices` to retrieve the rest.\ncursor: Pass the cursor into :route:`devices/list_team_devices` to receive the next sub list of team's devices.\n", 
      "properties": {
        "has_more": {
          "type": "boolean", 
          "description": "If true, then there are more devices available. Pass the cursor to :route:`devices/list_team_devices` to retrieve the rest."
        }, 
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`devices/list_team_devices` to receive the next sub list of team's devices."
        }, 
        "devices": {
          "items": {
            "$ref": "#/definitions/MemberDevices"
          }, 
          "type": "array", 
          "description": "The devices of each member of the team."
        }
      }
    },
    "MemberDevices": {
      "type": "object", 
      "description": "Information on devices of a team's member.\nteam_member_id: The member unique Id.\nweb_sessions: List of web sessions made by this team member.\ndesktop_clients: List of desktop clients by this team member.\nmobile_clients: List of mobile clients by this team member.\n", 
      "properties": {
        "team_member_id": {
          "type": "string", 
          "description": "The member unique Id."
        }, 
        "desktop_clients": {
          "items": {
            "$ref": "#/definitions/DesktopClientSession"
          }, 
          "type": "array", 
          "description": "List of desktop clients by this team member."
        }, 
        "web_sessions": {
          "items": {
            "$ref": "#/definitions/ActiveWebSession"
          }, 
          "type": "array", 
          "description": "List of web sessions made by this team member."
        }, 
        "mobile_clients": {
          "items": {
            "$ref": "#/definitions/MobileClientSession"
          }, 
          "type": "array", 
          "description": "List of mobile clients by this team member."
        }
      }
    },
    "DesktopClientSession": {
      "type": "object", 
      "description": "Information about linked Dropbox desktop client sessions.\nsession_id: The session id.\nhost_name: Name of the hosting desktop.\nclient_type: The Dropbox desktop client type.\nclient_version: The Dropbox client version.\nplatform: Information on the hosting platform.\nis_delete_on_unlink_supported: Whether it's possible to delete all of the account files upon unlinking.\nip_address: The IP address of the last activity from this session.\ncountry: The country from which the last activity from this session was made.\ncreated: The time this session was created.\nupdated: The time of the last activity from this session.\n", 
      "properties": {
        "updated": {
          "type": "string", 
          "description": "The time of the last activity from this session."
        }, 
        "created": {
          "type": "string", 
          "description": "The time this session was created."
        }, 
        "country": {
          "type": "string", 
          "description": "The country from which the last activity from this session was made."
        }, 
        "session_id": {
          "type": "string", 
          "description": "The session id."
        }, 
        "platform": {
          "type": "string", 
          "description": "Information on the hosting platform."
        }, 
        "client_type": {
          "$ref": "#/definitions/DesktopPlatform"
        }, 
        "host_name": {
          "type": "string", 
          "description": "Name of the hosting desktop."
        }, 
        "is_delete_on_unlink_supported": {
          "type": "boolean", 
          "description": "Whether it's possible to delete all of the account files upon unlinking."
        }, 
        "client_version": {
          "type": "string", 
          "description": "The Dropbox client version."
        }, 
        "ip_address": {
          "type": "string", 
          "description": "The IP address of the last activity from this session."
        }
      }
    },
    "ActiveWebSession": {
      "type": "object", 
      "description": "Information on active web sessions.\nsession_id: The session id.\nuser_agent: Information on the hosting device.\nos: Information on the hosting operating system.\nbrowser: Information on the browser used for this web session.\nip_address: The IP address of the last activity from this session.\ncountry: The country from which the last activity from this session was made.\ncreated: The time this session was created.\nupdated: The time of the last activity from this session.\nexpires: The time this session expires.\n", 
      "properties": {
        "updated": {
          "type": "string", 
          "description": "The time of the last activity from this session."
        }, 
        "os": {
          "type": "string", 
          "description": "Information on the hosting operating system."
        }, 
        "created": {
          "type": "string", 
          "description": "The time this session was created."
        }, 
        "country": {
          "type": "string", 
          "description": "The country from which the last activity from this session was made."
        }, 
        "expires": {
          "type": "string", 
          "description": "The time this session expires."
        }, 
        "session_id": {
          "type": "string", 
          "description": "The session id."
        }, 
        "user_agent": {
          "type": "string", 
          "description": "Information on the hosting device."
        }, 
        "ip_address": {
          "type": "string", 
          "description": "The IP address of the last activity from this session."
        }, 
        "browser": {
          "type": "string", 
          "description": "Information on the browser used for this web session."
        }
      }
    },
    "MobileClientSession": {
      "type": "object", 
      "description": "Information about linked Dropbox mobile client sessions.\nsession_id: The session id.\ndevice_name: The device name.\nclient_type: The mobile application type.\nip_address: The IP address of the last activity from this session.\ncountry: The country from which the last activity from this session was made.\ncreated: The time this session was created.\nupdated: The time of the last activity from this session.\nclient_version: The dropbox client version.\nos_version: The hosting OS version.\nlast_carrier: last carrier used by the device.\n", 
      "properties": {
        "updated": {
          "type": "string", 
          "description": "The time of the last activity from this session."
        }, 
        "created": {
          "type": "string", 
          "description": "The time this session was created."
        }, 
        "country": {
          "type": "string", 
          "description": "The country from which the last activity from this session was made."
        }, 
        "session_id": {
          "type": "string", 
          "description": "The session id."
        }, 
        "device_name": {
          "type": "string", 
          "description": "The device name."
        }, 
        "os_version": {
          "type": "string", 
          "description": "The hosting OS version."
        }, 
        "client_type": {
          "$ref": "#/definitions/MobileClientPlatform"
        }, 
        "last_carrier": {
          "type": "string", 
          "description": "last carrier used by the device."
        }, 
        "client_version": {
          "type": "string", 
          "description": "The dropbox client version."
        }, 
        "ip_address": {
          "type": "string", 
          "description": "The IP address of the last activity from this session."
        }
      }
    },
    "ListTeamDevicesArg": {
      "type": "object", 
      "description": "cursor: At the first call to the :route:`devices/list_team_devices` the cursor shouldn't be passed. Then, if the result of the call includes a cursor, the following requests should include the received cursors in order to receive the next sub list of team devices.\ninclude_web_sessions: Whether to list web sessions of the team members.\ninclude_desktop_clients: Whether to list desktop clients of the team members.\ninclude_mobile_clients: Whether to list mobile clients of the team members.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "At the first call to the :route:`devices/list_team_devices` the cursor shouldn't be passed. Then, if the result of the call includes a cursor, the following requests should include the received cursors in order to receive the next sub list of team devices."
        }, 
        "include_desktop_clients": {
          "type": "boolean", 
          "description": "Whether to list desktop clients of the team members."
        }, 
        "include_web_sessions": {
          "type": "boolean", 
          "description": "Whether to list web sessions of the team members."
        }, 
        "include_mobile_clients": {
          "type": "boolean", 
          "description": "Whether to list mobile clients of the team members."
        }
      }
    },
    "GetTeamEventsContinueError": {
      "type": "object", 
      "description": "Errors that can be raised when calling :route:`get_events/continue`.\nbad_cursor: Bad cursor.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "bad_cursor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GetTeamEventsContinueError"
        }
      }
    },
    "GetTeamEventsResult": {
      "type": "object", 
      "description": "events: List of events.\ncursor: Pass the cursor into :route:`get_events/continue` to obtain additional events.\nhas_more: Is true if there are additional events that have not been returned yet. An additional call to :route:`get_events/continue` can retrieve them.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`get_events/continue` to obtain additional events."
        }, 
        "has_more": {
          "type": "boolean", 
          "description": "Is true if there are additional events that have not been returned yet. An additional call to :route:`get_events/continue` can retrieve them."
        }, 
        "events": {
          "items": {
            "$ref": "#/definitions/TeamEvent"
          }, 
          "type": "array", 
          "description": "List of events."
        }
      }
    },
    "TeamEvent": {
      "type": "object", 
      "description": "An audit log event.\ntimestamp: The Dropbox timestamp representing when the action was taken.\nevent_category: The category that this type of action belongs to.\nevent_type: The particular type of action taken.\ndetails: The variable event schema applicable to this type of action, instantiated with respect to this particular action.\nactor: The entity who actually performed the action. Might be missing due to historical data gap.\norigin: The origin from which the actor performed the action including information about host, ip address, location, session, etc. If the action was performed programmatically via the API the origin represents the API client.\ninvolve_non_team_member: True if the action involved a non team member either as the actor or as one of the affected users. Might be missing due to historical data gap.\ncontext: The user or team on whose behalf the actor performed the action. Might be missing due to historical data gap.\nparticipants: Zero or more users and/or groups that are affected by the action. Note that this list doesn't include any actors or users in context.\nassets: Zero or more content assets involved in the action. Currently these include Dropbox files and folders but in the future we might add other asset types such as Paper documents, folders, projects, etc.\n", 
      "properties": {
        "timestamp": {
          "type": "string", 
          "description": "The Dropbox timestamp representing when the action was taken."
        },
        "event_category": {
          "$ref": "#/definitions/EventCategory"
        },
        "event_type": {
          "$ref": "#/definitions/EventType"
        },
        "details": {
          "$ref": "#/definitions/EventDetails"
        },
        "actor": {
          "$ref": "#/definitions/ActorLogInfo"
        },
        "origin": {
          "$ref": "#/definitions/OriginLogInfo"
        },
        "involve_non_team_member": {
          "type": "boolean", 
          "description": "True if the action involved a non team member either as the actor or as one of the affected users. Might be missing due to historical data gap."
        },
        "context": {
          "$ref": "#/definitions/ContextLogInfo"
        }, 
        "participants": {
          "items": {
            "$ref": "#/definitions/ParticipantLogInfo"
          }, 
          "type": "array", 
          "description": "Zero or more users and/or groups that are affected by the action. Note that this list doesn't include any actors or users in context."
        }, 
        "assets": {
          "items": {
            "$ref": "#/definitions/AssetLogInfo"
          }, 
          "type": "array", 
          "description": "Zero or more content assets involved in the action. Currently these include Dropbox files and folders but in the future we might add other asset types such as Paper documents, folders, projects, etc."
        }
      }
    },
    "OriginLogInfo": {
      "type": "object", 
      "description": "The origin from which the actor performed the action.\naccess_method: The method that was used to perform the action.\ngeo_location: Geographic location details.\n", 
      "properties": {
        "geo_location": {
          "$ref": "#/definitions/GeoLocationLogInfo"
        }, 
        "access_method": {
          "$ref": "#/definitions/AccessMethodLogInfo"
        }
      }
    },
    "GeoLocationLogInfo": {
      "type": "object", 
      "description": "Geographic location details.\nip_address: IP address.\ncity: City name.\nregion: Region name.\ncountry: Country code.\n", 
      "properties": {
        "city": {
          "type": "string", 
          "description": "City name."
        }, 
        "region": {
          "type": "string", 
          "description": "Region name."
        }, 
        "ip_address": {
          "type": "string", 
          "description": "IP address."
        }, 
        "country": {
          "type": "string", 
          "description": "Country code."
        }
      }
    },
    "TfaAddBackupPhoneType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceApprovalsPolicy": {
      "type": "object", 
      "description": "unlimited: None\nlimited: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "unlimited", 
            "limited", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of DeviceApprovalsPolicy"
        }
      }
    }, 
    "MembersSetPermissionsError": {
      "type": "object", 
      "description": "user_not_found: No matching user found. The provided team_member_id, email, or external_id does not exist on this team.\nlast_admin: Cannot remove the admin setting of the last admin.\nuser_not_in_team: The user is not a member of the team.\ncannot_set_permissions: Cannot remove/grant permissions.\nteam_license_limit: Team is full. The organization has no available licenses.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "user_not_found", 
            "last_admin", 
            "user_not_in_team", 
            "cannot_set_permissions", 
            "team_license_limit", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MembersSetPermissionsError"
        }
      }
    }, 
    "TeamFolderCreateError": {
      "type": "object", 
      "description": "invalid_folder_name: The provided name cannot be used.\nfolder_name_already_used: There is already a team folder with the provided name.\nfolder_name_reserved: The provided name cannot be used because it is reserved.\nsync_settings_error: An error occurred setting the sync settings.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_folder_name", 
            "folder_name_already_used", 
            "folder_name_reserved", 
            "sync_settings_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderCreateError"
        }, 
        "sync_settings_error": {
          "$ref": "#/definitions/SyncSettingsError"
        }
      }
    }, 
    "FileRequestsEmailsRestrictedToTeamOnlyDetails": {
      "type": "object", 
      "description": "Enabled file request emails for team.\n", 
      "properties": {}
    }, 
    "DataPlacementRestrictionChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedNoteOpenedDetails": {
      "type": "object", 
      "description": "Opened shared Paper doc.\n", 
      "properties": {}
    }, 
    "FileRenameType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperContentRemoveMemberDetails": {
      "type": "object", 
      "description": "Removed team member from Paper doc/folder.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ShowcaseAddMemberDetails": {
      "type": "object", 
      "description": "Added member to showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "SmartSyncNotOptOutDetails": {
      "type": "object", 
      "description": "Opted team into Smart Sync.\nprevious_value: Previous Smart Sync opt out policy.\nnew_value: New Smart Sync opt out policy.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SmartSyncOptOutPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SmartSyncOptOutPolicy"
        }
      }
    }, 
    "MobileDeviceSessionLogInfo": {
      "type": "object", 
      "description": "Information about linked Dropbox mobile client sessions\ndevice_name: The device name.\nclient_type: The mobile application type.\nip_address: The IP address of the last activity from this session. Might be missing due to historical data gap.\ncreated: The time this session was created. Might be missing due to historical data gap.\nupdated: The time of the last activity from this session. Might be missing due to historical data gap.\nsession_info: Mobile session unique id. Might be missing due to historical data gap.\nclient_version: The Dropbox client version.\nos_version: The hosting OS version.\nlast_carrier: last carrier used by the device.\n", 
      "properties": {
        "updated": {
          "type": "string", 
          "description": "The time of the last activity from this session. Might be missing due to historical data gap."
        }, 
        "session_info": {
          "$ref": "#/definitions/MobileSessionLogInfo"
        }, 
        "created": {
          "type": "string", 
          "description": "The time this session was created. Might be missing due to historical data gap."
        }, 
        "device_name": {
          "type": "string", 
          "description": "The device name."
        }, 
        "os_version": {
          "type": "string", 
          "description": "The hosting OS version."
        }, 
        "client_type": {
          "$ref": "#/definitions/MobileClientPlatform"
        }, 
        "last_carrier": {
          "type": "string", 
          "description": "last carrier used by the device."
        }, 
        "client_version": {
          "type": "string", 
          "description": "The Dropbox client version."
        }, 
        "ip_address": {
          "type": "string", 
          "description": "The IP address of the last activity from this session. Might be missing due to historical data gap."
        }
      }
    }, 
    "PaperDocDeletedDetails": {
      "type": "object", 
      "description": "Archived Paper doc.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "MemberSpaceLimitsAddExceptionDetails": {
      "type": "object", 
      "description": "Added members to member space limit exception list.\n", 
      "properties": {}
    }, 
    "MemberSpaceLimitsRemoveExceptionDetails": {
      "type": "object", 
      "description": "Removed members from member space limit exception list.\n", 
      "properties": {}
    }, 
    "SharedLinkDownloadType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupChangeMemberRoleType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "AdminTier": {
      "description": "Describes which team-related admin permissions a user has.\nteam_admin: User is an administrator of the team - has all permissions.\nuser_management_admin: User can do most user provisioning, de-provisioning and management.\nsupport_admin: User can do a limited set of common support tasks for existing users.\nmember_only: User is not an admin of the team.\n",
          "enum": [
            "team_admin", 
            "user_management_admin", 
            "support_admin", 
            "member_only"
          ], 
          "type": "string", 
          "title": "Choice of AdminTier"
    }, 
    "TeamFolderAccessError": {
      "type": "object", 
      "description": "invalid_team_folder_id: The team folder ID is invalid.\nno_access: The authenticated app does not have permission to manage that team folder.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_team_folder_id", 
            "no_access", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderAccessError"
        }
      }
    }, 
    "MemberChangeAdminRoleDetails": {
      "type": "object", 
      "description": "Changed team member admin role.\nnew_value: New admin role. This field is relevant when the admin role is changed or whenthe user role changes from no admin rights to with admin rights.\nprevious_value: Previous admin role. This field is relevant when the admin role is changed or when the admin role is removed.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/AdminRole"
        }, 
        "previous_value": {
          "$ref": "#/definitions/AdminRole"
        }
      }
    }, 
    "SmartSyncOptOutDetails": {
      "type": "object", 
      "description": "Opted team out of Smart Sync.\nprevious_value: Previous Smart Sync opt out policy.\nnew_value: New Smart Sync opt out policy.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SmartSyncOptOutPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SmartSyncOptOutPolicy"
        }
      }
    },  
    "DomainVerificationRemoveDomainType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MembersGetInfoError": {
      "type": "object", 
      "description": "other: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MembersGetInfoError"
        }
      }
    }, 
    "ShowcaseFileRemovedDetails": {
      "type": "object", 
      "description": "Removed file from showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "SfAddGroupType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FeaturesGetValuesBatchError": {
      "type": "object", 
      "description": "empty_features_list: At least one :type:`Feature` must be included in the :type:`FeaturesGetValuesBatchArg`.features list.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "empty_features_list", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of FeaturesGetValuesBatchError"
        }
      }
    }, 
    "ShowcaseRequestAccessType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseFileDownloadDetails": {
      "type": "object", 
      "description": "Downloaded file from showcase.\nevent_uuid: Event unique identifier.\ndownload_type: Showcase download type.\n", 
      "properties": {
        "download_type": {
          "type": "string", 
          "description": "Showcase download type."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ListMembersDevicesArg": {
      "type": "object", 
      "description": "cursor: At the first call to the :route:`devices/list_members_devices` the cursor shouldn't be passed. Then, if the result of the call includes a cursor, the following requests should include the received cursors in order to receive the next sub list of team devices.\ninclude_web_sessions: Whether to list web sessions of the team members.\ninclude_desktop_clients: Whether to list desktop clients of the team members.\ninclude_mobile_clients: Whether to list mobile clients of the team members.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "At the first call to the :route:`devices/list_members_devices` the cursor shouldn't be passed. Then, if the result of the call includes a cursor, the following requests should include the received cursors in order to receive the next sub list of team devices."
        }, 
        "include_desktop_clients": {
          "type": "boolean", 
          "description": "Whether to list desktop clients of the team members."
        }, 
        "include_web_sessions": {
          "type": "boolean", 
          "description": "Whether to list web sessions of the team members."
        }, 
        "include_mobile_clients": {
          "type": "boolean", 
          "description": "Whether to list mobile clients of the team members."
        }
      }
    }, 
    "FileDeleteCommentDetails": {
      "type": "object", 
      "description": "Deleted file comment.\ncomment_text: Comment text. Might be missing due to historical data gap.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text. Might be missing due to historical data gap."
        }
      }
    }, 
    "ShowcaseRenamedDetails": {
      "type": "object", 
      "description": "Renamed showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "FileRevertDetails": {
      "type": "object", 
      "description": "Reverted files to previous version.\n", 
      "properties": {}
    }, 
    "AccountCaptureRelinquishAccountDetails": {
      "type": "object", 
      "description": "Account-captured user changed account email to personal email.\ndomain_name: Domain name.\n", 
      "properties": {
        "domain_name": {
          "type": "string", 
          "description": "Domain name."
        }
      }
    }, 
    "PaperEnabledUsersGroupRemovalDetails": {
      "type": "object", 
      "description": "Removed users from Paper-enabled users list.\n", 
      "properties": {}
    }, 
    "UserLinkedAppLogInfo": {
      "type": "object", 
      "description": "User linked app\napp_id: App unique ID. Might be missing due to historical data gap.\ndisplay_name: App display name. Might be missing due to historical data gap.\n", 
      "properties": {
        "display_name": {
          "type": "string", 
          "description": "App display name. Might be missing due to historical data gap."
        }, 
        "app_id": {
          "type": "string", 
          "description": "App unique ID. Might be missing due to historical data gap."
        }
      }
    }, 
    "SfFbInviteChangeRoleType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentDownloadType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "CreateFolderType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ListMembersAppsError": {
      "type": "object", 
      "description": "Error returned by :route:`linked_apps/list_members_linked_apps`.\nreset: Indicates that the cursor has been invalidated. Call :route:`linked_apps/list_members_linked_apps` again with an empty cursor to obtain a new cursor.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "reset", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListMembersAppsError"
        }
      }
    }, 
    "MembersAddJobStatus": {
      "type": "object", 
      "description": "in_progress: The asynchronous job is still in progress.\ncomplete: The asynchronous job has finished. For each member that was specified in the parameter :type:`MembersAddArg` that was provided to :route:`members/add`, a corresponding item is returned in this list.\nfailed: The asynchronous job returned an error. The string contains an error message.\n", 
      "properties": {
        "failed": {
          "type": "string", 
          "description": "The asynchronous job returned an error. The string contains an error message."
        }, 
        ".tag": {
          "enum": [
            "in_progress", 
            "complete", 
            "failed"
          ], 
          "type": "string", 
          "title": "Choice of MembersAddJobStatus"
        }, 
        "complete": {
          "items": {
            "$ref": "#/definitions/MemberAddResult"
          }, 
          "type": "array", 
          "description": "The asynchronous job has finished. For each member that was specified in the parameter :type:`MembersAddArg` that was provided to :route:`members/add`, a corresponding item is returned in this list."
        }
      }
    }, 
    "MembersGetAvailableTeamMemberRolesResult":{
      "type":"object",
      "properties":{
        "roles":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/TeamMemberRole"
          }
        }
      }
    },
    "FileRequestsEmailsRestrictedToTeamOnlyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DomainInvitesDeclineRequestToJoinTeamType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseFileDownloadType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceChangeIpMobileDetails": {
      "type": "object", 
      "description": "Changed IP address associated with active mobile session.\ndevice_session_info: Device's session logged information.\n", 
      "properties": {
        "device_session_info": {
          "$ref": "#/definitions/DeviceSessionLogInfo"
        }
      }
    }, 
    "ExcludedUsersListContinueError": {
      "type": "object", 
      "description": "Excluded users list continue error.\ninvalid_cursor: The cursor is invalid.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_cursor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ExcludedUsersListContinueError"
        }
      }
    }, 
    "UserCustomQuotaArg": {
      "type": "object", 
      "description": "User and their required custom quota in GB (1 TB = 1024 GB).\nuser: None\nquota_gb: None\n", 
      "properties": {
        "quota_gb": {
          "type": "number"
        }, 
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        }
      }
    }, 
    "GroupLogInfo": {
      "type": "object", 
      "description": "Group's logged information.\ndisplay_name: The name of this group.\ngroup_id: The unique id of this group. Might be missing due to historical data gap.\nexternal_id: External group ID. Might be missing due to historical data gap.\n", 
      "properties": {
        "external_id": {
          "type": "string", 
          "description": "External group ID. Might be missing due to historical data gap."
        }, 
        "group_id": {
          "type": "string", 
          "description": "The unique id of this group. Might be missing due to historical data gap."
        }, 
        "display_name": {
          "type": "string", 
          "description": "The name of this group."
        }
      }
    }, 
    "TwoAccountPolicy": {
      "type": "object", 
      "description": "Policy for pairing personal account to work account\ndisabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TwoAccountPolicy"
        }
      }
    }, 
    "PaperDocTrashedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ContentSyncSetting": {
      "type": "object", 
      "description": "id: Id of the item this setting is applied to.\nsync_setting: Setting for this item.\n", 
      "properties": {
        "sync_setting": {
          "$ref": "#/definitions/SyncSetting"
        }, 
        "id": {
          "type": "string", 
          "description": "Id of the item this setting is applied to."
        }
      }
    }, 
    "FileDeleteCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TfaRemoveSecurityKeyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberAddNameType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamFolderStatus": {
      "type": "object", 
      "description": "active: The team folder and sub-folders are available to all members.\narchived: The team folder is not accessible outside of the team folder manager.\narchive_in_progress: The team folder is not accessible outside of the team folder manager.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "active", 
            "archived", 
            "archive_in_progress", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderStatus"
        }
      }
    }, 
    "FileRevertType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileEditType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentClaimInvitationDetails": {
      "type": "object", 
      "description": "Acquired membership of shared file/folder by accepting invite.\nshared_content_link: Shared content link.\n", 
      "properties": {
        "shared_content_link": {
          "type": "string", 
          "description": "Shared content link."
        }
      }
    }, 
    "PaperFolderDeletedDetails": {
      "type": "object", 
      "description": "Archived Paper folder.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "EmmRemoveExceptionDetails": {
      "type": "object", 
      "description": "Removed members from EMM exception list.\n", 
      "properties": {}
    }, 
    "PaperDocChangeMemberRoleDetails": {
      "type": "object", 
      "description": "Changed team member permissions for Paper doc.\nevent_uuid: Event unique identifier.\naccess_type: Paper doc access type.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }, 
        "access_type": {
          "$ref": "#/definitions/PaperAccessType"
        }
      }
    }, 
    "SecondaryMailsPolicy": {
      "type": "object", 
      "description": "disabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SecondaryMailsPolicy"
        }
      }
    },  
    "PaperContentRestoreDetails": {
      "type": "object", 
      "description": "Restored archived Paper doc/folder.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ListMembersAppsArg": {
      "type": "object", 
      "description": "Arguments for :route:`linked_apps/list_members_linked_apps`.\ncursor: At the first call to the :route:`linked_apps/list_members_linked_apps` the cursor shouldn't be passed. Then, if the result of the call includes a cursor, the following requests should include the received cursors in order to receive the next sub list of the team applications.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "At the first call to the :route:`linked_apps/list_members_linked_apps` the cursor shouldn't be passed. Then, if the result of the call includes a cursor, the following requests should include the received cursors in order to receive the next sub list of the team applications."
        }
      }
    }, 
    "MemberSuggestDetails": {
      "type": "object", 
      "description": "Suggested person to add to team.\nsuggested_members: suggested users emails.\n", 
      "properties": {
        "suggested_members": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "suggested users emails."
        }
      }
    }, 
    "ResellerSupportSessionStartType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ExcludedUsersUpdateError": {
      "type": "object", 
      "description": "Excluded users update error.\nusers_not_in_team: At least one of the users is not part of your team.\ntoo_many_users: A maximum of 1000 users for each of addition/removal can be supplied.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "users_not_in_team", 
            "too_many_users", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ExcludedUsersUpdateError"
        }
      }
    }, 
    "SsoErrorType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileMoveDetails": {
      "type": "object", 
      "description": "Moved files and/or folders.\nrelocate_action_details: Relocate action details.\n", 
      "properties": {
        "relocate_action_details": {
          "items": {
            "$ref": "#/definitions/RelocateAssetReferencesLogInfo"
          }, 
          "type": "array", 
          "description": "Relocate action details."
        }
      }
    }, 
    "MemberChangeStatusDetails": {
      "type": "object", 
      "description": "Changed member status (invited, joined, suspended, etc.).\nnew_value: New member status.\nprevious_value: Previous member status. Might be missing due to historical data gap.\naction: Additional information indicating the action taken that caused status change.\n", 
      "properties": {
        "action": {
          "$ref": "#/definitions/ActionDetails"
        }, 
        "new_value": {
          "$ref": "#/definitions/MemberStatus"
        }, 
        "previous_value": {
          "$ref": "#/definitions/MemberStatus"
        }
      }
    }, 
    "CustomQuotaResult": {
      "type": "object", 
      "description": "User custom quota.\nsuccess: User's custom quota.\ninvalid_user: Invalid user (not in team).\nother: None\n", 
      "properties": {
        "invalid_user": {
          "$ref": "#/definitions/UserSelectorArg"
        }, 
        ".tag": {
          "enum": [
            "success", 
            "invalid_user", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of CustomQuotaResult"
        }, 
        "success": {
          "$ref": "#/definitions/UserCustomQuotaResult"
        }
      }
    }, 
    "TeamFolderArchiveArg": {
      "type": "object", 
      "description": "team_folder_id: The ID of the team folder.\nforce_async_off: Whether to force the archive to happen synchronously.\n", 
      "properties": {
        "team_folder_id": {
          "type": "string", 
          "description": "The ID of the team folder."
        }, 
        "force_async_off": {
          "type": "boolean", 
          "description": "Whether to force the archive to happen synchronously."
        }
      }
    }, 
    "TfaAddSecurityKeyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DomainVerificationAddDomainFailType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperEnabledUsersGroupAdditionDetails": {
      "type": "object", 
      "description": "Added users to Paper-enabled users list.\n", 
      "properties": {}
    }, 
    "TeamFolderUpdateSyncSettingsArg": {
      "type": "object", 
      "description": "team_folder_id: The ID of the team folder.\nsync_setting: Sync setting to apply to the team folder itself. Only meaningful if the team folder is not a shared team root.\ncontent_sync_settings: Sync settings to apply to contents of this team folder.\n", 
      "properties": {
        "team_folder_id": {
          "type": "string", 
          "description": "The ID of the team folder."
        }, 
        "content_sync_settings": {
          "items": {
            "$ref": "#/definitions/ContentSyncSettingArg"
          }, 
          "type": "array", 
          "description": "Sync settings to apply to contents of this team folder."
        }, 
        "sync_setting": {
          "$ref": "#/definitions/SyncSettingArg"
        }
      }
    }, 
    "GroupsMembersListArg": {
      "type": "object", 
      "description": "group: The group whose members are to be listed.\nlimit: Number of results to return per call.\n", 
      "properties": {
        "limit": {
          "type": "integer", 
          "description": "Number of results to return per call."
        }, 
        "group": {
          "$ref": "#/definitions/GroupSelector"
        }
      }
    }, 
    "SpaceCapsType": {
      "type": "object", 
      "description": "Space limit alert policy\nhard: None\noff: None\nsoft: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "hard", 
            "off", 
            "soft", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SpaceCapsType"
        }
      }
    }, 
    "MemberSpaceLimitsRemoveCustomQuotaType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupRemoveMemberDetails": {
      "type": "object", 
      "description": "Removed team members from group.\n", 
      "properties": {}
    }, 
    "ShowcaseChangeExternalSharingPolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled sharing Dropbox Showcase externally for team.\nnew_value: New Dropbox Showcase external sharing policy.\nprevious_value: Previous Dropbox Showcase external sharing policy.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/ShowcaseExternalSharingPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/ShowcaseExternalSharingPolicy"
        }
      }
    }, 
    "MemberTransferAccountContentsType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedLinkShareDetails": {
      "type": "object", 
      "description": "Added members as audience of shared link.\nshared_link_owner: Shared link owner details. Might be missing due to historical data gap.\nexternal_users: Users without a Dropbox account that were added as shared link audience.\n", 
      "properties": {
        "shared_link_owner": {
          "$ref": "#/definitions/UserLogInfo"
        }, 
        "external_users": {
          "items": {
            "$ref": "#/definitions/ExternalUserLogInfo"
          }, 
          "type": "array", 
          "description": "Users without a Dropbox account that were added as shared link audience."
        }
      }
    }, 
    "SharedContentChangeInviteeRoleDetails": {
      "type": "object", 
      "description": "Changed access type of invitee to shared file/folder before invite was accepted.\nnew_access_level: New access level.\ninvitee: The invitee whose role was changed.\nprevious_access_level: Previous access level. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_access_level": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "previous_access_level": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "invitee": {
          "type": "string", 
          "description": "The invitee whose role was changed."
        }
      }
    }, 
    "DeviceManagementEnabledType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperFolderLogInfo": {
      "type": "object", 
      "description": "Paper folder's logged information.\nfolder_id: Papers folder Id.\nfolder_name: Paper folder name.\n", 
      "properties": {
        "folder_id": {
          "type": "string", 
          "description": "Papers folder Id."
        }, 
        "folder_name": {
          "type": "string", 
          "description": "Paper folder name."
        }
      }
    }, 
    "NoteAclLinkType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "AdminRole": {
      "type": "object", 
      "description": "team_admin: None\nuser_management_admin: None\nsupport_admin: None\nlimited_admin: None\nmember_only: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "team_admin", 
            "user_management_admin", 
            "support_admin", 
            "limited_admin", 
            "member_only", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of AdminRole"
        }
      }
    }, 
    "TfaChangeBackupPhoneDetails": {
      "type": "object", 
      "description": "Changed backup phone for two-step verification.\n", 
      "properties": {}
    }, 
    "EmmCreateUsageReportType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperAccessType": {
      "type": "object", 
      "description": "viewer: None\ncommenter: None\neditor: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "viewer", 
            "commenter", 
            "editor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PaperAccessType"
        }
      }
    }, 
    "PaperDocumentLogInfo": {
      "type": "object", 
      "description": "Paper document's logged information.\ndoc_id: Papers document Id.\ndoc_title: Paper document title.\n", 
      "properties": {
        "doc_title": {
          "type": "string", 
          "description": "Paper document title."
        }, 
        "doc_id": {
          "type": "string", 
          "description": "Papers document Id."
        }
      }
    }, 
    "MemberRequestsChangePolicyDetails": {
      "type": "object", 
      "description": "Changed whether users can find team when not invited.\nnew_value: New member change requests policy.\nprevious_value: Previous member change requests policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/MemberRequestsPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/MemberRequestsPolicy"
        }
      }
    }, 
    "AppLogInfo": {
      "type": "object", 
      "description": "App's logged information.\napp_id: App unique ID. Might be missing due to historical data gap.\ndisplay_name: App display name. Might be missing due to historical data gap.\n", 
      "properties": {
        "display_name": {
          "type": "string", 
          "description": "App display name. Might be missing due to historical data gap."
        }, 
        "app_id": {
          "type": "string", 
          "description": "App unique ID. Might be missing due to historical data gap."
        }
      }
    }, 
    "AccountCaptureNotificationEmailsSentDetails": {
      "type": "object", 
      "description": "Sent proactive account capture email to all unmanaged members.\ndomain_name: Domain name.\n", 
      "properties": {
        "domain_name": {
          "type": "string", 
          "description": "Domain name."
        }
      }
    }, 
    "TokenGetAuthenticatedAdminResult": {
      "type": "object", 
      "description": "Results for :route:`token/get_authenticated_admin`.\nadmin_profile: The admin who authorized the token.\n", 
      "properties": {
        "admin_profile": {
          "$ref": "#/definitions/TeamMemberProfile"
        }
      }
    }, 
    "MembersDeactivateArg": {
      "type": "object", 
      "description": "Exactly one of team_member_id, email, or external_id must be provided to identify the user account.\nuser: Identity of user to remove/suspend.\nwipe_data: If provided, controls if the user's data will be deleted on their linked devices.\n", 
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        }, 
        "wipe_data": {
          "type": "boolean", 
          "description": "If provided, controls if the user's data will be deleted on their linked devices."
        }
      }
    }, 
    "MembersSetPermissionsResult": {
      "type": "object", 
      "description": "team_member_id: The member ID of the user to which the change was applied.\nrole: The role after the change.\n", 
      "properties": {
        "team_member_id": {
          "type": "string", 
          "description": "The member ID of the user to which the change was applied."
        }, 
        "role": {
          "$ref": "#/definitions/AdminTier"
        }
      }
    }, 
    "GroupSelector": {
      "type": "object", 
      "description": "Argument for selecting a single group, either by group_id or by external group ID.\ngroup_id: Group ID.\ngroup_external_id: External ID of the group.\n", 
      "properties": {
        "group_external_id": {
          "type": "string", 
          "description": "External ID of the group."
        }, 
        "group_id": {
          "type": "string", 
          "description": "Group ID."
        }, 
        ".tag": {
          "enum": [
            "group_id", 
            "group_external_id"
          ], 
          "type": "string", 
          "title": "Choice of GroupSelector"
        }
      }
    }, 
    "RemoveCustomQuotaResult": {
      "type": "object", 
      "description": "User result for setting member custom quota.\nsuccess: Successfully removed user.\ninvalid_user: Invalid user (not in team).\nother: None\n", 
      "properties": {
        "invalid_user": {
          "$ref": "#/definitions/UserSelectorArg"
        }, 
        ".tag": {
          "enum": [
            "success", 
            "invalid_user", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of RemoveCustomQuotaResult"
        }, 
        "success": {
          "$ref": "#/definitions/UserSelectorArg"
        }
      }
    }, 
    "SharingLinkPolicy": {
      "type": "object", 
      "description": "Policy for controlling if team members can share links externally\ndefault_private: None\ndefault_public: None\nonly_private: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "default_private", 
            "default_public", 
            "only_private", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharingLinkPolicy"
        }
      }
    }, 
    "WebDeviceSessionLogInfo": {
      "type": "object", 
      "description": "Information on active web sessions\nuser_agent: Information on the hosting device.\nos: Information on the hosting operating system.\nbrowser: Information on the browser used for this web session.\nip_address: The IP address of the last activity from this session. Might be missing due to historical data gap.\ncreated: The time this session was created. Might be missing due to historical data gap.\nupdated: The time of the last activity from this session. Might be missing due to historical data gap.\nsession_info: Web session unique id. Might be missing due to historical data gap.\n", 
      "properties": {
        "updated": {
          "type": "string", 
          "description": "The time of the last activity from this session. Might be missing due to historical data gap."
        }, 
        "session_info": {
          "$ref": "#/definitions/WebSessionLogInfo"
        }, 
        "ip_address": {
          "type": "string", 
          "description": "The IP address of the last activity from this session. Might be missing due to historical data gap."
        }, 
        "created": {
          "type": "string", 
          "description": "The time this session was created. Might be missing due to historical data gap."
        }, 
        "user_agent": {
          "type": "string", 
          "description": "Information on the hosting device."
        }, 
        "os": {
          "type": "string", 
          "description": "Information on the hosting operating system."
        }, 
        "browser": {
          "type": "string", 
          "description": "Information on the browser used for this web session."
        }
      }
    }, 
    "AllowDownloadDisabledType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupsSelector": {
      "type": "object", 
      "description": "Argument for selecting a list of groups, either by group_ids, or external group IDs.\ngroup_ids: List of group IDs.\ngroup_external_ids: List of external IDs of groups.\n", 
      "properties": {
        "group_external_ids": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "List of external IDs of groups."
        }, 
        ".tag": {
          "enum": [
            "group_ids", 
            "group_external_ids"
          ], 
          "type": "string", 
          "title": "Choice of GroupsSelector"
        }, 
        "group_ids": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "List of group IDs."
        }
      }
    }, 
    "ShowcaseViewType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TfaResetType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberSpaceLimitsAddCustomQuotaDetails": {
      "type": "object", 
      "description": "Set custom member space limit.\nnew_value: New custom quota value in bytes.\n", 
      "properties": {
        "new_value": {
          "type": "number", 
          "description": "New custom quota value in bytes."
        }
      }
    }, 
    "PaperDocMentionType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileCommentsPolicy": {
      "type": "object", 
      "description": "File comments policy\ndisabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of FileCommentsPolicy"
        }
      }
    }, 
    "ListTeamAppsArg": {
      "type": "object", 
      "description": "Arguments for :route:`linked_apps/list_team_linked_apps`.\ncursor: At the first call to the :route:`linked_apps/list_team_linked_apps` the cursor shouldn't be passed. Then, if the result of the call includes a cursor, the following requests should include the received cursors in order to receive the next sub list of the team applications.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "At the first call to the :route:`linked_apps/list_team_linked_apps` the cursor shouldn't be passed. Then, if the result of the call includes a cursor, the following requests should include the received cursors in order to receive the next sub list of the team applications."
        }
      }
    },
    "MembersDeleteProfilePhotoArg": {
      "type": "object",
      "description": "",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        }
      }

    },
    "TfaAddBackupPhoneDetails": {
      "type": "object", 
      "description": "Added backup phone for two-step verification.\n", 
      "properties": {}
    }, 
    "ExtendedVersionHistoryPolicy": {
      "type": "object", 
      "description": "explicitly_limited: None\nexplicitly_unlimited: None\nimplicitly_limited: None\nimplicitly_unlimited: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "explicitly_limited", 
            "explicitly_unlimited", 
            "implicitly_limited", 
            "implicitly_unlimited", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ExtendedVersionHistoryPolicy"
        }
      }
    }, 
    "TeamFolderIdArg": {
      "type": "object", 
      "description": "team_folder_id: The ID of the team folder.\n", 
      "properties": {
        "team_folder_id": {
          "type": "string", 
          "description": "The ID of the team folder."
        }
      }
    }, 
    "TeamFolderCreateDetails": {
      "type": "object", 
      "description": "Created team folder in active status.\n", 
      "properties": {}
    }, 
    "MemberSpaceLimitsChangeCustomQuotaDetails": {
      "type": "object", 
      "description": "Changed custom member space limit.\nprevious_value: Previous custom quota value in bytes.\nnew_value: New custom quota value in bytes.\n", 
      "properties": {
        "new_value": {
          "type": "number", 
          "description": "New custom quota value in bytes."
        }, 
        "previous_value": {
          "type": "number", 
          "description": "Previous custom quota value in bytes."
        }
      }
    }, 
    "SfTeamGrantAccessType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SignInAsSessionStartDetails": {
      "type": "object", 
      "description": "Started admin sign-in-as session.\n", 
      "properties": {}
    }, 
    "JoinTeamDetails": {
      "type": "object", 
      "description": "Additional information relevant when a new member joins the team.\nlinked_apps: Linked applications.\nlinked_devices: Linked devices.\nlinked_shared_folders: Linked shared folders.\n", 
      "properties": {
        "linked_apps": {
          "items": {
            "$ref": "#/definitions/UserLinkedAppLogInfo"
          }, 
          "type": "array", 
          "description": "Linked applications."
        }, 
        "linked_shared_folders": {
          "items": {
            "$ref": "#/definitions/FolderLogInfo"
          }, 
          "type": "array", 
          "description": "Linked shared folders."
        }, 
        "linked_devices": {
          "items": {
            "$ref": "#/definitions/LinkedDeviceLogInfo"
          }, 
          "type": "array", 
          "description": "Linked devices."
        }
      }
    }, 
    "PaperDocChangeMemberRoleType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DirectoryRestrictionsAddMembersDetails": {
      "type": "object", 
      "description": "Added members to directory restrictions list.\n", 
      "properties": {}
    }, 
    "ShowcaseChangeDownloadPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedLinkChangeExpiryType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DomainVerificationAddDomainSuccessDetails": {
      "type": "object", 
      "description": "Verified team domain.\ndomain_names: Domain names.\nverification_method: Domain name verification method. Might be missing due to historical data gap.\n", 
      "properties": {
        "verification_method": {
          "type": "string", 
          "description": "Domain name verification method. Might be missing due to historical data gap."
        }, 
        "domain_names": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Domain names."
        }
      }
    }, 
    "GroupDeleteDetails": {
      "type": "object", 
      "description": "Deleted group.\nis_company_managed: Is company managed group. Might be missing due to historical data gap.\n", 
      "properties": {
        "is_company_managed": {
          "type": "boolean", 
          "description": "Is company managed group. Might be missing due to historical data gap."
        }
      }
    }, 
    "FileMoveType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ExcludedUsersListArg": {
      "type": "object", 
      "description": "Excluded users list argument.\nlimit: Number of results to return per call.\n", 
      "properties": {
        "limit": {
          "type": "integer", 
          "description": "Number of results to return per call."
        }
      }
    }, 
    "SharedContentRemoveInviteesDetails": {
      "type": "object", 
      "description": "Removed invitee from shared file/folder before invite was accepted.\ninvitees: A list of invitees.\n", 
      "properties": {
        "invitees": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "A list of invitees."
        }
      }
    },
    "EventTypeArg": {
      "type": "string",
      "enum": [
        "admin_alerting_alert_state_changed",
        "admin_alerting_changed_alert_config",
        "admin_alerting_triggered_alert",
        "app_blocked_by_permissions",
        "app_link_team"
      ]
    },
    "EventType": {
      "type": "object", 
      "description": "The type of the event.\napp_link_team: (apps) Linked app for team\napp_link_user: (apps) Linked app for member\napp_unlink_team: (apps) Unlinked app for team\napp_unlink_user: (apps) Unlinked app for member\nfile_add_comment: (comments) Added file comment\nfile_change_comment_subscription: (comments) Subscribed to or unsubscribed from comment notifications for file\nfile_delete_comment: (comments) Deleted file comment\nfile_like_comment: (comments) Liked file comment (deprecated, no longer logged)\nfile_resolve_comment: (comments) Resolved file comment\nfile_unlike_comment: (comments) Unliked file comment (deprecated, no longer logged)\nfile_unresolve_comment: (comments) Unresolved file comment\ndevice_change_ip_desktop: (devices) Changed IP address associated with active desktop session\ndevice_change_ip_mobile: (devices) Changed IP address associated with active mobile session\ndevice_change_ip_web: (devices) Changed IP address associated with active web session\ndevice_delete_on_unlink_fail: (devices) Failed to delete all files from unlinked device\ndevice_delete_on_unlink_success: (devices) Deleted all files from unlinked device\ndevice_link_fail: (devices) Failed to link device\ndevice_link_success: (devices) Linked device\ndevice_management_disabled: (devices) Disabled device management (deprecated, no longer logged)\ndevice_management_enabled: (devices) Enabled device management (deprecated, no longer logged)\ndevice_unlink: (devices) Disconnected device\nemm_refresh_auth_token: (devices) Refreshed auth token used for setting up enterprise mobility management\naccount_capture_change_availability: (domains) Granted/revoked option to enable account capture on team domains\naccount_capture_migrate_account: (domains) Account-captured user migrated account to team\naccount_capture_notification_emails_sent: (domains) Sent proactive account capture email to all unmanaged members\naccount_capture_relinquish_account: (domains) Account-captured user changed account email to personal email\ndisabled_domain_invites: (domains) Disabled domain invites (deprecated, no longer logged)\ndomain_invites_approve_request_to_join_team: (domains) Approved user's request to join team\ndomain_invites_decline_request_to_join_team: (domains) Declined user's request to join team\ndomain_invites_email_existing_users: (domains) Sent domain invites to existing domain accounts (deprecated, no longer logged)\ndomain_invites_request_to_join_team: (domains) Requested to join team\ndomain_invites_set_invite_new_user_pref_to_no: (domains) Disabled \"Automatically invite new users\" (deprecated, no longer logged)\ndomain_invites_set_invite_new_user_pref_to_yes: (domains) Enabled \"Automatically invite new users\" (deprecated, no longer logged)\ndomain_verification_add_domain_fail: (domains) Failed to verify team domain\ndomain_verification_add_domain_success: (domains) Verified team domain\ndomain_verification_remove_domain: (domains) Removed domain from list of verified team domains\nenabled_domain_invites: (domains) Enabled domain invites (deprecated, no longer logged)\ncreate_folder: (file_operations) Created folders (deprecated, no longer logged)\nfile_add: (file_operations) Added files and/or folders\nfile_copy: (file_operations) Copied files and/or folders\nfile_delete: (file_operations) Deleted files and/or folders\nfile_download: (file_operations) Downloaded files and/or folders\nfile_edit: (file_operations) Edited files\nfile_get_copy_reference: (file_operations) Created copy reference to file/folder\nfile_move: (file_operations) Moved files and/or folders\nfile_permanently_delete: (file_operations) Permanently deleted files and/or folders\nfile_preview: (file_operations) Previewed files and/or folders\nfile_rename: (file_operations) Renamed files and/or folders\nfile_restore: (file_operations) Restored deleted files and/or folders\nfile_revert: (file_operations) Reverted files to previous version\nfile_rollback_changes: (file_operations) Rolled back file actions\nfile_save_copy_reference: (file_operations) Saved file/folder using copy reference\nfile_request_change: (file_requests) Changed file request\nfile_request_close: (file_requests) Closed file request\nfile_request_create: (file_requests) Created file request\nfile_request_receive_file: (file_requests) Received files for file request\ngroup_add_external_id: (groups) Added external ID for group\ngroup_add_member: (groups) Added team members to group\ngroup_change_external_id: (groups) Changed external ID for group\ngroup_change_management_type: (groups) Changed group management type\ngroup_change_member_role: (groups) Changed manager permissions of group member\ngroup_create: (groups) Created group\ngroup_delete: (groups) Deleted group\ngroup_description_updated: (groups) Updated group (deprecated, no longer logged)\ngroup_join_policy_updated: (groups) Updated group join policy (deprecated, no longer logged)\ngroup_moved: (groups) Moved group (deprecated, no longer logged)\ngroup_remove_external_id: (groups) Removed external ID for group\ngroup_remove_member: (groups) Removed team members from group\ngroup_rename: (groups) Renamed group\nemm_error: (logins) Failed to sign in via EMM (deprecated, replaced by 'Failed to sign in')\nlogin_fail: (logins) Failed to sign in\nlogin_success: (logins) Signed in\nlogout: (logins) Signed out\nreseller_support_session_end: (logins) Ended reseller support session\nreseller_support_session_start: (logins) Started reseller support session\nsign_in_as_session_end: (logins) Ended admin sign-in-as session\nsign_in_as_session_start: (logins) Started admin sign-in-as session\nsso_error: (logins) Failed to sign in via SSO (deprecated, replaced by 'Failed to sign in')\nmember_add_name: (members) Added team member name\nmember_change_admin_role: (members) Changed team member admin role\nmember_change_email: (members) Changed team member email\nmember_change_membership_type: (members) Changed membership type (limited/full) of member (deprecated, no longer logged)\nmember_change_name: (members) Changed team member name\nmember_change_status: (members) Changed member status (invited, joined, suspended, etc.)\nmember_permanently_delete_account_contents: (members) Permanently deleted contents of deleted team member account\nmember_space_limits_add_custom_quota: (members) Set custom member space limit\nmember_space_limits_change_custom_quota: (members) Changed custom member space limit\nmember_space_limits_change_status: (members) Changed space limit status\nmember_space_limits_remove_custom_quota: (members) Removed custom member space limit\nmember_suggest: (members) Suggested person to add to team\nmember_transfer_account_contents: (members) Transferred contents of deleted member account to another member\nsecondary_mails_policy_changed: (members) Secondary mails policy changed\npaper_content_add_member: (paper) Added team member to Paper doc/folder\npaper_content_add_to_folder: (paper) Added Paper doc/folder to folder\npaper_content_archive: (paper) Archived Paper doc/folder\npaper_content_create: (paper) Created Paper doc/folder\npaper_content_permanently_delete: (paper) Permanently deleted Paper doc/folder\npaper_content_remove_from_folder: (paper) Removed Paper doc/folder from folder\npaper_content_remove_member: (paper) Removed team member from Paper doc/folder\npaper_content_rename: (paper) Renamed Paper doc/folder\npaper_content_restore: (paper) Restored archived Paper doc/folder\npaper_doc_add_comment: (paper) Added Paper doc comment\npaper_doc_change_member_role: (paper) Changed team member permissions for Paper doc\npaper_doc_change_sharing_policy: (paper) Changed sharing setting for Paper doc\npaper_doc_change_subscription: (paper) Followed/unfollowed Paper doc\npaper_doc_deleted: (paper) Archived Paper doc (deprecated, no longer logged)\npaper_doc_delete_comment: (paper) Deleted Paper doc comment\npaper_doc_download: (paper) Downloaded Paper doc in specific format\npaper_doc_edit: (paper) Edited Paper doc\npaper_doc_edit_comment: (paper) Edited Paper doc comment\npaper_doc_followed: (paper) Followed Paper doc (deprecated, replaced by 'Followed/unfollowed Paper doc')\npaper_doc_mention: (paper) Mentioned team member in Paper doc\npaper_doc_request_access: (paper) Requested access to Paper doc\npaper_doc_resolve_comment: (paper) Resolved Paper doc comment\npaper_doc_revert: (paper) Restored Paper doc to previous version\npaper_doc_slack_share: (paper) Shared Paper doc via Slack\npaper_doc_team_invite: (paper) Shared Paper doc with team member (deprecated, no longer logged)\npaper_doc_trashed: (paper) Deleted Paper doc\npaper_doc_unresolve_comment: (paper) Unresolved Paper doc comment\npaper_doc_untrashed: (paper) Restored Paper doc\npaper_doc_view: (paper) Viewed Paper doc\npaper_external_view_allow: (paper) Changed Paper external sharing setting to anyone (deprecated, no longer logged)\npaper_external_view_default_team: (paper) Changed Paper external sharing setting to default team (deprecated, no longer logged)\npaper_external_view_forbid: (paper) Changed Paper external sharing setting to team-only (deprecated, no longer logged)\npaper_folder_change_subscription: (paper) Followed/unfollowed Paper folder\npaper_folder_deleted: (paper) Archived Paper folder (deprecated, no longer logged)\npaper_folder_followed: (paper) Followed Paper folder (deprecated, replaced by 'Followed/unfollowed Paper folder')\npaper_folder_team_invite: (paper) Shared Paper folder with member (deprecated, no longer logged)\npassword_change: (passwords) Changed password\npassword_reset: (passwords) Reset password\npassword_reset_all: (passwords) Reset all team member passwords\nemm_create_exceptions_report: (reports) Created EMM-excluded users report\nemm_create_usage_report: (reports) Created EMM mobile app usage report\nexport_members_report: (reports) Created member data report\npaper_admin_export_start: (reports) Exported all team Paper docs\nsmart_sync_create_admin_privilege_report: (reports) Created Smart Sync non-admin devices report\nteam_activity_create_report: (reports) Created team activity report\ncollection_share: (sharing) Shared album\nnote_acl_invite_only: (sharing) Changed Paper doc to invite-only (deprecated, no longer logged)\nnote_acl_link: (sharing) Changed Paper doc to link-accessible (deprecated, no longer logged)\nnote_acl_team_link: (sharing) Changed Paper doc to link-accessible for team (deprecated, no longer logged)\nnote_shared: (sharing) Shared Paper doc (deprecated, no longer logged)\nnote_share_receive: (sharing) Shared received Paper doc (deprecated, no longer logged)\nopen_note_shared: (sharing) Opened shared Paper doc (deprecated, no longer logged)\nsf_add_group: (sharing) Added team to shared folder (deprecated, no longer logged)\nsf_allow_non_members_to_view_shared_links: (sharing) Allowed non-collaborators to view links to files in shared folder (deprecated, no longer logged)\nsf_external_invite_warn: (sharing) Set team members to see warning before sharing folders outside team (deprecated, no longer logged)\nsf_fb_invite: (sharing) Invited Facebook users to shared folder (deprecated, no longer logged)\nsf_fb_invite_change_role: (sharing) Changed Facebook user's role in shared folder (deprecated, no longer logged)\nsf_fb_uninvite: (sharing) Uninvited Facebook user from shared folder (deprecated, no longer logged)\nsf_invite_group: (sharing) Invited group to shared folder (deprecated, no longer logged)\nsf_team_grant_access: (sharing) Granted access to shared folder (deprecated, no longer logged)\nsf_team_invite: (sharing) Invited team members to shared folder (deprecated, replaced by 'Invited user to Dropbox and added them to shared file/folder')\nsf_team_invite_change_role: (sharing) Changed team member's role in shared folder (deprecated, no longer logged)\nsf_team_join: (sharing) Joined team member's shared folder (deprecated, no longer logged)\nsf_team_join_from_oob_link: (sharing) Joined team member's shared folder from link (deprecated, no longer logged)\nsf_team_uninvite: (sharing) Unshared folder with team member (deprecated, replaced by 'Removed invitee from shared file/folder before invite was accepted')\nshared_content_add_invitees: (sharing) Invited user to Dropbox and added them to shared file/folder\nshared_content_add_link_expiry: (sharing) Added expiration date to link for shared file/folder\nshared_content_add_link_password: (sharing) Added password to link for shared file/folder\nshared_content_add_member: (sharing) Added users and/or groups to shared file/folder\nshared_content_change_downloads_policy: (sharing) Changed whether members can download shared file/folder\nshared_content_change_invitee_role: (sharing) Changed access type of invitee to shared file/folder before invite was accepted\nshared_content_change_link_audience: (sharing) Changed link audience of shared file/folder\nshared_content_change_link_expiry: (sharing) Changed link expiration of shared file/folder\nshared_content_change_link_password: (sharing) Changed link password of shared file/folder\nshared_content_change_member_role: (sharing) Changed access type of shared file/folder member\nshared_content_change_viewer_info_policy: (sharing) Changed whether members can see who viewed shared file/folder\nshared_content_claim_invitation: (sharing) Acquired membership of shared file/folder by accepting invite\nshared_content_copy: (sharing) Copied shared file/folder to own Dropbox\nshared_content_download: (sharing) Downloaded shared file/folder\nshared_content_relinquish_membership: (sharing) Left shared file/folder\nshared_content_remove_invitees: (sharing) Removed invitee from shared file/folder before invite was accepted\nshared_content_remove_link_expiry: (sharing) Removed link expiration date of shared file/folder\nshared_content_remove_link_password: (sharing) Removed link password of shared file/folder\nshared_content_remove_member: (sharing) Removed user/group from shared file/folder\nshared_content_request_access: (sharing) Requested access to shared file/folder\nshared_content_unshare: (sharing) Unshared file/folder by clearing membership and turning off link\nshared_content_view: (sharing) Previewed shared file/folder\nshared_folder_change_link_policy: (sharing) Changed who can access shared folder via link\nshared_folder_change_members_inheritance_policy: (sharing) Changed whether shared folder inherits members from parent folder\nshared_folder_change_members_management_policy: (sharing) Changed who can add/remove members of shared folder\nshared_folder_change_members_policy: (sharing) Changed who can become member of shared folder\nshared_folder_create: (sharing) Created shared folder\nshared_folder_decline_invitation: (sharing) Declined team member's invite to shared folder\nshared_folder_mount: (sharing) Added shared folder to own Dropbox\nshared_folder_nest: (sharing) Changed parent of shared folder\nshared_folder_transfer_ownership: (sharing) Transferred ownership of shared folder to another member\nshared_folder_unmount: (sharing) Deleted shared folder from Dropbox\nshared_link_add_expiry: (sharing) Added shared link expiration date\nshared_link_change_expiry: (sharing) Changed shared link expiration date\nshared_link_change_visibility: (sharing) Changed visibility of shared link\nshared_link_copy: (sharing) Added file/folder to Dropbox from shared link\nshared_link_create: (sharing) Created shared link\nshared_link_disable: (sharing) Removed shared link\nshared_link_download: (sharing) Downloaded file/folder from shared link\nshared_link_remove_expiry: (sharing) Removed shared link expiration date\nshared_link_share: (sharing) Added members as audience of shared link\nshared_link_view: (sharing) Opened shared link\nshared_note_opened: (sharing) Opened shared Paper doc (deprecated, no longer logged)\nshmodel_group_share: (sharing) Shared link with group (deprecated, no longer logged)\nshowcase_access_granted: (showcase) Granted access to showcase\nshowcase_add_member: (showcase) Added member to showcase\nshowcase_archived: (showcase) Archived showcase\nshowcase_created: (showcase) Created showcase\nshowcase_delete_comment: (showcase) Deleted showcase comment\nshowcase_edited: (showcase) Edited showcase\nshowcase_edit_comment: (showcase) Edited showcase comment\nshowcase_file_added: (showcase) Added file to showcase\nshowcase_file_download: (showcase) Downloaded file from showcase\nshowcase_file_removed: (showcase) Removed file from showcase\nshowcase_file_view: (showcase) Viewed file in showcase\nshowcase_permanently_deleted: (showcase) Permanently deleted showcase\nshowcase_post_comment: (showcase) Added showcase comment\nshowcase_remove_member: (showcase) Removed member from showcase\nshowcase_renamed: (showcase) Renamed showcase\nshowcase_request_access: (showcase) Requested access to showcase\nshowcase_resolve_comment: (showcase) Resolved showcase comment\nshowcase_restored: (showcase) Unarchived showcase\nshowcase_trashed: (showcase) Deleted showcase\nshowcase_trashed_deprecated: (showcase) Deleted showcase (old version) (deprecated, replaced by 'Deleted showcase')\nshowcase_unresolve_comment: (showcase) Unresolved showcase comment\nshowcase_untrashed: (showcase) Restored showcase\nshowcase_untrashed_deprecated: (showcase) Restored showcase (old version) (deprecated, replaced by 'Restored showcase')\nshowcase_view: (showcase) Viewed showcase\nsso_add_cert: (sso) Added X.509 certificate for SSO\nsso_add_login_url: (sso) Added sign-in URL for SSO\nsso_add_logout_url: (sso) Added sign-out URL for SSO\nsso_change_cert: (sso) Changed X.509 certificate for SSO\nsso_change_login_url: (sso) Changed sign-in URL for SSO\nsso_change_logout_url: (sso) Changed sign-out URL for SSO\nsso_change_saml_identity_mode: (sso) Changed SAML identity mode for SSO\nsso_remove_cert: (sso) Removed X.509 certificate for SSO\nsso_remove_login_url: (sso) Removed sign-in URL for SSO\nsso_remove_logout_url: (sso) Removed sign-out URL for SSO\nteam_folder_change_status: (team_folders) Changed archival status of team folder\nteam_folder_create: (team_folders) Created team folder in active status\nteam_folder_downgrade: (team_folders) Downgraded team folder to regular shared folder\nteam_folder_permanently_delete: (team_folders) Permanently deleted archived team folder\nteam_folder_rename: (team_folders) Renamed active/archived team folder\nteam_selective_sync_settings_changed: (team_folders) Changed sync default\naccount_capture_change_policy: (team_policies) Changed account capture setting on team domain\nallow_download_disabled: (team_policies) Disabled downloads (deprecated, no longer logged)\nallow_download_enabled: (team_policies) Enabled downloads (deprecated, no longer logged)\ndata_placement_restriction_change_policy: (team_policies) Set restrictions on data center locations where team data resides\ndata_placement_restriction_satisfy_policy: (team_policies) Completed restrictions on data center locations where team data resides\ndevice_approvals_change_desktop_policy: (team_policies) Set/removed limit on number of computers member can link to team Dropbox account\ndevice_approvals_change_mobile_policy: (team_policies) Set/removed limit on number of mobile devices member can link to team Dropbox account\ndevice_approvals_change_overage_action: (team_policies) Changed device approvals setting when member is over limit\ndevice_approvals_change_unlink_action: (team_policies) Changed device approvals setting when member unlinks approved device\ndirectory_restrictions_add_members: (team_policies) Added members to directory restrictions list\ndirectory_restrictions_remove_members: (team_policies) Removed members from directory restrictions list\nemm_add_exception: (team_policies) Added members to EMM exception list\nemm_change_policy: (team_policies) Enabled/disabled enterprise mobility management for members\nemm_remove_exception: (team_policies) Removed members from EMM exception list\nextended_version_history_change_policy: (team_policies) Accepted/opted out of extended version history\nfile_comments_change_policy: (team_policies) Enabled/disabled commenting on team files\nfile_requests_change_policy: (team_policies) Enabled/disabled file requests\nfile_requests_emails_enabled: (team_policies) Enabled file request emails for everyone (deprecated, no longer logged)\nfile_requests_emails_restricted_to_team_only: (team_policies) Enabled file request emails for team (deprecated, no longer logged)\ngoogle_sso_change_policy: (team_policies) Enabled/disabled Google single sign-on for team\ngroup_user_management_change_policy: (team_policies) Changed who can create groups\nmember_requests_change_policy: (team_policies) Changed whether users can find team when not invited\nmember_space_limits_add_exception: (team_policies) Added members to member space limit exception list\nmember_space_limits_change_caps_type_policy: (team_policies) Changed member space limit type for team\nmember_space_limits_change_policy: (team_policies) Changed team default member space limit\nmember_space_limits_remove_exception: (team_policies) Removed members from member space limit exception list\nmember_suggestions_change_policy: (team_policies) Enabled/disabled option for team members to suggest people to add to team\nmicrosoft_office_addin_change_policy: (team_policies) Enabled/disabled Microsoft Office add-in\nnetwork_control_change_policy: (team_policies) Enabled/disabled network control\npaper_change_deployment_policy: (team_policies) Changed whether Dropbox Paper, when enabled, is deployed to all members or to specific members\npaper_change_member_link_policy: (team_policies) Changed whether non-members can view Paper docs with link (deprecated, no longer logged)\npaper_change_member_policy: (team_policies) Changed whether members can share Paper docs outside team, and if docs are accessible only by team members or anyone by default\npaper_change_policy: (team_policies) Enabled/disabled Dropbox Paper for team\npaper_enabled_users_group_addition: (team_policies) Added users to Paper-enabled users list\npaper_enabled_users_group_removal: (team_policies) Removed users from Paper-enabled users list\npermanent_delete_change_policy: (team_policies) Enabled/disabled ability of team members to permanently delete content\nsharing_change_folder_join_policy: (team_policies) Changed whether team members can join shared folders owned outside team\nsharing_change_link_policy: (team_policies) Changed whether members can share links outside team, and if links are accessible only by team members or anyone by default\nsharing_change_member_policy: (team_policies) Changed whether members can share files/folders outside team\nshowcase_change_download_policy: (team_policies) Enabled/disabled downloading files from Dropbox Showcase for team\nshowcase_change_enabled_policy: (team_policies) Enabled/disabled Dropbox Showcase for team\nshowcase_change_external_sharing_policy: (team_policies) Enabled/disabled sharing Dropbox Showcase externally for team\nsmart_sync_change_policy: (team_policies) Changed default Smart Sync setting for team members\nsmart_sync_not_opt_out: (team_policies) Opted team into Smart Sync\nsmart_sync_opt_out: (team_policies) Opted team out of Smart Sync\nsso_change_policy: (team_policies) Changed single sign-on setting for team\ntfa_change_policy: (team_policies) Changed two-step verification setting for team\ntwo_account_change_policy: (team_policies) Enabled/disabled option for members to link personal Dropbox account and team account to same computer\nweb_sessions_change_fixed_length_policy: (team_policies) Changed how long members can stay signed in to Dropbox.com\nweb_sessions_change_idle_length_policy: (team_policies) Changed how long team members can be idle while signed in to Dropbox.com\nteam_merge_from: (team_profile) Merged another team into this team\nteam_merge_to: (team_profile) Merged this team into another team\nteam_profile_add_logo: (team_profile) Added team logo to display on shared link headers\nteam_profile_change_default_language: (team_profile) Changed default language for team\nteam_profile_change_logo: (team_profile) Changed team logo displayed on shared link headers\nteam_profile_change_name: (team_profile) Changed team name\nteam_profile_remove_logo: (team_profile) Removed team logo displayed on shared link headers\ntfa_add_backup_phone: (tfa) Added backup phone for two-step verification\ntfa_add_security_key: (tfa) Added security key for two-step verification\ntfa_change_backup_phone: (tfa) Changed backup phone for two-step verification\ntfa_change_status: (tfa) Enabled/disabled/changed two-step verification setting\ntfa_remove_backup_phone: (tfa) Removed backup phone for two-step verification\ntfa_remove_security_key: (tfa) Removed security key for two-step verification\ntfa_reset: (tfa) Reset two-step verification for team member\nother: None\n", 
      "properties": {
        "emm_add_exception": {
          "$ref": "#/definitions/EmmAddExceptionType"
        }, 
        "paper_change_member_link_policy": {
          "$ref": "#/definitions/PaperChangeMemberLinkPolicyType"
        }, 
        "allow_download_enabled": {
          "$ref": "#/definitions/AllowDownloadEnabledType"
        }, 
        "shared_content_remove_member": {
          "$ref": "#/definitions/SharedContentRemoveMemberType"
        }, 
        "showcase_edited": {
          "$ref": "#/definitions/ShowcaseEditedType"
        }, 
        "member_transfer_account_contents": {
          "$ref": "#/definitions/MemberTransferAccountContentsType"
        }, 
        "sf_allow_non_members_to_view_shared_links": {
          "$ref": "#/definitions/SfAllowNonMembersToViewSharedLinksType"
        }, 
        "group_join_policy_updated": {
          "$ref": "#/definitions/GroupJoinPolicyUpdatedType"
        }, 
        "file_add": {
          "$ref": "#/definitions/FileAddType"
        }, 
        "file_get_copy_reference": {
          "$ref": "#/definitions/FileGetCopyReferenceType"
        }, 
        "paper_change_member_policy": {
          "$ref": "#/definitions/PaperChangeMemberPolicyType"
        }, 
        "file_revert": {
          "$ref": "#/definitions/FileRevertType"
        }, 
        "collection_share": {
          "$ref": "#/definitions/CollectionShareType"
        }, 
        "paper_folder_followed": {
          "$ref": "#/definitions/PaperFolderFollowedType"
        }, 
        "sf_fb_invite": {
          "$ref": "#/definitions/SfFbInviteType"
        }, 
        "account_capture_migrate_account": {
          "$ref": "#/definitions/AccountCaptureMigrateAccountType"
        }, 
        "shared_folder_decline_invitation": {
          "$ref": "#/definitions/SharedFolderDeclineInvitationType"
        }, 
        "group_change_external_id": {
          "$ref": "#/definitions/GroupChangeExternalIdType"
        }, 
        "paper_doc_edit_comment": {
          "$ref": "#/definitions/PaperDocEditCommentType"
        }, 
        "shared_content_relinquish_membership": {
          "$ref": "#/definitions/SharedContentRelinquishMembershipType"
        }, 
        "shared_link_add_expiry": {
          "$ref": "#/definitions/SharedLinkAddExpiryType"
        }, 
        "shared_content_add_invitees": {
          "$ref": "#/definitions/SharedContentAddInviteesType"
        }, 
        "shared_note_opened": {
          "$ref": "#/definitions/SharedNoteOpenedType"
        }, 
        "paper_doc_delete_comment": {
          "$ref": "#/definitions/PaperDocDeleteCommentType"
        }, 
        "shared_content_request_access": {
          "$ref": "#/definitions/SharedContentRequestAccessType"
        }, 
        "domain_invites_set_invite_new_user_pref_to_yes": {
          "$ref": "#/definitions/DomainInvitesSetInviteNewUserPrefToYesType"
        }, 
        "showcase_renamed": {
          "$ref": "#/definitions/ShowcaseRenamedType"
        }, 
        "paper_doc_edit": {
          "$ref": "#/definitions/PaperDocEditType"
        }, 
        "account_capture_change_policy": {
          "$ref": "#/definitions/AccountCaptureChangePolicyType"
        }, 
        "login_fail": {
          "$ref": "#/definitions/LoginFailType"
        }, 
        "directory_restrictions_remove_members": {
          "$ref": "#/definitions/DirectoryRestrictionsRemoveMembersType"
        }, 
        "allow_download_disabled": {
          "$ref": "#/definitions/AllowDownloadDisabledType"
        }, 
        "group_description_updated": {
          "$ref": "#/definitions/GroupDescriptionUpdatedType"
        }, 
        "paper_doc_team_invite": {
          "$ref": "#/definitions/PaperDocTeamInviteType"
        }, 
        "member_change_membership_type": {
          "$ref": "#/definitions/MemberChangeMembershipTypeType"
        }, 
        "file_request_create": {
          "$ref": "#/definitions/FileRequestCreateType"
        }, 
        "showcase_delete_comment": {
          "$ref": "#/definitions/ShowcaseDeleteCommentType"
        }, 
        "paper_external_view_allow": {
          "$ref": "#/definitions/PaperExternalViewAllowType"
        }, 
        "sso_add_login_url": {
          "$ref": "#/definitions/SsoAddLoginUrlType"
        }, 
        "showcase_file_view": {
          "$ref": "#/definitions/ShowcaseFileViewType"
        }, 
        "sso_change_cert": {
          "$ref": "#/definitions/SsoChangeCertType"
        }, 
        "shared_link_share": {
          "$ref": "#/definitions/SharedLinkShareType"
        }, 
        "sso_change_policy": {
          "$ref": "#/definitions/SsoChangePolicyType"
        }, 
        "domain_verification_add_domain_fail": {
          "$ref": "#/definitions/DomainVerificationAddDomainFailType"
        }, 
        "sign_in_as_session_end": {
          "$ref": "#/definitions/SignInAsSessionEndType"
        }, 
        "member_change_admin_role": {
          "$ref": "#/definitions/MemberChangeAdminRoleType"
        }, 
        "paper_doc_request_access": {
          "$ref": "#/definitions/PaperDocRequestAccessType"
        }, 
        "paper_content_add_to_folder": {
          "$ref": "#/definitions/PaperContentAddToFolderType"
        }, 
        "sso_remove_cert": {
          "$ref": "#/definitions/SsoRemoveCertType"
        }, 
        "paper_doc_change_member_role": {
          "$ref": "#/definitions/PaperDocChangeMemberRoleType"
        }, 
        "sharing_change_member_policy": {
          "$ref": "#/definitions/SharingChangeMemberPolicyType"
        }, 
        "team_merge_from": {
          "$ref": "#/definitions/TeamMergeFromType"
        }, 
        "team_folder_create": {
          "$ref": "#/definitions/TeamFolderCreateType"
        }, 
        "file_preview": {
          "$ref": "#/definitions/FilePreviewType"
        }, 
        "shared_content_copy": {
          "$ref": "#/definitions/SharedContentCopyType"
        }, 
        "team_folder_rename": {
          "$ref": "#/definitions/TeamFolderRenameType"
        }, 
        "shared_folder_unmount": {
          "$ref": "#/definitions/SharedFolderUnmountType"
        }, 
        "shared_content_change_downloads_policy": {
          "$ref": "#/definitions/SharedContentChangeDownloadsPolicyType"
        }, 
        "reseller_support_session_end": {
          "$ref": "#/definitions/ResellerSupportSessionEndType"
        }, 
        "sf_team_join_from_oob_link": {
          "$ref": "#/definitions/SfTeamJoinFromOobLinkType"
        }, 
        "tfa_remove_security_key": {
          "$ref": "#/definitions/TfaRemoveSecurityKeyType"
        }, 
        "member_space_limits_remove_exception": {
          "$ref": "#/definitions/MemberSpaceLimitsRemoveExceptionType"
        }, 
        "member_change_status": {
          "$ref": "#/definitions/MemberChangeStatusType"
        }, 
        "file_restore": {
          "$ref": "#/definitions/FileRestoreType"
        }, 
        "paper_content_remove_member": {
          "$ref": "#/definitions/PaperContentRemoveMemberType"
        }, 
        "team_profile_remove_logo": {
          "$ref": "#/definitions/TeamProfileRemoveLogoType"
        }, 
        "create_folder": {
          "$ref": "#/definitions/CreateFolderType"
        }, 
        "device_management_enabled": {
          "$ref": "#/definitions/DeviceManagementEnabledType"
        }, 
        "emm_refresh_auth_token": {
          "$ref": "#/definitions/EmmRefreshAuthTokenType"
        }, 
        "sso_change_saml_identity_mode": {
          "$ref": "#/definitions/SsoChangeSamlIdentityModeType"
        }, 
        "member_requests_change_policy": {
          "$ref": "#/definitions/MemberRequestsChangePolicyType"
        }, 
        "sso_error": {
          "$ref": "#/definitions/SsoErrorType"
        }, 
        "password_change": {
          "$ref": "#/definitions/PasswordChangeType"
        }, 
        "file_copy": {
          "$ref": "#/definitions/FileCopyType"
        }, 
        "note_acl_invite_only": {
          "$ref": "#/definitions/NoteAclInviteOnlyType"
        }, 
        "app_link_user": {
          "$ref": "#/definitions/AppLinkUserType"
        }, 
        "shared_content_change_link_expiry": {
          "$ref": "#/definitions/SharedContentChangeLinkExpiryType"
        }, 
        "file_delete": {
          "$ref": "#/definitions/FileDeleteType"
        }, 
        "sf_invite_group": {
          "$ref": "#/definitions/SfInviteGroupType"
        }, 
        "sharing_change_link_policy": {
          "$ref": "#/definitions/SharingChangeLinkPolicyType"
        }, 
        "team_folder_permanently_delete": {
          "$ref": "#/definitions/TeamFolderPermanentlyDeleteType"
        }, 
        "member_change_email": {
          "$ref": "#/definitions/MemberChangeEmailType"
        }, 
        "showcase_file_added": {
          "$ref": "#/definitions/ShowcaseFileAddedType"
        }, 
        "group_remove_external_id": {
          "$ref": "#/definitions/GroupRemoveExternalIdType"
        }, 
        "device_approvals_change_desktop_policy": {
          "$ref": "#/definitions/DeviceApprovalsChangeDesktopPolicyType"
        }, 
        "member_space_limits_change_policy": {
          "$ref": "#/definitions/MemberSpaceLimitsChangePolicyType"
        }, 
        "emm_create_exceptions_report": {
          "$ref": "#/definitions/EmmCreateExceptionsReportType"
        }, 
        "tfa_remove_backup_phone": {
          "$ref": "#/definitions/TfaRemoveBackupPhoneType"
        }, 
        "showcase_untrashed_deprecated": {
          "$ref": "#/definitions/ShowcaseUntrashedDeprecatedType"
        }, 
        "smart_sync_change_policy": {
          "$ref": "#/definitions/SmartSyncChangePolicyType"
        }, 
        "paper_doc_slack_share": {
          "$ref": "#/definitions/PaperDocSlackShareType"
        }, 
        "file_unresolve_comment": {
          "$ref": "#/definitions/FileUnresolveCommentType"
        }, 
        "showcase_created": {
          "$ref": "#/definitions/ShowcaseCreatedType"
        }, 
        "sso_change_login_url": {
          "$ref": "#/definitions/SsoChangeLoginUrlType"
        }, 
        "showcase_remove_member": {
          "$ref": "#/definitions/ShowcaseRemoveMemberType"
        }, 
        "sf_external_invite_warn": {
          "$ref": "#/definitions/SfExternalInviteWarnType"
        }, 
        "app_link_team": {
          "$ref": "#/definitions/AppLinkTeamType"
        }, 
        "paper_doc_download": {
          "$ref": "#/definitions/PaperDocDownloadType"
        }, 
        "sf_add_group": {
          "$ref": "#/definitions/SfAddGroupType"
        }, 
        "tfa_add_security_key": {
          "$ref": "#/definitions/TfaAddSecurityKeyType"
        }, 
        "shared_content_change_invitee_role": {
          "$ref": "#/definitions/SharedContentChangeInviteeRoleType"
        }, 
        "showcase_resolve_comment": {
          "$ref": "#/definitions/ShowcaseResolveCommentType"
        }, 
        "shared_link_view": {
          "$ref": "#/definitions/SharedLinkViewType"
        }, 
        "file_rollback_changes": {
          "$ref": "#/definitions/FileRollbackChangesType"
        }, 
        "sf_team_invite_change_role": {
          "$ref": "#/definitions/SfTeamInviteChangeRoleType"
        }, 
        "paper_content_permanently_delete": {
          "$ref": "#/definitions/PaperContentPermanentlyDeleteType"
        }, 
        "shared_link_change_visibility": {
          "$ref": "#/definitions/SharedLinkChangeVisibilityType"
        }, 
        "team_merge_to": {
          "$ref": "#/definitions/TeamMergeToType"
        }, 
        "note_acl_team_link": {
          "$ref": "#/definitions/NoteAclTeamLinkType"
        }, 
        "file_request_close": {
          "$ref": "#/definitions/FileRequestCloseType"
        }, 
        "group_change_member_role": {
          "$ref": "#/definitions/GroupChangeMemberRoleType"
        }, 
        "file_requests_emails_enabled": {
          "$ref": "#/definitions/FileRequestsEmailsEnabledType"
        }, 
        "paper_doc_mention": {
          "$ref": "#/definitions/PaperDocMentionType"
        }, 
        "showcase_post_comment": {
          "$ref": "#/definitions/ShowcasePostCommentType"
        }, 
        "reseller_support_session_start": {
          "$ref": "#/definitions/ResellerSupportSessionStartType"
        }, 
        "shared_folder_nest": {
          "$ref": "#/definitions/SharedFolderNestType"
        }, 
        "shared_folder_transfer_ownership": {
          "$ref": "#/definitions/SharedFolderTransferOwnershipType"
        }, 
        "note_shared": {
          "$ref": "#/definitions/NoteSharedType"
        }, 
        "showcase_request_access": {
          "$ref": "#/definitions/ShowcaseRequestAccessType"
        }, 
        "app_unlink_team": {
          "$ref": "#/definitions/AppUnlinkTeamType"
        }, 
        "file_requests_emails_restricted_to_team_only": {
          "$ref": "#/definitions/FileRequestsEmailsRestrictedToTeamOnlyType"
        }, 
        "paper_doc_followed": {
          "$ref": "#/definitions/PaperDocFollowedType"
        }, 
        "team_folder_change_status": {
          "$ref": "#/definitions/TeamFolderChangeStatusType"
        }, 
        "extended_version_history_change_policy": {
          "$ref": "#/definitions/ExtendedVersionHistoryChangePolicyType"
        }, 
        "logout": {
          "$ref": "#/definitions/LogoutType"
        }, 
        "sso_remove_logout_url": {
          "$ref": "#/definitions/SsoRemoveLogoutUrlType"
        }, 
        "sso_change_logout_url": {
          "$ref": "#/definitions/SsoChangeLogoutUrlType"
        }, 
        "note_share_receive": {
          "$ref": "#/definitions/NoteShareReceiveType"
        }, 
        "domain_invites_approve_request_to_join_team": {
          "$ref": "#/definitions/DomainInvitesApproveRequestToJoinTeamType"
        }, 
        "shared_content_add_link_password": {
          "$ref": "#/definitions/SharedContentAddLinkPasswordType"
        }, 
        "file_permanently_delete": {
          "$ref": "#/definitions/FilePermanentlyDeleteType"
        }, 
        "file_resolve_comment": {
          "$ref": "#/definitions/FileResolveCommentType"
        }, 
        "emm_change_policy": {
          "$ref": "#/definitions/EmmChangePolicyType"
        }, 
        "emm_remove_exception": {
          "$ref": "#/definitions/EmmRemoveExceptionType"
        }, 
        "showcase_unresolve_comment": {
          "$ref": "#/definitions/ShowcaseUnresolveCommentType"
        }, 
        "domain_invites_set_invite_new_user_pref_to_no": {
          "$ref": "#/definitions/DomainInvitesSetInviteNewUserPrefToNoType"
        }, 
        "paper_enabled_users_group_removal": {
          "$ref": "#/definitions/PaperEnabledUsersGroupRemovalType"
        }, 
        "showcase_untrashed": {
          "$ref": "#/definitions/ShowcaseUntrashedType"
        }, 
        "paper_doc_change_sharing_policy": {
          "$ref": "#/definitions/PaperDocChangeSharingPolicyType"
        }, 
        "tfa_reset": {
          "$ref": "#/definitions/TfaResetType"
        }, 
        "emm_error": {
          "$ref": "#/definitions/EmmErrorType"
        }, 
        "paper_doc_change_subscription": {
          "$ref": "#/definitions/PaperDocChangeSubscriptionType"
        }, 
        "network_control_change_policy": {
          "$ref": "#/definitions/NetworkControlChangePolicyType"
        }, 
        "shared_content_remove_link_expiry": {
          "$ref": "#/definitions/SharedContentRemoveLinkExpiryType"
        }, 
        "member_add_name": {
          "$ref": "#/definitions/MemberAddNameType"
        }, 
        "group_remove_member": {
          "$ref": "#/definitions/GroupRemoveMemberType"
        }, 
        "open_note_shared": {
          "$ref": "#/definitions/OpenNoteSharedType"
        }, 
        "file_unlike_comment": {
          "$ref": "#/definitions/FileUnlikeCommentType"
        }, 
        "microsoft_office_addin_change_policy": {
          "$ref": "#/definitions/MicrosoftOfficeAddinChangePolicyType"
        }, 
        "team_profile_add_logo": {
          "$ref": "#/definitions/TeamProfileAddLogoType"
        }, 
        "shared_folder_change_link_policy": {
          "$ref": "#/definitions/SharedFolderChangeLinkPolicyType"
        }, 
        "permanent_delete_change_policy": {
          "$ref": "#/definitions/PermanentDeleteChangePolicyType"
        }, 
        "paper_external_view_forbid": {
          "$ref": "#/definitions/PaperExternalViewForbidType"
        }, 
        "shared_folder_change_members_management_policy": {
          "$ref": "#/definitions/SharedFolderChangeMembersManagementPolicyType"
        }, 
        "shared_link_create": {
          "$ref": "#/definitions/SharedLinkCreateType"
        }, 
        "web_sessions_change_idle_length_policy": {
          "$ref": "#/definitions/WebSessionsChangeIdleLengthPolicyType"
        }, 
        "shared_folder_change_members_inheritance_policy": {
          "$ref": "#/definitions/SharedFolderChangeMembersInheritancePolicyType"
        }, 
        "file_download": {
          "$ref": "#/definitions/FileDownloadType"
        }, 
        "domain_invites_email_existing_users": {
          "$ref": "#/definitions/DomainInvitesEmailExistingUsersType"
        }, 
        "domain_invites_decline_request_to_join_team": {
          "$ref": "#/definitions/DomainInvitesDeclineRequestToJoinTeamType"
        }, 
        "shared_content_add_member": {
          "$ref": "#/definitions/SharedContentAddMemberType"
        }, 
        "member_space_limits_remove_custom_quota": {
          "$ref": "#/definitions/MemberSpaceLimitsRemoveCustomQuotaType"
        }, 
        "smart_sync_opt_out": {
          "$ref": "#/definitions/SmartSyncOptOutType"
        }, 
        "team_profile_change_name": {
          "$ref": "#/definitions/TeamProfileChangeNameType"
        }, 
        "device_change_ip_mobile": {
          "$ref": "#/definitions/DeviceChangeIpMobileType"
        }, 
        "shared_folder_create": {
          "$ref": "#/definitions/SharedFolderCreateType"
        }, 
        "device_management_disabled": {
          "$ref": "#/definitions/DeviceManagementDisabledType"
        }, 
        "paper_content_create": {
          "$ref": "#/definitions/PaperContentCreateType"
        }, 
        "paper_content_restore": {
          "$ref": "#/definitions/PaperContentRestoreType"
        }, 
        "file_change_comment_subscription": {
          "$ref": "#/definitions/FileChangeCommentSubscriptionType"
        }, 
        "member_space_limits_change_custom_quota": {
          "$ref": "#/definitions/MemberSpaceLimitsChangeCustomQuotaType"
        }, 
        "data_placement_restriction_satisfy_policy": {
          "$ref": "#/definitions/DataPlacementRestrictionSatisfyPolicyType"
        }, 
        "smart_sync_not_opt_out": {
          "$ref": "#/definitions/SmartSyncNotOptOutType"
        }, 
        "paper_content_rename": {
          "$ref": "#/definitions/PaperContentRenameType"
        }, 
        "paper_admin_export_start": {
          "$ref": "#/definitions/PaperAdminExportStartType"
        }, 
        "paper_folder_team_invite": {
          "$ref": "#/definitions/PaperFolderTeamInviteType"
        }, 
        "device_approvals_change_unlink_action": {
          "$ref": "#/definitions/DeviceApprovalsChangeUnlinkActionType"
        }, 
        "account_capture_notification_emails_sent": {
          "$ref": "#/definitions/AccountCaptureNotificationEmailsSentType"
        }, 
        "paper_doc_add_comment": {
          "$ref": "#/definitions/PaperDocAddCommentType"
        }, 
        "directory_restrictions_add_members": {
          "$ref": "#/definitions/DirectoryRestrictionsAddMembersType"
        }, 
        "showcase_file_download": {
          "$ref": "#/definitions/ShowcaseFileDownloadType"
        }, 
        "shared_link_change_expiry": {
          "$ref": "#/definitions/SharedLinkChangeExpiryType"
        }, 
        "shared_folder_change_members_policy": {
          "$ref": "#/definitions/SharedFolderChangeMembersPolicyType"
        }, 
        "group_user_management_change_policy": {
          "$ref": "#/definitions/GroupUserManagementChangePolicyType"
        }, 
        "member_space_limits_add_custom_quota": {
          "$ref": "#/definitions/MemberSpaceLimitsAddCustomQuotaType"
        }, 
        "sf_team_invite": {
          "$ref": "#/definitions/SfTeamInviteType"
        }, 
        "team_activity_create_report": {
          "$ref": "#/definitions/TeamActivityCreateReportType"
        }, 
        "file_edit": {
          "$ref": "#/definitions/FileEditType"
        }, 
        "member_space_limits_change_status": {
          "$ref": "#/definitions/MemberSpaceLimitsChangeStatusType"
        }, 
        "paper_doc_view": {
          "$ref": "#/definitions/PaperDocViewType"
        }, 
        "tfa_change_status": {
          "$ref": "#/definitions/TfaChangeStatusType"
        }, 
        "group_delete": {
          "$ref": "#/definitions/GroupDeleteType"
        }, 
        "member_space_limits_change_caps_type_policy": {
          "$ref": "#/definitions/MemberSpaceLimitsChangeCapsTypePolicyType"
        }, 
        "account_capture_change_availability": {
          "$ref": "#/definitions/AccountCaptureChangeAvailabilityType"
        }, 
        "shmodel_group_share": {
          "$ref": "#/definitions/ShmodelGroupShareType"
        }, 
        "sf_fb_invite_change_role": {
          "$ref": "#/definitions/SfFbInviteChangeRoleType"
        }, 
        "device_change_ip_web": {
          "$ref": "#/definitions/DeviceChangeIpWebType"
        }, 
        "paper_doc_untrashed": {
          "$ref": "#/definitions/PaperDocUntrashedType"
        }, 
        "login_success": {
          "$ref": "#/definitions/LoginSuccessType"
        }, 
        "domain_verification_remove_domain": {
          "$ref": "#/definitions/DomainVerificationRemoveDomainType"
        }, 
        "paper_change_policy": {
          "$ref": "#/definitions/PaperChangePolicyType"
        }, 
        "paper_change_deployment_policy": {
          "$ref": "#/definitions/PaperChangeDeploymentPolicyType"
        }, 
        "shared_content_remove_invitees": {
          "$ref": "#/definitions/SharedContentRemoveInviteesType"
        }, 
        "shared_content_unshare": {
          "$ref": "#/definitions/SharedContentUnshareType"
        }, 
        "member_permanently_delete_account_contents": {
          "$ref": "#/definitions/MemberPermanentlyDeleteAccountContentsType"
        }, 
        "app_unlink_user": {
          "$ref": "#/definitions/AppUnlinkUserType"
        }, 
        "two_account_change_policy": {
          "$ref": "#/definitions/TwoAccountChangePolicyType"
        }, 
        "showcase_change_download_policy": {
          "$ref": "#/definitions/ShowcaseChangeDownloadPolicyType"
        }, 
        "team_profile_change_logo": {
          "$ref": "#/definitions/TeamProfileChangeLogoType"
        }, 
        "team_folder_downgrade": {
          "$ref": "#/definitions/TeamFolderDowngradeType"
        }, 
        "shared_link_download": {
          "$ref": "#/definitions/SharedLinkDownloadType"
        }, 
        "domain_verification_add_domain_success": {
          "$ref": "#/definitions/DomainVerificationAddDomainSuccessType"
        }, 
        "password_reset_all": {
          "$ref": "#/definitions/PasswordResetAllType"
        }, 
        "emm_create_usage_report": {
          "$ref": "#/definitions/EmmCreateUsageReportType"
        }, 
        "group_create": {
          "$ref": "#/definitions/GroupCreateType"
        }, 
        "device_change_ip_desktop": {
          "$ref": "#/definitions/DeviceChangeIpDesktopType"
        }, 
        "device_approvals_change_overage_action": {
          "$ref": "#/definitions/DeviceApprovalsChangeOverageActionType"
        }, 
        "file_save_copy_reference": {
          "$ref": "#/definitions/FileSaveCopyReferenceType"
        }, 
        "paper_content_add_member": {
          "$ref": "#/definitions/PaperContentAddMemberType"
        }, 
        "sign_in_as_session_start": {
          "$ref": "#/definitions/SignInAsSessionStartType"
        }, 
        "device_link_fail": {
          "$ref": "#/definitions/DeviceLinkFailType"
        }, 
        "export_members_report": {
          "$ref": "#/definitions/ExportMembersReportType"
        }, 
        "showcase_add_member": {
          "$ref": "#/definitions/ShowcaseAddMemberType"
        }, 
        "file_move": {
          "$ref": "#/definitions/FileMoveType"
        }, 
        "shared_link_copy": {
          "$ref": "#/definitions/SharedLinkCopyType"
        }, 
        "showcase_change_enabled_policy": {
          "$ref": "#/definitions/ShowcaseChangeEnabledPolicyType"
        }, 
        "file_rename": {
          "$ref": "#/definitions/FileRenameType"
        }, 
        "shared_content_change_viewer_info_policy": {
          "$ref": "#/definitions/SharedContentChangeViewerInfoPolicyType"
        }, 
        "paper_doc_trashed": {
          "$ref": "#/definitions/PaperDocTrashedType"
        }, 
        "file_request_receive_file": {
          "$ref": "#/definitions/FileRequestReceiveFileType"
        }, 
        "file_request_change": {
          "$ref": "#/definitions/FileRequestChangeType"
        }, 
        "device_approvals_change_mobile_policy": {
          "$ref": "#/definitions/DeviceApprovalsChangeMobilePolicyType"
        }, 
        "sso_add_cert": {
          "$ref": "#/definitions/SsoAddCertType"
        }, 
        "file_like_comment": {
          "$ref": "#/definitions/FileLikeCommentType"
        }, 
        "showcase_change_external_sharing_policy": {
          "$ref": "#/definitions/ShowcaseChangeExternalSharingPolicyType"
        }, 
        "paper_folder_deleted": {
          "$ref": "#/definitions/PaperFolderDeletedType"
        }, 
        "paper_folder_change_subscription": {
          "$ref": "#/definitions/PaperFolderChangeSubscriptionType"
        }, 
        "showcase_archived": {
          "$ref": "#/definitions/ShowcaseArchivedType"
        }, 
        "paper_external_view_default_team": {
          "$ref": "#/definitions/PaperExternalViewDefaultTeamType"
        }, 
        "shared_link_disable": {
          "$ref": "#/definitions/SharedLinkDisableType"
        }, 
        "group_add_member": {
          "$ref": "#/definitions/GroupAddMemberType"
        }, 
        "smart_sync_create_admin_privilege_report": {
          "$ref": "#/definitions/SmartSyncCreateAdminPrivilegeReportType"
        }, 
        "paper_doc_deleted": {
          "$ref": "#/definitions/PaperDocDeletedType"
        }, 
        "paper_doc_resolve_comment": {
          "$ref": "#/definitions/PaperDocResolveCommentType"
        }, 
        "tfa_change_backup_phone": {
          "$ref": "#/definitions/TfaChangeBackupPhoneType"
        }, 
        "shared_content_add_link_expiry": {
          "$ref": "#/definitions/SharedContentAddLinkExpiryType"
        }, 
        "domain_invites_request_to_join_team": {
          "$ref": "#/definitions/DomainInvitesRequestToJoinTeamType"
        }, 
        "group_add_external_id": {
          "$ref": "#/definitions/GroupAddExternalIdType"
        }, 
        "team_profile_change_default_language": {
          "$ref": "#/definitions/TeamProfileChangeDefaultLanguageType"
        }, 
        "showcase_file_removed": {
          "$ref": "#/definitions/ShowcaseFileRemovedType"
        }, 
        "sso_add_logout_url": {
          "$ref": "#/definitions/SsoAddLogoutUrlType"
        }, 
        "paper_enabled_users_group_addition": {
          "$ref": "#/definitions/PaperEnabledUsersGroupAdditionType"
        }, 
        "tfa_add_backup_phone": {
          "$ref": "#/definitions/TfaAddBackupPhoneType"
        }, 
        "file_delete_comment": {
          "$ref": "#/definitions/FileDeleteCommentType"
        }, 
        "member_suggestions_change_policy": {
          "$ref": "#/definitions/MemberSuggestionsChangePolicyType"
        }, 
        "tfa_change_policy": {
          "$ref": "#/definitions/TfaChangePolicyType"
        }, 
        "group_rename": {
          "$ref": "#/definitions/GroupRenameType"
        }, 
        "showcase_trashed": {
          "$ref": "#/definitions/ShowcaseTrashedType"
        }, 
        "data_placement_restriction_change_policy": {
          "$ref": "#/definitions/DataPlacementRestrictionChangePolicyType"
        }, 
        "paper_content_remove_from_folder": {
          "$ref": "#/definitions/PaperContentRemoveFromFolderType"
        }, 
        "shared_link_remove_expiry": {
          "$ref": "#/definitions/SharedLinkRemoveExpiryType"
        }, 
        "shared_folder_mount": {
          "$ref": "#/definitions/SharedFolderMountType"
        }, 
        "shared_content_change_member_role": {
          "$ref": "#/definitions/SharedContentChangeMemberRoleType"
        }, 
        "group_change_management_type": {
          "$ref": "#/definitions/GroupChangeManagementTypeType"
        }, 
        "device_delete_on_unlink_success": {
          "$ref": "#/definitions/DeviceDeleteOnUnlinkSuccessType"
        }, 
        "file_requests_change_policy": {
          "$ref": "#/definitions/FileRequestsChangePolicyType"
        }, 
        "google_sso_change_policy": {
          "$ref": "#/definitions/GoogleSsoChangePolicyType"
        }, 
        "member_suggest": {
          "$ref": "#/definitions/MemberSuggestType"
        }, 
        "web_sessions_change_fixed_length_policy": {
          "$ref": "#/definitions/WebSessionsChangeFixedLengthPolicyType"
        }, 
        "device_link_success": {
          "$ref": "#/definitions/DeviceLinkSuccessType"
        }, 
        "showcase_permanently_deleted": {
          "$ref": "#/definitions/ShowcasePermanentlyDeletedType"
        }, 
        "device_delete_on_unlink_fail": {
          "$ref": "#/definitions/DeviceDeleteOnUnlinkFailType"
        }, 
        "sf_team_uninvite": {
          "$ref": "#/definitions/SfTeamUninviteType"
        }, 
        "showcase_edit_comment": {
          "$ref": "#/definitions/ShowcaseEditCommentType"
        }, 
        "shared_content_remove_link_password": {
          "$ref": "#/definitions/SharedContentRemoveLinkPasswordType"
        }, 
        "disabled_domain_invites": {
          "$ref": "#/definitions/DisabledDomainInvitesType"
        }, 
        "shared_content_view": {
          "$ref": "#/definitions/SharedContentViewType"
        }, 
        "showcase_access_granted": {
          "$ref": "#/definitions/ShowcaseAccessGrantedType"
        }, 
        "note_acl_link": {
          "$ref": "#/definitions/NoteAclLinkType"
        }, 
        "file_add_comment": {
          "$ref": "#/definitions/FileAddCommentType"
        }, 
        "sso_remove_login_url": {
          "$ref": "#/definitions/SsoRemoveLoginUrlType"
        }, 
        "sf_fb_uninvite": {
          "$ref": "#/definitions/SfFbUninviteType"
        }, 
        "secondary_mails_policy_changed": {
          "$ref": "#/definitions/SecondaryMailsPolicyChangedType"
        }, 
        "sf_team_join": {
          "$ref": "#/definitions/SfTeamJoinType"
        }, 
        "device_unlink": {
          "$ref": "#/definitions/DeviceUnlinkType"
        }, 
        "sharing_change_folder_join_policy": {
          "$ref": "#/definitions/SharingChangeFolderJoinPolicyType"
        }, 
        "showcase_view": {
          "$ref": "#/definitions/ShowcaseViewType"
        }, 
        "shared_content_claim_invitation": {
          "$ref": "#/definitions/SharedContentClaimInvitationType"
        }, 
        "shared_content_download": {
          "$ref": "#/definitions/SharedContentDownloadType"
        }, 
        "team_selective_sync_settings_changed": {
          "$ref": "#/definitions/TeamSelectiveSyncSettingsChangedType"
        }, 
        "member_change_name": {
          "$ref": "#/definitions/MemberChangeNameType"
        }, 
        "paper_doc_unresolve_comment": {
          "$ref": "#/definitions/PaperDocUnresolveCommentType"
        }, 
        "member_space_limits_add_exception": {
          "$ref": "#/definitions/MemberSpaceLimitsAddExceptionType"
        }, 
        "file_comments_change_policy": {
          "$ref": "#/definitions/FileCommentsChangePolicyType"
        }, 
        "password_reset": {
          "$ref": "#/definitions/PasswordResetType"
        }, 
        "paper_content_archive": {
          "$ref": "#/definitions/PaperContentArchiveType"
        }, 
        "group_moved": {
          "$ref": "#/definitions/GroupMovedType"
        }, 
        "shared_content_change_link_audience": {
          "$ref": "#/definitions/SharedContentChangeLinkAudienceType"
        }, 
        ".tag": {
          "enum": [
            "app_link_team", 
            "app_link_user", 
            "app_unlink_team", 
            "app_unlink_user", 
            "file_add_comment", 
            "file_change_comment_subscription", 
            "file_delete_comment", 
            "file_like_comment", 
            "file_resolve_comment", 
            "file_unlike_comment", 
            "file_unresolve_comment", 
            "device_change_ip_desktop", 
            "device_change_ip_mobile", 
            "device_change_ip_web", 
            "device_delete_on_unlink_fail", 
            "device_delete_on_unlink_success", 
            "device_link_fail", 
            "device_link_success", 
            "device_management_disabled", 
            "device_management_enabled", 
            "device_unlink", 
            "emm_refresh_auth_token", 
            "account_capture_change_availability", 
            "account_capture_migrate_account", 
            "account_capture_notification_emails_sent", 
            "account_capture_relinquish_account", 
            "disabled_domain_invites", 
            "domain_invites_approve_request_to_join_team", 
            "domain_invites_decline_request_to_join_team", 
            "domain_invites_email_existing_users", 
            "domain_invites_request_to_join_team", 
            "domain_invites_set_invite_new_user_pref_to_no", 
            "domain_invites_set_invite_new_user_pref_to_yes", 
            "domain_verification_add_domain_fail", 
            "domain_verification_add_domain_success", 
            "domain_verification_remove_domain", 
            "enabled_domain_invites", 
            "create_folder", 
            "file_add", 
            "file_copy", 
            "file_delete", 
            "file_download", 
            "file_edit", 
            "file_get_copy_reference", 
            "file_move", 
            "file_permanently_delete", 
            "file_preview", 
            "file_rename", 
            "file_restore", 
            "file_revert", 
            "file_rollback_changes", 
            "file_save_copy_reference", 
            "file_request_change", 
            "file_request_close", 
            "file_request_create", 
            "file_request_receive_file", 
            "group_add_external_id", 
            "group_add_member", 
            "group_change_external_id", 
            "group_change_management_type", 
            "group_change_member_role", 
            "group_create", 
            "group_delete", 
            "group_description_updated", 
            "group_join_policy_updated", 
            "group_moved", 
            "group_remove_external_id", 
            "group_remove_member", 
            "group_rename", 
            "emm_error", 
            "login_fail", 
            "login_success", 
            "logout", 
            "reseller_support_session_end", 
            "reseller_support_session_start", 
            "sign_in_as_session_end", 
            "sign_in_as_session_start", 
            "sso_error", 
            "member_add_name", 
            "member_change_admin_role", 
            "member_change_email", 
            "member_change_membership_type", 
            "member_change_name", 
            "member_change_status", 
            "member_permanently_delete_account_contents", 
            "member_space_limits_add_custom_quota", 
            "member_space_limits_change_custom_quota", 
            "member_space_limits_change_status", 
            "member_space_limits_remove_custom_quota", 
            "member_suggest", 
            "member_transfer_account_contents", 
            "secondary_mails_policy_changed", 
            "paper_content_add_member", 
            "paper_content_add_to_folder", 
            "paper_content_archive", 
            "paper_content_create", 
            "paper_content_permanently_delete", 
            "paper_content_remove_from_folder", 
            "paper_content_remove_member", 
            "paper_content_rename", 
            "paper_content_restore", 
            "paper_doc_add_comment", 
            "paper_doc_change_member_role", 
            "paper_doc_change_sharing_policy", 
            "paper_doc_change_subscription", 
            "paper_doc_deleted", 
            "paper_doc_delete_comment", 
            "paper_doc_download", 
            "paper_doc_edit", 
            "paper_doc_edit_comment", 
            "paper_doc_followed", 
            "paper_doc_mention", 
            "paper_doc_request_access", 
            "paper_doc_resolve_comment", 
            "paper_doc_revert", 
            "paper_doc_slack_share", 
            "paper_doc_team_invite", 
            "paper_doc_trashed", 
            "paper_doc_unresolve_comment", 
            "paper_doc_untrashed", 
            "paper_doc_view", 
            "paper_external_view_allow", 
            "paper_external_view_default_team", 
            "paper_external_view_forbid", 
            "paper_folder_change_subscription", 
            "paper_folder_deleted", 
            "paper_folder_followed", 
            "paper_folder_team_invite", 
            "password_change", 
            "password_reset", 
            "password_reset_all", 
            "emm_create_exceptions_report", 
            "emm_create_usage_report", 
            "export_members_report", 
            "paper_admin_export_start", 
            "smart_sync_create_admin_privilege_report", 
            "team_activity_create_report", 
            "collection_share", 
            "note_acl_invite_only", 
            "note_acl_link", 
            "note_acl_team_link", 
            "note_shared", 
            "note_share_receive", 
            "open_note_shared", 
            "sf_add_group", 
            "sf_allow_non_members_to_view_shared_links", 
            "sf_external_invite_warn", 
            "sf_fb_invite", 
            "sf_fb_invite_change_role", 
            "sf_fb_uninvite", 
            "sf_invite_group", 
            "sf_team_grant_access", 
            "sf_team_invite", 
            "sf_team_invite_change_role", 
            "sf_team_join", 
            "sf_team_join_from_oob_link", 
            "sf_team_uninvite", 
            "shared_content_add_invitees", 
            "shared_content_add_link_expiry", 
            "shared_content_add_link_password", 
            "shared_content_add_member", 
            "shared_content_change_downloads_policy", 
            "shared_content_change_invitee_role", 
            "shared_content_change_link_audience", 
            "shared_content_change_link_expiry", 
            "shared_content_change_link_password", 
            "shared_content_change_member_role", 
            "shared_content_change_viewer_info_policy", 
            "shared_content_claim_invitation", 
            "shared_content_copy", 
            "shared_content_download", 
            "shared_content_relinquish_membership", 
            "shared_content_remove_invitees", 
            "shared_content_remove_link_expiry", 
            "shared_content_remove_link_password", 
            "shared_content_remove_member", 
            "shared_content_request_access", 
            "shared_content_unshare", 
            "shared_content_view", 
            "shared_folder_change_link_policy", 
            "shared_folder_change_members_inheritance_policy", 
            "shared_folder_change_members_management_policy", 
            "shared_folder_change_members_policy", 
            "shared_folder_create", 
            "shared_folder_decline_invitation", 
            "shared_folder_mount", 
            "shared_folder_nest", 
            "shared_folder_transfer_ownership", 
            "shared_folder_unmount", 
            "shared_link_add_expiry", 
            "shared_link_change_expiry", 
            "shared_link_change_visibility", 
            "shared_link_copy", 
            "shared_link_create", 
            "shared_link_disable", 
            "shared_link_download", 
            "shared_link_remove_expiry", 
            "shared_link_share", 
            "shared_link_view", 
            "shared_note_opened", 
            "shmodel_group_share", 
            "showcase_access_granted", 
            "showcase_add_member", 
            "showcase_archived", 
            "showcase_created", 
            "showcase_delete_comment", 
            "showcase_edited", 
            "showcase_edit_comment", 
            "showcase_file_added", 
            "showcase_file_download", 
            "showcase_file_removed", 
            "showcase_file_view", 
            "showcase_permanently_deleted", 
            "showcase_post_comment", 
            "showcase_remove_member", 
            "showcase_renamed", 
            "showcase_request_access", 
            "showcase_resolve_comment", 
            "showcase_restored", 
            "showcase_trashed", 
            "showcase_trashed_deprecated", 
            "showcase_unresolve_comment", 
            "showcase_untrashed", 
            "showcase_untrashed_deprecated", 
            "showcase_view", 
            "sso_add_cert", 
            "sso_add_login_url", 
            "sso_add_logout_url", 
            "sso_change_cert", 
            "sso_change_login_url", 
            "sso_change_logout_url", 
            "sso_change_saml_identity_mode", 
            "sso_remove_cert", 
            "sso_remove_login_url", 
            "sso_remove_logout_url", 
            "team_folder_change_status", 
            "team_folder_create", 
            "team_folder_downgrade", 
            "team_folder_permanently_delete", 
            "team_folder_rename", 
            "team_selective_sync_settings_changed", 
            "account_capture_change_policy", 
            "allow_download_disabled", 
            "allow_download_enabled", 
            "data_placement_restriction_change_policy", 
            "data_placement_restriction_satisfy_policy", 
            "device_approvals_change_desktop_policy", 
            "device_approvals_change_mobile_policy", 
            "device_approvals_change_overage_action", 
            "device_approvals_change_unlink_action", 
            "directory_restrictions_add_members", 
            "directory_restrictions_remove_members", 
            "emm_add_exception", 
            "emm_change_policy", 
            "emm_remove_exception", 
            "extended_version_history_change_policy", 
            "file_comments_change_policy", 
            "file_requests_change_policy", 
            "file_requests_emails_enabled", 
            "file_requests_emails_restricted_to_team_only", 
            "google_sso_change_policy", 
            "group_user_management_change_policy", 
            "member_requests_change_policy", 
            "member_space_limits_add_exception", 
            "member_space_limits_change_caps_type_policy", 
            "member_space_limits_change_policy", 
            "member_space_limits_remove_exception", 
            "member_suggestions_change_policy", 
            "microsoft_office_addin_change_policy", 
            "network_control_change_policy", 
            "paper_change_deployment_policy", 
            "paper_change_member_link_policy", 
            "paper_change_member_policy", 
            "paper_change_policy", 
            "paper_enabled_users_group_addition", 
            "paper_enabled_users_group_removal", 
            "permanent_delete_change_policy", 
            "sharing_change_folder_join_policy", 
            "sharing_change_link_policy", 
            "sharing_change_member_policy", 
            "showcase_change_download_policy", 
            "showcase_change_enabled_policy", 
            "showcase_change_external_sharing_policy", 
            "smart_sync_change_policy", 
            "smart_sync_not_opt_out", 
            "smart_sync_opt_out", 
            "sso_change_policy", 
            "tfa_change_policy", 
            "two_account_change_policy", 
            "web_sessions_change_fixed_length_policy", 
            "web_sessions_change_idle_length_policy", 
            "team_merge_from", 
            "team_merge_to", 
            "team_profile_add_logo", 
            "team_profile_change_default_language", 
            "team_profile_change_logo", 
            "team_profile_change_name", 
            "team_profile_remove_logo", 
            "tfa_add_backup_phone", 
            "tfa_add_security_key", 
            "tfa_change_backup_phone", 
            "tfa_change_status", 
            "tfa_remove_backup_phone", 
            "tfa_remove_security_key", 
            "tfa_reset", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of EventType"
        }, 
        "shared_content_change_link_password": {
          "$ref": "#/definitions/SharedContentChangeLinkPasswordType"
        }, 
        "paper_doc_revert": {
          "$ref": "#/definitions/PaperDocRevertType"
        }, 
        "enabled_domain_invites": {
          "$ref": "#/definitions/EnabledDomainInvitesType"
        }, 
        "showcase_restored": {
          "$ref": "#/definitions/ShowcaseRestoredType"
        }, 
        "account_capture_relinquish_account": {
          "$ref": "#/definitions/AccountCaptureRelinquishAccountType"
        }, 
        "showcase_trashed_deprecated": {
          "$ref": "#/definitions/ShowcaseTrashedDeprecatedType"
        }, 
        "sf_team_grant_access": {
          "$ref": "#/definitions/SfTeamGrantAccessType"
        }
      }
    }, 
    "GroupChangeMemberRoleDetails": {
      "type": "object", 
      "description": "Changed manager permissions of group member.\nis_group_owner: Is group owner.\n", 
      "properties": {
        "is_group_owner": {
          "type": "boolean", 
          "description": "Is group owner."
        }
      }
    }, 
    "PaperEnabledUsersGroupAdditionType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperContentCreateDetails": {
      "type": "object", 
      "description": "Created Paper doc/folder.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "GroupsListContinueError": {
      "type": "object", 
      "description": "invalid_cursor: The cursor is invalid.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_cursor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GroupsListContinueError"
        }
      }
    }, 
    "GetTeamEventsContinueArg": {
      "type": "object", 
      "description": "cursor: Indicates from what point to get the next set of events.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Indicates from what point to get the next set of events."
        }
      }
    }, 
    "GetTeamEventsArg": {
      "type": "object", 
      "description": "limit: Number of results to return per call.\naccount_id: Filter the events by account ID. Return ony events with this account_id as either Actor, Context, or Participants.\ntime: Filter by time range.\ncategory: Filter the returned events to a single category.\n", 
      "properties": {
        "limit": {
          "type": "integer", 
          "description": "Number of results to return per call."
        },
        "time": {
          "$ref": "#/definitions/TimeRange"
        },
        "account_id": {
          "type": "string", 
          "description": "Filter the events by account ID. Return ony events with this account_id as either Actor, Context, or Participants."
        },
        "category": {
          "$ref": "#/definitions/EventCategory"
        },
        "event_type": {
          "$ref": "#/definitions/EventTypeArg"
        }
      }
    }, 
    "MemberAddNameDetails": {
      "type": "object", 
      "description": "Added team member name.\nnew_value: New user's name.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/UserNameLogInfo"
        }
      }
    }, 
    "ShowcaseFileViewDetails": {
      "type": "object", 
      "description": "Viewed file in showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "GroupAddMemberType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ApiApp": {
      "type": "object", 
      "description": "Information on linked third party applications.\napp_id: The application unique id.\napp_name: The application name.\nis_app_folder: Whether the linked application uses a dedicated folder.\npublisher: The application publisher name.\npublisher_url: The publisher's URL.\nlinked: The time this application was linked.\n", 
      "properties": {
        "publisher": {
          "type": "string", 
          "description": "The application publisher name."
        }, 
        "app_name": {
          "type": "string", 
          "description": "The application name."
        }, 
        "app_id": {
          "type": "string", 
          "description": "The application unique id."
        }, 
        "publisher_url": {
          "type": "string", 
          "description": "The publisher's URL."
        }, 
        "linked": {
          "type": "string", 
          "description": "The time this application was linked."
        }, 
        "is_app_folder": {
          "type": "boolean", 
          "description": "Whether the linked application uses a dedicated folder."
        }
      }
    }, 
    "FileRequestsEmailsEnabledDetails": {
      "type": "object", 
      "description": "Enabled file request emails for everyone.\n", 
      "properties": {}
    }, 
    "SharedFolderChangeMembersPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedFolderTransferOwnershipDetails": {
      "type": "object", 
      "description": "Transferred ownership of shared folder to another member.\nnew_owner_email: The email address of the new shared folder owner.\nprevious_owner_email: The email address of the previous shared folder owner.\n", 
      "properties": {
        "new_owner_email": {
          "type": "string", 
          "description": "The email address of the new shared folder owner."
        }, 
        "previous_owner_email": {
          "type": "string", 
          "description": "The email address of the previous shared folder owner."
        }
      }
    }, 
    "SmartSyncOptOutType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperChangeDeploymentPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ListMembersDevicesResult": {
      "type": "object", 
      "description": "devices: The devices of each member of the team.\nhas_more: If true, then there are more devices available. Pass the cursor to :route:`devices/list_members_devices` to retrieve the rest.\ncursor: Pass the cursor into :route:`devices/list_members_devices` to receive the next sub list of team's devices.\n", 
      "properties": {
        "has_more": {
          "type": "boolean", 
          "description": "If true, then there are more devices available. Pass the cursor to :route:`devices/list_members_devices` to retrieve the rest."
        }, 
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`devices/list_members_devices` to receive the next sub list of team's devices."
        }, 
        "devices": {
          "items": {
            "$ref": "#/definitions/MemberDevices"
          }, 
          "type": "array", 
          "description": "The devices of each member of the team."
        }
      }
    }, 
    "MemberAccess": {
      "type": "object", 
      "description": "Specify access type a member should have when joined to a group.\nuser: Identity of a user.\naccess_type: Access type.\n", 
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        }, 
        "access_type": {
          "$ref": "#/definitions/GroupAccessType"
        }
      }
    }, 
    "FileRequestReceiveFileDetails": {
      "type": "object", 
      "description": "Received files for file request.\nsubmitted_file_names: Submitted file names.\nfile_request_id: File request id. Might be missing due to historical data gap.\nfile_request_details: File request details. Might be missing due to historical data gap.\nsubmitter_name: The name as provided by the submitter. Might be missing due to historical data gap.\nsubmitter_email: The email as provided by the submitter. Might be missing due to historical data gap.\n", 
      "properties": {
        "file_request_id": {
          "type": "string", 
          "description": "File request id. Might be missing due to historical data gap."
        }, 
        "submitted_file_names": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Submitted file names."
        }, 
        "submitter_email": {
          "type": "string", 
          "description": "The email as provided by the submitter. Might be missing due to historical data gap."
        }, 
        "submitter_name": {
          "type": "string", 
          "description": "The name as provided by the submitter. Might be missing due to historical data gap."
        }, 
        "file_request_details": {
          "$ref": "#/definitions/FileRequestDetails"
        }
      }
    }, 
    "SharedFolderChangeMembersManagementPolicyDetails": {
      "type": "object", 
      "description": "Changed who can add/remove members of shared folder.\nnew_value: New members management policy.\nprevious_value: Previous members management policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/AclUpdatePolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/AclUpdatePolicy"
        }
      }
    }, 
    "PaperContentRemoveFromFolderDetails": {
      "type": "object", 
      "description": "Removed Paper doc/folder from folder.\nevent_uuid: Event unique identifier.\ntarget_asset_index: Target asset position in the Assets list.\nparent_asset_index: Parent asset position in the Assets list.\n", 
      "properties": {
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "parent_asset_index": {
          "type": "number", 
          "description": "Parent asset position in the Assets list."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "TeamMergeToDetails": {
      "type": "object", 
      "description": "Merged this team into another team.\nteam_name: The name of the team that this team was merged into.\n", 
      "properties": {
        "team_name": {
          "type": "string", 
          "description": "The name of the team that this team was merged into."
        }
      }
    }, 
    "FeaturesGetValuesBatchArg": {
      "type": "object", 
      "description": "features: A list of features in :type:`Feature`. If the list is empty, this route will return :type:`FeaturesGetValuesBatchError`.\n", 
      "properties": {
        "features": {
          "items": {
            "$ref": "#/definitions/Feature"
          }, 
          "type": "array", 
          "description": "A list of features in :type:`Feature`. If the list is empty, this route will return :type:`FeaturesGetValuesBatchError`."
        }
      }
    }, 
    "FileRequestCreateType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "NonTeamMemberLogInfo": {
      "type": "object", 
      "description": "Non team member's logged information.\naccount_id: User unique ID. Might be missing due to historical data gap.\ndisplay_name: User display name. Might be missing due to historical data gap.\nemail: User email address. Might be missing due to historical data gap.\n", 
      "properties": {
        "display_name": {
          "type": "string", 
          "description": "User display name. Might be missing due to historical data gap."
        }, 
        "account_id": {
          "type": "string", 
          "description": "User unique ID. Might be missing due to historical data gap."
        }, 
        "email": {
          "type": "string", 
          "description": "User email address. Might be missing due to historical data gap."
        }
      }
    }, 
    "GroupMemberInfo": {
      "type": "object", 
      "description": "Profile of group member, and role in group.\nprofile: Profile of group member.\naccess_type: The role that the user has in the group.\n", 
      "properties": {
        "profile": {
          "$ref": "#/definitions/MemberProfile"
        }, 
        "access_type": {
          "$ref": "#/definitions/GroupAccessType"
        }
      }
    }, 
    "RevokeDeviceSessionError": {
      "description": "device_session_not_found: Device session not found.\nmember_not_found: Member not found.\nother: None\n", 
          "enum": [
            "device_session_not_found", 
            "member_not_found", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of RevokeDeviceSessionError"
    }, 
    "SharedContentChangeMemberRoleType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedLinkAccessLevel": {
      "type": "object", 
      "description": "Shared link access level.\nnone: None\nreader: None\nwriter: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "none", 
            "reader", 
            "writer", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharedLinkAccessLevel"
        }
      }
    }, 
    "DeviceLinkFailDetails": {
      "type": "object", 
      "description": "Failed to link device.\ndevice_type: A description of the device used while user approval blocked.\nip_address: IP address. Might be missing due to historical data gap.\n", 
      "properties": {
        "ip_address": {
          "type": "string", 
          "description": "IP address. Might be missing due to historical data gap."
        }, 
        "device_type": {
          "$ref": "#/definitions/DeviceType"
        }
      }
    }, 
    "SfTeamJoinDetails": {
      "type": "object", 
      "description": "Joined team member's shared folder.\ntarget_asset_index: Target asset position in the Assets list.\noriginal_folder_name: Original shared folder name.\n", 
      "properties": {
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "original_folder_name": {
          "type": "string", 
          "description": "Original shared folder name."
        }
      }
    }, 
    "GroupDescriptionUpdatedDetails": {
      "type": "object", 
      "description": "Updated group.\n", 
      "properties": {}
    }, 
    "SsoChangeLoginUrlType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseFileAddedDetails": {
      "type": "object", 
      "description": "Added file to showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ExternalUserLogInfo": {
      "type": "object", 
      "description": "A user without a Dropbox account.\nuser_identifier: An external user identifier.\nidentifier_type: Identifier type.\n", 
      "properties": {
        "user_identifier": {
          "type": "string", 
          "description": "An external user identifier."
        }, 
        "identifier_type": {
          "$ref": "#/definitions/IdentifierType"
        }
      }
    }, 
    "ShmodelGroupShareType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MembersSuspendError": {
      "type": "object", 
      "description": "user_not_found: No matching user found. The provided team_member_id, email, or external_id does not exist on this team.\nuser_not_in_team: The user is not a member of the team.\nother: None\nsuspend_inactive_user: The user is not active, so it cannot be suspended.\nsuspend_last_admin: The user is the last admin of the team, so it cannot be suspended.\nteam_license_limit: Team is full. The organization has no available licenses.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "user_not_found", 
            "user_not_in_team", 
            "other", 
            "suspend_inactive_user", 
            "suspend_last_admin", 
            "team_license_limit"
          ], 
          "type": "string", 
          "title": "Choice of MembersSuspendError"
        }
      }
    }, 
    "AppLinkTeamType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "LoginFailDetails": {
      "type": "object", 
      "description": "Failed to sign in.\nlogin_method: Login method.\nerror_details: Error details.\nis_emm_managed: Tells if the login device is EMM managed. Might be missing due to historical data gap.\n", 
      "properties": {
        "error_details": {
          "$ref": "#/definitions/FailureDetailsLogInfo"
        }, 
        "login_method": {
          "$ref": "#/definitions/LoginMethod"
        }, 
        "is_emm_managed": {
          "type": "boolean", 
          "description": "Tells if the login device is EMM managed. Might be missing due to historical data gap."
        }
      }
    }, 
    "MicrosoftOfficeAddinPolicy": {
      "type": "object", 
      "description": "Microsoft Office addin policy\ndisabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MicrosoftOfficeAddinPolicy"
        }
      }
    }, 
    "FeatureValue": {
      "type": "object", 
      "description": "The values correspond to entries in :type:`Feature`. You may get different value according to your Dropbox Business plan.\nupload_api_rate_limit: None\nhas_team_shared_dropbox: None\nhas_team_file_events: None\nhas_team_selective_sync: None\nother: None\n", 
      "properties": {
        "has_team_shared_dropbox": {
          "$ref": "#/definitions/HasTeamSharedDropboxValue"
        }, 
        "has_team_selective_sync": {
          "$ref": "#/definitions/HasTeamSelectiveSyncValue"
        }, 
        ".tag": {
          "enum": [
            "upload_api_rate_limit", 
            "has_team_shared_dropbox", 
            "has_team_file_events", 
            "has_team_selective_sync", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of FeatureValue"
        }, 
        "upload_api_rate_limit": {
          "$ref": "#/definitions/UploadApiRateLimitValue"
        }, 
        "has_team_file_events": {
          "$ref": "#/definitions/HasTeamFileEventsValue"
        }
      }
    }, 
    "ShowcaseChangeEnabledPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "AppLinkUserDetails": {
      "type": "object", 
      "description": "Linked app for member.\napp_info: Relevant application details.\n", 
      "properties": {
        "app_info": {
          "$ref": "#/definitions/AppLogInfo"
        }
      }
    }, 
    "Feature": {
      "type": "object", 
      "description": "A set of features that a Dropbox Business account may support.\nupload_api_rate_limit: The number of upload API calls allowed per month.\nhas_team_shared_dropbox: Does this team have a shared team root.\nhas_team_file_events: Does this team have file events.\nhas_team_selective_sync: Does this team have team selective sync enabled.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "upload_api_rate_limit", 
            "has_team_shared_dropbox", 
            "has_team_file_events", 
            "has_team_selective_sync", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of Feature"
        }
      }
    }, 
    "PaperDocDeleteCommentDetails": {
      "type": "object", 
      "description": "Deleted Paper doc comment.\nevent_uuid: Event unique identifier.\ncomment_text: Comment text. Might be missing due to historical data gap.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text. Might be missing due to historical data gap."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ShowcaseTrashedDeprecatedDetails": {
      "type": "object", 
      "description": "Deleted showcase (old version).\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ShowcaseRemoveMemberType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ActionDetails": {
      "type": "object", 
      "description": "Additional information indicating the action taken that caused status change.\nteam_join_details: Additional information relevant when a new member joins the team.\nremove_action: Define how the user was removed from the team.\nother: None\n", 
      "properties": {
        "team_join_details": {
          "$ref": "#/definitions/JoinTeamDetails"
        }, 
        "remove_action": {
          "$ref": "#/definitions/MemberRemoveActionType"
        }, 
        ".tag": {
          "enum": [
            "team_join_details", 
            "remove_action", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ActionDetails"
        }
      }
    }, 
    "GroupJoinPolicy": {
      "type": "object", 
      "description": "open: None\nrequest_to_join: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "open", 
            "request_to_join", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GroupJoinPolicy"
        }
      }
    }, 
    "TfaRemoveBackupPhoneDetails": {
      "type": "object", 
      "description": "Removed backup phone for two-step verification.\n", 
      "properties": {}
    }, 
    "SharedFolderChangeLinkPolicyDetails": {
      "type": "object", 
      "description": "Changed who can access shared folder via link.\nnew_value: New shared folder link policy.\nprevious_value: Previous shared folder link policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SharedLinkPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SharedLinkPolicy"
        }
      }
    }, 
    "FileRestoreType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentChangeDownloadsPolicyDetails": {
      "type": "object", 
      "description": "Changed whether members can download shared file/folder.\nnew_value: New downloads policy.\nprevious_value: Previous downloads policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/DownloadPolicyType"
        }, 
        "previous_value": {
          "$ref": "#/definitions/DownloadPolicyType"
        }
      }
    }, 
    "TeamMemberInformation": {
      "type": "object", 
      "description": "Information about a team member.\nprofile: Profile of a user as a member of a team.\nrole: The user's role in the team.\n", 
      "properties": {
        "profile": {
          "$ref": "#/definitions/TeamMemberProfile"
        }, 
        "role": {
          "$ref": "#/definitions/AdminTier"
        }
      }
    }, 
    "SsoAddLogoutUrlType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileLikeCommentDetails": {
      "type": "object", 
      "description": "Liked file comment.\ncomment_text: Comment text. Might be missing due to historical data gap.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text. Might be missing due to historical data gap."
        }
      }
    }, 
    "PaperContentRestoreType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamMergeFromType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "LoginMethod": {
      "type": "object", 
      "description": "password: None\ntwo_factor_authentication: None\nsaml: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "password", 
            "two_factor_authentication", 
            "saml", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of LoginMethod"
        }
      }
    }, 
    "ShowcaseDeleteCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceChangeIpWebType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TfaResetDetails": {
      "type": "object", 
      "description": "Reset two-step verification for team member.\n", 
      "properties": {}
    }, 
    "ListTeamAppsResult": {
      "type": "object", 
      "description": "Information returned by :route:`linked_apps/list_team_linked_apps`.\napps: The linked applications of each member of the team.\nhas_more: If true, then there are more apps available. Pass the cursor to :route:`linked_apps/list_team_linked_apps` to retrieve the rest.\ncursor: Pass the cursor into :route:`linked_apps/list_team_linked_apps` to receive the next sub list of team's applications.\n", 
      "properties": {
        "has_more": {
          "type": "boolean", 
          "description": "If true, then there are more apps available. Pass the cursor to :route:`linked_apps/list_team_linked_apps` to retrieve the rest."
        }, 
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`linked_apps/list_team_linked_apps` to receive the next sub list of team's applications."
        }, 
        "apps": {
          "items": {
            "$ref": "#/definitions/MemberLinkedApps"
          }, 
          "type": "array", 
          "description": "The linked applications of each member of the team."
        }
      }
    }, 
    "ExcludedUsersUpdateArg": {
      "type": "object", 
      "description": "Argument of excluded users update operation. Should include a list of users to add/remove (according to endpoint), Maximum size of the list is 1000 users.\nusers: List of users to be added/removed.\n", 
      "properties": {
        "users": {
          "items": {
            "$ref": "#/definitions/UserSelectorArg"
          }, 
          "type": "array", 
          "description": "List of users to be added/removed."
        }
      }
    }, 
    "FileLikeCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ApiSessionLogInfo": {
      "type": "object", 
      "description": "Api session.\nrequest_id: Api request ID.\n", 
      "properties": {
        "request_id": {
          "type": "string", 
          "description": "Api request ID."
        }
      }
    }, 
    "GroupCreateType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MembersRemoveError": {
      "type": "object", 
      "description": "user_not_found: No matching user found. The provided team_member_id, email, or external_id does not exist on this team.\nuser_not_in_team: The user is not a member of the team.\nother: None\nremove_last_admin: The user is the last admin of the team, so it cannot be removed from it.\nremoved_and_transfer_dest_should_differ: Expected removed user and transfer_dest user to be different.\nremoved_and_transfer_admin_should_differ: Expected removed user and transfer_admin user to be different.\ntransfer_dest_user_not_found: No matching user found for the argument transfer_dest_id.\ntransfer_dest_user_not_in_team: The provided transfer_dest_id does not exist on this team.\ntransfer_admin_user_not_found: No matching user found for the argument transfer_admin_id.\ntransfer_admin_user_not_in_team: The provided transfer_admin_id does not exist on this team.\nunspecified_transfer_admin_id: The transfer_admin_id argument must be provided when file transfer is requested.\ntransfer_admin_is_not_admin: Specified transfer_admin user is not a team admin.\ncannot_keep_account_and_transfer: Cannot keep account and transfer the data to another user at the same time.\ncannot_keep_account_and_delete_data: Cannot keep account and delete the data at the same time. To keep the account the argument wipe_data should be set to False.\nemail_address_too_long_to_be_disabled: The email address of the user is too long to be disabled.\ncannot_keep_invited_user_account: Cannot keep account of an invited user.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "user_not_found", 
            "user_not_in_team", 
            "other", 
            "remove_last_admin", 
            "removed_and_transfer_dest_should_differ", 
            "removed_and_transfer_admin_should_differ", 
            "transfer_dest_user_not_found", 
            "transfer_dest_user_not_in_team", 
            "transfer_admin_user_not_found", 
            "transfer_admin_user_not_in_team", 
            "unspecified_transfer_admin_id", 
            "transfer_admin_is_not_admin", 
            "cannot_keep_account_and_transfer", 
            "cannot_keep_account_and_delete_data", 
            "email_address_too_long_to_be_disabled", 
            "cannot_keep_invited_user_account"
          ], 
          "type": "string", 
          "title": "Choice of MembersRemoveError"
        }
      }
    }, 
    "NoteShareReceiveType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamFolderPermanentlyDeleteError": {
      "type": "object", 
      "description": "access_error: None\nstatus_error: None\nteam_shared_dropbox_error: None\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/TeamFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "status_error", 
            "team_shared_dropbox_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderPermanentlyDeleteError"
        }, 
        "team_shared_dropbox_error": {
          "$ref": "#/definitions/TeamFolderTeamSharedDropboxError"
        }, 
        "status_error": {
          "$ref": "#/definitions/TeamFolderInvalidStatusError"
        }
      }
    }, 
    "DeviceManagementDisabledDetails": {
      "type": "object", 
      "description": "Disabled device management.\n", 
      "properties": {}
    }, 
    "TeamProfileAddLogoType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfTeamGrantAccessDetails": {
      "type": "object", 
      "description": "Granted access to shared folder.\ntarget_asset_index: Target asset position in the Assets list.\noriginal_folder_name: Original shared folder name.\n", 
      "properties": {
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "original_folder_name": {
          "type": "string", 
          "description": "Original shared folder name."
        }
      }
    }, 
    "ParticipantLogInfo": {
      "type": "object", 
      "description": "A user or group\nuser: A user with a Dropbox account.\ngroup: Group details.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "user", 
            "group", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ParticipantLogInfo"
        }, 
        "group": {
          "$ref": "#/definitions/GroupLogInfo"
        }, 
        "user": {
          "$ref": "#/definitions/UserLogInfo"
        }
      }
    }, 
    "SmartSyncCreateAdminPrivilegeReportType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ListMemberAppsArg": {
      "type": "object", 
      "description": "team_member_id: The team member id.\n", 
      "properties": {
        "team_member_id": {
          "type": "string", 
          "description": "The team member id."
        }
      }
    }, 
    "DownloadPolicyType": {
      "type": "object", 
      "description": "Shared content downloads policy\nallow: None\ndisallow: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "allow", 
            "disallow", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of DownloadPolicyType"
        }
      }
    }, 
    "GroupAddExternalIdType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "HasTeamFileEventsValue": {
      "type": "object", 
      "description": "The value for :field:`Feature.has_team_file_events`.\nenabled: Does this team have file events.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of HasTeamFileEventsValue"
        }, 
        "enabled": {
          "type": "boolean", 
          "description": "Does this team have file events."
        }
      }
    }, 
    "MembersSetProfileArg": {
      "type": "object", 
      "description": "Exactly one of team_member_id, email, or external_id must be provided to identify the user account.\nAt least one of new_email, new_external_id, new_given_name, and/or new_surname must be provided.\nuser: Identity of user whose profile will be set.\nnew_email: New email for member.\nnew_external_id: New external ID for member.\nnew_given_name: New given name for member.\nnew_surname: New surname for member.\nnew_persistent_id: New persistent ID. This field only available to teams using persistent ID SAML configuration.\nnew_is_directory_restricted: New value for whether the user is a directory restricted user.\n", 
      "properties": {
        "new_email": {
          "type": "string", 
          "description": "New email for member."
        }, 
        "new_surname": {
          "type": "string", 
          "description": "New surname for member."
        }, 
        "new_persistent_id": {
          "type": "string", 
          "description": "New persistent ID. This field only available to teams using persistent ID SAML configuration."
        }, 
        "new_is_directory_restricted": {
          "type": "boolean", 
          "description": "New value for whether the user is a directory restricted user."
        }, 
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        }, 
        "new_external_id": {
          "type": "string", 
          "description": "New external ID for member."
        }, 
        "new_given_name": {
          "type": "string", 
          "description": "New given name for member."
        }
      }
    }, 
    "GroupSummary": {
      "type": "object", 
      "description": "Information about a group.\ngroup_name: None\ngroup_id: None\ngroup_management_type: Who is allowed to manage the group.\ngroup_external_id: External ID of group. This is an arbitrary ID that an admin can attach to a group.\nmember_count: The number of members in the group.\n", 
      "properties": {
        "group_external_id": {
          "type": "string", 
          "description": "External ID of group. This is an arbitrary ID that an admin can attach to a group."
        }, 
        "group_id": {
          "type": "string"
        }, 
        "group_management_type": {
          "$ref": "#/definitions/GroupManagementType"
        }, 
        "member_count": {
          "type": "number", 
          "description": "The number of members in the group."
        }, 
        "group_name": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseAccessGrantedDetails": {
      "type": "object", 
      "description": "Granted access to showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "GroupCreateArg": {
      "type": "object", 
      "description": "group_name: Group name.\ngroup_external_id: The creator of a team can associate an arbitrary external ID to the group.\ngroup_management_type: Whether the team can be managed by selected users, or only by team admins.\n", 
      "properties": {
        "group_name": {
          "type": "string", 
          "description": "Group name."
        },
        "add_creator_as_owner": {
          "type": "boolean", 
          "description": "Automatically add the creator of the group. The default for this field is False."
        },
        "group_external_id": {
          "type": "string", 
          "description": "The creator of a team can associate an arbitrary external ID to the group."
        }, 
        "group_management_type": {
          "$ref": "#/definitions/GroupManagementType"
        }       
      }
    }, 
    "AllowDownloadEnabledDetails": {
      "type": "object", 
      "description": "Enabled downloads.\n", 
      "properties": {}
    }, 
    "PaperExternalViewForbidType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedLinkChangeVisibilityDetails": {
      "type": "object", 
      "description": "Changed visibility of shared link.\nnew_value: New shared link visibility.\nprevious_value: Previous shared link visibility. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SharedLinkVisibility"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SharedLinkVisibility"
        }
      }
    }, 
    "SignInAsSessionEndType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfAllowNonMembersToViewSharedLinksType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "EventCategory": { 
      "description": "Category of events in event audit log.\napps: Events that apply to management of linked apps.\ncomments: Events that have to do with comments on files and Paper documents.\ndevices: Events that apply to linked devices on mobile, desktop and Web platforms.\ndomains: Events that involve domain management feature: domain verification, invite enforcement and account capture.\nfile_operations: Events that have to do with filesystem operations on files and folders: copy, move, delete, etc.\nfile_requests: Events that apply to the file requests feature.\ngroups: Events that involve group management.\nlogins: Events that involve users signing in to or out of Dropbox.\nmembers: Events that involve team member management.\npaper: Events that apply to Dropbox Paper.\npasswords: Events that involve using, changing or resetting passwords.\nreports: Events that concern generation of admin reports, including team activity and device usage.\nsharing: Events that apply to all types of sharing and collaboration.\nshowcase: Events that apply to Dropbox Showcase.\nsso: Events that involve using or configuring single sign-on as well as administrative policies concerning single sign-on.\nteam_folders: Events that involve team folder management.\nteam_policies: Events that involve a change in team-wide policies.\nteam_profile: Events that involve a change in the team profile.\ntfa: Events that involve using or configuring two factor authentication as well as administrative policies concerning two factor authentication.\nother: None\n", 
          "enum": [
            "apps", 
            "comments", 
            "devices", 
            "domains", 
            "file_operations", 
            "file_requests", 
            "groups", 
            "logins", 
            "members", 
            "paper", 
            "passwords", 
            "reports", 
            "sharing", 
            "showcase", 
            "sso", 
            "team_folders", 
            "team_policies", 
            "team_profile", 
            "tfa", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of EventCategory"
    }, 
    "FileRollbackChangesType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "WebSessionsChangeIdleLengthPolicyDetails": {
      "type": "object", 
      "description": "Changed how long team members can be idle while signed in to Dropbox.com.\nnew_value: New idle length policy. Might be missing due to historical data gap.\nprevious_value: Previous idle length policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/WebSessionsIdleLengthPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/WebSessionsIdleLengthPolicy"
        }
      }
    }, 
    "GroupMembersChangeResult": {
      "type": "object", 
      "description": "Result returned by :route:`groups/members/add` and :route:`groups/members/remove`.\ngroup_info: The group info after member change operation has been performed.\nasync_job_id: An ID that can be used to obtain the status of granting/revoking group-owned resources.\n", 
      "properties": {
        "group_info": {
          "$ref": "#/definitions/GroupFullInfo"
        }, 
        "async_job_id": {
          "type": "string", 
          "description": "An ID that can be used to obtain the status of granting/revoking group-owned resources."
        }
      }
    }, 
    "LoginFailType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DomainInvitesEmailExistingUsersType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperChangeDeploymentPolicyDetails": {
      "type": "object", 
      "description": "Changed whether Dropbox Paper, when enabled, is deployed to all members or to specific members.\nnew_value: New Dropbox Paper deployment policy.\nprevious_value: Previous Dropbox Paper deployment policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/PaperDeploymentPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/PaperDeploymentPolicy"
        }
      }
    }, 
    "ShowcaseTrashedDeprecatedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberChangeMembershipTypeType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseTrashedDetails": {
      "type": "object", 
      "description": "Deleted showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "PaperDocResolveCommentDetails": {
      "type": "object", 
      "description": "Resolved Paper doc comment.\nevent_uuid: Event unique identifier.\ncomment_text: Comment text. Might be missing due to historical data gap.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text. Might be missing due to historical data gap."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "TeamGetInfoResult": {
      "type": "object", 
      "description": "name: The name of the team.\nteam_id: The ID of the team.\nnum_licensed_users: The number of licenses available to the team.\nnum_provisioned_users: The number of accounts that have been invited or are already active members of the team.\npolicies: None\n", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "The name of the team."
        },
        "team_id": {
          "type": "string", 
          "description": "The ID of the team."
        },
        "num_licensed_users": {
          "type": "number", 
          "description": "The number of licenses available to the team."
        },
        "num_provisioned_users": {
          "type": "number", 
          "description": "The number of accounts that have been invited or are already active members of the team."
        },
        "num_used_licenses": {
          "type": "number", 
          "description": "The number of licenses used on the team. The default for this field is 0."
        },
        "policies": {
          "$ref": "#/definitions/TeamMemberPolicies"
        }
      }
    }, 
    "ShowcasePermanentlyDeletedDetails": {
      "type": "object", 
      "description": "Permanently deleted showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "WebSessionLogInfo": {
      "type": "object", 
      "description": "Web session.\nsession_id: Session ID. Might be missing due to historical data gap.\n", 
      "properties": {
        "session_id": {
          "type": "string", 
          "description": "Session ID. Might be missing due to historical data gap."
        }
      }
    }, 
    "GroupUpdateError": {
      "type": "object", 
      "description": "group_not_found: No matching group found. No groups match the specified group ID.\nother: None\nsystem_managed_group_disallowed: This operation is not supported on system-managed groups.\ngroup_name_already_used: The requested group name is already being used by another group.\ngroup_name_invalid: Group name is empty or has invalid characters.\nexternal_id_already_in_use: The requested external ID is already being used by another group.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "group_not_found", 
            "other", 
            "system_managed_group_disallowed", 
            "group_name_already_used", 
            "group_name_invalid", 
            "external_id_already_in_use"
          ], 
          "type": "string", 
          "title": "Choice of GroupUpdateError"
        }
      }
    }, 
    "ShowcaseDeleteCommentDetails": {
      "type": "object", 
      "description": "Deleted showcase comment.\nevent_uuid: Event unique identifier.\ncomment_text: Comment text.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "GroupMembersRemoveArg": {
      "type": "object", 
      "description": "group: Group from which users will be removed.\nusers: List of users to be removed from the group.\nreturn_members: Whether to return the list of members in the group.  Note that the default value will cause all the group members  to be returned in the response. This may take a long time for large groups.\n", 
      "properties": {
        "return_members": {
          "type": "boolean", 
          "description": "Whether to return the list of members in the group.  Note that the default value will cause all the group members  to be returned in the response. This may take a long time for large groups."
        }, 
        "group": {
          "$ref": "#/definitions/GroupSelector"
        }, 
        "users": {
          "items": {
            "$ref": "#/definitions/UserSelectorArg"
          }, 
          "type": "array", 
          "description": "List of users to be removed from the group."
        }
      }
    }, 
    "DeviceChangeIpWebDetails": {
      "type": "object", 
      "description": "Changed IP address associated with active web session.\nuser_agent: Web browser name.\n", 
      "properties": {
        "user_agent": {
          "type": "string", 
          "description": "Web browser name."
        }
      }
    }, 
    "SharedContentChangeLinkAudienceType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SsoRemoveLogoutUrlDetails": {
      "type": "object", 
      "description": "Removed sign-out URL for SSO.\nprevious_value: Previous single sign-on logout URL.\n", 
      "properties": {
        "previous_value": {
          "type": "string", 
          "description": "Previous single sign-on logout URL."
        }
      }
    }, 
    "PaperDocResolveCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "LegalHoldCreatePolicyArg":{
      "type":"object",
      "properties":{
        "name":{
          "type":"string",
          "description":"Policy name"
        },
        "members":{
          "type":"array",
          "description":"List of team member IDs added to the hold.",
          "items":{
            "type":"string"
          }
        },
        "description":{
          "type":"string",
          "description":"A description of the legal hold policy. This field is optional."
        },
        "start_date":{
          "type":"string",
          "description":"start date of the legal hold policy. This field is optional.",
          "default":"2017-12-31T00:00:00Z"
        },
        "end_date":{
          "type":"string",
          "description":"end date of the legal hold policy. This field is optional.",
          "default":"2017-12-31T00:00:00Z"
        }
      }
    },
    "LegalHoldPolicy":{
      "type":"object",
      "properties":{
        "id":{
          "type":"string",
          "description":"The legal hold id."
        },
        "name":{
          "type":"string",
          "description":"Policy name"
        },
        "members":{
          "$ref":"#/definitions/MembersInfo"
        },
        "status":{
          "$ref":"#/definitions/LegalHoldStatus"
        },
        "description":{
          "type":"string",
          "description":"A description of the legal hold policy. This field is optional."
        },
        "start_date":{
          "type":"string",
          "description":"start date of the legal hold policy. This field is optional."
        },
        "end_date":{
          "type":"string",
          "description":"end date of the legal hold policy. This field is optional."
        },
        "activation_time":{
          "type":"string",
          "description":"The time at which the legal hold was activated. This field is optional."
        }
      }
    },
    "LegalHoldsListPoliciesResult":{
      "type":"array",
      "items":{
        "$ref":"#/definitions/LegalHoldPolicy"
      }
    },
    "LegalHoldsPolicyUpdateArg":{
      "type":"object",
      "properties":{
        "id":{
          "type":"string",
          "description":"The legal hold Id."
        },
        "name":{
          "type":"string"
        },
        "description":{
          "type":"string"
        },
        "members":{
          "type":"array",
          "items":{
            "type":"string"
          }
        }
      }
    },
    "LegalHoldsListHeldRevisionResult":{
      "type":"object",
      "properties":{
        "entries":{
          "type":"array",
          "items":{
            "$ref":"#/definitions/LegalHoldHeldRevisionMetadata"
          }
        },
        "has_more":{
          "type":"boolean"
        },
        "cursor":{
          "type":"string"
        }
      }
    },
    "LegalHoldHeldRevisionMetadata":{
      "type":"object",
      "properties":{
        "new_filename":{
          "type":"string"
        },
        "original_revision_id":{
          "type":"string"
        },
        "original_file_path":{
          "type":"string"
        },
        "server_modified":{
          "type":"string"
        },
        "author_member_id":{
          "type":"string"
        },
        "author_member_status":{
          "$ref":"#/definitions/TeamMemberStatus"
        },
        "author_email":{
          "type":"string"
        },
        "file_type":{
          "type":"string"
        },
        "size":{
          "type":"integer"
        },
        "content_hash":{
          "type":"string"
        }
      }
    },
    "LegalHoldStatus":{
      "type":"object",
      "description":"The current state of the hold.",
      "properties":{
        ".tag":{
          "type":"string",
          "enum":["active", "released", "activating", "updating", "exporting", "releasing"]
        }
      }
    },
    "ListMembersAppsResult": {
      "type": "object", 
      "description": "Information returned by :route:`linked_apps/list_members_linked_apps`.\napps: The linked applications of each member of the team.\nhas_more: If true, then there are more apps available. Pass the cursor to :route:`linked_apps/list_members_linked_apps` to retrieve the rest.\ncursor: Pass the cursor into :route:`linked_apps/list_members_linked_apps` to receive the next sub list of team's applications.\n", 
      "properties": {
        "has_more": {
          "type": "boolean", 
          "description": "If true, then there are more apps available. Pass the cursor to :route:`linked_apps/list_members_linked_apps` to retrieve the rest."
        }, 
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`linked_apps/list_members_linked_apps` to receive the next sub list of team's applications."
        }, 
        "apps": {
          "items": {
            "$ref": "#/definitions/MemberLinkedApps"
          }, 
          "type": "array", 
          "description": "The linked applications of each member of the team."
        }
      }
    }, 
    "MembersInfo":{
      "type":"object",
      "properties":{
        "team_member_id":{
          "type":"array",
          "items":{
            "type":"string"
          }
        },
        "permanent_deleted_users":{
          "type":"integer"
        }
      }
    },
    "ShowcaseChangeEnabledPolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled Dropbox Showcase for team.\nnew_value: New Dropbox Showcase policy.\nprevious_value: Previous Dropbox Showcase policy.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/ShowcaseEnabledPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/ShowcaseEnabledPolicy"
        }
      }
    }, 
    "FileUnlikeCommentDetails": {
      "type": "object", 
      "description": "Unliked file comment.\ncomment_text: Comment text. Might be missing due to historical data gap.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text. Might be missing due to historical data gap."
        }
      }
    }, 
    "SharedFolderMountType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceChangeIpDesktopType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperDocDownloadDetails": {
      "type": "object", 
      "description": "Downloaded Paper doc in specific format.\nevent_uuid: Event unique identifier.\nexport_file_format: Export file format.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }, 
        "export_file_format": {
          "$ref": "#/definitions/PaperDownloadFormat"
        }
      }
    }, 
    "PaperFolderTeamInviteDetails": {
      "type": "object", 
      "description": "Shared Paper folder with member.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "RevokeLinkedAppBatchError": {
      "type": "object", 
      "description": "Error returned by :route:`linked_apps/revoke_linked_app_batch`.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "other"
          ], 
          "type": "string", 
          "title": "Choice of RevokeLinkedAppBatchError"
        }
      }
    }, 
    "ShowcaseEditedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentChangeLinkExpiryDetails": {
      "type": "object", 
      "description": "Changed link expiration of shared file/folder.\nnew_value: New shared content link expiration date. Might be missing due to historical data gap.\nprevious_value: Previous shared content link expiration date. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "New shared content link expiration date. Might be missing due to historical data gap."
        }, 
        "previous_value": {
          "type": "string", 
          "description": "Previous shared content link expiration date. Might be missing due to historical data gap."
        }
      }
    }, 
    "PaperFolderFollowedDetails": {
      "type": "object", 
      "description": "Followed Paper folder.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "SignInAsSessionStartType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcasePermanentlyDeletedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentRemoveLinkPasswordDetails": {
      "type": "object", 
      "description": "Removed link password of shared file/folder.\n", 
      "properties": {}
    }, 
    "SharedContentChangeViewerInfoPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SignInAsSessionEndDetails": {
      "type": "object", 
      "description": "Ended admin sign-in-as session.\n", 
      "properties": {}
    }, 
    "ResellerSupportSessionEndDetails": {
      "type": "object", 
      "description": "Ended reseller support session.\n", 
      "properties": {}
    }, 
    "PermanentDeleteChangePolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled ability of team members to permanently delete content.\nnew_value: New permanent delete content policy.\nprevious_value: Previous permanent delete content policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/ContentPermanentDeletePolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/ContentPermanentDeletePolicy"
        }
      }
    }, 
    "LoginSuccessType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfTeamJoinFromOobLinkType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedFolderChangeMembersPolicyDetails": {
      "type": "object", 
      "description": "Changed who can become member of shared folder.\nnew_value: New external invite policy.\nprevious_value: Previous external invite policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/MemberPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/MemberPolicy"
        }
      }
    }, 
    "NoteSharedDetails": {
      "type": "object", 
      "description": "Shared Paper doc.\n", 
      "properties": {}
    }, 
    "AppUnlinkTeamDetails": {
      "type": "object", 
      "description": "Unlinked app for team.\napp_info: Relevant application details.\n", 
      "properties": {
        "app_info": {
          "$ref": "#/definitions/AppLogInfo"
        }
      }
    }, 
    "SharedLinkChangeExpiryDetails": {
      "type": "object", 
      "description": "Changed shared link expiration date.\nnew_value: New shared link expiration date. Might be missing due to historical data gap.\nprevious_value: Previous shared link expiration date. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "New shared link expiration date. Might be missing due to historical data gap."
        }, 
        "previous_value": {
          "type": "string", 
          "description": "Previous shared link expiration date. Might be missing due to historical data gap."
        }
      }
    }, 
    "ExcludedUsersUpdateStatus": {
      "type": "object", 
      "description": "Excluded users update operation status.\nsuccess: Update successful.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "success", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ExcludedUsersUpdateStatus"
        }
      }
    }, 
    "MembersSetPermissionsArg": {
      "type": "object", 
      "description": "Exactly one of team_member_id, email, or external_id must be provided to identify the user account.\nuser: Identity of user whose role will be set.\nnew_role: The new role of the member.\n", 
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        }, 
        "new_role": {
          "$ref": "#/definitions/AdminTier"
        }
      }
    }, 
    "TeamMemberLogInfo": {
      "type": "object", 
      "description": "Team member's logged information.\naccount_id: User unique ID. Might be missing due to historical data gap.\ndisplay_name: User display name. Might be missing due to historical data gap.\nemail: User email address. Might be missing due to historical data gap.\nteam_member_id: Team member ID. Might be missing due to historical data gap.\nmember_external_id: Team member external ID.\n", 
      "properties": {
        "team_member_id": {
          "type": "string", 
          "description": "Team member ID. Might be missing due to historical data gap."
        }, 
        "display_name": {
          "type": "string", 
          "description": "User display name. Might be missing due to historical data gap."
        }, 
        "account_id": {
          "type": "string", 
          "description": "User unique ID. Might be missing due to historical data gap."
        }, 
        "member_external_id": {
          "type": "string", 
          "description": "Team member external ID."
        }, 
        "email": {
          "type": "string", 
          "description": "User email address. Might be missing due to historical data gap."
        }
      }
    }, 
    "SecondaryMailsPolicyChangedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamFolderArchiveJobStatus": {
      "type": "object", 
      "description": "in_progress: The asynchronous job is still in progress.\ncomplete: The archive job has finished. The value is the metadata for the resulting team folder.\nfailed: Error occurred while performing an asynchronous job from :route:`team_folder/archive`.\n", 
      "properties": {
        "failed": {
          "$ref": "#/definitions/TeamFolderArchiveError"
        }, 
        ".tag": {
          "enum": [
            "in_progress", 
            "complete", 
            "failed"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderArchiveJobStatus"
        }, 
        "complete": {
          "$ref": "#/definitions/TeamFolderMetadata"
        }
      }
    }, 
    "RevokeDeviceSessionArg": {
      "type": "object", 
      "description": "web_session: End an active session.\ndesktop_client: Unlink a linked desktop device.\nmobile_client: Unlink a linked mobile device.\n", 
      "properties": {
        "desktop_client": {
          "$ref": "#/definitions/RevokeDesktopClientArg"
        }, 
        ".tag": {
          "enum": [
            "web_session", 
            "desktop_client", 
            "mobile_client"
          ], 
          "type": "string", 
          "title": "Choice of RevokeDeviceSessionArg"
        }, 
        "web_session": {
          "$ref": "#/definitions/DeviceSessionArg"
        }, 
        "mobile_client": {
          "$ref": "#/definitions/DeviceSessionArg"
        }
      }
    }, 
    "MembersListResult": {
      "type": "object", 
      "description": "members: List of team members.\ncursor: Pass the cursor into :route:`members/list/continue` to obtain the additional members.\nhas_more: Is true if there are additional team members that have not been returned yet. An additional call to :route:`members/list/continue` can retrieve them.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`members/list/continue` to obtain the additional members."
        }, 
        "has_more": {
          "type": "boolean", 
          "description": "Is true if there are additional team members that have not been returned yet. An additional call to :route:`members/list/continue` can retrieve them."
        }, 
        "members": {
          "items": {
            "$ref": "#/definitions/TeamMemberInformation"
          }, 
          "type": "array", 
          "description": "List of team members."
        }
      }
    }, 
    "EmmErrorDetails": {
      "type": "object", 
      "description": "Failed to sign in via EMM.\nerror_details: Error details.\n", 
      "properties": {
        "error_details": {
          "$ref": "#/definitions/FailureDetailsLogInfo"
        }
      }
    }, 
    "MembersSendWelcomeError": {
      "type": "object", 
      "description": "user_not_found: No matching user found. The provided team_member_id, email, or external_id does not exist on this team.\nuser_not_in_team: The user is not a member of the team.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "user_not_found", 
            "user_not_in_team", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MembersSendWelcomeError"
        }
      }
    }, 
    "SmartSyncCreateAdminPrivilegeReportDetails": {
      "type": "object", 
      "description": "Created Smart Sync non-admin devices report.\n", 
      "properties": {}
    }, 
    "PaperContentRenameType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SsoAddCertType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfAllowNonMembersToViewSharedLinksDetails": {
      "type": "object", 
      "description": "Allowed non-collaborators to view links to files in shared folder.\ntarget_asset_index: Target asset position in the Assets list.\noriginal_folder_name: Original shared folder name.\nshared_folder_type: Shared folder type. Might be missing due to historical data gap.\n", 
      "properties": {
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "original_folder_name": {
          "type": "string", 
          "description": "Original shared folder name."
        }, 
        "shared_folder_type": {
          "type": "string", 
          "description": "Shared folder type. Might be missing due to historical data gap."
        }
      }
    }, 
    "DeviceApprovalsChangeOverageActionDetails": {
      "type": "object", 
      "description": "Changed device approvals setting when member is over limit.\nnew_value: New over the limits policy. Might be missing due to historical data gap.\nprevious_value: Previous over the limit policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/RolloutMethod"
        }, 
        "previous_value": {
          "$ref": "#/definitions/RolloutMethod"
        }
      }
    }, 
    "TfaChangeBackupPhoneType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupSelectorError": {
      "type": "object", 
      "description": "Error that can be raised when :type:`GroupSelector` is used.\ngroup_not_found: No matching group found. No groups match the specified group ID.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "group_not_found", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GroupSelectorError"
        }
      }
    }, 
    "PaperDocDeleteCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "SecondaryEmail": {
      "description": "Secondary emails of a user.",
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "is_verified": {
          "type": "boolean"
        }
      }
    },
    "TeamMembershipType": {
      "type": "object", 
      "description": "full: User uses a license and has full access to team resources like the shared quota.\nlimited: User does not have access to the shared quota and team admins have restricted administrative control.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "full", 
            "limited"
          ], 
          "type": "string", 
          "title": "Choice of TeamMembershipType"
        }
      }
    }, 
    "SharedFolderCreateDetails": {
      "type": "object", 
      "description": "Created shared folder.\ntarget_ns_id: Target namespace ID. Might be missing due to historical data gap.\n", 
      "properties": {
        "target_ns_id": {
          "type": "string", 
          "description": "Target namespace ID. Might be missing due to historical data gap."
        }
      }
    }, 
    "PaperDownloadFormat": {
      "type": "object", 
      "description": "docx: None\nhtml: None\nmarkdown: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "docx", 
            "html", 
            "markdown", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PaperDownloadFormat"
        }
      }
    }, 
    "TimeRange": {
      "type": "object", 
      "description": "Time range.\nstart_time: Optional starting time (inclusive).\nend_time: Optional ending time (exclusive).\n", 
      "properties": {
        "start_time": {
          "type": "string", 
          "description": "Optional starting time (inclusive)."
        }, 
        "end_time": {
          "type": "string", 
          "description": "Optional ending time (exclusive)."
        }
      }
    }, 
    "SharedContentChangeLinkPasswordDetails": {
      "type": "object", 
      "description": "Changed link password of shared file/folder.\n", 
      "properties": {}
    }, 
    "SharedContentAddInviteesDetails": {
      "type": "object", 
      "description": "Invited user to Dropbox and added them to shared file/folder.\nshared_content_access_level: Shared content access level.\ninvitees: A list of invitees.\n", 
      "properties": {
        "shared_content_access_level": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "invitees": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "A list of invitees."
        }
      }
    }, 
    "PaperDocChangeSubscriptionDetails": {
      "type": "object", 
      "description": "Followed/unfollowed Paper doc.\nevent_uuid: Event unique identifier.\nnew_subscription_level: New doc subscription level.\nprevious_subscription_level: Previous doc subscription level. Might be missing due to historical data gap.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }, 
        "previous_subscription_level": {
          "type": "string", 
          "description": "Previous doc subscription level. Might be missing due to historical data gap."
        }, 
        "new_subscription_level": {
          "type": "string", 
          "description": "New doc subscription level."
        }
      }
    }, 
    "FileResolveCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileRequestsEmailsEnabledType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "WebSessionsChangeIdleLengthPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FilePermanentlyDeleteDetails": {
      "type": "object", 
      "description": "Permanently deleted files and/or folders.\n", 
      "properties": {}
    }, 
    "ContentSyncSettingArg": {
      "type": "object", 
      "description": "id: Id of the item this setting is applied to.\nsync_setting: Setting for this item.\n", 
      "properties": {
        "sync_setting": {
          "$ref": "#/definitions/SyncSettingArg"
        }, 
        "id": {
          "type": "string", 
          "description": "Id of the item this setting is applied to."
        }
      }
    }, 
    "PaperContentCreateType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ListTeamAppsError": {
      "type": "object", 
      "description": "Error returned by :route:`linked_apps/list_team_linked_apps`.\nreset: Indicates that the cursor has been invalidated. Call :route:`linked_apps/list_team_linked_apps` again with an empty cursor to obtain a new cursor.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "reset", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListTeamAppsError"
        }
      }
    }, 
    "ShowcaseViewDetails": {
      "type": "object", 
      "description": "Viewed showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "FileCommentsChangePolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled commenting on team files.\nnew_value: New commenting on team files policy.\nprevious_value: Previous commenting on team files policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/FileCommentsPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/FileCommentsPolicy"
        }
      }
    }, 
    "DeviceLinkFailType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SpaceLimitsStatus": {
      "type": "object", 
      "description": "within_quota: None\nnear_quota: None\nover_quota: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "within_quota", 
            "near_quota", 
            "over_quota", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SpaceLimitsStatus"
        }
      }
    }, 
    "DomainInvitesEmailExistingUsersDetails": {
      "type": "object", 
      "description": "Sent domain invites to existing domain accounts.\ndomain_name: Domain names.\nnum_recipients: Number of recipients.\n", 
      "properties": {
        "domain_name": {
          "type": "string", 
          "description": "Domain names."
        }, 
        "num_recipients": {
          "type": "number", 
          "description": "Number of recipients."
        }
      }
    }, 
    "EmmAddExceptionType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperContentAddMemberDetails": {
      "type": "object", 
      "description": "Added team member to Paper doc/folder.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "SharedFolderTransferOwnershipType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperEnabledPolicy": {
      "type": "object", 
      "description": "disabled: Paper is disabled.\nenabled: Paper is enabled.\nunspecified: Unspecified policy.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "unspecified", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PaperEnabledPolicy"
        }
      }
    }, 
    "TeamNamespacesListArg": {
      "type": "object", 
      "description": "limit: Specifying a value here has no effect.\n", 
      "properties": {
        "limit": {
          "type": "integer", 
          "description": "Specifying a value here has no effect."
        }
      }
    }, 
    "EmmState": {
      "type": "object", 
      "description": "disabled: Emm token is disabled.\noptional: Emm token is optional.\nrequired: Emm token is required.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "optional", 
            "required", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of EmmState"
        }
      }
    },  
    "SyncSetting": {
      "type": "object", 
      "description": "default: On first sync to members' computers, the specified folder will follow its parent folder's setting or otherwise follow default sync behavior.\nnot_synced: On first sync to members' computers, the specified folder will be set to not sync with selective sync.\nnot_synced_inactive: The specified folder's not_synced setting is inactive due to its location or other configuration changes. It will follow its parent folder's setting.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "default", 
            "not_synced", 
            "not_synced_inactive", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SyncSetting"
        }
      }
    }, 
    "SharingChangeMemberPolicyDetails": {
      "type": "object", 
      "description": "Changed whether members can share files/folders outside team.\nnew_value: New external invite policy.\nprevious_value: Previous external invite policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SharingMemberPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SharingMemberPolicy"
        }
      }
    }, 
    "SsoChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "AccessMethodLogInfo": {
      "type": "object", 
      "description": "Indicates the method in which the action was performed.\nend_user: End user session details.\nsign_in_as: Sign in as session details.\ncontent_manager: Content manager session details.\nadmin_console: Admin console session details.\napi: Api session details.\nother: None\n", 
      "properties": {
        "end_user": {
          "$ref": "#/definitions/SessionLogInfo"
        }, 
        "admin_console": {
          "$ref": "#/definitions/WebSessionLogInfo"
        }, 
        "content_manager": {
          "$ref": "#/definitions/WebSessionLogInfo"
        }, 
        ".tag": {
          "enum": [
            "end_user", 
            "sign_in_as", 
            "content_manager", 
            "admin_console", 
            "api", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of AccessMethodLogInfo"
        }, 
        "api": {
          "$ref": "#/definitions/ApiSessionLogInfo"
        }, 
        "sign_in_as": {
          "$ref": "#/definitions/WebSessionLogInfo"
        }
      }
    }, 
    "TeamFolderDowngradeDetails": {
      "type": "object", 
      "description": "Downgraded team folder to regular shared folder.\ntarget_asset_index: Target asset position in the Assets list.\n", 
      "properties": {
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }
      }
    }, 
    "TeamProfileChangeDefaultLanguageDetails": {
      "type": "object", 
      "description": "Changed default language for team.\nnew_value: New team's default language.\nprevious_value: Previous team's default language.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "New team's default language."
        }, 
        "previous_value": {
          "type": "string", 
          "description": "Previous team's default language."
        }
      }
    }, 
    "ExportMembersReportType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupCreateDetails": {
      "type": "object", 
      "description": "Created group.\nis_company_managed: Is company managed group. Might be missing due to historical data gap.\njoin_policy: Group join policy.\n", 
      "properties": {
        "is_company_managed": {
          "type": "boolean", 
          "description": "Is company managed group. Might be missing due to historical data gap."
        }, 
        "join_policy": {
          "$ref": "#/definitions/GroupJoinPolicy"
        }
      }
    }, 
    "TeamFolderRenameArg": {
      "type": "object", 
      "description": "team_folder_id: The ID of the team folder.\nname: New team folder name.\n", 
      "properties": {
        "team_folder_id": {
          "type": "string", 
          "description": "The ID of the team folder."
        }, 
        "name": {
          "type": "string", 
          "description": "New team folder name."
        }
      }
    }, 
    "MemberChangeEmailDetails": {
      "type": "object", 
      "description": "Changed team member email.\nnew_value: New email.\nprevious_value: Previous email. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "New email."
        }, 
        "previous_value": {
          "type": "string", 
          "description": "Previous email. Might be missing due to historical data gap."
        }
      }
    }, 
    "ShowcaseEditCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MembersSetProfileError": {
      "type": "object", 
      "description": "user_not_found: No matching user found. The provided team_member_id, email, or external_id does not exist on this team.\nuser_not_in_team: The user is not a member of the team.\nexternal_id_and_new_external_id_unsafe: It is unsafe to use both external_id and new_external_id.\nno_new_data_specified: None of new_email, new_given_name, new_surname, or new_external_id are specified.\nemail_reserved_for_other_user: Email is already reserved for another user.\nexternal_id_used_by_other_user: The external ID is already in use by another team member.\nset_profile_disallowed: Modifying deleted users is not allowed.\nparam_cannot_be_empty: Parameter new_email cannot be empty.\npersistent_id_disabled: Persistent ID is only available to teams with persistent ID SAML configuration. Please contact Dropbox for more information.\npersistent_id_used_by_other_user: The persistent ID is already in use by another team member.\ndirectory_restricted_off: Directory Restrictions option is not available.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "user_not_found", 
            "user_not_in_team", 
            "external_id_and_new_external_id_unsafe", 
            "no_new_data_specified", 
            "email_reserved_for_other_user", 
            "external_id_used_by_other_user", 
            "set_profile_disallowed", 
            "param_cannot_be_empty", 
            "persistent_id_disabled", 
            "persistent_id_used_by_other_user", 
            "directory_restricted_off", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MembersSetProfileError"
        }
      }
    }, 
    "SsoChangeLoginUrlDetails": {
      "type": "object", 
      "description": "Changed sign-in URL for SSO.\nprevious_value: Previous single sign-on login URL.\nnew_value: New single sign-on login URL.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "New single sign-on login URL."
        }, 
        "previous_value": {
          "type": "string", 
          "description": "Previous single sign-on login URL."
        }
      }
    }, 
    "RevokeLinkedAppBatchResult": {
      "type": "object", 
      "description": "revoke_linked_app_status: None\n", 
      "properties": {
        "revoke_linked_app_status": {
          "items": {
            "$ref": "#/definitions/RevokeLinkedAppStatus"
          }, 
          "type": "array"
        }
      }
    }, 
    "PaperDocDownloadType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperContentPermanentlyDeleteDetails": {
      "type": "object", 
      "description": "Permanently deleted Paper doc/folder.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "GroupsMembersListContinueError": {
      "type": "object", 
      "description": "invalid_cursor: The cursor is invalid.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_cursor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GroupsMembersListContinueError"
        }
      }
    }, 
    "GroupAccessType": {
      "type": "object", 
      "description": "Role of a user in group.\nmember: User is a member of the group, but has no special permissions.\nowner: User can rename the group, and add/remove members.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "member", 
            "owner"
          ], 
          "type": "string", 
          "title": "Choice of GroupAccessType"
        }
      }
    }, 
    "SharedLinkChangeVisibilityType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DomainInvitesDeclineRequestToJoinTeamDetails": {
      "type": "object", 
      "description": "Declined user's request to join team.\n", 
      "properties": {}
    }, 
    "FileSaveCopyReferenceType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupsMembersListContinueArg": {
      "type": "object", 
      "description": "cursor: Indicates from what point to get the next set of groups.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Indicates from what point to get the next set of groups."
        }
      }
    }, 
    "TeamProfileChangeDefaultLanguageType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupsListContinueArg": {
      "type": "object", 
      "description": "cursor: Indicates from what point to get the next set of groups.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Indicates from what point to get the next set of groups."
        }
      }
    }, 
    "FileResolveCommentDetails": {
      "type": "object", 
      "description": "Resolved file comment.\ncomment_text: Comment text. Might be missing due to historical data gap.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text. Might be missing due to historical data gap."
        }
      }
    }, 
    "SharedLinkDisableDetails": {
      "type": "object", 
      "description": "Removed shared link.\nshared_link_owner: Shared link owner details. Might be missing due to historical data gap.\n", 
      "properties": {
        "shared_link_owner": {
          "$ref": "#/definitions/UserLogInfo"
        }
      }
    }, 
    "ShowcasePostCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DirectoryRestrictionsRemoveMembersDetails": {
      "type": "object", 
      "description": "Removed members from directory restrictions list.\n", 
      "properties": {}
    }, 
    "SharedContentChangeLinkAudienceDetails": {
      "type": "object", 
      "description": "Changed link audience of shared file/folder.\nnew_value: New link audience value.\nprevious_value: Previous link audience value.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/LinkAudience"
        }, 
        "previous_value": {
          "$ref": "#/definitions/LinkAudience"
        }
      }
    },  
    "RevokeDeviceSessionBatchResult": {
      "type": "object", 
      "description": "revoke_devices_status: None\n", 
      "properties": {
        "revoke_devices_status": {
          "items": {
            "$ref": "#/definitions/RevokeDeviceSessionStatus"
          }, 
          "type": "array"
        }
      }
    }, 
    "TeamFolderTeamSharedDropboxError": {
      "type": "object", 
      "description": "disallowed: This action is not allowed for a shared team root.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disallowed", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderTeamSharedDropboxError"
        }
      }
    }, 
    "DeviceSessionLogInfo": {
      "type": "object", 
      "description": "Device's session logged information.\nip_address: The IP address of the last activity from this session. Might be missing due to historical data gap.\ncreated: The time this session was created. Might be missing due to historical data gap.\nupdated: The time of the last activity from this session. Might be missing due to historical data gap.\n", 
      "properties": {
        "updated": {
          "type": "string", 
          "description": "The time of the last activity from this session. Might be missing due to historical data gap."
        }, 
        "ip_address": {
          "type": "string", 
          "description": "The IP address of the last activity from this session. Might be missing due to historical data gap."
        }, 
        "created": {
          "type": "string", 
          "description": "The time this session was created. Might be missing due to historical data gap."
        }
      }
    }, 
    "DesktopPlatform": {
      "description": "windows: Official Windows Dropbox desktop client.\nmac: Official Mac Dropbox desktop client.\nlinux: Official Linux Dropbox desktop client.\nother: None\n", 
          "enum": [
            "windows", 
            "mac", 
            "linux", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of DesktopPlatform"
    }, 
    "DataPlacementRestrictionChangePolicyDetails": {
      "type": "object", 
      "description": "Set restrictions on data center locations where team data resides.\nprevious_value: Previous placement restriction.\nnew_value: New placement restriction.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/PlacementRestriction"
        }, 
        "previous_value": {
          "$ref": "#/definitions/PlacementRestriction"
        }
      }
    }, 
    "PaperDocUnresolveCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperChangeMemberPolicyDetails": {
      "type": "object", 
      "description": "Changed whether members can share Paper docs outside team, and if docs are accessible only by team members or anyone by default.\nnew_value: New paper external accessibility policy.\nprevious_value: Previous paper external accessibility policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/PaperMemberPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/PaperMemberPolicy"
        }
      }
    }, 
    "TeamFolderListError": {
      "type": "object", 
      "description": "access_error: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/TeamFolderAccessError"
        }
      }
    }, 
    "TeamProfileChangeLogoDetails": {
      "type": "object", 
      "description": "Changed team logo displayed on shared link headers.\n", 
      "properties": {}
    }, 
    "SharedContentChangeInviteeRoleType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TwoAccountChangePolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled option for members to link personal Dropbox account and team account to same computer.\nnew_value: New two account policy.\nprevious_value: Previous two account policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/TwoAccountPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/TwoAccountPolicy"
        }
      }
    }, 
    "AppLinkUserType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },  
    "TokenGetAuthenticatedAdminError": {
      "type": "object", 
      "description": "Error returned by :route:`token/get_authenticated_admin`.\nmapping_not_found: The current token is not associated with a team admin, because mappings were not recorded when the token was created. Consider re-authorizing a new access token to record its authenticating admin.\nadmin_not_active: Either the team admin that authorized this token is no longer an active member of the team or no longer a team admin.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "mapping_not_found", 
            "admin_not_active", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TokenGetAuthenticatedAdminError"
        }
      }
    }, 
    "PaperDocChangeSharingPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ExcludedUsersListContinueArg": {
      "type": "object", 
      "description": "Excluded users list continue argument.\ncursor: Indicates from what point to get the next set of users.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Indicates from what point to get the next set of users."
        }
      }
    }, 
    "FeaturesGetValuesBatchResult": {
      "type": "object", 
      "description": "values: None\n", 
      "properties": {
        "values": {
          "items": {
            "$ref": "#/definitions/FeatureValue"
          }, 
          "type": "array"
        }
      }
    }, 
    "PaperFolderFollowedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DataPlacementRestrictionSatisfyPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperFolderTeamInviteType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentAddInviteesType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamFolderGetInfoItem": {
      "type": "object", 
      "description": "id_not_found: An ID that was provided as a parameter to :route:`team_folder/get_info` did not match any of the team's team folders.\nteam_folder_metadata: Properties of a team folder.\n", 
      "properties": {
        "team_folder_metadata": {
          "$ref": "#/definitions/TeamFolderMetadata"
        }, 
        "id_not_found": {
          "type": "string", 
          "description": "An ID that was provided as a parameter to :route:`team_folder/get_info` did not match any of the team's team folders."
        }, 
        ".tag": {
          "enum": [
            "id_not_found", 
            "team_folder_metadata"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderGetInfoItem"
        }
      }
    }, 
    "PaperContentArchiveType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SsoAddCertDetails": {
      "type": "object", 
      "description": "Added X.509 certificate for SSO.\ncertificate_details: SSO certificate details.\n", 
      "properties": {
        "certificate_details": {
          "$ref": "#/definitions/Certificate"
        }
      }
    }, 
    "TeamFolderMetadata": {
      "type": "object", 
      "description": "Properties of a team folder.\nteam_folder_id: The ID of the team folder.\nname: The name of the team folder.\nstatus: The status of the team folder.\nis_team_shared_dropbox: True if this team folder is a shared team root.\nsync_setting: The sync setting applied to this team folder.\ncontent_sync_settings: Sync settings applied to contents of this team folder.\n", 
      "properties": {
        "status": {
          "$ref": "#/definitions/TeamFolderStatus"
        }, 
        "name": {
          "type": "string", 
          "description": "The name of the team folder."
        }, 
        "team_folder_id": {
          "type": "string", 
          "description": "The ID of the team folder."
        }, 
        "is_team_shared_dropbox": {
          "type": "boolean", 
          "description": "True if this team folder is a shared team root."
        }, 
        "sync_setting": {
          "$ref": "#/definitions/SyncSetting"
        }, 
        "content_sync_settings": {
          "items": {
            "$ref": "#/definitions/ContentSyncSetting"
          }, 
          "type": "array", 
          "description": "Sync settings applied to contents of this team folder."
        }
      }
    }, 
    "SfFbInviteType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupMembersAddError": {
      "type": "object", 
      "description": "group_not_found: No matching group found. No groups match the specified group ID.\nother: None\nsystem_managed_group_disallowed: This operation is not supported on system-managed groups.\nduplicate_user: You cannot add duplicate users. One or more of the members you are trying to add is already a member of the group.\ngroup_not_in_team: Group is not in this team. You cannot add members to a group that is outside of your team.\nmembers_not_in_team: These members are not part of your team. Currently, you cannot add members to a group if they are not part of your team, though this may change in a subsequent version. To add new members to your Dropbox Business team, use the :route:`members/add` endpoint.\nusers_not_found: These users were not found in Dropbox.\nuser_must_be_active_to_be_owner: A suspended user cannot be added to a group as :field:`GroupAccessType.owner`.\nuser_cannot_be_manager_of_company_managed_group: A company-managed group cannot be managed by a user.\n", 
      "properties": {
        "user_cannot_be_manager_of_company_managed_group": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "A company-managed group cannot be managed by a user."
        }, 
        "members_not_in_team": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "These members are not part of your team. Currently, you cannot add members to a group if they are not part of your team, though this may change in a subsequent version. To add new members to your Dropbox Business team, use the :route:`members/add` endpoint."
        }, 
        "users_not_found": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "These users were not found in Dropbox."
        }, 
        ".tag": {
          "enum": [
            "group_not_found", 
            "other", 
            "system_managed_group_disallowed", 
            "duplicate_user", 
            "group_not_in_team", 
            "members_not_in_team", 
            "users_not_found", 
            "user_must_be_active_to_be_owner", 
            "user_cannot_be_manager_of_company_managed_group"
          ], 
          "type": "string", 
          "title": "Choice of GroupMembersAddError"
        }
      }
    }, 
    "TfaRemoveBackupPhoneType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupRemoveExternalIdType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SsoAddLoginUrlDetails": {
      "type": "object", 
      "description": "Added sign-in URL for SSO.\nnew_value: New single sign-on login URL.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "New single sign-on login URL."
        }
      }
    }, 
    "DataPlacementRestrictionSatisfyPolicyDetails": {
      "type": "object", 
      "description": "Completed restrictions on data center locations where team data resides.\nplacement_restriction: Placement restriction.\n", 
      "properties": {
        "placement_restriction": {
          "$ref": "#/definitions/PlacementRestriction"
        }
      }
    }, 
    "SharedFolderChangeMembersInheritancePolicyDetails": {
      "type": "object", 
      "description": "Changed whether shared folder inherits members from parent folder.\nnew_value: New member inheritance policy.\nprevious_value: Previous member inheritance policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SharedFolderMembersInheritancePolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SharedFolderMembersInheritancePolicy"
        }
      }
    }, 
    "DeviceDeleteOnUnlinkSuccessDetails": {
      "type": "object", 
      "description": "Deleted all files from unlinked device.\nsession_info: Session unique id. Might be missing due to historical data gap.\ndisplay_name: The device name. Might be missing due to historical data gap.\n", 
      "properties": {
        "display_name": {
          "type": "string", 
          "description": "The device name. Might be missing due to historical data gap."
        }, 
        "session_info": {
          "$ref": "#/definitions/SessionLogInfo"
        }
      }
    }, 
    "SsoChangeLogoutUrlDetails": {
      "type": "object", 
      "description": "Changed sign-out URL for SSO.\nprevious_value: Previous single sign-on logout URL. Might be missing due to historical data gap.\nnew_value: New single sign-on logout URL. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "New single sign-on logout URL. Might be missing due to historical data gap."
        }, 
        "previous_value": {
          "type": "string", 
          "description": "Previous single sign-on logout URL. Might be missing due to historical data gap."
        }
      }
    }, 
    "MembersGetInfoItem": {
      "type": "object", 
      "description": "Describes a result obtained for a single user whose id was specified in the parameter of :route:`members/get_info`.\nid_not_found: An ID that was provided as a parameter to :route:`members/get_info`, and did not match a corresponding user. This might be a team_member_id, an email, or an external ID, depending on how the method was called.\nmember_info: Info about a team member.\n", 
      "properties": {
        "member_info": {
          "$ref": "#/definitions/TeamMemberInformation"
        }, 
        "id_not_found": {
          "type": "string", 
          "description": "An ID that was provided as a parameter to :route:`members/get_info`, and did not match a corresponding user. This might be a team_member_id, an email, or an external ID, depending on how the method was called."
        }, 
        ".tag": {
          "enum": [
            "id_not_found", 
            "member_info"
          ], 
          "type": "string", 
          "title": "Choice of MembersGetInfoItem"
        }
      }
    }, 
    "ExcludedUsersListResult": {
      "type": "object", 
      "description": "Excluded users list result.\nusers: None\nhas_more: Is true if there are additional excluded users that have not been returned yet. An additional call to :route:`member_space_limits/excluded_users/list/continue` can retrieve them.\ncursor: Pass the cursor into :route:`member_space_limits/excluded_users/list/continue` to obtain additional excluded users.\n", 
      "properties": {
        "has_more": {
          "type": "boolean", 
          "description": "Is true if there are additional excluded users that have not been returned yet. An additional call to :route:`member_space_limits/excluded_users/list/continue` can retrieve them."
        }, 
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`member_space_limits/excluded_users/list/continue` to obtain additional excluded users."
        }, 
        "users": {
          "items": {
            "$ref": "#/definitions/MemberProfile"
          }, 
          "type": "array"
        }
      }
    }, 
    "GroupMovedDetails": {
      "type": "object", 
      "description": "Moved group.\n", 
      "properties": {}
    }, 
    "PaperDocFollowedDetails": {
      "type": "object", 
      "description": "Followed Paper doc.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "SharedFolderChangeLinkPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfTeamInviteChangeRoleDetails": {
      "type": "object", 
      "description": "Changed team member's role in shared folder.\ntarget_asset_index: Target asset position in the Assets list.\noriginal_folder_name: Original shared folder name.\nnew_sharing_permission: New sharing permission. Might be missing due to historical data gap.\nprevious_sharing_permission: Previous sharing permission. Might be missing due to historical data gap.\n", 
      "properties": {
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "original_folder_name": {
          "type": "string", 
          "description": "Original shared folder name."
        }, 
        "new_sharing_permission": {
          "type": "string", 
          "description": "New sharing permission. Might be missing due to historical data gap."
        }, 
        "previous_sharing_permission": {
          "type": "string", 
          "description": "Previous sharing permission. Might be missing due to historical data gap."
        }
      }
    }, 
    "SsoChangeCertType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberProfile": {
      "type": "object", 
      "description": "Basic member profile.\nteam_member_id: ID of user as a member of a team.\nemail: Email address of user.\nemail_verified: Is true if the user's email is verified to be owned by the user.\nstatus: The user's status as a member of a specific team.\nname: Representations for a person's name.\nmembership_type: The user's membership type: full (normal team member) vs limited (does not use a license; no access to the team's shared quota).\nexternal_id: External ID that a team can attach to the user. An application using the API may find it easier to use their own IDs instead of Dropbox IDs like account_id or team_member_id.\naccount_id: A user's account identifier.\njoined_on: The date and time the user joined as a member of a specific team.\npersistent_id: Persistent ID that a team can attach to the user. The persistent ID is unique ID to be used for SAML authentication.\nis_directory_restricted: Whether the user is a directory restricted user.\n", 
      "properties": {
        "team_member_id": {
          "type": "string", 
          "description": "ID of user as a member of a team."
        },
        "email": {
          "type": "string", 
          "description": "Email address of user."
        },
        "email_verified": {
          "type": "boolean", 
          "description": "Is true if the user's email is verified to be owned by the user."
        }, 
        "status": {
          "$ref": "#/definitions/TeamMemberStatus"
        },
        "name": {
          "$ref": "#/definitions/Name"
        }, 
        "membership_type": {
          "$ref": "#/definitions/TeamMembershipType"
        },
        "external_id": {
          "type": "string", 
          "description": "External ID that a team can attach to the user. An application using the API may find it easier to use their own IDs instead of Dropbox IDs like account_id or team_member_id."
        },
        "account_id": {
          "type": "string", 
          "description": "A user's account identifier."
        },
        "secondary_emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecondaryEmail"
          }
        },
        "invited_on": {
          "type": "string", 
          "description": "The date and time the user was invited to the team."
        },
        "joined_on": {
          "type": "string", 
          "description": "The date and time the user joined as a member of a specific team."
        },
        "suspended_on": {
          "type": "string", 
          "description": "The date and time the user was suspended from the team."
        }, 
        "is_directory_restricted": {
          "type": "boolean", 
          "description": "Whether the user is a directory restricted user."
        },          
        "persistent_id": {
          "type": "string", 
          "description": "Persistent ID that a team can attach to the user. The persistent ID is unique ID to be used for SAML authentication."
        },
        "profile_photo_url": {
          "type": "string", 
          "description": "URL for the photo representing the user, if one is set."
        }
      }
    }, 
    "AppUnlinkUserDetails": {
      "type": "object", 
      "description": "Unlinked app for member.\napp_info: Relevant application details.\n", 
      "properties": {
        "app_info": {
          "$ref": "#/definitions/AppLogInfo"
        }
      }
    }, 
    "IdentifierType": {
      "type": "object", 
      "description": "email: None\nfacebook_profile_name: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "email", 
            "facebook_profile_name", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of IdentifierType"
        }
      }
    }, 
    "TeamFolderListArg": {
      "type": "object", 
      "description": "limit: The maximum number of results to return per request.\n", 
      "properties": {
        "limit": {
          "type": "integer", 
          "description": "The maximum number of results to return per request."
        }
      }
    }, 
    "GoogleSsoPolicy": {
      "type": "object", 
      "description": "Google SSO policy\ndisabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GoogleSsoPolicy"
        }
      }
    }, 
    "SharedFolderCreateType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupDeleteError": {
      "type": "object", 
      "description": "group_not_found: No matching group found. No groups match the specified group ID.\nother: None\nsystem_managed_group_disallowed: This operation is not supported on system-managed groups.\ngroup_already_deleted: This group has already been deleted.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "group_not_found", 
            "other", 
            "system_managed_group_disallowed", 
            "group_already_deleted"
          ], 
          "type": "string", 
          "title": "Choice of GroupDeleteError"
        }
      }
    }, 
    "ContextLogInfo": {
      "type": "object", 
      "description": "The primary entity on which the action was done.\nteam_member: Action was done on behalf of a team member.\nnon_team_member: Action was done on behalf of a non team member.\nanonymous: Anonymous context.\nteam: Action was done on behalf of the team.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "team_member", 
            "non_team_member", 
            "anonymous", 
            "team", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ContextLogInfo"
        }, 
        "non_team_member": {
          "$ref": "#/definitions/NonTeamMemberLogInfo"
        }, 
        "team_member": {
          "$ref": "#/definitions/TeamMemberLogInfo"
        }
      }
    }, 
    "DirectoryRestrictionsAddMembersType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamFolderDowngradeType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PasswordChangeType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "AllowDownloadDisabledDetails": {
      "type": "object", 
      "description": "Disabled downloads.\n", 
      "properties": {}
    }, 
    "MemberSpaceLimitsChangeCapsTypePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberChangeAdminRoleType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileRequestChangeDetails": {
      "type": "object", 
      "description": "Changed file request.\nnew_details: New file request details.\nfile_request_id: File request id. Might be missing due to historical data gap.\nprevious_details: Previous file request details. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_details": {
          "$ref": "#/definitions/FileRequestDetails"
        }, 
        "file_request_id": {
          "type": "string", 
          "description": "File request id. Might be missing due to historical data gap."
        }, 
        "previous_details": {
          "$ref": "#/definitions/FileRequestDetails"
        }
      }
    }, 
    "PaperDocEditDetails": {
      "type": "object", 
      "description": "Edited Paper doc.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    },  
    "TeamFolderChangeStatusType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberSpaceLimitsRemoveCustomQuotaDetails": {
      "type": "object", 
      "description": "Removed custom member space limit.\n", 
      "properties": {}
    }, 
    "ShowcaseUntrashedDeprecatedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentChangeDownloadsPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupCreateError": {
      "type": "object", 
      "description": "group_name_already_used: The requested group name is already being used by another group.\ngroup_name_invalid: Group name is empty or has invalid characters.\nexternal_id_already_in_use: The requested external ID is already being used by another group.\nsystem_managed_group_disallowed: System-managed group cannot be manually created.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "group_name_already_used", 
            "group_name_invalid", 
            "external_id_already_in_use", 
            "system_managed_group_disallowed", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GroupCreateError"
        }
      }
    }, 
    "TeamProfileRemoveLogoType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TfaAddSecurityKeyDetails": {
      "type": "object", 
      "description": "Added security key for two-step verification.\n", 
      "properties": {}
    }, 
    "SharedContentViewType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseDocumentLogInfo": {
      "type": "object", 
      "description": "Showcase document's logged information.\nshowcase_id: Showcase document Id.\nshowcase_title: Showcase document title.\n", 
      "properties": {
        "showcase_id": {
          "type": "string", 
          "description": "Showcase document Id."
        }, 
        "showcase_title": {
          "type": "string", 
          "description": "Showcase document title."
        }
      }
    }, 
    "GroupMemberSetAccessTypeError": {
      "type": "object", 
      "description": "group_not_found: No matching group found. No groups match the specified group ID.\nother: None\nsystem_managed_group_disallowed: This operation is not supported on system-managed groups.\nmember_not_in_group: The specified user is not a member of this group.\nuser_cannot_be_manager_of_company_managed_group: A company managed group cannot be managed by a user.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "group_not_found", 
            "other", 
            "system_managed_group_disallowed", 
            "member_not_in_group", 
            "user_cannot_be_manager_of_company_managed_group"
          ], 
          "type": "string", 
          "title": "Choice of GroupMemberSetAccessTypeError"
        }
      }
    }, 
    "PaperDocEditCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MembersListError": {
      "type": "object", 
      "description": "other: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MembersListError"
        }
      }
    }, 
    "GroupsListArg": {
      "type": "object", 
      "description": "limit: Number of results to return per call.\n", 
      "properties": {
        "limit": {
          "type": "integer", 
          "description": "Number of results to return per call."
        }
      }
    }, 
    "GroupRemoveExternalIdDetails": {
      "type": "object", 
      "description": "Removed external ID for group.\nprevious_value: Old external id.\n", 
      "properties": {
        "previous_value": {
          "type": "string", 
          "description": "Old external id."
        }
      }
    }, 
    "DomainVerificationRemoveDomainDetails": {
      "type": "object", 
      "description": "Removed domain from list of verified team domains.\ndomain_names: Domain names.\n", 
      "properties": {
        "domain_names": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Domain names."
        }
      }
    }, 
    "DeviceChangeIpDesktopDetails": {
      "type": "object", 
      "description": "Changed IP address associated with active desktop session.\ndevice_session_info: Device's session logged information.\n", 
      "properties": {
        "device_session_info": {
          "$ref": "#/definitions/DeviceSessionLogInfo"
        }
      }
    }, 
    "AssetLogInfo": {
      "type": "object", 
      "description": "Asset details.\nfile: File's details.\nfolder: Folder's details.\npaper_document: Paper docuement's details.\npaper_folder: Paper folder's details.\nshowcase_document: Showcase document's details.\nother: None\n", 
      "properties": {
        "showcase_document": {
          "$ref": "#/definitions/ShowcaseDocumentLogInfo"
        }, 
        ".tag": {
          "enum": [
            "file", 
            "folder", 
            "paper_document", 
            "paper_folder", 
            "showcase_document", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of AssetLogInfo"
        }, 
        "file": {
          "$ref": "#/definitions/FileLogInfo"
        }, 
        "paper_document": {
          "$ref": "#/definitions/PaperDocumentLogInfo"
        }, 
        "folder": {
          "$ref": "#/definitions/FolderLogInfo"
        }, 
        "paper_folder": {
          "$ref": "#/definitions/PaperFolderLogInfo"
        }
      }
    }, 
    "SharedLinkViewType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedFolderUnmountDetails": {
      "type": "object", 
      "description": "Deleted shared folder from Dropbox.\n", 
      "properties": {}
    }, 
    "TeamName": {
      "type": "object", 
      "description": "Team name details\nteam_display_name: Team's display name.\nteam_legal_name: Team's legal name.\n", 
      "properties": {
        "team_legal_name": {
          "type": "string", 
          "description": "Team's legal name."
        }, 
        "team_display_name": {
          "type": "string", 
          "description": "Team's display name."
        }
      }
    }, 
    "ShowcaseCreatedDetails": {
      "type": "object", 
      "description": "Created showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "HasTeamSelectiveSyncValue": {
      "type": "object", 
      "description": "The value for :field:`Feature.has_team_selective_sync`.\nhas_team_selective_sync: Does this team have team selective sync enabled.\nother: None\n", 
      "properties": {
        "has_team_selective_sync": {
          "type": "boolean", 
          "description": "Does this team have team selective sync enabled."
        }, 
        ".tag": {
          "enum": [
            "has_team_selective_sync", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of HasTeamSelectiveSyncValue"
        }
      }
    }, 
    "FileUnresolveCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfTeamJoinFromOobLinkDetails": {
      "type": "object", 
      "description": "Joined team member's shared folder from link.\ntarget_asset_index: Target asset position in the Assets list.\noriginal_folder_name: Original shared folder name.\ntoken_key: Shared link token key.\nsharing_permission: Sharing permission. Might be missing due to historical data gap.\n", 
      "properties": {
        "sharing_permission": {
          "type": "string", 
          "description": "Sharing permission. Might be missing due to historical data gap."
        }, 
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "original_folder_name": {
          "type": "string", 
          "description": "Original shared folder name."
        }, 
        "token_key": {
          "type": "string", 
          "description": "Shared link token key."
        }
      }
    }, 
    "RevokeLinkedAppError": {
      "type": "object", 
      "description": "Error returned by :route:`linked_apps/revoke_linked_app`.\napp_not_found: Application not found.\nmember_not_found: Member not found.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "app_not_found", 
            "member_not_found", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of RevokeLinkedAppError"
        }
      }
    }, 
    "ShmodelGroupShareDetails": {
      "type": "object", 
      "description": "Shared link with group.\n", 
      "properties": {}
    }, 
    "ListMemberDevicesResult": {
      "type": "object", 
      "description": "active_web_sessions: List of web sessions made by this team member.\ndesktop_client_sessions: List of desktop clients used by this team member.\nmobile_client_sessions: List of mobile client used by this team member.\n", 
      "properties": {
        "desktop_client_sessions": {
          "items": {
            "$ref": "#/definitions/DesktopClientSession"
          }, 
          "type": "array", 
          "description": "List of desktop clients used by this team member."
        }, 
        "mobile_client_sessions": {
          "items": {
            "$ref": "#/definitions/MobileClientSession"
          }, 
          "type": "array", 
          "description": "List of mobile client used by this team member."
        }, 
        "active_web_sessions": {
          "items": {
            "$ref": "#/definitions/ActiveWebSession"
          }, 
          "type": "array", 
          "description": "List of web sessions made by this team member."
        }
      }
    }, 
    "FileEditDetails": {
      "type": "object", 
      "description": "Edited files.\n", 
      "properties": {}
    }, 
    "SfTeamInviteDetails": {
      "type": "object", 
      "description": "Invited team members to shared folder.\ntarget_asset_index: Target asset position in the Assets list.\noriginal_folder_name: Original shared folder name.\nsharing_permission: Sharing permission. Might be missing due to historical data gap.\n", 
      "properties": {
        "sharing_permission": {
          "type": "string", 
          "description": "Sharing permission. Might be missing due to historical data gap."
        }, 
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "original_folder_name": {
          "type": "string", 
          "description": "Original shared folder name."
        }
      }
    }, 
    "FileRollbackChangesDetails": {
      "type": "object", 
      "description": "Rolled back file actions.\n", 
      "properties": {}
    }, 
    "SmartSyncPolicy": {
      "type": "object", 
      "description": "local: The specified content will be synced as local files by default.\non_demand: The specified content will be synced as on-demand files by default.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "local", 
            "on_demand", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SmartSyncPolicy"
        }
      }
    }, 
    "SharedContentCopyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "NoteShareReceiveDetails": {
      "type": "object", 
      "description": "Shared received Paper doc.\n", 
      "properties": {}
    }, 
    "DisabledDomainInvitesType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperDocEditCommentDetails": {
      "type": "object", 
      "description": "Edited Paper doc comment.\nevent_uuid: Event unique identifier.\ncomment_text: Comment text. Might be missing due to historical data gap.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text. Might be missing due to historical data gap."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ExcludedUsersListError": {
      "type": "object", 
      "description": "Excluded users list error.\nlist_error: An error occurred.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "list_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ExcludedUsersListError"
        }
      }
    }, 
    "AccountCaptureMigrateAccountDetails": {
      "type": "object", 
      "description": "Account-captured user migrated account to team.\ndomain_name: Domain name.\n", 
      "properties": {
        "domain_name": {
          "type": "string", 
          "description": "Domain name."
        }
      }
    }, 
    "SecondaryMailsPolicyChangedDetails": {
      "type": "object", 
      "description": "Secondary mails policy changed.\nprevious_value: Previous secondary mails policy.\nnew_value: New secondary mails policy.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SecondaryMailsPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SecondaryMailsPolicy"
        }
      }
    }, 
    "MemberRemoveActionType": {
      "type": "object", 
      "description": "delete: None\noffboard: None\nleave: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "delete", 
            "offboard", 
            "leave", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MemberRemoveActionType"
        }
      }
    }, 
    "TeamFolderPermanentlyDeleteDetails": {
      "type": "object", 
      "description": "Permanently deleted archived team folder.\n", 
      "properties": {}
    }, 
    "SharedContentUnshareType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceDeleteOnUnlinkFailType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "LogoutType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperDocRevertDetails": {
      "type": "object", 
      "description": "Restored Paper doc to previous version.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "CollectionShareDetails": {
      "type": "object", 
      "description": "Shared album.\nalbum_name: Album name.\n", 
      "properties": {
        "album_name": {
          "type": "string", 
          "description": "Album name."
        }
      }
    }, 
    "SharedFolderDeclineInvitationDetails": {
      "type": "object", 
      "description": "Declined team member's invite to shared folder.\n", 
      "properties": {}
    }, 
    "SharedFolderNestDetails": {
      "type": "object", 
      "description": "Changed parent of shared folder.\nprevious_parent_ns_id: Previous parent namespace ID. Might be missing due to historical data gap.\nnew_parent_ns_id: New parent namespace ID. Might be missing due to historical data gap.\n", 
      "properties": {
        "previous_parent_ns_id": {
          "type": "string", 
          "description": "Previous parent namespace ID. Might be missing due to historical data gap."
        }, 
        "new_parent_ns_id": {
          "type": "string", 
          "description": "New parent namespace ID. Might be missing due to historical data gap."
        }
      }
    }, 
    "EventDetails": {
      "type": "object", 
      "description": "Additional fields depending on the event type.\napp_link_team_details: None\napp_link_user_details: None\napp_unlink_team_details: None\napp_unlink_user_details: None\nfile_add_comment_details: None\nfile_change_comment_subscription_details: None\nfile_delete_comment_details: None\nfile_like_comment_details: None\nfile_resolve_comment_details: None\nfile_unlike_comment_details: None\nfile_unresolve_comment_details: None\ndevice_change_ip_desktop_details: None\ndevice_change_ip_mobile_details: None\ndevice_change_ip_web_details: None\ndevice_delete_on_unlink_fail_details: None\ndevice_delete_on_unlink_success_details: None\ndevice_link_fail_details: None\ndevice_link_success_details: None\ndevice_management_disabled_details: None\ndevice_management_enabled_details: None\ndevice_unlink_details: None\nemm_refresh_auth_token_details: None\naccount_capture_change_availability_details: None\naccount_capture_migrate_account_details: None\naccount_capture_notification_emails_sent_details: None\naccount_capture_relinquish_account_details: None\ndisabled_domain_invites_details: None\ndomain_invites_approve_request_to_join_team_details: None\ndomain_invites_decline_request_to_join_team_details: None\ndomain_invites_email_existing_users_details: None\ndomain_invites_request_to_join_team_details: None\ndomain_invites_set_invite_new_user_pref_to_no_details: None\ndomain_invites_set_invite_new_user_pref_to_yes_details: None\ndomain_verification_add_domain_fail_details: None\ndomain_verification_add_domain_success_details: None\ndomain_verification_remove_domain_details: None\nenabled_domain_invites_details: None\ncreate_folder_details: None\nfile_add_details: None\nfile_copy_details: None\nfile_delete_details: None\nfile_download_details: None\nfile_edit_details: None\nfile_get_copy_reference_details: None\nfile_move_details: None\nfile_permanently_delete_details: None\nfile_preview_details: None\nfile_rename_details: None\nfile_restore_details: None\nfile_revert_details: None\nfile_rollback_changes_details: None\nfile_save_copy_reference_details: None\nfile_request_change_details: None\nfile_request_close_details: None\nfile_request_create_details: None\nfile_request_receive_file_details: None\ngroup_add_external_id_details: None\ngroup_add_member_details: None\ngroup_change_external_id_details: None\ngroup_change_management_type_details: None\ngroup_change_member_role_details: None\ngroup_create_details: None\ngroup_delete_details: None\ngroup_description_updated_details: None\ngroup_join_policy_updated_details: None\ngroup_moved_details: None\ngroup_remove_external_id_details: None\ngroup_remove_member_details: None\ngroup_rename_details: None\nemm_error_details: None\nlogin_fail_details: None\nlogin_success_details: None\nlogout_details: None\nreseller_support_session_end_details: None\nreseller_support_session_start_details: None\nsign_in_as_session_end_details: None\nsign_in_as_session_start_details: None\nsso_error_details: None\nmember_add_name_details: None\nmember_change_admin_role_details: None\nmember_change_email_details: None\nmember_change_membership_type_details: None\nmember_change_name_details: None\nmember_change_status_details: None\nmember_permanently_delete_account_contents_details: None\nmember_space_limits_add_custom_quota_details: None\nmember_space_limits_change_custom_quota_details: None\nmember_space_limits_change_status_details: None\nmember_space_limits_remove_custom_quota_details: None\nmember_suggest_details: None\nmember_transfer_account_contents_details: None\nsecondary_mails_policy_changed_details: None\npaper_content_add_member_details: None\npaper_content_add_to_folder_details: None\npaper_content_archive_details: None\npaper_content_create_details: None\npaper_content_permanently_delete_details: None\npaper_content_remove_from_folder_details: None\npaper_content_remove_member_details: None\npaper_content_rename_details: None\npaper_content_restore_details: None\npaper_doc_add_comment_details: None\npaper_doc_change_member_role_details: None\npaper_doc_change_sharing_policy_details: None\npaper_doc_change_subscription_details: None\npaper_doc_deleted_details: None\npaper_doc_delete_comment_details: None\npaper_doc_download_details: None\npaper_doc_edit_details: None\npaper_doc_edit_comment_details: None\npaper_doc_followed_details: None\npaper_doc_mention_details: None\npaper_doc_request_access_details: None\npaper_doc_resolve_comment_details: None\npaper_doc_revert_details: None\npaper_doc_slack_share_details: None\npaper_doc_team_invite_details: None\npaper_doc_trashed_details: None\npaper_doc_unresolve_comment_details: None\npaper_doc_untrashed_details: None\npaper_doc_view_details: None\npaper_external_view_allow_details: None\npaper_external_view_default_team_details: None\npaper_external_view_forbid_details: None\npaper_folder_change_subscription_details: None\npaper_folder_deleted_details: None\npaper_folder_followed_details: None\npaper_folder_team_invite_details: None\npassword_change_details: None\npassword_reset_details: None\npassword_reset_all_details: None\nemm_create_exceptions_report_details: None\nemm_create_usage_report_details: None\nexport_members_report_details: None\npaper_admin_export_start_details: None\nsmart_sync_create_admin_privilege_report_details: None\nteam_activity_create_report_details: None\ncollection_share_details: None\nnote_acl_invite_only_details: None\nnote_acl_link_details: None\nnote_acl_team_link_details: None\nnote_shared_details: None\nnote_share_receive_details: None\nopen_note_shared_details: None\nsf_add_group_details: None\nsf_allow_non_members_to_view_shared_links_details: None\nsf_external_invite_warn_details: None\nsf_fb_invite_details: None\nsf_fb_invite_change_role_details: None\nsf_fb_uninvite_details: None\nsf_invite_group_details: None\nsf_team_grant_access_details: None\nsf_team_invite_details: None\nsf_team_invite_change_role_details: None\nsf_team_join_details: None\nsf_team_join_from_oob_link_details: None\nsf_team_uninvite_details: None\nshared_content_add_invitees_details: None\nshared_content_add_link_expiry_details: None\nshared_content_add_link_password_details: None\nshared_content_add_member_details: None\nshared_content_change_downloads_policy_details: None\nshared_content_change_invitee_role_details: None\nshared_content_change_link_audience_details: None\nshared_content_change_link_expiry_details: None\nshared_content_change_link_password_details: None\nshared_content_change_member_role_details: None\nshared_content_change_viewer_info_policy_details: None\nshared_content_claim_invitation_details: None\nshared_content_copy_details: None\nshared_content_download_details: None\nshared_content_relinquish_membership_details: None\nshared_content_remove_invitees_details: None\nshared_content_remove_link_expiry_details: None\nshared_content_remove_link_password_details: None\nshared_content_remove_member_details: None\nshared_content_request_access_details: None\nshared_content_unshare_details: None\nshared_content_view_details: None\nshared_folder_change_link_policy_details: None\nshared_folder_change_members_inheritance_policy_details: None\nshared_folder_change_members_management_policy_details: None\nshared_folder_change_members_policy_details: None\nshared_folder_create_details: None\nshared_folder_decline_invitation_details: None\nshared_folder_mount_details: None\nshared_folder_nest_details: None\nshared_folder_transfer_ownership_details: None\nshared_folder_unmount_details: None\nshared_link_add_expiry_details: None\nshared_link_change_expiry_details: None\nshared_link_change_visibility_details: None\nshared_link_copy_details: None\nshared_link_create_details: None\nshared_link_disable_details: None\nshared_link_download_details: None\nshared_link_remove_expiry_details: None\nshared_link_share_details: None\nshared_link_view_details: None\nshared_note_opened_details: None\nshmodel_group_share_details: None\nshowcase_access_granted_details: None\nshowcase_add_member_details: None\nshowcase_archived_details: None\nshowcase_created_details: None\nshowcase_delete_comment_details: None\nshowcase_edited_details: None\nshowcase_edit_comment_details: None\nshowcase_file_added_details: None\nshowcase_file_download_details: None\nshowcase_file_removed_details: None\nshowcase_file_view_details: None\nshowcase_permanently_deleted_details: None\nshowcase_post_comment_details: None\nshowcase_remove_member_details: None\nshowcase_renamed_details: None\nshowcase_request_access_details: None\nshowcase_resolve_comment_details: None\nshowcase_restored_details: None\nshowcase_trashed_details: None\nshowcase_trashed_deprecated_details: None\nshowcase_unresolve_comment_details: None\nshowcase_untrashed_details: None\nshowcase_untrashed_deprecated_details: None\nshowcase_view_details: None\nsso_add_cert_details: None\nsso_add_login_url_details: None\nsso_add_logout_url_details: None\nsso_change_cert_details: None\nsso_change_login_url_details: None\nsso_change_logout_url_details: None\nsso_change_saml_identity_mode_details: None\nsso_remove_cert_details: None\nsso_remove_login_url_details: None\nsso_remove_logout_url_details: None\nteam_folder_change_status_details: None\nteam_folder_create_details: None\nteam_folder_downgrade_details: None\nteam_folder_permanently_delete_details: None\nteam_folder_rename_details: None\nteam_selective_sync_settings_changed_details: None\naccount_capture_change_policy_details: None\nallow_download_disabled_details: None\nallow_download_enabled_details: None\ndata_placement_restriction_change_policy_details: None\ndata_placement_restriction_satisfy_policy_details: None\ndevice_approvals_change_desktop_policy_details: None\ndevice_approvals_change_mobile_policy_details: None\ndevice_approvals_change_overage_action_details: None\ndevice_approvals_change_unlink_action_details: None\ndirectory_restrictions_add_members_details: None\ndirectory_restrictions_remove_members_details: None\nemm_add_exception_details: None\nemm_change_policy_details: None\nemm_remove_exception_details: None\nextended_version_history_change_policy_details: None\nfile_comments_change_policy_details: None\nfile_requests_change_policy_details: None\nfile_requests_emails_enabled_details: None\nfile_requests_emails_restricted_to_team_only_details: None\ngoogle_sso_change_policy_details: None\ngroup_user_management_change_policy_details: None\nmember_requests_change_policy_details: None\nmember_space_limits_add_exception_details: None\nmember_space_limits_change_caps_type_policy_details: None\nmember_space_limits_change_policy_details: None\nmember_space_limits_remove_exception_details: None\nmember_suggestions_change_policy_details: None\nmicrosoft_office_addin_change_policy_details: None\nnetwork_control_change_policy_details: None\npaper_change_deployment_policy_details: None\npaper_change_member_link_policy_details: None\npaper_change_member_policy_details: None\npaper_change_policy_details: None\npaper_enabled_users_group_addition_details: None\npaper_enabled_users_group_removal_details: None\npermanent_delete_change_policy_details: None\nsharing_change_folder_join_policy_details: None\nsharing_change_link_policy_details: None\nsharing_change_member_policy_details: None\nshowcase_change_download_policy_details: None\nshowcase_change_enabled_policy_details: None\nshowcase_change_external_sharing_policy_details: None\nsmart_sync_change_policy_details: None\nsmart_sync_not_opt_out_details: None\nsmart_sync_opt_out_details: None\nsso_change_policy_details: None\ntfa_change_policy_details: None\ntwo_account_change_policy_details: None\nweb_sessions_change_fixed_length_policy_details: None\nweb_sessions_change_idle_length_policy_details: None\nteam_merge_from_details: None\nteam_merge_to_details: None\nteam_profile_add_logo_details: None\nteam_profile_change_default_language_details: None\nteam_profile_change_logo_details: None\nteam_profile_change_name_details: None\nteam_profile_remove_logo_details: None\ntfa_add_backup_phone_details: None\ntfa_add_security_key_details: None\ntfa_change_backup_phone_details: None\ntfa_change_status_details: None\ntfa_remove_backup_phone_details: None\ntfa_remove_security_key_details: None\ntfa_reset_details: None\nmissing_details: Hints that this event was returned with missing details due to an internal error.\nother: None\n", 
      "properties": {
        "open_note_shared_details": {
          "$ref": "#/definitions/OpenNoteSharedDetails"
        }, 
        "group_create_details": {
          "$ref": "#/definitions/GroupCreateDetails"
        }, 
        "network_control_change_policy_details": {
          "$ref": "#/definitions/NetworkControlChangePolicyDetails"
        }, 
        "shared_note_opened_details": {
          "$ref": "#/definitions/SharedNoteOpenedDetails"
        }, 
        "device_link_success_details": {
          "$ref": "#/definitions/DeviceLinkSuccessDetails"
        }, 
        "sf_fb_uninvite_details": {
          "$ref": "#/definitions/SfFbUninviteDetails"
        }, 
        "showcase_add_member_details": {
          "$ref": "#/definitions/ShowcaseAddMemberDetails"
        }, 
        "sf_fb_invite_details": {
          "$ref": "#/definitions/SfFbInviteDetails"
        }, 
        "domain_verification_remove_domain_details": {
          "$ref": "#/definitions/DomainVerificationRemoveDomainDetails"
        }, 
        "paper_change_deployment_policy_details": {
          "$ref": "#/definitions/PaperChangeDeploymentPolicyDetails"
        }, 
        "paper_enabled_users_group_addition_details": {
          "$ref": "#/definitions/PaperEnabledUsersGroupAdditionDetails"
        }, 
        "shared_folder_create_details": {
          "$ref": "#/definitions/SharedFolderCreateDetails"
        }, 
        "file_request_change_details": {
          "$ref": "#/definitions/FileRequestChangeDetails"
        }, 
        "paper_folder_deleted_details": {
          "$ref": "#/definitions/PaperFolderDeletedDetails"
        }, 
        "paper_folder_followed_details": {
          "$ref": "#/definitions/PaperFolderFollowedDetails"
        }, 
        "extended_version_history_change_policy_details": {
          "$ref": "#/definitions/ExtendedVersionHistoryChangePolicyDetails"
        }, 
        "group_remove_member_details": {
          "$ref": "#/definitions/GroupRemoveMemberDetails"
        }, 
        "file_request_close_details": {
          "$ref": "#/definitions/FileRequestCloseDetails"
        }, 
        "sf_team_join_from_oob_link_details": {
          "$ref": "#/definitions/SfTeamJoinFromOobLinkDetails"
        }, 
        "shared_link_create_details": {
          "$ref": "#/definitions/SharedLinkCreateDetails"
        }, 
        "google_sso_change_policy_details": {
          "$ref": "#/definitions/GoogleSsoChangePolicyDetails"
        }, 
        "shared_folder_transfer_ownership_details": {
          "$ref": "#/definitions/SharedFolderTransferOwnershipDetails"
        }, 
        "showcase_remove_member_details": {
          "$ref": "#/definitions/ShowcaseRemoveMemberDetails"
        }, 
        "domain_verification_add_domain_fail_details": {
          "$ref": "#/definitions/DomainVerificationAddDomainFailDetails"
        }, 
        "team_merge_from_details": {
          "$ref": "#/definitions/TeamMergeFromDetails"
        }, 
        "shared_content_change_downloads_policy_details": {
          "$ref": "#/definitions/SharedContentChangeDownloadsPolicyDetails"
        }, 
        "directory_restrictions_add_members_details": {
          "$ref": "#/definitions/DirectoryRestrictionsAddMembersDetails"
        }, 
        "showcase_file_added_details": {
          "$ref": "#/definitions/ShowcaseFileAddedDetails"
        }, 
        "showcase_untrashed_deprecated_details": {
          "$ref": "#/definitions/ShowcaseUntrashedDeprecatedDetails"
        }, 
        "file_comments_change_policy_details": {
          "$ref": "#/definitions/FileCommentsChangePolicyDetails"
        }, 
        "allow_download_enabled_details": {
          "$ref": "#/definitions/AllowDownloadEnabledDetails"
        }, 
        "device_delete_on_unlink_fail_details": {
          "$ref": "#/definitions/DeviceDeleteOnUnlinkFailDetails"
        }, 
        "sharing_change_folder_join_policy_details": {
          "$ref": "#/definitions/SharingChangeFolderJoinPolicyDetails"
        }, 
        "member_space_limits_change_policy_details": {
          "$ref": "#/definitions/MemberSpaceLimitsChangePolicyDetails"
        }, 
        "sso_remove_logout_url_details": {
          "$ref": "#/definitions/SsoRemoveLogoutUrlDetails"
        }, 
        "tfa_add_security_key_details": {
          "$ref": "#/definitions/TfaAddSecurityKeyDetails"
        }, 
        "shared_content_change_link_password_details": {
          "$ref": "#/definitions/SharedContentChangeLinkPasswordDetails"
        }, 
        "shared_folder_change_link_policy_details": {
          "$ref": "#/definitions/SharedFolderChangeLinkPolicyDetails"
        }, 
        "tfa_change_backup_phone_details": {
          "$ref": "#/definitions/TfaChangeBackupPhoneDetails"
        }, 
        "paper_folder_change_subscription_details": {
          "$ref": "#/definitions/PaperFolderChangeSubscriptionDetails"
        }, 
        "shared_link_disable_details": {
          "$ref": "#/definitions/SharedLinkDisableDetails"
        }, 
        "paper_doc_change_sharing_policy_details": {
          "$ref": "#/definitions/PaperDocChangeSharingPolicyDetails"
        }, 
        "password_reset_all_details": {
          "$ref": "#/definitions/PasswordResetAllDetails"
        }, 
        "note_acl_team_link_details": {
          "$ref": "#/definitions/NoteAclTeamLinkDetails"
        }, 
        "paper_doc_mention_details": {
          "$ref": "#/definitions/PaperDocMentionDetails"
        }, 
        "paper_enabled_users_group_removal_details": {
          "$ref": "#/definitions/PaperEnabledUsersGroupRemovalDetails"
        }, 
        "reseller_support_session_end_details": {
          "$ref": "#/definitions/ResellerSupportSessionEndDetails"
        }, 
        "paper_content_archive_details": {
          "$ref": "#/definitions/PaperContentArchiveDetails"
        }, 
        "member_space_limits_add_exception_details": {
          "$ref": "#/definitions/MemberSpaceLimitsAddExceptionDetails"
        }, 
        "permanent_delete_change_policy_details": {
          "$ref": "#/definitions/PermanentDeleteChangePolicyDetails"
        }, 
        "shared_content_remove_member_details": {
          "$ref": "#/definitions/SharedContentRemoveMemberDetails"
        }, 
        "smart_sync_not_opt_out_details": {
          "$ref": "#/definitions/SmartSyncNotOptOutDetails"
        }, 
        "sso_change_logout_url_details": {
          "$ref": "#/definitions/SsoChangeLogoutUrlDetails"
        }, 
        "account_capture_relinquish_account_details": {
          "$ref": "#/definitions/AccountCaptureRelinquishAccountDetails"
        }, 
        "paper_external_view_forbid_details": {
          "$ref": "#/definitions/PaperExternalViewForbidDetails"
        }, 
        "tfa_change_status_details": {
          "$ref": "#/definitions/TfaChangeStatusDetails"
        }, 
        "member_space_limits_remove_exception_details": {
          "$ref": "#/definitions/MemberSpaceLimitsRemoveExceptionDetails"
        }, 
        "file_add_comment_details": {
          "$ref": "#/definitions/FileAddCommentDetails"
        }, 
        "team_folder_create_details": {
          "$ref": "#/definitions/TeamFolderCreateDetails"
        }, 
        "file_restore_details": {
          "$ref": "#/definitions/FileRestoreDetails"
        }, 
        "file_requests_change_policy_details": {
          "$ref": "#/definitions/FileRequestsChangePolicyDetails"
        }, 
        "directory_restrictions_remove_members_details": {
          "$ref": "#/definitions/DirectoryRestrictionsRemoveMembersDetails"
        }, 
        "showcase_access_granted_details": {
          "$ref": "#/definitions/ShowcaseAccessGrantedDetails"
        }, 
        "smart_sync_opt_out_details": {
          "$ref": "#/definitions/SmartSyncOptOutDetails"
        }, 
        "group_delete_details": {
          "$ref": "#/definitions/GroupDeleteDetails"
        }, 
        "device_link_fail_details": {
          "$ref": "#/definitions/DeviceLinkFailDetails"
        }, 
        "file_move_details": {
          "$ref": "#/definitions/FileMoveDetails"
        }, 
        "shared_content_relinquish_membership_details": {
          "$ref": "#/definitions/SharedContentRelinquishMembershipDetails"
        }, 
        "member_suggestions_change_policy_details": {
          "$ref": "#/definitions/MemberSuggestionsChangePolicyDetails"
        }, 
        "team_profile_change_logo_details": {
          "$ref": "#/definitions/TeamProfileChangeLogoDetails"
        }, 
        "shared_folder_decline_invitation_details": {
          "$ref": "#/definitions/SharedFolderDeclineInvitationDetails"
        }, 
        "team_profile_change_default_language_details": {
          "$ref": "#/definitions/TeamProfileChangeDefaultLanguageDetails"
        }, 
        "team_folder_permanently_delete_details": {
          "$ref": "#/definitions/TeamFolderPermanentlyDeleteDetails"
        }, 
        "sso_remove_cert_details": {
          "$ref": "#/definitions/SsoRemoveCertDetails"
        }, 
        "paper_content_remove_from_folder_details": {
          "$ref": "#/definitions/PaperContentRemoveFromFolderDetails"
        }, 
        "team_merge_to_details": {
          "$ref": "#/definitions/TeamMergeToDetails"
        }, 
        "showcase_unresolve_comment_details": {
          "$ref": "#/definitions/ShowcaseUnresolveCommentDetails"
        }, 
        "showcase_trashed_details": {
          "$ref": "#/definitions/ShowcaseTrashedDetails"
        }, 
        "paper_doc_revert_details": {
          "$ref": "#/definitions/PaperDocRevertDetails"
        }, 
        "paper_doc_team_invite_details": {
          "$ref": "#/definitions/PaperDocTeamInviteDetails"
        }, 
        "member_suggest_details": {
          "$ref": "#/definitions/MemberSuggestDetails"
        }, 
        "shared_link_view_details": {
          "$ref": "#/definitions/SharedLinkViewDetails"
        }, 
        "showcase_change_external_sharing_policy_details": {
          "$ref": "#/definitions/ShowcaseChangeExternalSharingPolicyDetails"
        }, 
        "sf_external_invite_warn_details": {
          "$ref": "#/definitions/SfExternalInviteWarnDetails"
        }, 
        "sso_change_login_url_details": {
          "$ref": "#/definitions/SsoChangeLoginUrlDetails"
        }, 
        "device_change_ip_mobile_details": {
          "$ref": "#/definitions/DeviceChangeIpMobileDetails"
        }, 
        "shared_content_remove_link_expiry_details": {
          "$ref": "#/definitions/SharedContentRemoveLinkExpiryDetails"
        }, 
        "shared_folder_change_members_policy_details": {
          "$ref": "#/definitions/SharedFolderChangeMembersPolicyDetails"
        }, 
        "note_share_receive_details": {
          "$ref": "#/definitions/NoteShareReceiveDetails"
        }, 
        "file_permanently_delete_details": {
          "$ref": "#/definitions/FilePermanentlyDeleteDetails"
        }, 
        "sf_fb_invite_change_role_details": {
          "$ref": "#/definitions/SfFbInviteChangeRoleDetails"
        }, 
        "paper_content_create_details": {
          "$ref": "#/definitions/PaperContentCreateDetails"
        }, 
        "team_activity_create_report_details": {
          "$ref": "#/definitions/TeamActivityCreateReportDetails"
        }, 
        "member_space_limits_change_custom_quota_details": {
          "$ref": "#/definitions/MemberSpaceLimitsChangeCustomQuotaDetails"
        }, 
        "showcase_archived_details": {
          "$ref": "#/definitions/ShowcaseArchivedDetails"
        }, 
        "file_download_details": {
          "$ref": "#/definitions/FileDownloadDetails"
        }, 
        "paper_content_permanently_delete_details": {
          "$ref": "#/definitions/PaperContentPermanentlyDeleteDetails"
        }, 
        "paper_doc_unresolve_comment_details": {
          "$ref": "#/definitions/PaperDocUnresolveCommentDetails"
        }, 
        "shared_folder_nest_details": {
          "$ref": "#/definitions/SharedFolderNestDetails"
        }, 
        "showcase_resolve_comment_details": {
          "$ref": "#/definitions/ShowcaseResolveCommentDetails"
        }, 
        "paper_doc_view_details": {
          "$ref": "#/definitions/PaperDocViewDetails"
        }, 
        "paper_doc_untrashed_details": {
          "$ref": "#/definitions/PaperDocUntrashedDetails"
        }, 
        "shared_link_remove_expiry_details": {
          "$ref": "#/definitions/SharedLinkRemoveExpiryDetails"
        }, 
        "sharing_change_member_policy_details": {
          "$ref": "#/definitions/SharingChangeMemberPolicyDetails"
        }, 
        "shared_link_copy_details": {
          "$ref": "#/definitions/SharedLinkCopyDetails"
        }, 
        "note_acl_invite_only_details": {
          "$ref": "#/definitions/NoteAclInviteOnlyDetails"
        }, 
        "paper_doc_change_member_role_details": {
          "$ref": "#/definitions/PaperDocChangeMemberRoleDetails"
        }, 
        "team_profile_add_logo_details": {
          "$ref": "#/definitions/TeamProfileAddLogoDetails"
        }, 
        "paper_doc_request_access_details": {
          "$ref": "#/definitions/PaperDocRequestAccessDetails"
        }, 
        "note_acl_link_details": {
          "$ref": "#/definitions/NoteAclLinkDetails"
        }, 
        "shmodel_group_share_details": {
          "$ref": "#/definitions/ShmodelGroupShareDetails"
        }, 
        "smart_sync_create_admin_privilege_report_details": {
          "$ref": "#/definitions/SmartSyncCreateAdminPrivilegeReportDetails"
        }, 
        "showcase_change_download_policy_details": {
          "$ref": "#/definitions/ShowcaseChangeDownloadPolicyDetails"
        }, 
        "showcase_file_download_details": {
          "$ref": "#/definitions/ShowcaseFileDownloadDetails"
        }, 
        "team_profile_change_name_details": {
          "$ref": "#/definitions/TeamProfileChangeNameDetails"
        }, 
        "emm_error_details": {
          "$ref": "#/definitions/EmmErrorDetails"
        }, 
        "emm_create_exceptions_report_details": {
          "$ref": "#/definitions/EmmCreateExceptionsReportDetails"
        }, 
        "device_delete_on_unlink_success_details": {
          "$ref": "#/definitions/DeviceDeleteOnUnlinkSuccessDetails"
        }, 
        "app_unlink_user_details": {
          "$ref": "#/definitions/AppUnlinkUserDetails"
        }, 
        "group_moved_details": {
          "$ref": "#/definitions/GroupMovedDetails"
        }, 
        "shared_content_download_details": {
          "$ref": "#/definitions/SharedContentDownloadDetails"
        }, 
        "showcase_change_enabled_policy_details": {
          "$ref": "#/definitions/ShowcaseChangeEnabledPolicyDetails"
        }, 
        "account_capture_migrate_account_details": {
          "$ref": "#/definitions/AccountCaptureMigrateAccountDetails"
        }, 
        "file_request_create_details": {
          "$ref": "#/definitions/FileRequestCreateDetails"
        }, 
        "domain_verification_add_domain_success_details": {
          "$ref": "#/definitions/DomainVerificationAddDomainSuccessDetails"
        }, 
        "shared_content_add_link_expiry_details": {
          "$ref": "#/definitions/SharedContentAddLinkExpiryDetails"
        }, 
        "device_approvals_change_desktop_policy_details": {
          "$ref": "#/definitions/DeviceApprovalsChangeDesktopPolicyDetails"
        }, 
        "data_placement_restriction_satisfy_policy_details": {
          "$ref": "#/definitions/DataPlacementRestrictionSatisfyPolicyDetails"
        }, 
        "team_folder_downgrade_details": {
          "$ref": "#/definitions/TeamFolderDowngradeDetails"
        }, 
        "paper_doc_change_subscription_details": {
          "$ref": "#/definitions/PaperDocChangeSubscriptionDetails"
        }, 
        "sf_team_join_details": {
          "$ref": "#/definitions/SfTeamJoinDetails"
        }, 
        "group_add_member_details": {
          "$ref": "#/definitions/GroupAddMemberDetails"
        }, 
        "sso_add_cert_details": {
          "$ref": "#/definitions/SsoAddCertDetails"
        }, 
        "shared_link_share_details": {
          "$ref": "#/definitions/SharedLinkShareDetails"
        }, 
        "paper_change_member_policy_details": {
          "$ref": "#/definitions/PaperChangeMemberPolicyDetails"
        }, 
        "emm_refresh_auth_token_details": {
          "$ref": "#/definitions/EmmRefreshAuthTokenDetails"
        }, 
        "shared_link_change_visibility_details": {
          "$ref": "#/definitions/SharedLinkChangeVisibilityDetails"
        }, 
        "file_edit_details": {
          "$ref": "#/definitions/FileEditDetails"
        }, 
        "sf_add_group_details": {
          "$ref": "#/definitions/SfAddGroupDetails"
        }, 
        "member_change_membership_type_details": {
          "$ref": "#/definitions/MemberChangeMembershipTypeDetails"
        }, 
        "domain_invites_email_existing_users_details": {
          "$ref": "#/definitions/DomainInvitesEmailExistingUsersDetails"
        }, 
        "account_capture_change_availability_details": {
          "$ref": "#/definitions/AccountCaptureChangeAvailabilityDetails"
        }, 
        "member_space_limits_remove_custom_quota_details": {
          "$ref": "#/definitions/MemberSpaceLimitsRemoveCustomQuotaDetails"
        }, 
        "shared_content_add_invitees_details": {
          "$ref": "#/definitions/SharedContentAddInviteesDetails"
        }, 
        "shared_content_change_link_audience_details": {
          "$ref": "#/definitions/SharedContentChangeLinkAudienceDetails"
        }, 
        "emm_change_policy_details": {
          "$ref": "#/definitions/EmmChangePolicyDetails"
        }, 
        "file_unlike_comment_details": {
          "$ref": "#/definitions/FileUnlikeCommentDetails"
        }, 
        "export_members_report_details": {
          "$ref": "#/definitions/ExportMembersReportDetails"
        }, 
        "shared_content_claim_invitation_details": {
          "$ref": "#/definitions/SharedContentClaimInvitationDetails"
        }, 
        "domain_invites_set_invite_new_user_pref_to_no_details": {
          "$ref": "#/definitions/DomainInvitesSetInviteNewUserPrefToNoDetails"
        }, 
        "paper_doc_followed_details": {
          "$ref": "#/definitions/PaperDocFollowedDetails"
        }, 
        "paper_doc_deleted_details": {
          "$ref": "#/definitions/PaperDocDeletedDetails"
        }, 
        "showcase_view_details": {
          "$ref": "#/definitions/ShowcaseViewDetails"
        }, 
        "showcase_renamed_details": {
          "$ref": "#/definitions/ShowcaseRenamedDetails"
        }, 
        "account_capture_change_policy_details": {
          "$ref": "#/definitions/AccountCaptureChangePolicyDetails"
        }, 
        "shared_content_unshare_details": {
          "$ref": "#/definitions/SharedContentUnshareDetails"
        }, 
        "shared_folder_mount_details": {
          "$ref": "#/definitions/SharedFolderMountDetails"
        }, 
        "group_rename_details": {
          "$ref": "#/definitions/GroupRenameDetails"
        }, 
        "file_rename_details": {
          "$ref": "#/definitions/FileRenameDetails"
        }, 
        "smart_sync_change_policy_details": {
          "$ref": "#/definitions/SmartSyncChangePolicyDetails"
        }, 
        "tfa_remove_backup_phone_details": {
          "$ref": "#/definitions/TfaRemoveBackupPhoneDetails"
        }, 
        "note_shared_details": {
          "$ref": "#/definitions/NoteSharedDetails"
        }, 
        "missing_details": {
          "$ref": "#/definitions/MissingDetails"
        }, 
        "sso_error_details": {
          "$ref": "#/definitions/SsoErrorDetails"
        }, 
        "password_change_details": {
          "$ref": "#/definitions/PasswordChangeDetails"
        }, 
        "showcase_restored_details": {
          "$ref": "#/definitions/ShowcaseRestoredDetails"
        }, 
        "showcase_edited_details": {
          "$ref": "#/definitions/ShowcaseEditedDetails"
        }, 
        "paper_change_policy_details": {
          "$ref": "#/definitions/PaperChangePolicyDetails"
        }, 
        "reseller_support_session_start_details": {
          "$ref": "#/definitions/ResellerSupportSessionStartDetails"
        }, 
        "device_unlink_details": {
          "$ref": "#/definitions/DeviceUnlinkDetails"
        }, 
        "device_approvals_change_mobile_policy_details": {
          "$ref": "#/definitions/DeviceApprovalsChangeMobilePolicyDetails"
        }, 
        "emm_add_exception_details": {
          "$ref": "#/definitions/EmmAddExceptionDetails"
        }, 
        "group_add_external_id_details": {
          "$ref": "#/definitions/GroupAddExternalIdDetails"
        }, 
        "sf_team_grant_access_details": {
          "$ref": "#/definitions/SfTeamGrantAccessDetails"
        }, 
        "paper_doc_edit_details": {
          "$ref": "#/definitions/PaperDocEditDetails"
        }, 
        "web_sessions_change_fixed_length_policy_details": {
          "$ref": "#/definitions/WebSessionsChangeFixedLengthPolicyDetails"
        }, 
        "file_like_comment_details": {
          "$ref": "#/definitions/FileLikeCommentDetails"
        }, 
        "sso_change_saml_identity_mode_details": {
          "$ref": "#/definitions/SsoChangeSamlIdentityModeDetails"
        }, 
        "file_change_comment_subscription_details": {
          "$ref": "#/definitions/FileChangeCommentSubscriptionDetails"
        }, 
        "group_join_policy_updated_details": {
          "$ref": "#/definitions/GroupJoinPolicyUpdatedDetails"
        }, 
        "group_change_external_id_details": {
          "$ref": "#/definitions/GroupChangeExternalIdDetails"
        }, 
        "shared_content_change_invitee_role_details": {
          "$ref": "#/definitions/SharedContentChangeInviteeRoleDetails"
        }, 
        "collection_share_details": {
          "$ref": "#/definitions/CollectionShareDetails"
        }, 
        "tfa_remove_security_key_details": {
          "$ref": "#/definitions/TfaRemoveSecurityKeyDetails"
        }, 
        "file_delete_comment_details": {
          "$ref": "#/definitions/FileDeleteCommentDetails"
        }, 
        "showcase_file_view_details": {
          "$ref": "#/definitions/ShowcaseFileViewDetails"
        }, 
        "group_change_member_role_details": {
          "$ref": "#/definitions/GroupChangeMemberRoleDetails"
        }, 
        "device_change_ip_desktop_details": {
          "$ref": "#/definitions/DeviceChangeIpDesktopDetails"
        }, 
        "domain_invites_request_to_join_team_details": {
          "$ref": "#/definitions/DomainInvitesRequestToJoinTeamDetails"
        }, 
        "enabled_domain_invites_details": {
          "$ref": "#/definitions/EnabledDomainInvitesDetails"
        }, 
        "paper_doc_resolve_comment_details": {
          "$ref": "#/definitions/PaperDocResolveCommentDetails"
        }, 
        "shared_content_change_link_expiry_details": {
          "$ref": "#/definitions/SharedContentChangeLinkExpiryDetails"
        }, 
        "shared_content_add_link_password_details": {
          "$ref": "#/definitions/SharedContentAddLinkPasswordDetails"
        }, 
        "file_requests_emails_restricted_to_team_only_details": {
          "$ref": "#/definitions/FileRequestsEmailsRestrictedToTeamOnlyDetails"
        }, 
        "member_change_status_details": {
          "$ref": "#/definitions/MemberChangeStatusDetails"
        }, 
        "account_capture_notification_emails_sent_details": {
          "$ref": "#/definitions/AccountCaptureNotificationEmailsSentDetails"
        }, 
        "sign_in_as_session_start_details": {
          "$ref": "#/definitions/SignInAsSessionStartDetails"
        }, 
        "paper_external_view_default_team_details": {
          "$ref": "#/definitions/PaperExternalViewDefaultTeamDetails"
        }, 
        "web_sessions_change_idle_length_policy_details": {
          "$ref": "#/definitions/WebSessionsChangeIdleLengthPolicyDetails"
        }, 
        "paper_content_remove_member_details": {
          "$ref": "#/definitions/PaperContentRemoveMemberDetails"
        }, 
        "secondary_mails_policy_changed_details": {
          "$ref": "#/definitions/SecondaryMailsPolicyChangedDetails"
        }, 
        "shared_link_download_details": {
          "$ref": "#/definitions/SharedLinkDownloadDetails"
        }, 
        "file_delete_details": {
          "$ref": "#/definitions/FileDeleteDetails"
        }, 
        "password_reset_details": {
          "$ref": "#/definitions/PasswordResetDetails"
        }, 
        "shared_content_view_details": {
          "$ref": "#/definitions/SharedContentViewDetails"
        }, 
        "app_link_user_details": {
          "$ref": "#/definitions/AppLinkUserDetails"
        }, 
        "tfa_add_backup_phone_details": {
          "$ref": "#/definitions/TfaAddBackupPhoneDetails"
        }, 
        "file_unresolve_comment_details": {
          "$ref": "#/definitions/FileUnresolveCommentDetails"
        }, 
        "showcase_trashed_deprecated_details": {
          "$ref": "#/definitions/ShowcaseTrashedDeprecatedDetails"
        }, 
        "sso_change_cert_details": {
          "$ref": "#/definitions/SsoChangeCertDetails"
        }, 
        "paper_doc_download_details": {
          "$ref": "#/definitions/PaperDocDownloadDetails"
        }, 
        "two_account_change_policy_details": {
          "$ref": "#/definitions/TwoAccountChangePolicyDetails"
        }, 
        "showcase_request_access_details": {
          "$ref": "#/definitions/ShowcaseRequestAccessDetails"
        }, 
        "sharing_change_link_policy_details": {
          "$ref": "#/definitions/SharingChangeLinkPolicyDetails"
        }, 
        "paper_doc_edit_comment_details": {
          "$ref": "#/definitions/PaperDocEditCommentDetails"
        }, 
        "shared_content_remove_invitees_details": {
          "$ref": "#/definitions/SharedContentRemoveInviteesDetails"
        }, 
        "sso_add_logout_url_details": {
          "$ref": "#/definitions/SsoAddLogoutUrlDetails"
        }, 
        "member_space_limits_change_status_details": {
          "$ref": "#/definitions/MemberSpaceLimitsChangeStatusDetails"
        }, 
        "member_add_name_details": {
          "$ref": "#/definitions/MemberAddNameDetails"
        }, 
        "file_rollback_changes_details": {
          "$ref": "#/definitions/FileRollbackChangesDetails"
        }, 
        "group_change_management_type_details": {
          "$ref": "#/definitions/GroupChangeManagementTypeDetails"
        }, 
        "sso_remove_login_url_details": {
          "$ref": "#/definitions/SsoRemoveLoginUrlDetails"
        }, 
        "paper_external_view_allow_details": {
          "$ref": "#/definitions/PaperExternalViewAllowDetails"
        }, 
        "sf_team_uninvite_details": {
          "$ref": "#/definitions/SfTeamUninviteDetails"
        }, 
        "paper_folder_team_invite_details": {
          "$ref": "#/definitions/PaperFolderTeamInviteDetails"
        }, 
        "showcase_file_removed_details": {
          "$ref": "#/definitions/ShowcaseFileRemovedDetails"
        }, 
        "sign_in_as_session_end_details": {
          "$ref": "#/definitions/SignInAsSessionEndDetails"
        }, 
        "member_permanently_delete_account_contents_details": {
          "$ref": "#/definitions/MemberPermanentlyDeleteAccountContentsDetails"
        }, 
        "sso_add_login_url_details": {
          "$ref": "#/definitions/SsoAddLoginUrlDetails"
        }, 
        "device_approvals_change_unlink_action_details": {
          "$ref": "#/definitions/DeviceApprovalsChangeUnlinkActionDetails"
        }, 
        "file_requests_emails_enabled_details": {
          "$ref": "#/definitions/FileRequestsEmailsEnabledDetails"
        }, 
        "device_change_ip_web_details": {
          "$ref": "#/definitions/DeviceChangeIpWebDetails"
        }, 
        "member_space_limits_add_custom_quota_details": {
          "$ref": "#/definitions/MemberSpaceLimitsAddCustomQuotaDetails"
        }, 
        "allow_download_disabled_details": {
          "$ref": "#/definitions/AllowDownloadDisabledDetails"
        }, 
        "group_remove_external_id_details": {
          "$ref": "#/definitions/GroupRemoveExternalIdDetails"
        }, 
        "disabled_domain_invites_details": {
          "$ref": "#/definitions/DisabledDomainInvitesDetails"
        }, 
        "device_management_enabled_details": {
          "$ref": "#/definitions/DeviceManagementEnabledDetails"
        }, 
        "app_link_team_details": {
          "$ref": "#/definitions/AppLinkTeamDetails"
        }, 
        "microsoft_office_addin_change_policy_details": {
          "$ref": "#/definitions/MicrosoftOfficeAddinChangePolicyDetails"
        }, 
        "emm_create_usage_report_details": {
          "$ref": "#/definitions/EmmCreateUsageReportDetails"
        }, 
        "paper_doc_add_comment_details": {
          "$ref": "#/definitions/PaperDocAddCommentDetails"
        }, 
        "group_description_updated_details": {
          "$ref": "#/definitions/GroupDescriptionUpdatedDetails"
        }, 
        "shared_content_request_access_details": {
          "$ref": "#/definitions/SharedContentRequestAccessDetails"
        }, 
        "shared_link_change_expiry_details": {
          "$ref": "#/definitions/SharedLinkChangeExpiryDetails"
        }, 
        "sf_invite_group_details": {
          "$ref": "#/definitions/SfInviteGroupDetails"
        }, 
        "paper_change_member_link_policy_details": {
          "$ref": "#/definitions/PaperChangeMemberLinkPolicyDetails"
        }, 
        "domain_invites_set_invite_new_user_pref_to_yes_details": {
          "$ref": "#/definitions/DomainInvitesSetInviteNewUserPrefToYesDetails"
        }, 
        "file_get_copy_reference_details": {
          "$ref": "#/definitions/FileGetCopyReferenceDetails"
        }, 
        "member_change_email_details": {
          "$ref": "#/definitions/MemberChangeEmailDetails"
        }, 
        "file_add_details": {
          "$ref": "#/definitions/FileAddDetails"
        }, 
        "data_placement_restriction_change_policy_details": {
          "$ref": "#/definitions/DataPlacementRestrictionChangePolicyDetails"
        }, 
        "showcase_permanently_deleted_details": {
          "$ref": "#/definitions/ShowcasePermanentlyDeletedDetails"
        }, 
        "paper_admin_export_start_details": {
          "$ref": "#/definitions/PaperAdminExportStartDetails"
        }, 
        "emm_remove_exception_details": {
          "$ref": "#/definitions/EmmRemoveExceptionDetails"
        }, 
        "shared_link_add_expiry_details": {
          "$ref": "#/definitions/SharedLinkAddExpiryDetails"
        }, 
        "paper_doc_delete_comment_details": {
          "$ref": "#/definitions/PaperDocDeleteCommentDetails"
        }, 
        "paper_doc_trashed_details": {
          "$ref": "#/definitions/PaperDocTrashedDetails"
        }, 
        "create_folder_details": {
          "$ref": "#/definitions/CreateFolderDetails"
        }, 
        "shared_content_remove_link_password_details": {
          "$ref": "#/definitions/SharedContentRemoveLinkPasswordDetails"
        }, 
        "paper_content_add_member_details": {
          "$ref": "#/definitions/PaperContentAddMemberDetails"
        }, 
        "tfa_reset_details": {
          "$ref": "#/definitions/TfaResetDetails"
        }, 
        "sf_allow_non_members_to_view_shared_links_details": {
          "$ref": "#/definitions/SfAllowNonMembersToViewSharedLinksDetails"
        }, 
        "member_transfer_account_contents_details": {
          "$ref": "#/definitions/MemberTransferAccountContentsDetails"
        }, 
        "device_approvals_change_overage_action_details": {
          "$ref": "#/definitions/DeviceApprovalsChangeOverageActionDetails"
        }, 
        "tfa_change_policy_details": {
          "$ref": "#/definitions/TfaChangePolicyDetails"
        }, 
        "file_revert_details": {
          "$ref": "#/definitions/FileRevertDetails"
        }, 
        "showcase_post_comment_details": {
          "$ref": "#/definitions/ShowcasePostCommentDetails"
        }, 
        "file_request_receive_file_details": {
          "$ref": "#/definitions/FileRequestReceiveFileDetails"
        }, 
        "domain_invites_decline_request_to_join_team_details": {
          "$ref": "#/definitions/DomainInvitesDeclineRequestToJoinTeamDetails"
        }, 
        "team_selective_sync_settings_changed_details": {
          "$ref": "#/definitions/TeamSelectiveSyncSettingsChangedDetails"
        }, 
        "paper_content_rename_details": {
          "$ref": "#/definitions/PaperContentRenameDetails"
        }, 
        "sf_team_invite_change_role_details": {
          "$ref": "#/definitions/SfTeamInviteChangeRoleDetails"
        }, 
        "sf_team_invite_details": {
          "$ref": "#/definitions/SfTeamInviteDetails"
        }, 
        "member_space_limits_change_caps_type_policy_details": {
          "$ref": "#/definitions/MemberSpaceLimitsChangeCapsTypePolicyDetails"
        }, 
        "device_management_disabled_details": {
          "$ref": "#/definitions/DeviceManagementDisabledDetails"
        }, 
        "sso_change_policy_details": {
          "$ref": "#/definitions/SsoChangePolicyDetails"
        }, 
        "paper_content_restore_details": {
          "$ref": "#/definitions/PaperContentRestoreDetails"
        }, 
        "showcase_untrashed_details": {
          "$ref": "#/definitions/ShowcaseUntrashedDetails"
        }, 
        "file_save_copy_reference_details": {
          "$ref": "#/definitions/FileSaveCopyReferenceDetails"
        }, 
        "file_copy_details": {
          "$ref": "#/definitions/FileCopyDetails"
        }, 
        "paper_doc_slack_share_details": {
          "$ref": "#/definitions/PaperDocSlackShareDetails"
        }, 
        "logout_details": {
          "$ref": "#/definitions/LogoutDetails"
        }, 
        "member_change_name_details": {
          "$ref": "#/definitions/MemberChangeNameDetails"
        }, 
        "shared_folder_change_members_management_policy_details": {
          "$ref": "#/definitions/SharedFolderChangeMembersManagementPolicyDetails"
        }, 
        "login_success_details": {
          "$ref": "#/definitions/LoginSuccessDetails"
        }, 
        "shared_content_change_viewer_info_policy_details": {
          "$ref": "#/definitions/SharedContentChangeViewerInfoPolicyDetails"
        }, 
        "shared_folder_change_members_inheritance_policy_details": {
          "$ref": "#/definitions/SharedFolderChangeMembersInheritancePolicyDetails"
        }, 
        "shared_content_add_member_details": {
          "$ref": "#/definitions/SharedContentAddMemberDetails"
        }, 
        "member_change_admin_role_details": {
          "$ref": "#/definitions/MemberChangeAdminRoleDetails"
        }, 
        "app_unlink_team_details": {
          "$ref": "#/definitions/AppUnlinkTeamDetails"
        }, 
        "team_folder_rename_details": {
          "$ref": "#/definitions/TeamFolderRenameDetails"
        }, 
        "shared_content_copy_details": {
          "$ref": "#/definitions/SharedContentCopyDetails"
        }, 
        "domain_invites_approve_request_to_join_team_details": {
          "$ref": "#/definitions/DomainInvitesApproveRequestToJoinTeamDetails"
        }, 
        "member_requests_change_policy_details": {
          "$ref": "#/definitions/MemberRequestsChangePolicyDetails"
        }, 
        "shared_content_change_member_role_details": {
          "$ref": "#/definitions/SharedContentChangeMemberRoleDetails"
        }, 
        "login_fail_details": {
          "$ref": "#/definitions/LoginFailDetails"
        }, 
        "team_profile_remove_logo_details": {
          "$ref": "#/definitions/TeamProfileRemoveLogoDetails"
        }, 
        "file_preview_details": {
          "$ref": "#/definitions/FilePreviewDetails"
        }, 
        "file_resolve_comment_details": {
          "$ref": "#/definitions/FileResolveCommentDetails"
        }, 
        ".tag": {
          "enum": [
            "app_link_team_details", 
            "app_link_user_details", 
            "app_unlink_team_details", 
            "app_unlink_user_details", 
            "file_add_comment_details", 
            "file_change_comment_subscription_details", 
            "file_delete_comment_details", 
            "file_like_comment_details", 
            "file_resolve_comment_details", 
            "file_unlike_comment_details", 
            "file_unresolve_comment_details", 
            "device_change_ip_desktop_details", 
            "device_change_ip_mobile_details", 
            "device_change_ip_web_details", 
            "device_delete_on_unlink_fail_details", 
            "device_delete_on_unlink_success_details", 
            "device_link_fail_details", 
            "device_link_success_details", 
            "device_management_disabled_details", 
            "device_management_enabled_details", 
            "device_unlink_details", 
            "emm_refresh_auth_token_details", 
            "account_capture_change_availability_details", 
            "account_capture_migrate_account_details", 
            "account_capture_notification_emails_sent_details", 
            "account_capture_relinquish_account_details", 
            "disabled_domain_invites_details", 
            "domain_invites_approve_request_to_join_team_details", 
            "domain_invites_decline_request_to_join_team_details", 
            "domain_invites_email_existing_users_details", 
            "domain_invites_request_to_join_team_details", 
            "domain_invites_set_invite_new_user_pref_to_no_details", 
            "domain_invites_set_invite_new_user_pref_to_yes_details", 
            "domain_verification_add_domain_fail_details", 
            "domain_verification_add_domain_success_details", 
            "domain_verification_remove_domain_details", 
            "enabled_domain_invites_details", 
            "create_folder_details", 
            "file_add_details", 
            "file_copy_details", 
            "file_delete_details", 
            "file_download_details", 
            "file_edit_details", 
            "file_get_copy_reference_details", 
            "file_move_details", 
            "file_permanently_delete_details", 
            "file_preview_details", 
            "file_rename_details", 
            "file_restore_details", 
            "file_revert_details", 
            "file_rollback_changes_details", 
            "file_save_copy_reference_details", 
            "file_request_change_details", 
            "file_request_close_details", 
            "file_request_create_details", 
            "file_request_receive_file_details", 
            "group_add_external_id_details", 
            "group_add_member_details", 
            "group_change_external_id_details", 
            "group_change_management_type_details", 
            "group_change_member_role_details", 
            "group_create_details", 
            "group_delete_details", 
            "group_description_updated_details", 
            "group_join_policy_updated_details", 
            "group_moved_details", 
            "group_remove_external_id_details", 
            "group_remove_member_details", 
            "group_rename_details", 
            "emm_error_details", 
            "login_fail_details", 
            "login_success_details", 
            "logout_details", 
            "reseller_support_session_end_details", 
            "reseller_support_session_start_details", 
            "sign_in_as_session_end_details", 
            "sign_in_as_session_start_details", 
            "sso_error_details", 
            "member_add_name_details", 
            "member_change_admin_role_details", 
            "member_change_email_details", 
            "member_change_membership_type_details", 
            "member_change_name_details", 
            "member_change_status_details", 
            "member_permanently_delete_account_contents_details", 
            "member_space_limits_add_custom_quota_details", 
            "member_space_limits_change_custom_quota_details", 
            "member_space_limits_change_status_details", 
            "member_space_limits_remove_custom_quota_details", 
            "member_suggest_details", 
            "member_transfer_account_contents_details", 
            "secondary_mails_policy_changed_details", 
            "paper_content_add_member_details", 
            "paper_content_add_to_folder_details", 
            "paper_content_archive_details", 
            "paper_content_create_details", 
            "paper_content_permanently_delete_details", 
            "paper_content_remove_from_folder_details", 
            "paper_content_remove_member_details", 
            "paper_content_rename_details", 
            "paper_content_restore_details", 
            "paper_doc_add_comment_details", 
            "paper_doc_change_member_role_details", 
            "paper_doc_change_sharing_policy_details", 
            "paper_doc_change_subscription_details", 
            "paper_doc_deleted_details", 
            "paper_doc_delete_comment_details", 
            "paper_doc_download_details", 
            "paper_doc_edit_details", 
            "paper_doc_edit_comment_details", 
            "paper_doc_followed_details", 
            "paper_doc_mention_details", 
            "paper_doc_request_access_details", 
            "paper_doc_resolve_comment_details", 
            "paper_doc_revert_details", 
            "paper_doc_slack_share_details", 
            "paper_doc_team_invite_details", 
            "paper_doc_trashed_details", 
            "paper_doc_unresolve_comment_details", 
            "paper_doc_untrashed_details", 
            "paper_doc_view_details", 
            "paper_external_view_allow_details", 
            "paper_external_view_default_team_details", 
            "paper_external_view_forbid_details", 
            "paper_folder_change_subscription_details", 
            "paper_folder_deleted_details", 
            "paper_folder_followed_details", 
            "paper_folder_team_invite_details", 
            "password_change_details", 
            "password_reset_details", 
            "password_reset_all_details", 
            "emm_create_exceptions_report_details", 
            "emm_create_usage_report_details", 
            "export_members_report_details", 
            "paper_admin_export_start_details", 
            "smart_sync_create_admin_privilege_report_details", 
            "team_activity_create_report_details", 
            "collection_share_details", 
            "note_acl_invite_only_details", 
            "note_acl_link_details", 
            "note_acl_team_link_details", 
            "note_shared_details", 
            "note_share_receive_details", 
            "open_note_shared_details", 
            "sf_add_group_details", 
            "sf_allow_non_members_to_view_shared_links_details", 
            "sf_external_invite_warn_details", 
            "sf_fb_invite_details", 
            "sf_fb_invite_change_role_details", 
            "sf_fb_uninvite_details", 
            "sf_invite_group_details", 
            "sf_team_grant_access_details", 
            "sf_team_invite_details", 
            "sf_team_invite_change_role_details", 
            "sf_team_join_details", 
            "sf_team_join_from_oob_link_details", 
            "sf_team_uninvite_details", 
            "shared_content_add_invitees_details", 
            "shared_content_add_link_expiry_details", 
            "shared_content_add_link_password_details", 
            "shared_content_add_member_details", 
            "shared_content_change_downloads_policy_details", 
            "shared_content_change_invitee_role_details", 
            "shared_content_change_link_audience_details", 
            "shared_content_change_link_expiry_details", 
            "shared_content_change_link_password_details", 
            "shared_content_change_member_role_details", 
            "shared_content_change_viewer_info_policy_details", 
            "shared_content_claim_invitation_details", 
            "shared_content_copy_details", 
            "shared_content_download_details", 
            "shared_content_relinquish_membership_details", 
            "shared_content_remove_invitees_details", 
            "shared_content_remove_link_expiry_details", 
            "shared_content_remove_link_password_details", 
            "shared_content_remove_member_details", 
            "shared_content_request_access_details", 
            "shared_content_unshare_details", 
            "shared_content_view_details", 
            "shared_folder_change_link_policy_details", 
            "shared_folder_change_members_inheritance_policy_details", 
            "shared_folder_change_members_management_policy_details", 
            "shared_folder_change_members_policy_details", 
            "shared_folder_create_details", 
            "shared_folder_decline_invitation_details", 
            "shared_folder_mount_details", 
            "shared_folder_nest_details", 
            "shared_folder_transfer_ownership_details", 
            "shared_folder_unmount_details", 
            "shared_link_add_expiry_details", 
            "shared_link_change_expiry_details", 
            "shared_link_change_visibility_details", 
            "shared_link_copy_details", 
            "shared_link_create_details", 
            "shared_link_disable_details", 
            "shared_link_download_details", 
            "shared_link_remove_expiry_details", 
            "shared_link_share_details", 
            "shared_link_view_details", 
            "shared_note_opened_details", 
            "shmodel_group_share_details", 
            "showcase_access_granted_details", 
            "showcase_add_member_details", 
            "showcase_archived_details", 
            "showcase_created_details", 
            "showcase_delete_comment_details", 
            "showcase_edited_details", 
            "showcase_edit_comment_details", 
            "showcase_file_added_details", 
            "showcase_file_download_details", 
            "showcase_file_removed_details", 
            "showcase_file_view_details", 
            "showcase_permanently_deleted_details", 
            "showcase_post_comment_details", 
            "showcase_remove_member_details", 
            "showcase_renamed_details", 
            "showcase_request_access_details", 
            "showcase_resolve_comment_details", 
            "showcase_restored_details", 
            "showcase_trashed_details", 
            "showcase_trashed_deprecated_details", 
            "showcase_unresolve_comment_details", 
            "showcase_untrashed_details", 
            "showcase_untrashed_deprecated_details", 
            "showcase_view_details", 
            "sso_add_cert_details", 
            "sso_add_login_url_details", 
            "sso_add_logout_url_details", 
            "sso_change_cert_details", 
            "sso_change_login_url_details", 
            "sso_change_logout_url_details", 
            "sso_change_saml_identity_mode_details", 
            "sso_remove_cert_details", 
            "sso_remove_login_url_details", 
            "sso_remove_logout_url_details", 
            "team_folder_change_status_details", 
            "team_folder_create_details", 
            "team_folder_downgrade_details", 
            "team_folder_permanently_delete_details", 
            "team_folder_rename_details", 
            "team_selective_sync_settings_changed_details", 
            "account_capture_change_policy_details", 
            "allow_download_disabled_details", 
            "allow_download_enabled_details", 
            "data_placement_restriction_change_policy_details", 
            "data_placement_restriction_satisfy_policy_details", 
            "device_approvals_change_desktop_policy_details", 
            "device_approvals_change_mobile_policy_details", 
            "device_approvals_change_overage_action_details", 
            "device_approvals_change_unlink_action_details", 
            "directory_restrictions_add_members_details", 
            "directory_restrictions_remove_members_details", 
            "emm_add_exception_details", 
            "emm_change_policy_details", 
            "emm_remove_exception_details", 
            "extended_version_history_change_policy_details", 
            "file_comments_change_policy_details", 
            "file_requests_change_policy_details", 
            "file_requests_emails_enabled_details", 
            "file_requests_emails_restricted_to_team_only_details", 
            "google_sso_change_policy_details", 
            "group_user_management_change_policy_details", 
            "member_requests_change_policy_details", 
            "member_space_limits_add_exception_details", 
            "member_space_limits_change_caps_type_policy_details", 
            "member_space_limits_change_policy_details", 
            "member_space_limits_remove_exception_details", 
            "member_suggestions_change_policy_details", 
            "microsoft_office_addin_change_policy_details", 
            "network_control_change_policy_details", 
            "paper_change_deployment_policy_details", 
            "paper_change_member_link_policy_details", 
            "paper_change_member_policy_details", 
            "paper_change_policy_details", 
            "paper_enabled_users_group_addition_details", 
            "paper_enabled_users_group_removal_details", 
            "permanent_delete_change_policy_details", 
            "sharing_change_folder_join_policy_details", 
            "sharing_change_link_policy_details", 
            "sharing_change_member_policy_details", 
            "showcase_change_download_policy_details", 
            "showcase_change_enabled_policy_details", 
            "showcase_change_external_sharing_policy_details", 
            "smart_sync_change_policy_details", 
            "smart_sync_not_opt_out_details", 
            "smart_sync_opt_out_details", 
            "sso_change_policy_details", 
            "tfa_change_policy_details", 
            "two_account_change_policy_details", 
            "web_sessions_change_fixed_length_policy_details", 
            "web_sessions_change_idle_length_policy_details", 
            "team_merge_from_details", 
            "team_merge_to_details", 
            "team_profile_add_logo_details", 
            "team_profile_change_default_language_details", 
            "team_profile_change_logo_details", 
            "team_profile_change_name_details", 
            "team_profile_remove_logo_details", 
            "tfa_add_backup_phone_details", 
            "tfa_add_security_key_details", 
            "tfa_change_backup_phone_details", 
            "tfa_change_status_details", 
            "tfa_remove_backup_phone_details", 
            "tfa_remove_security_key_details", 
            "tfa_reset_details", 
            "missing_details", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of EventDetails"
        }, 
        "paper_content_add_to_folder_details": {
          "$ref": "#/definitions/PaperContentAddToFolderDetails"
        }, 
        "showcase_delete_comment_details": {
          "$ref": "#/definitions/ShowcaseDeleteCommentDetails"
        }, 
        "team_folder_change_status_details": {
          "$ref": "#/definitions/TeamFolderChangeStatusDetails"
        }, 
        "showcase_edit_comment_details": {
          "$ref": "#/definitions/ShowcaseEditCommentDetails"
        }, 
        "shared_folder_unmount_details": {
          "$ref": "#/definitions/SharedFolderUnmountDetails"
        }, 
        "showcase_created_details": {
          "$ref": "#/definitions/ShowcaseCreatedDetails"
        }, 
        "group_user_management_change_policy_details": {
          "$ref": "#/definitions/GroupUserManagementChangePolicyDetails"
        }
      }
    }, 
    "PaperDeploymentPolicy": {
      "type": "object", 
      "description": "full: All team members have access to Paper.\npartial: Only whitelisted team members can access Paper. To see which user is whitelisted, check 'is_paper_whitelisted' on 'account/info'.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "full", 
            "partial", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PaperDeploymentPolicy"
        }
      }
    }, 
    "EmmChangePolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled enterprise mobility management for members.\nnew_value: New enterprise mobility management policy.\nprevious_value: Previous enterprise mobility management policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/EmmState"
        }, 
        "previous_value": {
          "$ref": "#/definitions/EmmState"
        }
      }
    }, 
    "FileCopyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseFileViewType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentDownloadDetails": {
      "type": "object", 
      "description": "Downloaded shared file/folder.\nshared_content_link: Shared content link.\nshared_content_access_level: Shared content access level.\nshared_content_owner: The shared content owner.\n", 
      "properties": {
        "shared_content_owner": {
          "$ref": "#/definitions/UserLogInfo"
        }, 
        "shared_content_link": {
          "type": "string", 
          "description": "Shared content link."
        }, 
        "shared_content_access_level": {
          "$ref": "#/definitions/AccessLevel"
        }
      }
    }, 
    "FileSaveCopyReferenceDetails": {
      "type": "object", 
      "description": "Saved file/folder using copy reference.\nrelocate_action_details: Relocate action details.\n", 
      "properties": {
        "relocate_action_details": {
          "items": {
            "$ref": "#/definitions/RelocateAssetReferencesLogInfo"
          }, 
          "type": "array", 
          "description": "Relocate action details."
        }
      }
    }, 
    "FailureDetailsLogInfo": {
      "type": "object", 
      "description": "Provides details about a failure\nuser_friendly_message: A user friendly explanation of the error. Might be missing due to historical data gap.\ntechnical_error_message: A technical explanation of the error. This is relevant for some errors.\n", 
      "properties": {
        "user_friendly_message": {
          "type": "string", 
          "description": "A user friendly explanation of the error. Might be missing due to historical data gap."
        }, 
        "technical_error_message": {
          "type": "string", 
          "description": "A technical explanation of the error. This is relevant for some errors."
        }
      }
    }, 
    "NamespaceType": {
      "type": "object", 
      "description": "app_folder: App sandbox folder.\nshared_folder: Shared folder.\nteam_folder: Top-level team-owned folder.\nteam_member_folder: Team member's home folder.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "app_folder", 
            "shared_folder", 
            "team_folder", 
            "team_member_folder", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of NamespaceType"
        }
      }
    }, 
    "FilePreviewType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceManagementEnabledDetails": {
      "type": "object", 
      "description": "Enabled device management.\n", 
      "properties": {}
    }, 
    "AccountCapturePolicy": {
      "type": "object", 
      "description": "disabled: None\ninvited_users: None\nall_users: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "invited_users", 
            "all_users", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of AccountCapturePolicy"
        }
      }
    }, 
    "ShowcaseFileAddedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentViewDetails": {
      "type": "object", 
      "description": "Previewed shared file/folder.\nshared_content_link: Shared content link.\nshared_content_access_level: Shared content access level.\nshared_content_owner: The shared content owner.\n", 
      "properties": {
        "shared_content_owner": {
          "$ref": "#/definitions/UserLogInfo"
        }, 
        "shared_content_link": {
          "type": "string", 
          "description": "Shared content link."
        }, 
        "shared_content_access_level": {
          "$ref": "#/definitions/AccessLevel"
        }
      }
    }, 
    "TeamProfileRemoveLogoDetails": {
      "type": "object", 
      "description": "Removed team logo displayed on shared link headers.\n", 
      "properties": {}
    }, 
    "SharedContentChangeViewerInfoPolicyDetails": {
      "type": "object", 
      "description": "Changed whether members can see who viewed shared file/folder.\nnew_value: New viewer info policy.\nprevious_value: Previous view info policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/ViewerInfoPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/ViewerInfoPolicy"
        }
      }
    }, 
    "GroupRemoveMemberType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamFolderIdListArg": {
      "type": "object", 
      "description": "team_folder_ids: The list of team folder IDs.\n", 
      "properties": {
        "team_folder_ids": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "The list of team folder IDs."
        }
      }
    }, 
    "SsoErrorDetails": {
      "type": "object", 
      "description": "Failed to sign in via SSO.\nerror_details: Error details.\n", 
      "properties": {
        "error_details": {
          "$ref": "#/definitions/FailureDetailsLogInfo"
        }
      }
    }, 
    "DomainInvitesSetInviteNewUserPrefToNoType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "NoteAclTeamLinkDetails": {
      "type": "object", 
      "description": "Changed Paper doc to link-accessible for team.\n", 
      "properties": {}
    }, 
    "PaperExternalViewForbidDetails": {
      "type": "object", 
      "description": "Changed Paper external sharing setting to team-only.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "TfaChangeStatusDetails": {
      "type": "object", 
      "description": "Enabled/disabled/changed two-step verification setting.\nnew_value: The new two factor authentication configuration.\nprevious_value: The previous two factor authentication configuration. Might be missing due to historical data gap.\nused_rescue_code: Used two factor authentication rescue code. This flag is relevant when the two factor authentication configuration is disabled.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/TfaConfiguration"
        }, 
        "previous_value": {
          "$ref": "#/definitions/TfaConfiguration"
        }, 
        "used_rescue_code": {
          "type": "boolean", 
          "description": "Used two factor authentication rescue code. This flag is relevant when the two factor authentication configuration is disabled."
        }
      }
    }, 
    "SharedFolderChangeMembersManagementPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceLinkSuccessDetails": {
      "type": "object", 
      "description": "Linked device.\ndevice_session_info: Device's session logged information.\n", 
      "properties": {
        "device_session_info": {
          "$ref": "#/definitions/DeviceSessionLogInfo"
        }
      }
    }, 
    "DomainInvitesApproveRequestToJoinTeamType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseUntrashedDetails": {
      "type": "object", 
      "description": "Restored showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "DeviceApprovalsChangeMobilePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FilePermanentlyDeleteType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberChangeNameType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SsoPolicy": {
      "type": "object", 
      "description": "disabled: Users will be able to sign in with their Dropbox credentials.\noptional: Users will be able to sign in with either their Dropbox or single sign-on credentials.\nrequired: Users will be required to sign in with their single sign-on credentials.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "optional", 
            "required", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SsoPolicy"
        }
      }
    }, 
    "PaperFolderChangeSubscriptionDetails": {
      "type": "object", 
      "description": "Followed/unfollowed Paper folder.\nevent_uuid: Event unique identifier.\nnew_subscription_level: New folder subscription level.\nprevious_subscription_level: Previous folder subscription level. Might be missing due to historical data gap.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }, 
        "previous_subscription_level": {
          "type": "string", 
          "description": "Previous folder subscription level. Might be missing due to historical data gap."
        }, 
        "new_subscription_level": {
          "type": "string", 
          "description": "New folder subscription level."
        }
      }
    }, 
    "AccountCaptureMigrateAccountType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharingChangeFolderJoinPolicyDetails": {
      "type": "object", 
      "description": "Changed whether team members can join shared folders owned outside team.\nnew_value: New external join policy.\nprevious_value: Previous external join policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SharingFolderJoinPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SharingFolderJoinPolicy"
        }
      }
    }, 
    "NoteSharedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SsoChangeSamlIdentityModeType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileRequestDetails": {
      "type": "object", 
      "description": "File request details\nasset_index: Asset position in the Assets list.\ndeadline: File request deadline. Might be missing due to historical data gap.\n", 
      "properties": {
        "asset_index": {
          "type": "number", 
          "description": "Asset position in the Assets list."
        }, 
        "deadline": {
          "$ref": "#/definitions/FileRequestDeadline"
        }
      }
    }, 
    "PasswordResetDetails": {
      "type": "object", 
      "description": "Reset password.\n", 
      "properties": {}
    }, 
    "PaperEnabledUsersGroupRemovalType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberChangeNameDetails": {
      "type": "object", 
      "description": "Changed team member name.\nnew_value: New user's name.\nprevious_value: Previous user's name. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/UserNameLogInfo"
        }, 
        "previous_value": {
          "$ref": "#/definitions/UserNameLogInfo"
        }
      }
    }, 
    "EmmRefreshAuthTokenDetails": {
      "type": "object", 
      "description": "Refreshed auth token used for setting up enterprise mobility management.\n", 
      "properties": {}
    }, 
    "PaperContentPermanentlyDeleteType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SsoRemoveLoginUrlDetails": {
      "type": "object", 
      "description": "Removed sign-in URL for SSO.\nprevious_value: Previous single sign-on login URL.\n", 
      "properties": {
        "previous_value": {
          "type": "string", 
          "description": "Previous single sign-on login URL."
        }
      }
    }, 
    "NoteAclInviteOnlyDetails": {
      "type": "object", 
      "description": "Changed Paper doc to invite-only.\n", 
      "properties": {}
    }, 
    "SharedFolderMembersInheritancePolicy": {
      "type": "object", 
      "description": "Specifies if a shared folder inherits its members from the parent folder.\ninherit_members: None\ndont_inherit_members: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "inherit_members", 
            "dont_inherit_members", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharedFolderMembersInheritancePolicy"
        }
      }
    }, 
    "PaperDocUnresolveCommentDetails": {
      "type": "object", 
      "description": "Unresolved Paper doc comment.\nevent_uuid: Event unique identifier.\ncomment_text: Comment text. Might be missing due to historical data gap.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text. Might be missing due to historical data gap."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "UserNameLogInfo": {
      "type": "object", 
      "description": "User's name logged information\ngiven_name: Given name.\nsurname: Surname.\nlocale: Locale. Might be missing due to historical data gap.\n", 
      "properties": {
        "locale": {
          "type": "string", 
          "description": "Locale. Might be missing due to historical data gap."
        }, 
        "surname": {
          "type": "string", 
          "description": "Surname."
        }, 
        "given_name": {
          "type": "string", 
          "description": "Given name."
        }
      }
    }, 
    "WebSessionsIdleLengthPolicy": {
      "type": "object", 
      "description": "Web sessions idle length policy.\ndefined: Defined idle session length.\nundefined: Undefined idle session length.\nother: None\n", 
      "properties": {
        "defined": {
          "$ref": "#/definitions/DurationLogInfo"
        }, 
        ".tag": {
          "enum": [
            "defined", 
            "undefined", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of WebSessionsIdleLengthPolicy"
        }
      }
    },
    "SfAddGroupDetails": {
      "type": "object", 
      "description": "Added team to shared folder.\ntarget_asset_index: Target asset position in the Assets list.\noriginal_folder_name: Original shared folder name.\nteam_name: Team name.\nsharing_permission: Sharing permission. Might be missing due to historical data gap.\n", 
      "properties": {
        "sharing_permission": {
          "type": "string", 
          "description": "Sharing permission. Might be missing due to historical data gap."
        }, 
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "original_folder_name": {
          "type": "string", 
          "description": "Original shared folder name."
        }, 
        "team_name": {
          "type": "string", 
          "description": "Team name."
        }
      }
    }, 
    "MemberLinkedApps": {
      "type": "object", 
      "description": "Information on linked applications of a team member.\nteam_member_id: The member unique Id.\nlinked_api_apps: List of third party applications linked by this team member.\n", 
      "properties": {
        "team_member_id": {
          "type": "string", 
          "description": "The member unique Id."
        }, 
        "linked_api_apps": {
          "items": {
            "$ref": "#/definitions/ApiApp"
          }, 
          "type": "array", 
          "description": "List of third party applications linked by this team member."
        }
      }
    }, 
    "GroupChangeExternalIdDetails": {
      "type": "object", 
      "description": "Changed external ID for group.\nnew_value: Current external id.\nprevious_value: Old external id.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "Current external id."
        }, 
        "previous_value": {
          "type": "string", 
          "description": "Old external id."
        }
      }
    }, 
    "GroupsMembersListResult": {
      "type": "object", 
      "description": "members: None\ncursor: Pass the cursor into :route:`groups/members/list/continue` to obtain additional group members.\nhas_more: Is true if there are additional group members that have not been returned yet. An additional call to :route:`groups/members/list/continue` can retrieve them.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`groups/members/list/continue` to obtain additional group members."
        }, 
        "has_more": {
          "type": "boolean", 
          "description": "Is true if there are additional group members that have not been returned yet. An additional call to :route:`groups/members/list/continue` can retrieve them."
        }, 
        "members": {
          "items": {
            "$ref": "#/definitions/GroupMemberInfo"
          }, 
          "type": "array"
        }
      }
    }, 
    "FileCommentsChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperDocSlackShareType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperExternalViewAllowType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperDocTeamInviteType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedFolderDeclineInvitationType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberSuggestionsPolicy": {
      "type": "object", 
      "description": "Member suggestions policy\ndisabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MemberSuggestionsPolicy"
        }
      }
    }, 
    "LinkedDeviceLogInfo": {
      "type": "object", 
      "description": "The device sessions that user is linked to.\nmobile_device_session: mobile device session's details.\ndesktop_device_session: desktop device session's details.\nweb_device_session: web device session's details.\nlegacy_device_session: legacy device session's details.\nother: None\n", 
      "properties": {
        "web_device_session": {
          "$ref": "#/definitions/WebDeviceSessionLogInfo"
        }, 
        ".tag": {
          "enum": [
            "mobile_device_session", 
            "desktop_device_session", 
            "web_device_session", 
            "legacy_device_session", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of LinkedDeviceLogInfo"
        }, 
        "mobile_device_session": {
          "$ref": "#/definitions/MobileDeviceSessionLogInfo"
        }, 
        "legacy_device_session": {
          "$ref": "#/definitions/LegacyDeviceSessionLogInfo"
        }, 
        "desktop_device_session": {
          "$ref": "#/definitions/DesktopDeviceSessionLogInfo"
        }
      }
    }, 
    "SharedLinkAddExpiryDetails": {
      "type": "object", 
      "description": "Added shared link expiration date.\nnew_value: New shared link expiration date.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "New shared link expiration date."
        }
      }
    }, 
    "ExtendedVersionHistoryChangePolicyDetails": {
      "type": "object", 
      "description": "Accepted/opted out of extended version history.\nnew_value: New extended version history policy.\nprevious_value: Previous extended version history policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/ExtendedVersionHistoryPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/ExtendedVersionHistoryPolicy"
        }
      }
    }, 
    "SharedLinkAddExpiryType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentAddMemberDetails": {
      "type": "object", 
      "description": "Added users and/or groups to shared file/folder.\nshared_content_access_level: Shared content access level.\n", 
      "properties": {
        "shared_content_access_level": {
          "$ref": "#/definitions/AccessLevel"
        }
      }
    }, 
    "SmartSyncNotOptOutType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfTeamUninviteDetails": {
      "type": "object", 
      "description": "Unshared folder with team member.\ntarget_asset_index: Target asset position in the Assets list.\noriginal_folder_name: Original shared folder name.\n", 
      "properties": {
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "original_folder_name": {
          "type": "string", 
          "description": "Original shared folder name."
        }
      }
    }, 
    "LoginSuccessDetails": {
      "type": "object", 
      "description": "Signed in.\nlogin_method: Login method.\nis_emm_managed: Tells if the login device is EMM managed. Might be missing due to historical data gap.\n", 
      "properties": {
        "login_method": {
          "$ref": "#/definitions/LoginMethod"
        }, 
        "is_emm_managed": {
          "type": "boolean", 
          "description": "Tells if the login device is EMM managed. Might be missing due to historical data gap."
        }
      }
    }, 
    "SharedLinkViewDetails": {
      "type": "object", 
      "description": "Opened shared link.\nshared_link_owner: Shared link owner details. Might be missing due to historical data gap.\n", 
      "properties": {
        "shared_link_owner": {
          "$ref": "#/definitions/UserLogInfo"
        }
      }
    }, 
    "MemberRequestsChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileDeleteDetails": {
      "type": "object", 
      "description": "Deleted files and/or folders.\n", 
      "properties": {}
    }, 
    "SharedContentChangeMemberRoleDetails": {
      "type": "object", 
      "description": "Changed access type of shared file/folder member.\nnew_access_level: New access level.\nprevious_access_level: Previous access level. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_access_level": {
          "$ref": "#/definitions/AccessLevel"
        }, 
        "previous_access_level": {
          "$ref": "#/definitions/AccessLevel"
        }
      }
    }, 
    "ShowcaseAddMemberType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfTeamInviteChangeRoleType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "EmmChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SmartSyncOptOutPolicy": {
      "type": "object", 
      "description": "default: None\nopted_out: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "default", 
            "opted_out", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SmartSyncOptOutPolicy"
        }
      }
    }, 
    "SharedFolderNestType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamActivityCreateReportType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharingChangeLinkPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SsoChangeLogoutUrlType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupsGetInfoItem": {
      "type": "object", 
      "description": "id_not_found: An ID that was provided as a parameter to :route:`groups/get_info`, and did not match a corresponding group. The ID can be a group ID, or an external ID, depending on how the method was called.\ngroup_info: Info about a group.\n", 
      "properties": {
        "group_info": {
          "$ref": "#/definitions/GroupFullInfo"
        }, 
        "id_not_found": {
          "type": "string", 
          "description": "An ID that was provided as a parameter to :route:`groups/get_info`, and did not match a corresponding group. The ID can be a group ID, or an external ID, depending on how the method was called."
        }, 
        ".tag": {
          "enum": [
            "id_not_found", 
            "group_info"
          ], 
          "type": "string", 
          "title": "Choice of GroupsGetInfoItem"
        }
      }
    }, 
    "FileDownloadDetails": {
      "type": "object", 
      "description": "Downloaded files and/or folders.\n", 
      "properties": {}
    }, 
    "SfFbUninviteDetails": {
      "type": "object", 
      "description": "Uninvited Facebook user from shared folder.\ntarget_asset_index: Target asset position in the Assets list.\noriginal_folder_name: Original shared folder name.\n", 
      "properties": {
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "original_folder_name": {
          "type": "string", 
          "description": "Original shared folder name."
        }
      }
    }, 
    "NoteAclLinkDetails": {
      "type": "object", 
      "description": "Changed Paper doc to link-accessible.\n", 
      "properties": {}
    }, 
    "MembersListContinueError": {
      "type": "object", 
      "description": "invalid_cursor: The cursor is invalid.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_cursor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MembersListContinueError"
        }
      }
    }, 
    "GroupUserManagementChangePolicyDetails": {
      "type": "object", 
      "description": "Changed who can create groups.\nnew_value: New group users management policy.\nprevious_value: Previous group users management policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/GroupCreation"
        }, 
        "previous_value": {
          "$ref": "#/definitions/GroupCreation"
        }
      }
    }, 
    "FileRequestChangeType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfExternalInviteWarnDetails": {
      "type": "object", 
      "description": "Set team members to see warning before sharing folders outside team.\ntarget_asset_index: Target asset position in the Assets list.\noriginal_folder_name: Original shared folder name.\nnew_sharing_permission: New sharing permission. Might be missing due to historical data gap.\nprevious_sharing_permission: Previous sharing permission. Might be missing due to historical data gap.\n", 
      "properties": {
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "original_folder_name": {
          "type": "string", 
          "description": "Original shared folder name."
        }, 
        "new_sharing_permission": {
          "type": "string", 
          "description": "New sharing permission. Might be missing due to historical data gap."
        }, 
        "previous_sharing_permission": {
          "type": "string", 
          "description": "Previous sharing permission. Might be missing due to historical data gap."
        }
      }
    }, 
    "TeamSelectiveSyncSettingsChangedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "WebSessionsFixedLengthPolicy": {
      "type": "object", 
      "description": "Web sessions fixed length policy.\ndefined: Defined fixed session length.\nundefined: Undefined fixed session length.\nother: None\n", 
      "properties": {
        "defined": {
          "$ref": "#/definitions/DurationLogInfo"
        }, 
        ".tag": {
          "enum": [
            "defined", 
            "undefined", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of WebSessionsFixedLengthPolicy"
        }
      }
    }, 
    "TeamFolderArchiveError": {
      "type": "object", 
      "description": "access_error: None\nstatus_error: None\nteam_shared_dropbox_error: None\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/TeamFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "status_error", 
            "team_shared_dropbox_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderArchiveError"
        }, 
        "team_shared_dropbox_error": {
          "$ref": "#/definitions/TeamFolderTeamSharedDropboxError"
        }, 
        "status_error": {
          "$ref": "#/definitions/TeamFolderInvalidStatusError"
        }
      }
    }, 
    "RevokeDeviceSessionBatchArg": {
      "type": "object", 
      "description": "revoke_devices: None\n", 
      "properties": {
        "revoke_devices": {
          "items": {
            "$ref": "#/definitions/RevokeDeviceSessionArg"
          }, 
          "type": "array"
        }
      }
    }, 
    "TimeUnit": {
      "type": "object", 
      "description": "milliseconds: None\nseconds: None\nminutes: None\nhours: None\ndays: None\nweeks: None\nmonths: None\nyears: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "milliseconds", 
            "seconds", 
            "minutes", 
            "hours", 
            "days", 
            "weeks", 
            "months", 
            "years", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TimeUnit"
        }
      }
    }, 
    "TeamFolderRenameError": {
      "type": "object", 
      "description": "access_error: None\nstatus_error: None\nteam_shared_dropbox_error: None\nother: None\ninvalid_folder_name: The provided folder name cannot be used.\nfolder_name_already_used: There is already a team folder with the same name.\nfolder_name_reserved: The provided name cannot be used because it is reserved.\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/TeamFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "status_error", 
            "team_shared_dropbox_error", 
            "other", 
            "invalid_folder_name", 
            "folder_name_already_used", 
            "folder_name_reserved"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderRenameError"
        }, 
        "team_shared_dropbox_error": {
          "$ref": "#/definitions/TeamFolderTeamSharedDropboxError"
        }, 
        "status_error": {
          "$ref": "#/definitions/TeamFolderInvalidStatusError"
        }
      }
    }, 
    "ShowcaseExternalSharingPolicy": {
      "type": "object", 
      "description": "Policy for controlling if team members can share Showcases externally.\ndisabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ShowcaseExternalSharingPolicy"
        }
      }
    }, 
    "DeviceApprovalsChangeDesktopPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileUnresolveCommentDetails": {
      "type": "object", 
      "description": "Unresolved file comment.\ncomment_text: Comment text. Might be missing due to historical data gap.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text. Might be missing due to historical data gap."
        }
      }
    }, 
    "SharedContentAddLinkExpiryDetails": {
      "type": "object", 
      "description": "Added expiration date to link for shared file/folder.\nnew_value: New shared content link expiration date. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "New shared content link expiration date. Might be missing due to historical data gap."
        }
      }
    }, 
    "MemberSpaceLimitsAddExceptionType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperAdminExportStartDetails": {
      "type": "object", 
      "description": "Exported all team Paper docs.\n", 
      "properties": {}
    }, 
    "GroupChangeManagementTypeDetails": {
      "type": "object", 
      "description": "Changed group management type.\nnew_value: New group management type.\nprevious_value: Previous group management type. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/GroupManagementType"
        }, 
        "previous_value": {
          "$ref": "#/definitions/GroupManagementType"
        }
      }
    }, 
    "OpenNoteSharedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupCreation": {
      "type": "object", 
      "description": "admins_and_members: Team admins and members can create groups.\nadmins_only: Only team admins can create groups.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "admins_and_members", 
            "admins_only"
          ], 
          "type": "string", 
          "title": "Choice of GroupCreation"
        }
      }
    }, 
    "SsoChangeSamlIdentityModeDetails": {
      "type": "object", 
      "description": "Changed SAML identity mode for SSO.\nprevious_value: Previous single sign-on identity mode.\nnew_value: New single sign-on identity mode.\n", 
      "properties": {
        "new_value": {
          "type": "number", 
          "description": "New single sign-on identity mode."
        }, 
        "previous_value": {
          "type": "number", 
          "description": "Previous single sign-on identity mode."
        }
      }
    }, 
    "EmmCreateExceptionsReportDetails": {
      "type": "object", 
      "description": "Created EMM-excluded users report.\n", 
      "properties": {}
    }, 
    "SharedContentRequestAccessType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "RevokeDeviceSessionBatchError": {
      "type": "object", 
      "description": "other: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "other"
          ], 
          "type": "string", 
          "title": "Choice of RevokeDeviceSessionBatchError"
        }
      }
    }, 
    "SharedContentChangeLinkExpiryType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperAdminExportStartType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "LogoutDetails": {
      "type": "object", 
      "description": "Signed out.\n", 
      "properties": {}
    }, 
    "ShowcaseArchivedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },  
    "AllowDownloadEnabledType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "AccountCaptureRelinquishAccountType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseRenamedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseAccessGrantedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamMergeFromDetails": {
      "type": "object", 
      "description": "Merged another team into this team.\nteam_name: The name of the team that was merged into this team.\n", 
      "properties": {
        "team_name": {
          "type": "string", 
          "description": "The name of the team that was merged into this team."
        }
      }
    }, 
    "GroupChangeExternalIdType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperFolderDeletedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperExternalViewDefaultTeamType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamFolderActivateError": {
      "type": "object", 
      "description": "access_error: None\nstatus_error: None\nteam_shared_dropbox_error: None\nother: None\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/TeamFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "status_error", 
            "team_shared_dropbox_error", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderActivateError"
        }, 
        "team_shared_dropbox_error": {
          "$ref": "#/definitions/TeamFolderTeamSharedDropboxError"
        }, 
        "status_error": {
          "$ref": "#/definitions/TeamFolderInvalidStatusError"
        }
      }
    }, 
    "ShowcaseChangeDownloadPolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled downloading files from Dropbox Showcase for team.\nnew_value: New Dropbox Showcase download policy.\nprevious_value: Previous Dropbox Showcase download policy.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/ShowcaseDownloadPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/ShowcaseDownloadPolicy"
        }
      }
    }, 
    "MemberChangeMembershipTypeDetails": {
      "type": "object", 
      "description": "Changed membership type (limited/full) of member.\nprev_value: Previous membership type.\nnew_value: New membership type.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/TeamMembershipType"
        }, 
        "prev_value": {
          "$ref": "#/definitions/TeamMembershipType"
        }
      }
    }, 
    "TeamFolderUpdateSyncSettingsError": {
      "type": "object", 
      "description": "access_error: None\nstatus_error: None\nteam_shared_dropbox_error: None\nother: None\nsync_settings_error: An error occurred setting the sync settings.\n", 
      "properties": {
        "access_error": {
          "$ref": "#/definitions/TeamFolderAccessError"
        }, 
        ".tag": {
          "enum": [
            "access_error", 
            "status_error", 
            "team_shared_dropbox_error", 
            "other", 
            "sync_settings_error"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderUpdateSyncSettingsError"
        }, 
        "team_shared_dropbox_error": {
          "$ref": "#/definitions/TeamFolderTeamSharedDropboxError"
        }, 
        "status_error": {
          "$ref": "#/definitions/TeamFolderInvalidStatusError"
        }, 
        "sync_settings_error": {
          "$ref": "#/definitions/SyncSettingsError"
        }
      }
    }, 
    "PaperDocChangeSharingPolicyDetails": {
      "type": "object", 
      "description": "Changed sharing setting for Paper doc.\nevent_uuid: Event unique identifier.\npublic_sharing_policy: Sharing policy with external users. Might be missing due to historical data gap.\nteam_sharing_policy: Sharing policy with team. Might be missing due to historical data gap.\n", 
      "properties": {
        "team_sharing_policy": {
          "type": "string", 
          "description": "Sharing policy with team. Might be missing due to historical data gap."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }, 
        "public_sharing_policy": {
          "type": "string", 
          "description": "Sharing policy with external users. Might be missing due to historical data gap."
        }
      }
    }, 
    "PaperDocAddCommentDetails": {
      "type": "object", 
      "description": "Added Paper doc comment.\nevent_uuid: Event unique identifier.\ncomment_text: Comment text. Might be missing due to historical data gap.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text. Might be missing due to historical data gap."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "TeamNamespacesListResult": {
      "type": "object", 
      "description": "Result for :route:`namespaces/list`.\nnamespaces: List of all namespaces the team can access.\ncursor: Pass the cursor into :route:`namespaces/list/continue` to obtain additional namespaces. Note that duplicate namespaces may be returned.\nhas_more: Is true if there are additional namespaces that have not been returned yet.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`namespaces/list/continue` to obtain additional namespaces. Note that duplicate namespaces may be returned."
        }, 
        "has_more": {
          "type": "boolean", 
          "description": "Is true if there are additional namespaces that have not been returned yet."
        }, 
        "namespaces": {
          "items": {
            "$ref": "#/definitions/NamespaceMetadata"
          }, 
          "type": "array", 
          "description": "List of all namespaces the team can access."
        }
      }
    }, 
    "DeviceSessionArg": {
      "type": "object", 
      "description": "session_id: The session id.\nteam_member_id: The unique id of the member owning the device.\n", 
      "properties": {
        "team_member_id": {
          "type": "string", 
          "description": "The unique id of the member owning the device."
        }, 
        "session_id": {
          "type": "string", 
          "description": "The session id."
        }
      }
    }, 
    "AppUnlinkUserType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentRemoveMemberType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "AccountCaptureChangeAvailabilityType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SyncSettingsError": {
      "type": "object", 
      "description": "path: None\nunsupported_combination: Setting this combination of sync settings simultaneously is not supported.\nunsupported_configuration: The specified configuration is not supported.\nother: None\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/LookupError"
        }, 
        ".tag": {
          "enum": [
            "path", 
            "unsupported_combination", 
            "unsupported_configuration", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SyncSettingsError"
        }
      }
    }, 
    "FileUnlikeCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupRenameDetails": {
      "type": "object", 
      "description": "Renamed group.\nprevious_value: Previous display name.\nnew_value: New display name.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "New display name."
        }, 
        "previous_value": {
          "type": "string", 
          "description": "Previous display name."
        }
      }
    }, 
    "PlacementRestriction": {
      "type": "object", 
      "description": "europe_only: None\nnone: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "europe_only", 
            "none", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PlacementRestriction"
        }
      }
    }, 
    "UserCustomQuotaResult": {
      "type": "object", 
      "description": "User and their custom quota in GB (1 TB = 1024 GB).  No quota returns if the user has no custom quota set.\nuser: None\nquota_gb: None\n", 
      "properties": {
        "quota_gb": {
          "type": "number"
        }, 
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        }
      }
    }, 
    "MemberSuggestType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseEditCommentDetails": {
      "type": "object", 
      "description": "Edited showcase comment.\nevent_uuid: Event unique identifier.\ncomment_text: Comment text.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "PaperChangeMemberPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MicrosoftOfficeAddinChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberSpaceLimitsAddCustomQuotaType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberSpaceLimitsChangePolicyDetails": {
      "type": "object", 
      "description": "Changed team default member space limit.\nprevious_value: Previous team default limit value in bytes. Might be missing due to historical data gap.\nnew_value: New team default limit value in bytes. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "type": "number", 
          "description": "New team default limit value in bytes. Might be missing due to historical data gap."
        }, 
        "previous_value": {
          "type": "number", 
          "description": "Previous team default limit value in bytes. Might be missing due to historical data gap."
        }
      }
    }, 
    "SharedLinkRemoveExpiryType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberPermanentlyDeleteAccountContentsDetails": {
      "type": "object", 
      "description": "Permanently deleted contents of deleted team member account.\n", 
      "properties": {}
    }, 
    "ShowcaseArchivedDetails": {
      "type": "object", 
      "description": "Archived showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ShowcasePostCommentDetails": {
      "type": "object", 
      "description": "Added showcase comment.\nevent_uuid: Event unique identifier.\ncomment_text: Comment text.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ShowcaseRestoredDetails": {
      "type": "object", 
      "description": "Unarchived showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "DeviceType": {
      "type": "object", 
      "description": "desktop: None\nmobile: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "desktop", 
            "mobile", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of DeviceType"
        }
      }
    }, 
    "OpenNoteSharedDetails": {
      "type": "object", 
      "description": "Opened shared Paper doc.\n", 
      "properties": {}
    }, 
    "PasswordResetAllType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseRestoredType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamMemberStatus": {
      "type": "object", 
      "description": "The user's status as a member of a specific team.\nactive: User has successfully joined the team.\ninvited: User has been invited to a team, but has not joined the team yet.\nsuspended: User is no longer a member of the team, but the account can be un-suspended, re-establishing the user as a team member.\nremoved: User is no longer a member of the team. Removed users are only listed when include_removed is true in members/list.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "active", 
            "invited", 
            "suspended", 
            "removed"
          ], 
          "type": "string", 
          "title": "Choice of TeamMemberStatus"
        }, 
        "removed": {
          "$ref": "#/definitions/RemovedStatus"
        }
      }
    }, 
    "DeviceApprovalsChangeUnlinkActionDetails": {
      "type": "object", 
      "description": "Changed device approvals setting when member unlinks approved device.\nnew_value: New device unlink policy. Might be missing due to historical data gap.\nprevious_value: Previous device unlink policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/DeviceUnlinkPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/DeviceUnlinkPolicy"
        }
      }
    }, 
    "SmartSyncChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfTeamJoinType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharingChangeMemberPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SsoAddLoginUrlType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberSpaceLimitsChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileDeleteType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupJoinPolicyUpdatedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileChangeCommentSubscriptionDetails": {
      "type": "object", 
      "description": "Subscribed to or unsubscribed from comment notifications for file.\nnew_value: New file comment subscription.\nprevious_value: Previous file comment subscription. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/FileCommentNotificationPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/FileCommentNotificationPolicy"
        }
      }
    }, 
    "FileChangeCommentSubscriptionType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "EnabledDomainInvitesDetails": {
      "type": "object", 
      "description": "Enabled domain invites.\n", 
      "properties": {}
    }, 
    "TeamFolderCreateArg": {
      "type": "object", 
      "description": "name: Name for the new team folder.\nsync_setting: The sync setting to apply to this team folder. Only permitted if the team has team selective sync enabled.\n", 
      "properties": {
        "sync_setting": {
          "$ref": "#/definitions/SyncSettingArg"
        }, 
        "name": {
          "type": "string", 
          "description": "Name for the new team folder."
        }
      }
    }, 
    "TfaRemoveSecurityKeyDetails": {
      "type": "object", 
      "description": "Removed security key for two-step verification.\n", 
      "properties": {}
    }, 
    "PaperDocUntrashedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MembersUnsuspendError": {
      "type": "object", 
      "description": "user_not_found: No matching user found. The provided team_member_id, email, or external_id does not exist on this team.\nuser_not_in_team: The user is not a member of the team.\nother: None\nunsuspend_non_suspended_member: The user is unsuspended, so it cannot be unsuspended again.\nteam_license_limit: Team is full. The organization has no available licenses.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "user_not_found", 
            "user_not_in_team", 
            "other", 
            "unsuspend_non_suspended_member", 
            "team_license_limit"
          ], 
          "type": "string", 
          "title": "Choice of MembersUnsuspendError"
        }
      }
    }, 
    "DurationLogInfo": {
      "type": "object", 
      "description": "Represents a time duration: unit and amount\nunit: Time unit.\namount: Amount of time.\n", 
      "properties": {
        "amount": {
          "type": "number", 
          "description": "Amount of time."
        }, 
        "unit": {
          "$ref": "#/definitions/TimeUnit"
        }
      }
    }, 
    "PaperContentRenameDetails": {
      "type": "object", 
      "description": "Renamed Paper doc/folder.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ShowcaseTrashedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceDeleteOnUnlinkFailDetails": {
      "type": "object", 
      "description": "Failed to delete all files from unlinked device.\nnum_failures: The number of times that remote file deletion failed.\nsession_info: Session unique id. Might be missing due to historical data gap.\ndisplay_name: The device name. Might be missing due to historical data gap.\n", 
      "properties": {
        "display_name": {
          "type": "string", 
          "description": "The device name. Might be missing due to historical data gap."
        }, 
        "num_failures": {
          "type": "number", 
          "description": "The number of times that remote file deletion failed."
        }, 
        "session_info": {
          "$ref": "#/definitions/SessionLogInfo"
        }
      }
    }, 
    "SharedLinkCopyDetails": {
      "type": "object", 
      "description": "Added file/folder to Dropbox from shared link.\nshared_link_owner: Shared link owner details. Might be missing due to historical data gap.\n", 
      "properties": {
        "shared_link_owner": {
          "$ref": "#/definitions/UserLogInfo"
        }
      }
    }, 
    "ShowcaseRequestAccessDetails": {
      "type": "object", 
      "description": "Requested access to showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ExtendedVersionHistoryChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "TeamNamespacesListError": {
      "type": "object",
      "properties": {
        ".tag": {
          "enum": [
            "invalid_arg", 
            "other"
          ], 
          "type": "string"
        }
      }
    },    
    "TeamNamespacesListContinueError": {
      "type": "object", 
      "description": "invalid_cursor: The cursor is invalid.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_cursor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TeamNamespacesListContinueError"
        }
      }
    }, 
    "MemberAddResult": {
      "type": "object", 
      "description": "Describes the result of attempting to add a single user to the team. 'success' is the only value indicating that a user was indeed added to the team - the other values explain the type of failure that occurred, and include the email of the user for which the operation has failed.\nsuccess: Describes a user that was successfully added to the team.\nteam_license_limit: Team is already full. The organization has no available licenses.\nfree_team_member_limit_reached: Team is already full. The free team member limit has been reached.\nuser_already_on_team: User is already on this team. The provided email address is associated with a user who is already a member of (including in recoverable state) or invited to the team.\nuser_on_another_team: User is already on another team. The provided email address is associated with a user that is already a member or invited to another team.\nuser_already_paired: User is already paired.\nuser_migration_failed: User migration has failed.\nduplicate_external_member_id: A user with the given external member ID already exists on the team (including in recoverable state).\nduplicate_member_persistent_id: A user with the given persistent ID already exists on the team (including in recoverable state).\npersistent_id_disabled: Persistent ID is only available to teams with persistent ID SAML configuration. Please contact Dropbox for more information.\nuser_creation_failed: User creation has failed.\n", 
      "properties": {
        "team_license_limit": {
          "type": "string", 
          "description": "Team is already full. The organization has no available licenses."
        },
        "free_team_member_limit_reached": {
          "type": "string", 
          "description": "Team is already full. The free team member limit has been reached."
        },
        "user_already_on_team": {
          "type": "string", 
          "description": "User is already on this team. The provided email address is associated with a user who is already a member of (including in recoverable state) or invited to the team."
        },
        "user_on_another_team": {
          "type": "string", 
          "description": "User is already on another team. The provided email address is associated with a user that is already a member or invited to another team."
        },
        "user_already_paired": {
          "type": "string", 
          "description": "User is already paired."
        },
        "user_migration_failed": {
          "type": "string", 
          "description": "User migration has failed."
        },
        "duplicate_external_member_id": {
          "type": "string", 
          "description": "A user with the given external member ID already exists on the team (including in recoverable state)."
        },
        "duplicate_member_persistent_id": {
          "type": "string", 
          "description": "A user with the given persistent ID already exists on the team (including in recoverable state)."
        },
        "persistent_id_disabled": {
          "type": "string", 
          "description": "Persistent ID is only available to teams with persistent ID SAML configuration. Please contact Dropbox for more information."
        },
        "user_creation_failed": {
          "type": "string", 
          "description": "User creation has failed."
        },
        "success": {
          "$ref": "#/definitions/TeamMemberInformation"
        },        
        ".tag": {
          "enum": [
            "success", 
            "team_license_limit", 
            "free_team_member_limit_reached", 
            "user_already_on_team", 
            "user_on_another_team", 
            "user_already_paired", 
            "user_migration_failed", 
            "duplicate_external_member_id", 
            "duplicate_member_persistent_id", 
            "persistent_id_disabled", 
            "user_creation_failed"
          ], 
          "type": "string", 
          "title": "Choice of MemberAddResult"
        }
      }
    }, 
    "PaperDocMentionDetails": {
      "type": "object", 
      "description": "Mentioned team member in Paper doc.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "SharedContentRemoveInviteesType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupMembersAddArg": {
      "type": "object", 
      "description": "group: Group to which users will be added.\nmembers: List of users to be added to the group.\nreturn_members: Whether to return the list of members in the group.  Note that the default value will cause all the group members  to be returned in the response. This may take a long time for large groups.\n", 
      "properties": {
        "return_members": {
          "type": "boolean", 
          "description": "Whether to return the list of members in the group.  Note that the default value will cause all the group members  to be returned in the response. This may take a long time for large groups."
        }, 
        "group": {
          "$ref": "#/definitions/GroupSelector"
        }, 
        "members": {
          "items": {
            "$ref": "#/definitions/MemberAccess"
          }, 
          "type": "array", 
          "description": "List of users to be added to the group."
        }
      }
    }, 
    "ShowcaseRemoveMemberDetails": {
      "type": "object", 
      "description": "Removed member from showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "SharedContentRelinquishMembershipDetails": {
      "type": "object", 
      "description": "Left shared file/folder.\n", 
      "properties": {}
    }, 
    "DomainVerificationAddDomainFailDetails": {
      "type": "object", 
      "description": "Failed to verify team domain.\ndomain_name: Domain name.\nverification_method: Domain name verification method. Might be missing due to historical data gap.\n", 
      "properties": {
        "verification_method": {
          "type": "string", 
          "description": "Domain name verification method. Might be missing due to historical data gap."
        }, 
        "domain_name": {
          "type": "string", 
          "description": "Domain name."
        }
      }
    }, 
    "TeamMergeToType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GetStorageReport": {
      "type": "object", 
      "description": "Storage Report Result. Each of the items in the storage report is an array of values, one value per day. If there is no data for a day, then the value will be None.\nstart_date: First date present in the results as 'YYYY-MM-DD' or None.\ntotal_usage: Sum of the shared, unshared, and datastore usages, for each day.\nshared_usage: Array of the combined size (bytes) of team members' shared folders, for each day.\nunshared_usage: Array of the combined size (bytes) of team members' root namespaces, for each day.\nshared_folders: Array of the number of shared folders owned by team members, for each day.\nmember_storage_map: Array of storage summaries of team members' account sizes. Each storage summary is an array of key, value pairs, where each pair describes a storage bucket. The key indicates the upper bound of the bucket and the value is the number of users in that bucket. There is one such summary per day. If there is no data for a day, the storage summary will be empty.\n", 
      "properties": {
        "total_usage": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Sum of the shared, unshared, and datastore usages, for each day."
        }, 
        "member_storage_map": {
          "items": {
            "items": {
              "$ref": "#/definitions/StorageBucket"
            }, 
            "type": "array"
          }, 
          "type": "array", 
          "description": "Array of storage summaries of team members' account sizes. Each storage summary is an array of key, value pairs, where each pair describes a storage bucket. The key indicates the upper bound of the bucket and the value is the number of users in that bucket. There is one such summary per day. If there is no data for a day, the storage summary will be empty."
        }, 
        "shared_usage": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the combined size (bytes) of team members' shared folders, for each day."
        }, 
        "unshared_usage": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the combined size (bytes) of team members' root namespaces, for each day."
        }, 
        "shared_folders": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the number of shared folders owned by team members, for each day."
        }, 
        "start_date": {
          "type": "string", 
          "description": "First date present in the results as 'YYYY-MM-DD' or None."
        }
      }
    }, 
    "PathLogInfo": {
      "type": "object", 
      "description": "Path's details.\nnamespace_relative: Path relative to the namespace containing the content.\ncontextual: Fully qualified path relative to event's context. Might be missing due to historical data gap.\n", 
      "properties": {
        "namespace_relative": {
          "$ref": "#/definitions/NamespaceRelativePathLogInfo"
        }, 
        "contextual": {
          "type": "string", 
          "description": "Fully qualified path relative to event's context. Might be missing due to historical data gap."
        }
      }
    }, 
    "GetTeamEventsError": {
      "type": "object", 
      "description": "Errors that can be raised when calling :route:`get_events`.\naccount_id_not_found: No user found matching the provided account_id.\ninvalid_time_range: Invalid time range.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "account_id_not_found", 
            "invalid_time_range", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GetTeamEventsError"
        }
      }
    }, 
    "SharedContentClaimInvitationType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileRequestReceiveFileType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "AccountCaptureChangeAvailabilityDetails": {
      "type": "object", 
      "description": "Granted/revoked option to enable account capture on team domains.\nnew_value: New account capture availabilty value.\nprevious_value: Previous account capture availabilty value. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/AccountCaptureAvailability"
        }, 
        "previous_value": {
          "$ref": "#/definitions/AccountCaptureAvailability"
        }
      }
    }, 
    "SharedLinkCopyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberSuggestionsChangePolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled option for team members to suggest people to add to team.\nnew_value: New team member suggestions policy.\nprevious_value: Previous team member suggestions policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/MemberSuggestionsPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/MemberSuggestionsPolicy"
        }
      }
    }, 
    "PaperExternalViewAllowDetails": {
      "type": "object", 
      "description": "Changed Paper external sharing setting to anyone.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ResellerLogInfo": {
      "type": "object", 
      "description": "Reseller information.\nreseller_name: Reseller name.\nreseller_email: Reseller email.\n", 
      "properties": {
        "reseller_name": {
          "type": "string", 
          "description": "Reseller name."
        }, 
        "reseller_email": {
          "type": "string", 
          "description": "Reseller email."
        }
      }
    }, 
    "AppLinkTeamDetails": {
      "type": "object", 
      "description": "Linked app for team.\napp_info: Relevant application details.\n", 
      "properties": {
        "app_info": {
          "$ref": "#/definitions/AppLogInfo"
        }
      }
    },  
    "GroupUserManagementChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberChangeStatusType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfTeamInviteType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ContentPermanentDeletePolicy": {
      "type": "object", 
      "description": "Policy for pemanent content deletion\ndisabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ContentPermanentDeletePolicy"
        }
      }
    }, 
    "TeamFolderListContinueArg": {
      "type": "object", 
      "description": "cursor: Indicates from what point to get the next set of team folders.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Indicates from what point to get the next set of team folders."
        }
      }
    }, 
    "PaperDocRevertType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SsoRemoveLogoutUrlType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamFolderRenameType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedLinkDisableType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "RolloutMethod": {
      "type": "object", 
      "description": "unlink_all: Unlink all.\nunlink_most_inactive: Unlink devices with the most inactivity.\nadd_member_to_exceptions: Add member to Exceptions.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "unlink_all", 
            "unlink_most_inactive", 
            "add_member_to_exceptions"
          ], 
          "type": "string", 
          "title": "Choice of RolloutMethod"
        }
      }
    }, 
    "AccountCaptureNotificationEmailsSentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceChangeIpMobileType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfFbUninviteType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberSuggestionsChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperDocViewType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamNamespacesListContinueArg": {
      "type": "object", 
      "description": "cursor: Indicates from what point to get the next set of team-accessible namespaces.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Indicates from what point to get the next set of team-accessible namespaces."
        }
      }
    }, 
    "PaperDocTeamInviteDetails": {
      "type": "object", 
      "description": "Shared Paper doc with team member.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "SharedContentRequestAccessDetails": {
      "type": "object", 
      "description": "Requested access to shared file/folder.\nshared_content_link: Shared content link.\n", 
      "properties": {
        "shared_content_link": {
          "type": "string", 
          "description": "Shared content link."
        }
      }
    }, 
    "SharedContentRelinquishMembershipType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedLinkCreateType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharingAllowlistAddArgs":{
      "type":"object",
      "properties":{
        "domains":{
          "type":"array",
          "items":{
            "type":"string"
          }
        },
        "emails":{
          "type":"array",
          "items":{
            "type":"string"
          }
        }
      }
    },
    "SharingAllowlistListResponse":{
      "type":"object",
      "properties":{
        "domains":{
          "type":"array",
          "items":{
            "type":"string"
          }
        },
        "emails":{
          "type":"array",
          "items":{
            "type":"string"
          }
        },
        "cursor":{
          "type":"string"
        },
        "has_more":{
          "type":"boolean"
        }
      }
    },
    "ShowcaseDownloadPolicy": {
      "type": "object", 
      "description": "Policy for controlling if files can be downloaded from Showcases by team members\ndisabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ShowcaseDownloadPolicy"
        }
      }
    }, 
    "SharedContentAddLinkPasswordType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TeamActivityCreateReportDetails": {
      "type": "object", 
      "description": "Created team activity report.\nstart_date: Report start date.\nend_date: Report end date.\n", 
      "properties": {
        "start_date": {
          "type": "string", 
          "description": "Report start date."
        }, 
        "end_date": {
          "type": "string", 
          "description": "Report end date."
        }
      }
    }, 
    "SetCustomQuotaError": {
      "type": "object", 
      "description": "Error returned when setting member custom quota.\ntoo_many_users: A maximum of 1000 users can be set for a single call.\nother: None\nsome_users_are_excluded: Some of the users are on the excluded users list and can't have custom quota set.\n", 
      "properties": {
        ".tag": {
          "enum": [
            "too_many_users", 
            "other", 
            "some_users_are_excluded"
          ], 
          "type": "string", 
          "title": "Choice of SetCustomQuotaError"
        }
      }
    }, 
    "HasTeamSharedDropboxValue": {
      "type": "object", 
      "description": "The value for :field:`Feature.has_team_shared_dropbox`.\nhas_team_shared_dropbox: Does this team have a shared team root.\nother: None\n", 
      "properties": {
        "has_team_shared_dropbox": {
          "type": "boolean", 
          "description": "Does this team have a shared team root."
        }, 
        ".tag": {
          "enum": [
            "has_team_shared_dropbox", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of HasTeamSharedDropboxValue"
        }
      }
    }, 
    "TeamMemberProfile": {
      "type": "object", 
      "description": "Profile of a user as a member of a team.\nteam_member_id: ID of user as a member of a team.\nemail: Email address of user.\nemail_verified: Is true if the user's email is verified to be owned by the user.\nstatus: The user's status as a member of a specific team.\nname: Representations for a person's name.\nmembership_type: The user's membership type: full (normal team member) vs limited (does not use a license; no access to the team's shared quota).\ngroups: List of group IDs of groups that the user belongs to.\nmember_folder_id: The namespace id of the user's root folder.\nexternal_id: External ID that a team can attach to the user. An application using the API may find it easier to use their own IDs instead of Dropbox IDs like account_id or team_member_id.\naccount_id: A user's account identifier.\njoined_on: The date and time the user joined as a member of a specific team.\npersistent_id: Persistent ID that a team can attach to the user. The persistent ID is unique ID to be used for SAML authentication.\nis_directory_restricted: Whether the user is a directory restricted user.\n", 
      "properties": {
        "team_member_id": {
          "type": "string", 
          "description": "ID of user as a member of a team."
        },
        "email": {
          "type": "string", 
          "description": "Email address of user."
        },
        "email_verified": {
          "type": "boolean", 
          "description": "Is true if the user's email is verified to be owned by the user."
        },
        "status": {
          "$ref": "#/definitions/TeamMemberStatus"
        },
        "name": {
          "$ref": "#/definitions/Name"
        }, 
        "membership_type": {
          "$ref": "#/definitions/TeamMembershipType"
        },
        "groups": {
          "items": {
            "type": "string"
          },
          "type": "array", 
          "description": "List of group IDs of groups that the user belongs to."
        },
        "member_folder_id": {
          "type": "string", 
          "description": "The namespace id of the user's root folder."
        },
        "external_id": {
          "type": "string", 
          "description": "External ID that a team can attach to the user. An application using the API may find it easier to use their own IDs instead of Dropbox IDs like account_id or team_member_id."
        },
        "account_id": {
          "type": "string", 
          "description": "A user's account identifier."
        },
        "secondary_emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecondaryEmail"
          }
        },
        "invited_on": {
          "type": "string", 
          "description": "The date and time the user was invited to the team."
        },
        "joined_on": {
          "type": "string", 
          "description": "The date and time the user joined as a member of a specific team."
        },
        "suspended_on": {
          "type": "string", 
          "description": "The date and time the user was suspended from the team."
        }, 
        "is_directory_restricted": {
          "type": "boolean", 
          "description": "Whether the user is a directory restricted user."
        },          
        "persistent_id": {
          "type": "string", 
          "description": "Persistent ID that a team can attach to the user. The persistent ID is unique ID to be used for SAML authentication."
        },
        "profile_photo_url": {
          "type": "string", 
          "description": "URL for the photo representing the user, if one is set."
        }
      }
    }, 
    "LegacyDeviceSessionLogInfo": {
      "type": "object", 
      "description": "Information on sessions, in legacy format\nip_address: The IP address of the last activity from this session. Might be missing due to historical data gap.\ncreated: The time this session was created. Might be missing due to historical data gap.\nupdated: The time of the last activity from this session. Might be missing due to historical data gap.\nsession_info: Session unique id. Might be missing due to historical data gap.\ndisplay_name: The device name. Might be missing due to historical data gap.\nis_emm_managed: Is device managed by emm. Might be missing due to historical data gap.\nplatform: Information on the hosting platform. Might be missing due to historical data gap.\nmac_address: The mac address of the last activity from this session. Might be missing due to historical data gap.\nos_version: The hosting OS version. Might be missing due to historical data gap.\ndevice_type: Information on the hosting device type. Might be missing due to historical data gap.\nclient_version: The Dropbox client version. Might be missing due to historical data gap.\nlegacy_uniq_id: Alternative unique device session id, instead of session id field. Might be missing due to historical data gap.\n", 
      "properties": {
        "legacy_uniq_id": {
          "type": "string", 
          "description": "Alternative unique device session id, instead of session id field. Might be missing due to historical data gap."
        }, 
        "updated": {
          "type": "string", 
          "description": "The time of the last activity from this session. Might be missing due to historical data gap."
        }, 
        "display_name": {
          "type": "string", 
          "description": "The device name. Might be missing due to historical data gap."
        }, 
        "created": {
          "type": "string", 
          "description": "The time this session was created. Might be missing due to historical data gap."
        }, 
        "session_info": {
          "$ref": "#/definitions/SessionLogInfo"
        }, 
        "os_version": {
          "type": "string", 
          "description": "The hosting OS version. Might be missing due to historical data gap."
        }, 
        "platform": {
          "type": "string", 
          "description": "Information on the hosting platform. Might be missing due to historical data gap."
        }, 
        "device_type": {
          "type": "string", 
          "description": "Information on the hosting device type. Might be missing due to historical data gap."
        }, 
        "mac_address": {
          "type": "string", 
          "description": "The mac address of the last activity from this session. Might be missing due to historical data gap."
        }, 
        "client_version": {
          "type": "string", 
          "description": "The Dropbox client version. Might be missing due to historical data gap."
        }, 
        "ip_address": {
          "type": "string", 
          "description": "The IP address of the last activity from this session. Might be missing due to historical data gap."
        }, 
        "is_emm_managed": {
          "type": "boolean", 
          "description": "Is device managed by emm. Might be missing due to historical data gap."
        }
      }
    }, 
    "DeviceLinkSuccessType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PasswordChangeDetails": {
      "type": "object", 
      "description": "Changed password.\n", 
      "properties": {}
    }, 
    "DeviceUnlinkPolicy": {
      "type": "object", 
      "description": "remove: None\nkeep: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "remove", 
            "keep", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of DeviceUnlinkPolicy"
        }
      }
    }, 
    "FileRenameDetails": {
      "type": "object", 
      "description": "Renamed files and/or folders.\nrelocate_action_details: Relocate action details.\n", 
      "properties": {
        "relocate_action_details": {
          "items": {
            "$ref": "#/definitions/RelocateAssetReferencesLogInfo"
          }, 
          "type": "array", 
          "description": "Relocate action details."
        }
      }
    }, 
    "SharedContentAddLinkExpiryType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GoogleSsoChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ExcludedUsersUpdateResult": {
      "type": "object", 
      "description": "Excluded users update result.\nstatus: Update status.\n", 
      "properties": {
        "status": {
          "$ref": "#/definitions/ExcludedUsersUpdateStatus"
        }
      }
    }, 
    "DomainInvitesSetInviteNewUserPrefToYesDetails": {
      "type": "object", 
      "description": "Enabled \"Automatically invite new users\".\n", 
      "properties": {}
    }, 
    "NamespaceRelativePathLogInfo": {
      "type": "object", 
      "description": "Namespace relative path details.\nns_id: Namespace ID. Might be missing due to historical data gap.\nrelative_path: A path relative to the specified namespace ID. Might be missing due to historical data gap.\n", 
      "properties": {
        "ns_id": {
          "type": "string", 
          "description": "Namespace ID. Might be missing due to historical data gap."
        }, 
        "relative_path": {
          "type": "string", 
          "description": "A path relative to the specified namespace ID. Might be missing due to historical data gap."
        }
      }
    }, 
    "SsoRemoveCertType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DomainInvitesSetInviteNewUserPrefToYesType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DirectoryRestrictionsRemoveMembersType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupDescriptionUpdatedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileAddDetails": {
      "type": "object", 
      "description": "Added files and/or folders.\n", 
      "properties": {}
    }, 
    "PaperDocSlackShareDetails": {
      "type": "object", 
      "description": "Shared Paper doc via Slack.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ShowcaseEnabledPolicy": {
      "type": "object", 
      "description": "Policy for controlling whether Showcase is enabled.\ndisabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ShowcaseEnabledPolicy"
        }
      }
    }, 
    "WebSessionsChangeFixedLengthPolicyDetails": {
      "type": "object", 
      "description": "Changed how long members can stay signed in to Dropbox.com.\nnew_value: New session length policy. Might be missing due to historical data gap.\nprevious_value: Previous session length policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/WebSessionsFixedLengthPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/WebSessionsFixedLengthPolicy"
        }
      }
    }, 
    "TeamProfileChangeNameDetails": {
      "type": "object", 
      "description": "Changed team name.\nnew_value: New team name.\nprevious_value: Previous teams name. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/TeamName"
        }, 
        "previous_value": {
          "$ref": "#/definitions/TeamName"
        }
      }
    }, 
    "SsoRemoveCertDetails": {
      "type": "object", 
      "description": "Removed X.509 certificate for SSO.\n", 
      "properties": {}
    }, 
    "SfTeamUninviteType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfFbInviteChangeRoleDetails": {
      "type": "object", 
      "description": "Changed Facebook user's role in shared folder.\ntarget_asset_index: Target asset position in the Assets list.\noriginal_folder_name: Original shared folder name.\nprevious_sharing_permission: Previous sharing permission. Might be missing due to historical data gap.\nnew_sharing_permission: New sharing permission. Might be missing due to historical data gap.\n", 
      "properties": {
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "original_folder_name": {
          "type": "string", 
          "description": "Original shared folder name."
        }, 
        "new_sharing_permission": {
          "type": "string", 
          "description": "New sharing permission. Might be missing due to historical data gap."
        }, 
        "previous_sharing_permission": {
          "type": "string", 
          "description": "Previous sharing permission. Might be missing due to historical data gap."
        }
      }
    }, 
    "SharedContentRemoveLinkExpiryType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GoogleSsoChangePolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled Google single sign-on for team.\nnew_value: New Google single sign-on policy.\nprevious_value: Previous Google single sign-on policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/GoogleSsoPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/GoogleSsoPolicy"
        }
      }
    }, 
    "SharedContentAddLinkPasswordDetails": {
      "type": "object", 
      "description": "Added password to link for shared file/folder.\n", 
      "properties": {}
    }, 
    "ListMembersDevicesError": {
      "type": "object", 
      "description": "reset: Indicates that the cursor has been invalidated. Call :route:`devices/list_members_devices` again with an empty cursor to obtain a new cursor.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "reset", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListMembersDevicesError"
        }
      }
    }, 
    "TeamFolderInvalidStatusError": {
      "type": "object", 
      "description": "active: The folder is active and the operation did not succeed.\narchived: The folder is archived and the operation did not succeed.\narchive_in_progress: The folder is being archived and the operation did not succeed.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "active", 
            "archived", 
            "archive_in_progress", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderInvalidStatusError"
        }
      }
    }, 
    "SyncSettingArg": {
      "type": "object", 
      "description": "default: On first sync to members' computers, the specified folder will follow its parent folder's setting or otherwise follow default sync behavior.\nnot_synced: On first sync to members' computers, the specified folder will be set to not sync with selective sync.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "default", 
            "not_synced", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SyncSettingArg"
        }
      }
    }, 
    "FileRequestsChangePolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled file requests.\nnew_value: New file requests policy.\nprevious_value: Previous file requests policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/FileRequestsPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/FileRequestsPolicy"
        }
      }
    }, 
    "PaperChangeMemberLinkPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileRequestsPolicy": {
      "type": "object", 
      "description": "File requests policy\ndisabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of FileRequestsPolicy"
        }
      }
    }, 
    "GroupFullInfo": {
      "type": "object", 
      "description": "Full description of a group.\ngroup_name: None\ngroup_id: None\ngroup_management_type: Who is allowed to manage the group.\ncreated: The group creation time as a UTC timestamp in milliseconds since the Unix epoch.\ngroup_external_id: External ID of group. This is an arbitrary ID that an admin can attach to a group.\nmember_count: The number of members in the group.\nmembers: List of group members.\n", 
      "properties": {
        "group_external_id": {
          "type": "string", 
          "description": "External ID of group. This is an arbitrary ID that an admin can attach to a group."
        }, 
        "member_count": {
          "type": "number", 
          "description": "The number of members in the group."
        }, 
        "created": {
          "type": "number", 
          "description": "The group creation time as a UTC timestamp in milliseconds since the Unix epoch."
        }, 
        "group_management_type": {
          "$ref": "#/definitions/GroupManagementType"
        }, 
        "group_name": {
          "type": "string"
        }, 
        "members": {
          "items": {
            "$ref": "#/definitions/GroupMemberInfo"
          }, 
          "type": "array", 
          "description": "List of group members."
        }, 
        "group_id": {
          "type": "string"
        }
      }
    }, 
    "WebSessionsChangeFixedLengthPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentRemoveLinkExpiryDetails": {
      "type": "object", 
      "description": "Removed link expiration date of shared file/folder.\nprevious_value: Previous shared content link expiration date. Might be missing due to historical data gap.\n", 
      "properties": {
        "previous_value": {
          "type": "string", 
          "description": "Previous shared content link expiration date. Might be missing due to historical data gap."
        }
      }
    }, 
    "TeamMemberPolicies": {
      "type": "object", 
      "description": "Policies governing team members.\nsharing: Policies governing sharing.\nemm_state: This describes the Enterprise Mobility Management (EMM) state for this team. This information can be used to understand if an organization is integrating with a third-party EMM vendor to further manage and apply restrictions upon the team's Dropbox usage on mobile devices. This is a new feature and in the future we'll be adding more new fields and additional documentation.\noffice_addin: The admin policy around the Dropbox Office Add-In for this team.\n", 
      "properties": {
        "sharing": {
          "$ref": "#/definitions/TeamSharingPolicies"
        }, 
        "emm_state": {
          "$ref": "#/definitions/EmmState"
        }, 
        "office_addin": {
          "$ref": "#/definitions/OfficeAddInPolicy"
        },
        "suggest_members_policy": {
          "$ref": "#/definitions/SuggestMemberPolicy"
        }
      }
    },
    "ActorLogInfo": {
      "type": "object", 
      "description": "The entity who performed the action.\nuser: The user who did the action.\nadmin: The admin who did the action.\napp: The application who did the action.\nreseller: Action done by reseller.\ndropbox: Action done by Dropbox.\nanonymous: Anonymous actor.\nother: None\n", 
      "properties": {
        "admin": {
          "$ref": "#/definitions/UserLogInfo"
        }, 
        "app": {
          "$ref": "#/definitions/AppLogInfo"
        }, 
        ".tag": {
          "enum": [
            "user", 
            "admin", 
            "app", 
            "reseller", 
            "dropbox", 
            "anonymous", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ActorLogInfo"
        }, 
        "user": {
          "$ref": "#/definitions/UserLogInfo"
        }, 
        "reseller": {
          "$ref": "#/definitions/ResellerLogInfo"
        }
      }
    }, 
    "Certificate": {
      "type": "object", 
      "description": "Certificate details.\nsubject: Certificate subject.\nissuer: Certificate issuer.\nissue_date: Certificate issue date.\nexpiration_date: Certificate expiration date.\nserial_number: Certificate serial number.\nsha1_fingerprint: Certificate sha1 fingerprint.\ncommon_name: Certificate common name.\n", 
      "properties": {
        "issue_date": {
          "type": "string", 
          "description": "Certificate issue date."
        }, 
        "expiration_date": {
          "type": "string", 
          "description": "Certificate expiration date."
        }, 
        "sha1_fingerprint": {
          "type": "string", 
          "description": "Certificate sha1 fingerprint."
        }, 
        "common_name": {
          "type": "string", 
          "description": "Certificate common name."
        }, 
        "serial_number": {
          "type": "string", 
          "description": "Certificate serial number."
        }, 
        "subject": {
          "type": "string", 
          "description": "Certificate subject."
        }, 
        "issuer": {
          "type": "string", 
          "description": "Certificate issuer."
        }
      }
    }, 
    "EmmErrorType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseUntrashedDeprecatedDetails": {
      "type": "object", 
      "description": "Restored showcase (old version).\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ListMemberAppsResult": {
      "type": "object", 
      "description": "linked_api_apps: List of third party applications linked by this team member.\n", 
      "properties": {
        "linked_api_apps": {
          "items": {
            "$ref": "#/definitions/ApiApp"
          }, 
          "type": "array", 
          "description": "List of third party applications linked by this team member."
        }
      }
    }, 
    "MemberSpaceLimitsRemoveExceptionType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceManagementDisabledType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MembersListContinueArg": {
      "type": "object", 
      "description": "cursor: Indicates from what point to get the next set of members.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Indicates from what point to get the next set of members."
        }
      }
    }, 
    "TeamFolderRenameDetails": {
      "type": "object", 
      "description": "Renamed active/archived team folder.\nprevious_folder_name: Previous folder name.\nnew_folder_name: New folder name.\n", 
      "properties": {
        "previous_folder_name": {
          "type": "string", 
          "description": "Previous folder name."
        }, 
        "new_folder_name": {
          "type": "string", 
          "description": "New folder name."
        }
      }
    }, 
    "MemberChangeEmailType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileRequestCloseDetails": {
      "type": "object", 
      "description": "Closed file request.\nfile_request_id: File request id. Might be missing due to historical data gap.\nprevious_details: Previous file request details. Might be missing due to historical data gap.\n", 
      "properties": {
        "file_request_id": {
          "type": "string", 
          "description": "File request id. Might be missing due to historical data gap."
        }, 
        "previous_details": {
          "$ref": "#/definitions/FileRequestDetails"
        }
      }
    }, 
    "DomainInvitesSetInviteNewUserPrefToNoDetails": {
      "type": "object", 
      "description": "Disabled \"Automatically invite new users\".\n", 
      "properties": {}
    }, 
    "GroupMembersSetAccessTypeArg": {
      "type": "object", 
      "description": "group: Specify a group.\nuser: Identity of a user that is a member of :field:`group`.\naccess_type: New group access type the user will have.\nreturn_members: Whether to return the list of members in the group.  Note that the default value will cause all the group members  to be returned in the response. This may take a long time for large groups.\n", 
      "properties": {
        "return_members": {
          "type": "boolean", 
          "description": "Whether to return the list of members in the group.  Note that the default value will cause all the group members  to be returned in the response. This may take a long time for large groups."
        }, 
        "group": {
          "$ref": "#/definitions/GroupSelector"
        }, 
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        }, 
        "access_type": {
          "$ref": "#/definitions/GroupAccessType"
        }
      }
    }, 
    "GetActivityReport": {
      "type": "object", 
      "description": "Activity Report Result. Each of the items in the storage report is an array of values, one value per day. If there is no data for a day, then the value will be None.\nstart_date: First date present in the results as 'YYYY-MM-DD' or None.\nadds: Array of total number of adds by team members.\nedits: Array of number of edits by team members. If the same user edits the same file multiple times this is counted as a single edit.\ndeletes: Array of total number of deletes by team members.\nactive_users_28_day: Array of the number of users who have been active in the last 28 days.\nactive_users_7_day: Array of the number of users who have been active in the last week.\nactive_users_1_day: Array of the number of users who have been active in the last day.\nactive_shared_folders_28_day: Array of the number of shared folders with some activity in the last 28 days.\nactive_shared_folders_7_day: Array of the number of shared folders with some activity in the last week.\nactive_shared_folders_1_day: Array of the number of shared folders with some activity in the last day.\nshared_links_created: Array of the number of shared links created.\nshared_links_viewed_by_team: Array of the number of views by team users to shared links created by the team.\nshared_links_viewed_by_outside_user: Array of the number of views by users outside of the team to shared links created by the team.\nshared_links_viewed_by_not_logged_in: Array of the number of views by non-logged-in users to shared links created by the team.\nshared_links_viewed_total: Array of the total number of views to shared links created by the team.\n", 
      "properties": {
        "shared_links_viewed_by_team": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the number of views by team users to shared links created by the team."
        }, 
        "adds": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of total number of adds by team members."
        }, 
        "active_shared_folders_28_day": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the number of shared folders with some activity in the last 28 days."
        }, 
        "shared_links_viewed_by_not_logged_in": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the number of views by non-logged-in users to shared links created by the team."
        }, 
        "active_users_7_day": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the number of users who have been active in the last week."
        }, 
        "shared_links_created": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the number of shared links created."
        }, 
        "active_users_28_day": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the number of users who have been active in the last 28 days."
        }, 
        "edits": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of number of edits by team members. If the same user edits the same file multiple times this is counted as a single edit."
        }, 
        "shared_links_viewed_by_outside_user": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the number of views by users outside of the team to shared links created by the team."
        }, 
        "active_users_1_day": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the number of users who have been active in the last day."
        }, 
        "active_shared_folders_7_day": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the number of shared folders with some activity in the last week."
        }, 
        "active_shared_folders_1_day": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the number of shared folders with some activity in the last day."
        }, 
        "start_date": {
          "type": "string", 
          "description": "First date present in the results as 'YYYY-MM-DD' or None."
        }, 
        "shared_links_viewed_total": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of the total number of views to shared links created by the team."
        }, 
        "deletes": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Array of total number of deletes by team members."
        }
      }
    }, 
    "GroupAddExternalIdDetails": {
      "type": "object", 
      "description": "Added external ID for group.\nnew_value: Current external id.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "Current external id."
        }
      }
    },  
    "TeamProfileChangeLogoType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileCopyDetails": {
      "type": "object", 
      "description": "Copied files and/or folders.\nrelocate_action_details: Relocate action details.\n", 
      "properties": {
        "relocate_action_details": {
          "items": {
            "$ref": "#/definitions/RelocateAssetReferencesLogInfo"
          }, 
          "type": "array", 
          "description": "Relocate action details."
        }
      }
    }, 
    "PaperFolderChangeSubscriptionType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SsoRemoveLoginUrlType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupDeleteType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "SharedContentChangeLinkPasswordType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperContentRemoveMemberType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberSpaceLimitsChangeStatusDetails": {
      "type": "object", 
      "description": "Changed space limit status.\nprevious_value: Previous storage quota status.\nnew_value: New storage quota status.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SpaceLimitsStatus"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SpaceLimitsStatus"
        }
      }
    },
    "ListMemberAppsError": {
      "type": "object", 
      "description": "Error returned by :route:`linked_apps/list_member_linked_apps`.\nmember_not_found: Member not found.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "member_not_found", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListMemberAppsError"
        }
      }
    }, 
    "DisabledDomainInvitesDetails": {
      "type": "object", 
      "description": "Disabled domain invites.\n", 
      "properties": {}
    }, 
    "FolderLogInfo": {
      "type": "object", 
      "description": "Folder's logged information.\npath: Path relative to event context.\ndisplay_name: Display name. Might be missing due to historical data gap.\nfile_id: Unique ID. Might be missing due to historical data gap.\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/PathLogInfo"
        }, 
        "display_name": {
          "type": "string", 
          "description": "Display name. Might be missing due to historical data gap."
        }, 
        "file_id": {
          "type": "string", 
          "description": "Unique ID. Might be missing due to historical data gap."
        }
      }
    }, 
    "EmmRemoveExceptionType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceDeleteOnUnlinkSuccessType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperMemberPolicy": {
      "type": "object", 
      "description": "Policy for controlling if team members can share Paper documents externally.\nanyone_with_link: None\nonly_team: None\nteam_and_explicitly_shared: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "anyone_with_link", 
            "only_team", 
            "team_and_explicitly_shared", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of PaperMemberPolicy"
        }
      }
    }, 
    "GroupAddMemberDetails": {
      "type": "object", 
      "description": "Added team members to group.\nis_group_owner: Is group owner.\n", 
      "properties": {
        "is_group_owner": {
          "type": "boolean", 
          "description": "Is group owner."
        }
      }
    }, 
    "MemberSpaceLimitsChangeStatusType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SfInviteGroupType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperChangePolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled Dropbox Paper for team.\nnew_value: New Dropbox Paper policy.\nprevious_value: Previous Dropbox Paper policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/PaperEnabledPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/PaperEnabledPolicy"
        }
      }
    }, 
    "TeamFolderChangeStatusDetails": {
      "type": "object", 
      "description": "Changed archival status of team folder.\nnew_value: New team folder status.\nprevious_value: Previous team folder status. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/TeamFolderStatus"
        }, 
        "previous_value": {
          "$ref": "#/definitions/TeamFolderStatus"
        }
      }
    }, 
    "CollectionShareType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedLinkShareType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperDocRequestAccessType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberSpaceLimitsChangeCapsTypePolicyDetails": {
      "type": "object", 
      "description": "Changed member space limit type for team.\nprevious_value: Previous space limit type.\nnew_value: New space limit type.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SpaceCapsType"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SpaceCapsType"
        }
      }
    }, 
    "DesktopDeviceSessionLogInfo": {
      "type": "object", 
      "description": "Information about linked Dropbox desktop client sessions\nhost_name: Name of the hosting desktop.\nclient_type: The Dropbox desktop client type.\nplatform: Information on the hosting platform.\nis_delete_on_unlink_supported: Whether itu2019s possible to delete all of the account files upon unlinking.\nip_address: The IP address of the last activity from this session. Might be missing due to historical data gap.\ncreated: The time this session was created. Might be missing due to historical data gap.\nupdated: The time of the last activity from this session. Might be missing due to historical data gap.\nsession_info: Desktop session unique id. Might be missing due to historical data gap.\nclient_version: The Dropbox client version.\n", 
      "properties": {
        "updated": {
          "type": "string", 
          "description": "The time of the last activity from this session. Might be missing due to historical data gap."
        }, 
        "session_info": {
          "$ref": "#/definitions/DesktopSessionLogInfo"
        }, 
        "created": {
          "type": "string", 
          "description": "The time this session was created. Might be missing due to historical data gap."
        }, 
        "platform": {
          "type": "string", 
          "description": "Information on the hosting platform."
        }, 
        "client_type": {
          "$ref": "#/definitions/DesktopPlatform"
        }, 
        "host_name": {
          "type": "string", 
          "description": "Name of the hosting desktop."
        }, 
        "is_delete_on_unlink_supported": {
          "type": "boolean", 
          "description": "Whether itu2019s possible to delete all of the account files upon unlinking."
        }, 
        "client_version": {
          "type": "string", 
          "description": "The Dropbox client version."
        }, 
        "ip_address": {
          "type": "string", 
          "description": "The IP address of the last activity from this session. Might be missing due to historical data gap."
        }
      }
    }, 
    "EmmAddExceptionDetails": {
      "type": "object", 
      "description": "Added members to EMM exception list.\n", 
      "properties": {}
    }, 
    "PaperDocAddCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ListMemberDevicesError": {
      "type": "object", 
      "description": "member_not_found: Member not found.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "member_not_found", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of ListMemberDevicesError"
        }
      }
    }, 
    "FileRequestsChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedLinkCreateDetails": {
      "type": "object", 
      "description": "Created shared link.\nshared_link_access_level: Defines who can access the shared link. Might be missing due to historical data gap.\n", 
      "properties": {
        "shared_link_access_level": {
          "$ref": "#/definitions/SharedLinkAccessLevel"
        }
      }
    }, 
    "RevokeLinkedApiAppBatchArg": {
      "type": "object", 
      "description": "revoke_linked_app: None\n", 
      "properties": {
        "revoke_linked_app": {
          "items": {
            "$ref": "#/definitions/RevokeLinkedApiAppArg"
          }, 
          "type": "array"
        }
      }
    }, 
    "DesktopSessionLogInfo": {
      "type": "object", 
      "description": "Desktop session.\nsession_id: Session ID. Might be missing due to historical data gap.\n", 
      "properties": {
        "session_id": {
          "type": "string", 
          "description": "Session ID. Might be missing due to historical data gap."
        }
      }
    }, 
    "PaperDocFollowedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharingChangeLinkPolicyDetails": {
      "type": "object", 
      "description": "Changed whether members can share links outside team, and if links are accessible only by team members or anyone by default.\nnew_value: New external link accessibility policy.\nprevious_value: Previous external link accessibility policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SharingLinkPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SharingLinkPolicy"
        }
      }
    }, 
    "SfFbInviteDetails": {
      "type": "object", 
      "description": "Invited Facebook users to shared folder.\ntarget_asset_index: Target asset position in the Assets list.\noriginal_folder_name: Original shared folder name.\nsharing_permission: Sharing permission. Might be missing due to historical data gap.\n", 
      "properties": {
        "sharing_permission": {
          "type": "string", 
          "description": "Sharing permission. Might be missing due to historical data gap."
        }, 
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "original_folder_name": {
          "type": "string", 
          "description": "Original shared folder name."
        }
      }
    }, 
    "UploadApiRateLimitValue": {
      "type": "object", 
      "description": "The value for :field:`Feature.upload_api_rate_limit`.\nunlimited: This team has unlimited upload API quota. So far both server version account and legacy  account type have unlimited monthly upload api quota.\nlimit: The number of upload API calls allowed per month.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "unlimited", 
            "limit", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of UploadApiRateLimitValue"
        }, 
        "limit": {
          "type": "number", 
          "description": "The number of upload API calls allowed per month."
        }
      }
    }, 
    "ShowcaseUnresolveCommentDetails": {
      "type": "object", 
      "description": "Unresolved showcase comment.\nevent_uuid: Event unique identifier.\ncomment_text: Comment text.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "TeamFolderCreateType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedFolderMountDetails": {
      "type": "object", 
      "description": "Added shared folder to own Dropbox.\n", 
      "properties": {}
    }, 
    "RevokeDeviceSessionStatus": {
      "type": "object", 
      "description": "success: Result of the revoking request.\nerror_type: The error cause in case of a failure.\n", 
      "properties": {
        "error_type": {
          "$ref": "#/definitions/RevokeDeviceSessionError"
        }, 
        "success": {
          "type": "boolean", 
          "description": "Result of the revoking request."
        }
      }
    }, 
    "TeamProfileChangeNameType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PermanentDeleteChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TfaChangePolicyDetails": {
      "type": "object", 
      "description": "Changed two-step verification setting for team.\nnew_value: New change policy.\nprevious_value: Previous change policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/TwoStepVerificationPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/TwoStepVerificationPolicy"
        }
      }
    }, 
    "GroupUpdateArgs": {
      "type": "object", 
      "description": "group: Specify a group.\nreturn_members: Whether to return the list of members in the group.  Note that the default value will cause all the group members  to be returned in the response. This may take a long time for large groups.\nnew_group_name: Optional argument. Set group name to this if provided.\nnew_group_external_id: Optional argument. New group external ID. If the argument is None, the group's external_id won't be updated. If the argument is empty string, the group's external id will be cleared.\nnew_group_management_type: Set new group management type, if provided.\n", 
      "properties": {
        "new_group_external_id": {
          "type": "string", 
          "description": "Optional argument. New group external ID. If the argument is None, the group's external_id won't be updated. If the argument is empty string, the group's external id will be cleared."
        }, 
        "new_group_name": {
          "type": "string", 
          "description": "Optional argument. Set group name to this if provided."
        }, 
        "return_members": {
          "type": "boolean", 
          "description": "Whether to return the list of members in the group.  Note that the default value will cause all the group members  to be returned in the response. This may take a long time for large groups."
        }, 
        "new_group_management_type": {
          "$ref": "#/definitions/GroupManagementType"
        }, 
        "group": {
          "$ref": "#/definitions/GroupSelector"
        }
      }
    }, 
    "DomainVerificationAddDomainSuccessType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileCommentNotificationPolicy": {
      "type": "object", 
      "description": "Enable or disable file comments notifications\ndisabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of FileCommentNotificationPolicy"
        }
      }
    }, 
    "PaperExternalViewDefaultTeamDetails": {
      "type": "object", 
      "description": "Changed Paper external sharing setting to default team.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "SharedContentRemoveMemberDetails": {
      "type": "object", 
      "description": "Removed user/group from shared file/folder.\nshared_content_access_level: Shared content access level.\n", 
      "properties": {
        "shared_content_access_level": {
          "$ref": "#/definitions/AccessLevel"
        }
      }
    }, 
    "PaperContentArchiveDetails": {
      "type": "object", 
      "description": "Archived Paper doc/folder.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "DeviceUnlinkDetails": {
      "type": "object", 
      "description": "Disconnected device.\ndelete_data: True if the user requested to delete data after device unlink, false otherwise.\nsession_info: Session unique id.\ndisplay_name: The device name. Might be missing due to historical data gap.\n", 
      "properties": {
        "session_info": {
          "$ref": "#/definitions/SessionLogInfo"
        }, 
        "display_name": {
          "type": "string", 
          "description": "The device name. Might be missing due to historical data gap."
        }, 
        "delete_data": {
          "type": "boolean", 
          "description": "True if the user requested to delete data after device unlink, false otherwise."
        }
      }
    }, 
    "MembersUnsuspendArg": {
      "type": "object", 
      "description": "Exactly one of team_member_id, email, or external_id must be provided to identify the user account.\nuser: Identity of user to unsuspend.\n", 
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        }
      }
    }, 
    "GroupsGetInfoError": {
      "type": "object", 
      "description": "group_not_on_team: The group is not on your team.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "group_not_on_team", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of GroupsGetInfoError"
        }
      }
    }, 
    "GetMembershipReport": {
      "type": "object", 
      "description": "Membership Report Result. Each of the items in the storage report is an array of values, one value per day. If there is no data for a day, then the value will be None.\nstart_date: First date present in the results as 'YYYY-MM-DD' or None.\nteam_size: Team size, for each day.\npending_invites: The number of pending invites to the team, for each day.\nmembers_joined: The number of members that joined the team, for each day.\nsuspended_members: The number of suspended team members, for each day.\nlicenses: The total number of licenses the team has, for each day.\n", 
      "properties": {
        "team_size": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "Team size, for each day."
        }, 
        "suspended_members": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "The number of suspended team members, for each day."
        }, 
        "members_joined": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "The number of members that joined the team, for each day."
        }, 
        "licenses": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "The total number of licenses the team has, for each day."
        }, 
        "pending_invites": {
          "items": {
            "type": "number"
          }, 
          "type": "array", 
          "description": "The number of pending invites to the team, for each day."
        }, 
        "start_date": {
          "type": "string", 
          "description": "First date present in the results as 'YYYY-MM-DD' or None."
        }
      }
    }, 
    "DeviceUnlinkType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberStatus": {
      "type": "object", 
      "description": "not_joined: None\ninvited: None\nactive: None\nsuspended: None\nremoved: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "not_joined", 
            "invited", 
            "active", 
            "suspended", 
            "removed", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MemberStatus"
        }
      }
    }, 
    "SharingMemberPolicy": {
      "type": "object", 
      "description": "External sharing policy\nallow: None\nforbid: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "allow", 
            "forbid", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharingMemberPolicy"
        }
      }
    }, 
    "SharedFolderChangeMembersInheritancePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileDownloadType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharingFolderJoinPolicy": {
      "type": "object", 
      "description": "Policy for controlling if team members can join shared folders owned by non team members.\nfrom_anyone: None\nfrom_team_only: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "from_anyone", 
            "from_team_only", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharingFolderJoinPolicy"
        }
      }
    }, 
    "PaperContentAddToFolderDetails": {
      "type": "object", 
      "description": "Added Paper doc/folder to folder.\nevent_uuid: Event unique identifier.\ntarget_asset_index: Target asset position in the Assets list.\nparent_asset_index: Parent asset position in the Assets list.\n", 
      "properties": {
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }, 
        "parent_asset_index": {
          "type": "number", 
          "description": "Parent asset position in the Assets list."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "FileGetCopyReferenceType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedContentUnshareDetails": {
      "type": "object", 
      "description": "Unshared file/folder by clearing membership and turning off link.\n", 
      "properties": {}
    }, 
    "SharedFolderUnmountType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TwoAccountChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TfaConfiguration": {
      "type": "object", 
      "description": "Two factor authentication configuration. Note: the enabled option is deprecated.\ndisabled: None\nenabled: None\nsms: None\nauthenticator: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "sms", 
            "authenticator", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TfaConfiguration"
        }
      }
    }, 
    "MembersAddLaunch": {
      "type": "object", 
      "description": "async_job_id: This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job.\ncomplete: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "async_job_id", 
            "complete"
          ], 
          "type": "string", 
          "title": "Choice of MembersAddLaunch"
        }, 
        "async_job_id": {
          "type": "string", 
          "description": "This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job."
        }, 
        "complete": {
          "items": {
            "$ref": "#/definitions/MemberAddResult"
          }, 
          "type": "array"
        }
      }
    }, 
    "ShowcaseUntrashedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "UserLogInfo": {
      "type": "object", 
      "description": "User's logged information.\naccount_id: User unique ID. Might be missing due to historical data gap.\ndisplay_name: User display name. Might be missing due to historical data gap.\nemail: User email address. Might be missing due to historical data gap.\n", 
      "properties": {
        "display_name": {
          "type": "string", 
          "description": "User display name. Might be missing due to historical data gap."
        }, 
        "account_id": {
          "type": "string", 
          "description": "User unique ID. Might be missing due to historical data gap."
        }, 
        "email": {
          "type": "string", 
          "description": "User email address. Might be missing due to historical data gap."
        }
      }
    }, 
    "ExportMembersReportDetails": {
      "type": "object", 
      "description": "Created member data report.\n", 
      "properties": {}
    }, 
    "RevokeLinkedAppStatus": {
      "type": "object", 
      "description": "success: Result of the revoking request.\nerror_type: The error cause in case of a failure.\n", 
      "properties": {
        "error_type": {
          "$ref": "#/definitions/RevokeLinkedAppError"
        }, 
        "success": {
          "type": "boolean", 
          "description": "Result of the revoking request."
        }
      }
    }, 
    "PaperChangeMemberLinkPolicyDetails": {
      "type": "object", 
      "description": "Changed whether non-members can view Paper docs with link.\nnew_value: New paper external link accessibility policy.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/PaperMemberPolicy"
        }
      }
    }, 
    "MembersGetInfoArgs": {
      "type": "object", 
      "description": "members: List of team members.\n", 
      "properties": {
        "members": {
          "items": {
            "$ref": "#/definitions/UserSelectorArg"
          }, 
          "type": "array", 
          "description": "List of team members."
        }
      }
    }, 
    "GroupMovedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileRestoreDetails": {
      "type": "object", 
      "description": "Restored deleted files and/or folders.\n", 
      "properties": {}
    }, 
    "PaperDocRequestAccessDetails": {
      "type": "object", 
      "description": "Requested access to Paper doc.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ShowcaseResolveCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupsListResult": {
      "type": "object", 
      "description": "groups: None\ncursor: Pass the cursor into :route:`groups/list/continue` to obtain the additional groups.\nhas_more: Is true if there are additional groups that have not been returned yet. An additional call to :route:`groups/list/continue` can retrieve them.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`groups/list/continue` to obtain the additional groups."
        }, 
        "has_more": {
          "type": "boolean", 
          "description": "Is true if there are additional groups that have not been returned yet. An additional call to :route:`groups/list/continue` can retrieve them."
        }, 
        "groups": {
          "items": {
            "$ref": "#/definitions/GroupSummary"
          }, 
          "type": "array"
        }
      }
    }, 
    "SfInviteGroupDetails": {
      "type": "object", 
      "description": "Invited group to shared folder.\ntarget_asset_index: Target asset position in the Assets list.\n", 
      "properties": {
        "target_asset_index": {
          "type": "number", 
          "description": "Target asset position in the Assets list."
        }
      }
    },
    "DomainInvitesRequestToJoinTeamDetails": {
      "type": "object", 
      "description": "Requested to join team.\n", 
      "properties": {}
    }, 
    "GroupMembersRemoveError": {
      "type": "object", 
      "description": "group_not_found: No matching group found. No groups match the specified group ID.\nother: None\nsystem_managed_group_disallowed: This operation is not supported on system-managed groups.\nmember_not_in_group: At least one of the specified users is not a member of the group.\ngroup_not_in_team: Group is not in this team. You cannot remove members from a group that is outside of your team.\nmembers_not_in_team: These members are not part of your team.\nusers_not_found: These users were not found in Dropbox.\n", 
      "properties": {
        "members_not_in_team": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "These members are not part of your team."
        }, 
        "users_not_found": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "These users were not found in Dropbox."
        }, 
        ".tag": {
          "enum": [
            "group_not_found", 
            "other", 
            "system_managed_group_disallowed", 
            "member_not_in_group", 
            "group_not_in_team", 
            "members_not_in_team", 
            "users_not_found"
          ], 
          "type": "string", 
          "title": "Choice of GroupMembersRemoveError"
        }
      }
    }, 
    "MemberPermanentlyDeleteAccountContentsType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "TfaChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MicrosoftOfficeAddinChangePolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled Microsoft Office add-in.\nnew_value: New Microsoft Office addin policy.\nprevious_value: Previous Microsoft Office addin policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/MicrosoftOfficeAddinPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/MicrosoftOfficeAddinPolicy"
        }
      }
    }, 
    "SharingChangeFolderJoinPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberSpaceLimitsChangeCustomQuotaType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "EmmCreateExceptionsReportType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "MobileSessionLogInfo": {
      "type": "object", 
      "description": "Mobile session.\nsession_id: Session ID. Might be missing due to historical data gap.\n", 
      "properties": {
        "session_id": {
          "type": "string", 
          "description": "Session ID. Might be missing due to historical data gap."
        }
      }
    }, 
    "PaperDocUntrashedDetails": {
      "type": "object", 
      "description": "Restored Paper doc.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "ListMemberDevicesArg": {
      "type": "object", 
      "description": "team_member_id: The team's member id.\ninclude_web_sessions: Whether to list web sessions of the team's member.\ninclude_desktop_clients: Whether to list linked desktop devices of the team's member.\ninclude_mobile_clients: Whether to list linked mobile devices of the team's member.\n", 
      "properties": {
        "team_member_id": {
          "type": "string", 
          "description": "The team's member id."
        }, 
        "include_desktop_clients": {
          "type": "boolean", 
          "description": "Whether to list linked desktop devices of the team's member."
        }, 
        "include_web_sessions": {
          "type": "boolean", 
          "description": "Whether to list web sessions of the team's member."
        }, 
        "include_mobile_clients": {
          "type": "boolean", 
          "description": "Whether to list linked mobile devices of the team's member."
        }
      }
    }, 
    "TwoStepVerificationPolicy": {
      "type": "object", 
      "description": "require_tfa_enable: Enabled require two factor authorization.\nrequire_tfa_disable: Disabled require two factor authorization.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "require_tfa_enable", 
            "require_tfa_disable", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TwoStepVerificationPolicy"
        }
      }
    }, 
    "PaperDocDeletedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ResellerSupportSessionStartDetails": {
      "type": "object", 
      "description": "Started reseller support session.\n", 
      "properties": {}
    }, 
    "PasswordResetAllDetails": {
      "type": "object", 
      "description": "Reset all team member passwords.\n", 
      "properties": {}
    }, 
    "EmmRefreshAuthTokenType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperDocChangeSubscriptionType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "CreateFolderDetails": {
      "type": "object", 
      "description": "Created folders.\n", 
      "properties": {}
    }, 
    "SmartSyncChangePolicyDetails": {
      "type": "object", 
      "description": "Changed default Smart Sync setting for team members.\nnew_value: New smart sync policy.\nprevious_value: Previous smart sync policy.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SmartSyncPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SmartSyncPolicy"
        }
      }
    }, 
    "PaperDocViewDetails": {
      "type": "object", 
      "description": "Viewed Paper doc.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    },
    "PaperDocEditType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileRequestCreateDetails": {
      "type": "object", 
      "description": "Created file request.\nfile_request_id: File request id. Might be missing due to historical data gap.\nrequest_details: File request details. Might be missing due to historical data gap.\n", 
      "properties": {
        "file_request_id": {
          "type": "string", 
          "description": "File request id. Might be missing due to historical data gap."
        }, 
        "request_details": {
          "$ref": "#/definitions/FileRequestDetails"
        }
      }
    }, 
    "NoteAclTeamLinkType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "CustomQuotaError": {
      "type": "object", 
      "description": "Error returned when getting member custom quota.\ntoo_many_users: A maximum of 1000 users can be set for a single call.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "too_many_users", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of CustomQuotaError"
        }
      }
    }, 
    "TeamFolderArchiveLaunch": {
      "type": "object", 
      "description": "async_job_id: This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job.\ncomplete: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "async_job_id", 
            "complete"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderArchiveLaunch"
        }, 
        "async_job_id": {
          "type": "string", 
          "description": "This response indicates that the processing is asynchronous. The string is an id that can be used to obtain the status of the asynchronous job."
        }, 
        "complete": {
          "$ref": "#/definitions/TeamFolderMetadata"
        }
      }
    }, 
    "RelocateAssetReferencesLogInfo": {
      "type": "object", 
      "description": "Provides the indices of the source asset and the destination asset for a relocate action.\nsrc_asset_index: Source asset position in the Assets list.\ndest_asset_index: Destination asset position in the Assets list.\n", 
      "properties": {
        "src_asset_index": {
          "type": "number", 
          "description": "Source asset position in the Assets list."
        }, 
        "dest_asset_index": {
          "type": "number", 
          "description": "Destination asset position in the Assets list."
        }
      }
    }, 
    "AccountCaptureChangePolicyDetails": {
      "type": "object", 
      "description": "Changed account capture setting on team domain.\nnew_value: New account capture policy.\nprevious_value: Previous account capture policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/AccountCapturePolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/AccountCapturePolicy"
        }
      }
    }, 
    "FileLogInfo": {
      "type": "object", 
      "description": "File's logged information.\npath: Path relative to event context.\ndisplay_name: Display name. Might be missing due to historical data gap.\nfile_id: Unique ID. Might be missing due to historical data gap.\n", 
      "properties": {
        "path": {
          "$ref": "#/definitions/PathLogInfo"
        }, 
        "display_name": {
          "type": "string", 
          "description": "Display name. Might be missing due to historical data gap."
        }, 
        "file_id": {
          "type": "string", 
          "description": "Unique ID. Might be missing due to historical data gap."
        }
      }
    }, 
    "SsoChangePolicyDetails": {
      "type": "object", 
      "description": "Changed single sign-on setting for team.\nnew_value: New single sign-on policy.\nprevious_value: Previous single sign-on policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SsoPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SsoPolicy"
        }
      }
    }, 
    "ShowcaseChangeExternalSharingPolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "AccountCaptureAvailability": {
      "type": "object", 
      "description": "unavailable: None\navailable: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "unavailable", 
            "available", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of AccountCaptureAvailability"
        }
      }
    }, 
    "RevokeDesktopClientArg": {
      "type": "object", 
      "description": "session_id: The session id.\nteam_member_id: The unique id of the member owning the device.\ndelete_on_unlink: Whether to delete all files of the account (this is possible only if supported by the desktop client and  will be made the next time the client access the account).\n", 
      "properties": {
        "team_member_id": {
          "type": "string", 
          "description": "The unique id of the member owning the device."
        }, 
        "delete_on_unlink": {
          "type": "boolean", 
          "description": "Whether to delete all files of the account (this is possible only if supported by the desktop client and  will be made the next time the client access the account)."
        }, 
        "session_id": {
          "type": "string", 
          "description": "The session id."
        }
      }
    }, 
    "FileAddType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceApprovalsChangeDesktopPolicyDetails": {
      "type": "object", 
      "description": "Set/removed limit on number of computers member can link to team Dropbox account.\nnew_value: New desktop device approvals policy. Might be missing due to historical data gap.\nprevious_value: Previous desktop device approvals policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/DeviceApprovalsPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/DeviceApprovalsPolicy"
        }
      }
    }, 
    "TeamFolderListResult": {
      "type": "object", 
      "description": "Result for :route:`team_folder/list` and :route:`team_folder/list/continue`.\nteam_folders: List of all team folders in the authenticated team.\ncursor: Pass the cursor into :route:`team_folder/list/continue` to obtain additional team folders.\nhas_more: Is true if there are additional team folders that have not been returned yet. An additional call to :route:`team_folder/list/continue` can retrieve them.\n", 
      "properties": {
        "cursor": {
          "type": "string", 
          "description": "Pass the cursor into :route:`team_folder/list/continue` to obtain additional team folders."
        }, 
        "has_more": {
          "type": "boolean", 
          "description": "Is true if there are additional team folders that have not been returned yet. An additional call to :route:`team_folder/list/continue` can retrieve them."
        }, 
        "team_folders": {
          "items": {
            "$ref": "#/definitions/TeamFolderMetadata"
          }, 
          "type": "array", 
          "description": "List of all team folders in the authenticated team."
        }
      }
    }, 
    "GroupJoinPolicyUpdatedDetails": {
      "type": "object", 
      "description": "Updated group join policy.\nis_company_managed: Is company managed group. Might be missing due to historical data gap.\njoin_policy: Group join policy.\n", 
      "properties": {
        "is_company_managed": {
          "type": "boolean", 
          "description": "Is company managed group. Might be missing due to historical data gap."
        }, 
        "join_policy": {
          "$ref": "#/definitions/GroupJoinPolicy"
        }
      }
    },
    "EnabledDomainInvitesType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperContentRemoveFromFolderType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperContentAddToFolderType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DomainInvitesRequestToJoinTeamType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "SfExternalInviteWarnType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "NetworkControlPolicy": {
      "type": "object", 
      "description": "Network control policy\ndisabled: None\nenabled: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "disabled", 
            "enabled", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of NetworkControlPolicy"
        }
      }
    }, 
    "FilePreviewDetails": {
      "type": "object", 
      "description": "Previewed files and/or folders.\n", 
      "properties": {}
    }, 
    "SharedLinkRemoveExpiryDetails": {
      "type": "object", 
      "description": "Removed shared link expiration date.\nprevious_value: Previous shared link expiration date. Might be missing due to historical data gap.\n", 
      "properties": {
        "previous_value": {
          "type": "string", 
          "description": "Previous shared link expiration date. Might be missing due to historical data gap."
        }
      }
    },
    "ShowcaseUnresolveCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "StorageBucket": {
      "type": "object", 
      "description": "Describes the number of users in a specific storage bucket.\nbucket: The name of the storage bucket. For example, '1G' is a bucket of users with storage size up to 1 Giga.\nusers: The number of people whose storage is in the range of this storage bucket.\n", 
      "properties": {
        "bucket": {
          "type": "string", 
          "description": "The name of the storage bucket. For example, '1G' is a bucket of users with storage size up to 1 Giga."
        }, 
        "users": {
          "type": "number", 
          "description": "The number of people whose storage is in the range of this storage bucket."
        }
      }
    }, 
    "TfaChangeStatusType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedNoteOpenedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MemberRequestsPolicy": {
      "type": "object", 
      "description": "auto_accept: None\ndisabled: None\nrequire_approval: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "auto_accept", 
            "disabled", 
            "require_approval", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MemberRequestsPolicy"
        }
      }
    }, 
    "FileGetCopyReferenceDetails": {
      "type": "object", 
      "description": "Created copy reference to file/folder.\n", 
      "properties": {}
    }, 
    "TeamSelectiveSyncSettingsChangedDetails": {
      "type": "object", 
      "description": "Changed sync default.\nprevious_value: Previous value.\nnew_value: New value.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/SyncSetting"
        }, 
        "previous_value": {
          "$ref": "#/definitions/SyncSetting"
        }
      }
    }, 
    "SharedContentRemoveLinkPasswordType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "CustomQuotaUsersArg": {
      "type": "object", 
      "description": "users: List of users.\n", 
      "properties": {
        "users": {
          "items": {
            "$ref": "#/definitions/UserSelectorArg"
          }, 
          "type": "array", 
          "description": "List of users."
        }
      }
    }, 
    "TeamFolderPermanentlyDeleteType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "AppUnlinkTeamType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PasswordResetType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "FileAddCommentDetails": {
      "type": "object", 
      "description": "Added file comment.\ncomment_text: Comment text. Might be missing due to historical data gap.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text. Might be missing due to historical data gap."
        }
      }
    }, 
    "ResellerSupportSessionEndType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MembersAddArg": {
      "type": "object", 
      "description": "new_members: Details of new members to be added to the team.\nforce_async: Whether to force the add to happen asynchronously.\n", 
      "properties": {
        "new_members": {
          "items": {
            "$ref": "#/definitions/MemberAddArg"
          }, 
          "type": "array", 
          "description": "Details of new members to be added to the team."
        }, 
        "force_async": {
          "type": "boolean", 
          "description": "Whether to force the add to happen asynchronously."
        }
      }
    }, 
    "AccountCaptureChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "PaperDocTrashedDetails": {
      "type": "object", 
      "description": "Deleted Paper doc.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "MemberAddArg": {
      "type": "object", 
      "description": "member_email: None\nmember_given_name: Member's first name.\nmember_surname: Member's last name.\nmember_external_id: External ID for member.\nmember_persistent_id: Persistent ID for member. This field is only available to teams using persistent ID SAML configuration.\nsend_welcome_email: Whether to send a welcome email to the member. If send_welcome_email is false, no email invitation will be sent to the user. This may be useful for apps using single sign-on (SSO) flows for onboarding that want to handle announcements themselves.\nrole: None\nis_directory_restricted: Whether a user is directory restricted.\n", 
      "properties": {
        "send_welcome_email": {
          "type": "boolean", 
          "description": "Whether to send a welcome email to the member. If send_welcome_email is false, no email invitation will be sent to the user. This may be useful for apps using single sign-on (SSO) flows for onboarding that want to handle announcements themselves."
        }, 
        "is_directory_restricted": {
          "type": "boolean", 
          "description": "Whether a user is directory restricted."
        }, 
        "member_email": {
          "type": "string"
        }, 
        "member_persistent_id": {
          "type": "string", 
          "description": "Persistent ID for member. This field is only available to teams using persistent ID SAML configuration."
        }, 
        "member_given_name": {
          "type": "string", 
          "description": "Member's first name."
        }, 
        "role": {
          "$ref": "#/definitions/AdminTier"
        }, 
        "member_external_id": {
          "type": "string", 
          "description": "External ID for member."
        }, 
        "member_surname": {
          "type": "string", 
          "description": "Member's last name."
        }
      }
    }, 
    "MembersListArg": {
      "type": "object", 
      "description": "limit: Number of results to return per call.\ninclude_removed: Whether to return removed members.\n", 
      "properties": {
        "include_removed": {
          "type": "boolean", 
          "description": "Whether to return removed members."
        }, 
        "limit": {
          "type": "integer", 
          "description": "Number of results to return per call."
        }
      }
    }, 
    "SsoChangeCertDetails": {
      "type": "object", 
      "description": "Changed X.509 certificate for SSO.\nnew_certificate_details: New SSO certificate details.\nprevious_certificate_details: Previous SSO certificate details. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_certificate_details": {
          "$ref": "#/definitions/Certificate"
        }, 
        "previous_certificate_details": {
          "$ref": "#/definitions/Certificate"
        }
      }
    }, 
    "SsoAddLogoutUrlDetails": {
      "type": "object", 
      "description": "Added sign-out URL for SSO.\nnew_value: New single sign-on logout URL. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "type": "string", 
          "description": "New single sign-on logout URL. Might be missing due to historical data gap."
        }
      }
    }, 
    "EmmCreateUsageReportDetails": {
      "type": "object", 
      "description": "Created EMM mobile app usage report.\n", 
      "properties": {}
    }, 
    "SessionLogInfo": {
      "type": "object", 
      "description": "Session's logged information.\nsession_id: Session ID. Might be missing due to historical data gap.\n", 
      "properties": {
        "session_id": {
          "type": "string", 
          "description": "Session ID. Might be missing due to historical data gap."
        }
      }
    }, 
    "SharedContentAddMemberType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "FileAddCommentType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "NamespaceMetadata": {
      "type": "object", 
      "description": "Properties of a namespace.\nname: The name of this namespace.\nnamespace_id: The ID of this namespace.\nnamespace_type: The type of this namespace.\nteam_member_id: If this is a team member or app folder, the ID of the owning team member. Otherwise, this field is not present.\n", 
      "properties": {
        "team_member_id": {
          "type": "string", 
          "description": "If this is a team member or app folder, the ID of the owning team member. Otherwise, this field is not present."
        }, 
        "namespace_id": {
          "type": "string", 
          "description": "The ID of this namespace."
        }, 
        "name": {
          "type": "string", 
          "description": "The name of this namespace."
        }, 
        "namespace_type": {
          "$ref": "#/definitions/NamespaceType"
        }
      }
    }, 
    "TeamFolderListContinueError": {
      "type": "object", 
      "description": "invalid_cursor: The cursor is invalid.\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "invalid_cursor", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of TeamFolderListContinueError"
        }
      }
    }, 
    "RevokeLinkedApiAppArg": {
      "type": "object", 
      "description": "app_id: The application's unique id.\nteam_member_id: The unique id of the member owning the device.\nkeep_app_folder: Whether to keep the application dedicated folder (in case the application uses  one).\n", 
      "properties": {
        "team_member_id": {
          "type": "string", 
          "description": "The unique id of the member owning the device."
        }, 
        "app_id": {
          "type": "string", 
          "description": "The application's unique id."
        }
      }
    }, 
    "SetCustomQuotaArg": {
      "type": "object", 
      "description": "users_and_quotas: List of users and their custom quotas.\n", 
      "properties": {
        "users_and_quotas": {
          "items": {
            "$ref": "#/definitions/UserCustomQuotaArg"
          }, 
          "type": "array", 
          "description": "List of users and their custom quotas."
        }
      }
    }, 
    "NetworkControlChangePolicyDetails": {
      "type": "object", 
      "description": "Enabled/disabled network control.\nnew_value: New network control policy.\nprevious_value: Previous network control policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/NetworkControlPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/NetworkControlPolicy"
        }
      }
    }, 
    "SharedLinkDownloadDetails": {
      "type": "object", 
      "description": "Downloaded file/folder from shared link.\nshared_link_owner: Shared link owner details. Might be missing due to historical data gap.\n", 
      "properties": {
        "shared_link_owner": {
          "$ref": "#/definitions/UserLogInfo"
        }
      }
    }, 
    "FileRequestCloseType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "GroupChangeManagementTypeType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseCreatedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseFileRemovedType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "SharedLinkVisibility": {
      "type": "object", 
      "description": "Defines who has access to a shared link.\npassword: None\npublic: None\nteam_only: None\nother: None\n", 
      "properties": {
        ".tag": {
          "enum": [
            "password", 
            "public", 
            "team_only", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of SharedLinkVisibility"
        }
      }
    }, 
    "DomainInvitesApproveRequestToJoinTeamDetails": {
      "type": "object", 
      "description": "Approved user's request to join team.\n", 
      "properties": {}
    }, 
    "DeviceApprovalsChangeUnlinkActionType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "ShowcaseResolveCommentDetails": {
      "type": "object", 
      "description": "Resolved showcase comment.\nevent_uuid: Event unique identifier.\ncomment_text: Comment text.\n", 
      "properties": {
        "comment_text": {
          "type": "string", 
          "description": "Comment text."
        }, 
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "GroupRenameType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MissingDetails": {
      "type": "object", 
      "description": "An indication that an error occurred while retrieving the event. Some attributes of the event may be omitted as a result.\nsource_event_fields: All the data that could be retrieved and converted from the source event.\n", 
      "properties": {
        "source_event_fields": {
          "type": "string", 
          "description": "All the data that could be retrieved and converted from the source event."
        }
      }
    }, 
    "NoteAclInviteOnlyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "ShowcaseEditedDetails": {
      "type": "object", 
      "description": "Edited showcase.\nevent_uuid: Event unique identifier.\n", 
      "properties": {
        "event_uuid": {
          "type": "string", 
          "description": "Event unique identifier."
        }
      }
    }, 
    "MemberTransferAccountContentsDetails": {
      "type": "object", 
      "description": "Transferred contents of deleted member account to another member.\n", 
      "properties": {}
    }, 
    "NetworkControlChangePolicyType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "MobileClientPlatform": { 
      "description": "iphone: Official Dropbox iPhone client.\nipad: Official Dropbox iPad client.\nandroid: Official Dropbox Android client.\nwindows_phone: Official Dropbox Windows phone client.\nblackberry: Official Dropbox Blackberry client.\nother: None\n", 
          "enum": [
            "iphone", 
            "ipad", 
            "android", 
            "windows_phone", 
            "blackberry", 
            "other"
          ], 
          "type": "string", 
          "title": "Choice of MobileClientPlatform"
    }, 
    "TeamProfileAddLogoDetails": {
      "type": "object", 
      "description": "Added team logo to display on shared link headers.\n", 
      "properties": {}
    }, 
    "DeviceApprovalsChangeOverageActionType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "RemovedStatus": {
      "type": "object", 
      "description": "is_recoverable: True if the removed team member is recoverable.\n", 
      "properties": {
        "is_recoverable": {
          "type": "boolean", 
          "description": "True if the removed team member is recoverable."
        }
      }
    }, 
    "PaperContentAddMemberType": {
      "type": "object", 
      "description": "description: None\n", 
      "properties": {
        "description": {
          "type": "string"
        }
      }
    }, 
    "DeviceApprovalsChangeMobilePolicyDetails": {
      "type": "object", 
      "description": "Set/removed limit on number of mobile devices member can link to team Dropbox account.\nnew_value: New mobile device approvals policy. Might be missing due to historical data gap.\nprevious_value: Previous mobile device approvals policy. Might be missing due to historical data gap.\n", 
      "properties": {
        "new_value": {
          "$ref": "#/definitions/DeviceApprovalsPolicy"
        }, 
        "previous_value": {
          "$ref": "#/definitions/DeviceApprovalsPolicy"
        }
      }
    }, 
    "SharedContentCopyDetails": {
      "type": "object", 
      "description": "Copied shared file/folder to own Dropbox.\nshared_content_link: Shared content link.\nshared_content_access_level: Shared content access level.\ndestination_path: The path where the member saved the content.\nshared_content_owner: The shared content owner.\n", 
      "properties": {
        "shared_content_owner": {
          "$ref": "#/definitions/UserLogInfo"
        }, 
        "destination_path": {
          "type": "string", 
          "description": "The path where the member saved the content."
        }, 
        "shared_content_link": {
          "type": "string", 
          "description": "Shared content link."
        }, 
        "shared_content_access_level": {
          "$ref": "#/definitions/AccessLevel"
        }
      }
    }, 
    "MembersRemoveArg": {
      "type": "object", 
      "description": "user: Identity of user to remove/suspend.\nwipe_data: If provided, controls if the user's data will be deleted on their linked devices.\ntransfer_dest_id: If provided, files from the deleted member account will be transferred to this user.\ntransfer_admin_id: If provided, errors during the transfer process will be sent via email to this user. If the transfer_dest_id argument was provided, then this argument must be provided as well.\nkeep_account: Downgrade the member to a Basic account. The user will retain the email address associated with their Dropbox  account and data in their account that is not restricted to team members. In order to keep the account the argument wipe_data should be set to False.\n", 
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSelectorArg"
        }, 
        "wipe_data": {
          "type": "boolean", 
          "description": "If provided, controls if the user's data will be deleted on their linked devices."
        },
        "transfer_dest_id": {
          "$ref": "#/definitions/UserSelectorArg"
        }, 
        "transfer_admin_id": {
          "$ref": "#/definitions/UserSelectorArg"
        }, 
        "keep_account": {
          "type": "boolean", 
          "description": "Downgrade the member to a Basic account. The user will retain the email address associated with their Dropbox  account and data in their account that is not restricted to team members. In order to keep the account the argument wipe_data should be set to False."
        },
        "retain_team_shares": {
          "type": "boolean",
          "description": "If provided, allows removed users to keep access to Dropbox folders (not Dropbox Paper folders) already explicitly shared with them (not via a group) when they are downgraded to a Basic account."
        }
      }
    }
    
  },
  "parameters": {
    "Authorization":{
      "name":"Authorization",
      "in":"header",
      "required":false,
      "type":"string",
      "description":"User Authentication -  This type uses an access token for a specific user and app pair, in order to operate on that user's account, to the extent allowed by that app's permission. "
    }
  }
}