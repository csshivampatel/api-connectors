{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Lightning Platform REST API",
    "description" : "REST API provides you with programmatic access to your data in Salesforce. The flexibility and scalability of REST API make it an excellent choice for integrating Salesforce into your applications and for performing complex operations on a large scale. You can use REST API tools to create, manipulate, and search data in Salesforce by sending HTTP requests to endpoints in Salesforce. Depending on where you send requests, you access and operate on different pieces of information, called resources. Resources include records, query results, metadata, and more. ",
    "version" : "63.0"
  },
  "servers" : [ {
    "url" : "https://neuronesb-dev-ed.my.salesforce.com/services/data/v63.0"
  } ],
  "security" : [ {
    "bearerAuth" : [ ]
  }, {
    "oAuth2" : [ ]
  }, {
    "openIDConnectDiscovery" : [ ]
  } ],
  "paths" : {
    "/sobjects/{sObject}" : {
      "description" : "Describes the individual metadata for the specified object. Can also be used to create a new record for a given object. For example, this can be used to retrieve the metadata for the Account object using the GET method, or create a new Account object using the POST method.",
      "get" : {
        "operationId" : "getSObjectMetadata",
        "parameters" : [ {
          "name" : "sObject",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SObjectType"
          }
        } ],
        "responses" : {
          "304" : {
            "description" : "Status Code 304",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Status Code 400",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Status Code 401",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Status Code 403",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Status Code 404",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Status Code 500",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Status Code 405",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Status Code 503",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Status Code 200",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SObjectRootInfo"
                }
              }
            }
          },
          "412" : {
            "description" : "Status Code 412",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "operationId" : "createSObject",
        "parameters" : [ {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "An optional header, which can only be used with POST, specifying the format for the request and response. Possible choices are: Content-Type: application/json Content-Type: application/xml",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sObject",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SObjectType"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SObject"
              },
              "examples" : {
                "Account" : {
                  "summary" : "Account Example",
                  "value" : {
                    "Name" : "Test Account",
                    "apiSObjectType" : "Account"
                  }
                },
                "Contact" : {
                  "summary" : "Contact Example",
                  "value" : {
                    "FirstName" : "Some",
                    "LastName" : "Name",
                    "apiSObjectType" : "Contact"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Status Code 400",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Status Code 401",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Status Code 403",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Status Code 404",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Status Code 500",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Status Code 405",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Status Code 503",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "201" : {
            "description" : "Status Code 201",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SaveResult"
                }
              }
            }
          },
          "415" : {
            "description" : "Status Code 415",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          }
        }
      },
      "x-sfdc" : {
        "api-sub-domain" : "SObjects",
        "api-domain" : "Platform"
      }
    },
    "/sobjects/{sObject}/{id}" : {
      "description" : "Accesses records based on the specified object ID. Retrieves, updates, or deletes records. This resource can also be used to retrieve field values. Use the GET method to retrieve records or fields, the DELETE method to delete records, and the PATCH method to update records.",
      "get" : {
        "operationId" : "getSObject",
        "parameters" : [ {
          "name" : "sObject",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SObjectType"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the object. For example, 001R0000005hDFYIA2. A required path parameter for all methods (GET, PATCH, and DELETE).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-delimited list of fields to get values for. For example, ?fields=name,description,numberofemployees,industry. An optional query parameter that can only be used with GET.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "If-Modified-Since",
          "in" : "header",
          "description" : "An optional header specifying a date and time. The request returns records that have been modified after that date and time. The format is EEE, dd MMM yyyy HH:mm:ss z For example: If-Modified-Since: Mon, 30 Nov 2020 08:34:54 MST.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "If-Unmodified-Since",
          "in" : "header",
          "description" : "An optional header specifying a date and time. The request returns records that have not been modified after that date and time. The format is EEE, dd MMM yyyy HH:mm:ss z For example: If-Unmodified-Since: Mon, 30 Nov 2020 08:34:54 MST.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "An optional header specifying a comma-delimited list of one or more ETags. This only has an effect when used with Account objects. The request is only processed if the Account’s ETag matches one of the ETags in the list. For example: If-Match: \"94C83JSreaVMGpL+lUzv8Dr3inI0kCvuKATVJcTuApA=--gzip\", \"ddpAdaTHz+GcV35e7NLJ9iKD3XXVqAzXT1Sl2ykkP7g=--gzip\".",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "If-None-Match",
          "in" : "header",
          "description" : "An optional header specifying a comma-delimited list of one or more ETags. This only has an effect when used with Account objects. The request is only processed if the Account’s ETag does not match one of the ETags in the list. For example: If-None-Match: \"94C83JSreaVMGpL+lUzv8Dr3inI0kCvuKATVJcTuApA=--gzip\", \"ddpAdaTHz+GcV35e7NLJ9iKD3XXVqAzXT1Sl2ykkP7g=--gzip\".",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "304" : {
            "description" : "Status Code 304",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Status Code 400",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Status Code 401",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Status Code 403",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Status Code 404",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Status Code 500",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Status Code 405",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Status Code 503",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Status Code 200",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SObject"
                }
              }
            }
          },
          "412" : {
            "description" : "Status Code 412",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "operationId" : "deleteSObject",
        "parameters" : [ {
          "name" : "sObject",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SObjectType"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the object. For example, 001R0000005hDFYIA2. A required path parameter for all methods (GET, PATCH, and DELETE).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Status Code 400",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Status Code 401",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Status Code 403",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Status Code 404",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Status Code 500",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Status Code 405",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Status Code 503",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "204" : {
            "description" : "Status Code 204"
          },
          "415" : {
            "description" : "Status Code 415",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "operationId" : "updateSObject",
        "parameters" : [ {
          "name" : "sObject",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SObjectType"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the object. For example, 001R0000005hDFYIA2. A required path parameter for all methods (GET, PATCH, and DELETE).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "An optional header, which can only be used with PATCH, specifying the format for the request and response. Possible choices are: Content-Type: application/json Content-Type: application/xml",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SObject"
              },
              "examples" : {
                "Account" : {
                  "summary" : "Account Example",
                  "value" : {
                    "Name" : "Test Account",
                    "apiSObjectType" : "Account"
                  }
                },
                "Contact" : {
                  "summary" : "Contact Example",
                  "value" : {
                    "FirstName" : "Some",
                    "LastName" : "Name",
                    "apiSObjectType" : "Contact"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Status Code 400",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Status Code 401",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Status Code 403",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Status Code 404",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Status Code 500",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Status Code 405",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Status Code 503",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RestApiError"
                  }
                }
              }
            }
          },
          "204" : {
            "description" : "Status Code 204"
          },
          "415" : {
            "description" : "Status Code 415",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorInfo"
                  }
                }
              }
            }
          }
        }
      },
      "x-sfdc" : {
        "api-sub-domain" : "SObjects",
        "api-domain" : "Platform"
      }
    }
  },
  "components" : {
    "schemas" : {
      "AcceptedEventRelation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents event participants (invitees or attendees) with the status Accepted for a given event.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelationId" : {
              "type" : "string",
              "description" : "Indicates the ID of the invitee.",
              "readOnly" : true
            },
            "EventId" : {
              "type" : "string",
              "description" : "Indicates the ID of the event.",
              "readOnly" : true
            },
            "RespondedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Indicates the most recent date and time when the invitee accepted an invitation to the event.",
              "readOnly" : true
            },
            "Response" : {
              "type" : "string",
              "description" : "Indicates the content of the response field. Label is Comment.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "Indicates whether the invitee is a user, lead or contact, or resource.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Account" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an individual account, which is an organization or person involved with your business (such as customers, competitors, and partners).",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "MasterRecordId" : {
              "type" : "string",
              "description" : "If this object was deleted as the result of a merge, this field contains the ID of the record that was kept. If this object was deleted for any other reason, or has not been deleted, the value is null.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Label is Account Name. Name of the account. Maximum size is 255 characters. If the account has a record type of Person Account: This value is the concatenation of the FirstName, MiddleName, LastName, and Suffix of the associated person contact. You can't modify this value."
            },
            "Type" : {
              "type" : "string",
              "description" : "Type of account, for example, Customer, Competitor, or Partner."
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the parent object, if any."
            },
            "BillingStreet" : {
              "type" : "string",
              "description" : "Street address for the billing address of this account."
            },
            "BillingCity" : {
              "type" : "string",
              "description" : "Details for the billing address of this account. Maximum size is 40 characters."
            },
            "BillingState" : {
              "type" : "string",
              "description" : "Details for the billing address of this account. Maximum size is 80 characters."
            },
            "BillingPostalCode" : {
              "type" : "string",
              "description" : "Details for the billing address of this account. Maximum size is 20 characters."
            },
            "BillingCountry" : {
              "type" : "string",
              "description" : "Details for the billing address of this account. Maximum size is 80 characters."
            },
            "BillingLatitude" : {
              "type" : "number",
              "description" : "Used with BillingLongitude to specify the precise geolocation of a billing address. Acceptable values are numbers between –90 and 90 with up to 15 decimal places. See Compound Field Considerations and Limitations for details on geolocation compound fields."
            },
            "BillingLongitude" : {
              "type" : "number",
              "description" : "Used with BillingLatitude to specify the precise geolocation of a billing address. Acceptable values are numbers between –180 and 180 with up to 15 decimal places. See Compound Field Considerations and Limitations for details on geolocation compound fields."
            },
            "BillingGeocodeAccuracy" : {
              "type" : "string",
              "description" : "Accuracy level of the geocode for the billing address. See Compound Field Considerations and Limitations for details on geolocation compound fields."
            },
            "BillingAddress" : {
              "type" : "object",
              "description" : "The compound form of the billing address. Read-only. See Address Compound Fields for details on compound address fields.",
              "readOnly" : true
            },
            "ShippingStreet" : {
              "type" : "string",
              "description" : "The street address of the shipping address for this account. Maximum of 255 characters."
            },
            "ShippingCity" : {
              "type" : "string",
              "description" : "Details of the shipping address for this account. City maximum size is 40 characters"
            },
            "ShippingState" : {
              "type" : "string",
              "description" : "Details of the shipping address for this account. State maximum size is 80 characters."
            },
            "ShippingPostalCode" : {
              "type" : "string",
              "description" : "Details of the shipping address for this account. Postal code maximum size is 20 characters."
            },
            "ShippingCountry" : {
              "type" : "string",
              "description" : "Details of the shipping address for this account. Country maximum size is 80 characters."
            },
            "ShippingLatitude" : {
              "type" : "number",
              "description" : "Used with ShippingLongitude to specify the precise geolocation of a shipping address. Acceptable values are numbers between –90 and 90 with up to 15 decimal places. See Compound Field Considerations and Limitations for details on geolocation compound fields."
            },
            "ShippingLongitude" : {
              "type" : "number",
              "description" : "Used with ShippingLatitude to specify the precise geolocation of an address. Acceptable values are numbers between –180 and 180 with up to 15 decimal places. See Compound Field Considerations and Limitations for details on geolocation compound fields."
            },
            "ShippingGeocodeAccuracy" : {
              "type" : "string",
              "description" : "Accuracy level of the geocode for the shipping address. See Compound Field Considerations and Limitations for details on geolocation compound fields."
            },
            "ShippingAddress" : {
              "type" : "object",
              "description" : "The compound form of the shipping address. Read-only. See Address Compound Fields for details on compound address fields.",
              "readOnly" : true
            },
            "Phone" : {
              "type" : "string",
              "description" : "Phone number for this account. Maximum size is 40 characters."
            },
            "Fax" : {
              "type" : "string",
              "description" : "Fax number for the account."
            },
            "AccountNumber" : {
              "type" : "string",
              "description" : "Account number assigned to this account (not the unique, system-generated ID assigned during creation). Maximum size is 40 characters."
            },
            "Website" : {
              "type" : "string",
              "description" : "The website of this account. Maximum of 255 characters."
            },
            "PhotoUrl" : {
              "type" : "string",
              "description" : "Path to be combined with the URL of a Salesforce instance (for example, https://yourInstance.salesforce.com/) to generate a URL to request the social network profile image associated with the account. Generated URL returns an HTTP redirect (code 302) to the social network profile image for the account. Blank if Social Accounts and Contacts isn't enabled for the org or if Social Accounts and Contacts is disabled for the requesting user.",
              "readOnly" : true
            },
            "Sic" : {
              "type" : "string",
              "description" : "Standard Industrial Classification code of the company’s main business categorization, for example, 57340 for Electronics. Maximum of 20 characters. This field is available on business accounts, not person accounts."
            },
            "Industry" : {
              "type" : "string",
              "description" : "An industry associated with this account. Maximum size is 40 characters."
            },
            "AnnualRevenue" : {
              "type" : "number",
              "description" : "Estimated annual revenue of the account."
            },
            "NumberOfEmployees" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Label is Employees. Number of employees working at the company represented by this account. Maximum size is eight digits."
            },
            "Ownership" : {
              "type" : "string",
              "description" : "Ownership type for the account, for example Private, Public, or Subsidiary."
            },
            "TickerSymbol" : {
              "type" : "string",
              "description" : "The stock market symbol for this account. Maximum of 20 characters. This field is available on business accounts, not person accounts."
            },
            "Description" : {
              "type" : "string",
              "description" : "Text description of the account. Limited to 32,000 KB."
            },
            "Rating" : {
              "type" : "string",
              "description" : "The account’s prospect rating, for example Hot, Warm, or Cold."
            },
            "Site" : {
              "type" : "string",
              "description" : "Name of the account’s location, for example Headquarters or London. Label is Account Site. Maximum of 80 characters."
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the user who currently owns this account. Default value is the user logged in to the API to perform the create. If you have set up account teams in your org, updating this field has different consequences depending on your version of the API: For API version 12.0 and later, sharing records are kept, as they are for all objects. For API version before 12.0, sharing records are deleted. For API version 16.0 and later, users must have the “Transfer Record” permission in order to update (transfer) account ownership using this field."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastActivityDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Value is one of the following, whichever is the most recent: Due date of the most recent event logged against the record. Due date of the most recently closed task associated with the record.",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            },
            "Jigsaw" : {
              "type" : "string",
              "description" : "References the ID of a company in Data.com. If an account has a value in this field, it means that the account was imported from Data.com. If the field value is null, the account was not imported from Data.com. Maximum size is 20 characters. Available in API version 22.0 and later. Label is Data.com Key. This field is available on business accounts, not person accounts.The Jigsaw field is exposed in the API to support troubleshooting for import errors and reimporting of corrected data. Do not modify the value in the Jigsaw field."
            },
            "JigsawCompanyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountSource" : {
              "type" : "string",
              "description" : "The source of the account record. For example, Advertisement, Data.com, or Trade Show. The source is selected from a picklist of available values, which are set by an administrator. Each picklist value can have up to 40 characters."
            },
            "SicDesc" : {
              "type" : "string",
              "description" : "A brief description of an org’s line of business, based on its SIC code. Maximum length is 80 characters. This field is available on business accounts, not person accounts."
            },
            "CustomerPriority__c" : {
              "type" : "string"
            },
            "SLA__c" : {
              "type" : "string"
            },
            "Active__c" : {
              "type" : "string"
            },
            "NumberofLocations__c" : {
              "type" : "number"
            },
            "UpsellOpportunity__c" : {
              "type" : "string"
            },
            "SLASerialNumber__c" : {
              "type" : "string"
            },
            "SLAExpirationDate__c" : {
              "type" : "string",
              "format" : "date"
            },
            "ExternalID__c" : {
              "type" : "string"
            }
          }
        } ]
      },
      "AccountChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastName" : {
              "type" : "string",
              "readOnly" : true
            },
            "FirstName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Salutation" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingStreet" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingCity" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingState" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingPostalCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingCountry" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingLatitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "BillingLongitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "BillingGeocodeAccuracy" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingAddress" : {
              "type" : "object",
              "readOnly" : true
            },
            "ShippingStreet" : {
              "type" : "string",
              "readOnly" : true
            },
            "ShippingCity" : {
              "type" : "string",
              "readOnly" : true
            },
            "ShippingState" : {
              "type" : "string",
              "readOnly" : true
            },
            "ShippingPostalCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "ShippingCountry" : {
              "type" : "string",
              "readOnly" : true
            },
            "ShippingLatitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "ShippingLongitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "ShippingGeocodeAccuracy" : {
              "type" : "string",
              "readOnly" : true
            },
            "ShippingAddress" : {
              "type" : "object",
              "readOnly" : true
            },
            "Phone" : {
              "type" : "string",
              "readOnly" : true
            },
            "Fax" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "Website" : {
              "type" : "string",
              "readOnly" : true
            },
            "Sic" : {
              "type" : "string",
              "readOnly" : true
            },
            "Industry" : {
              "type" : "string",
              "readOnly" : true
            },
            "AnnualRevenue" : {
              "type" : "number",
              "readOnly" : true
            },
            "NumberOfEmployees" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Ownership" : {
              "type" : "string",
              "readOnly" : true
            },
            "TickerSymbol" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "Rating" : {
              "type" : "string",
              "readOnly" : true
            },
            "Site" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Jigsaw" : {
              "type" : "string",
              "readOnly" : true
            },
            "JigsawCompanyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "SicDesc" : {
              "type" : "string",
              "readOnly" : true
            },
            "CustomerPriority__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "SLA__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "Active__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "NumberofLocations__c" : {
              "type" : "number",
              "readOnly" : true
            },
            "UpsellOpportunity__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "SLASerialNumber__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "SLAExpirationDate__c" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "ExternalID__c" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AccountContactRole" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the role that a Contact plays on an Account.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "description" : "Required. ID of the Account."
            },
            "ContactId" : {
              "type" : "string",
              "description" : "Required. ID of the Contact associated with this account."
            },
            "Role" : {
              "type" : "string",
              "description" : "Name of the role played by the Contact on this Account, such as Decision Maker, Approver, Buyer, and so on. Must be unique—there can't be multiple records in which the AccountId, ContactId, and Role values are identical. Different contacts can play the same role on the same account. A contact can play different roles on the same account."
            },
            "IsPrimary" : {
              "type" : "boolean",
              "description" : "Specifies whether the Contact plays the primary role on the Account (true) or not (false). Note that each account has only one primary contact role. Label is Primary. Default value is false."
            }
          }
        } ]
      },
      "AccountContactRoleChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Role" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsPrimary" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AccountFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AccountHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AccountPartner" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "This object represents a partner relationship between two Account records. An AccountPartner record is created automatically when a Partner record is created for a partner relationship between two accounts.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountFromId" : {
              "type" : "string",
              "description" : "ID of the main Account in the partner relationship."
            },
            "AccountToId" : {
              "type" : "string",
              "description" : "ID of the partner Account in the partner relationship."
            },
            "OpportunityId" : {
              "type" : "string",
              "description" : "ID of the opportunity in a partner relationship."
            },
            "Role" : {
              "type" : "string",
              "description" : "The UserRole that the partner Account has on the main Account. For example, Consultant or Distributor."
            },
            "IsPrimary" : {
              "type" : "boolean",
              "description" : "Indicates whether the AccountPartner is the main account’s primary partner (true) or not (false)."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ReversePartnerId" : {
              "type" : "string",
              "description" : "ID of the account in a partner relationship.",
              "readOnly" : true
            }
          }
        } ]
      },
      "AccountShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a sharing entry on an Account.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "description" : "ID of the Account associated with this sharing entry. This field can't be updated."
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "ID of the User or Group that has been given access to the Account. This field can't be updated."
            },
            "AccountAccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the User or Group has to the Account. The possible values are: Read Edit All (This value isn't valid for create or update calls.) This field must be set to an access level that is at least equal to the organization’s default Account access level. In addition, either this field, the OpportunityAccessLevel field, or the CaseAccessLevel field must be set higher than the organization’s default access level."
            },
            "OpportunityAccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the User or Group has to opportunities associated with the Account. The possible values are: None Read Edit This field must be set to an access level that is at least equal to the organization’s default opportunity access level. This field can’t be updated via the API if the AccountAccessLevel field is set to All. You can't use the API to update this field for the associated Account owner. You must update the Account owner’s opportunityAccessLevel via the Salesforce user interface."
            },
            "CaseAccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the User or Group has to cases associated with the account. The possible values are: None Read Edit This field must be set to an access level that is at least equal to the organization’s default CaseAccessLevel. This field can't be updated via the API if the AccountAccessLevel field is set to All. You can't update this field for the associated account owner via the API. You must update the account owner’s CaseAccessLevel via the Salesforce user interface."
            },
            "ContactAccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the User or Group has to contacts associated with the account. The possible values are: None Read Edit This field must be set to an access level that is at least equal to the organization’s default ContactAccessLevel. This field can't be updated via the API if the ContactAccessLevel field is set to “Controlled by Parent.” You can't update this field for the associated account owner using the API. You must update the account owner’s ContactAccessLevel via the Salesforce user interface.",
              "readOnly" : true
            },
            "RowCause" : {
              "type" : "string",
              "description" : "Reason that this sharing entry exists. You can only write to this field when its value is either omitted or set to Manual (default). You can create a value for this field in API versions 32.0 and later with the correct organization-wide sharing settings."
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "ActionLinkGroupTemplate" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Action link templates let you reuse action link definitions and package and distribute action links. An action link is a button on a feed element. Clicking on an action link can take a user to another Web page, initiate a file download, or invoke an API call to an external server or Salesforce. Use action links to integrate Salesforce and third-party services into the feed. Every action link belongs to an action link group and action links within the group are mutually exclusive.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The name of the action link group template to use in code."
            },
            "Language" : {
              "type" : "string",
              "description" : "The language of the MasterLabel."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The name of the action link group template."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExecutionsAllowed" : {
              "type" : "string",
              "description" : "The number of times an action link can be executed. Values are:Once—An action link can be executed only once across all users. OncePerUser—An action link can be executed only once for each user. Unlimited—An action link can be executed an unlimited number of times by each user. If the action link’s actionType is Api or ApiAsync, you can’t use this value."
            },
            "HoursUntilExpiration" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of hours from when the action link group is created until it's removed from associated feed elements and can no longer be executed. The maximum value is 8,760."
            },
            "Category" : {
              "type" : "string",
              "description" : "The location of the action link group within the feed element. Values are:Primary—The action link group is displayed in the body of the feed element. Overflow—The action link group is displayed in the overflow menu of the feed element."
            },
            "IsPublished" : {
              "type" : "boolean",
              "description" : "If true, the action link group template is published. Action link group templates shouldn’t be published until at least one is associated with it. Once set to true, this can’t be set back to false."
            }
          }
        } ]
      },
      "ActionLinkTemplate" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Action link templates let you reuse action link definitions and package and distribute action links. An action link is a button on a feed element. Clicking an action link can take a user to another Web page, initiate a file download, or invoke an API call to an external server or Salesforce. Use action links to integrate Salesforce and third-party services into the feed.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ActionLinkGroupTemplateId" : {
              "type" : "string",
              "description" : "ID of the with which this action link template is associated."
            },
            "LabelKey" : {
              "type" : "string",
              "description" : "Key for the set of labels to display for these action link states: new, pending, success, failed. For example, the Approve set contains these labels: Approve, Pending, Approved, Failed. For a complete list of keys and labels, see Action Links Labels in the Connect REST API Developer Guide or the Apex Developer Guide."
            },
            "Method" : {
              "type" : "string",
              "description" : "HTTP method for the action URL. One of these values:HttpDelete—Returns HTTP 204 on success. Response body or output class is empty. HttpGet—Returns HTTP 200 on success. HttpHead—Returns HTTP 200 on success. Response body or output class is empty. HttpPatch—Returns HTTP 200 on success or HTTP 204 if the response body or output class is empty. HttpPost—Returns HTTP 201 on success or HTTP 204 if the response body or output class is empty. Exceptions are the batch posting resources and methods, which return HTTP 200 on success. HttpPut—Return HTTP 200 on success or HTTP 204 if the response body or output class is empty. Ui and Download action links must use HttpGet."
            },
            "LinkType" : {
              "type" : "string",
              "description" : "The type of action link. One of these values:Api—The action link calls a synchronous API at the action URL. Salesforce sets the status to SuccessfulStatus or FailedStatus based on the HTTP status code returned by your server. ApiAsync—The action link calls an asynchronous API at the action URL. The action remains in a PendingStatus state until a third party makes a request to /connect/action-links/actionLinkId to set the status to SuccessfulStatus or FailedStatus when the asynchronous operation is complete. Download—The action link downloads a file from the action URL. Ui—The action link takes the user to a web page at the action URL."
            },
            "Position" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "An integer specifying the position of the action link template relative to other action links in the group. 0 is the first position."
            },
            "IsConfirmationRequired" : {
              "type" : "boolean",
              "description" : "If true, a confirmation dialog appears before the action is executed."
            },
            "IsGroupDefault" : {
              "type" : "boolean",
              "description" : "If true, action links derived from this template are the default or primary action in their action groups. There can be only one default action per action group."
            },
            "UserVisibility" : {
              "type" : "string",
              "description" : "Who can see the action link. This value is set per action link, not per action link group. One of these values: Creator—Only the creator of the action link can see the action link. Everyone—Everyone can see the action link. EveryoneButCreator—Everyone but the creator of the action link can see the action link. Manager—Only the manager of the creator of the action link can see the action link. CustomUser—Only the custom user can see the action link. CustomExcludedUser—Everyone but the custom user can see the action link."
            },
            "UserAlias" : {
              "type" : "string",
              "description" : "If you selected CustomUser or CustomExcludedUser for UserVisibility, this field is the alias for the custom user. Use the alias in a template binding to specify the custom user when an action link group is created using the template."
            },
            "Label" : {
              "type" : "string",
              "description" : "A custom label to display on the action link button. If none of the LabelKey values make sense for an action link, use a custom label. Set the LabelKey field to None and enter a label name in the Label field."
            },
            "ActionUrl" : {
              "type" : "string",
              "description" : "The action link URL. For example, a Ui action link URL is a Web page. A Download action link URL is a link to the file to download. Ui and Download action link URLs are provided to clients. An Api or ApiAsync action link URL is a REST resource. Api and ApiAsync action link URLs aren’t provided to clients. Links to Salesforce can be relative. All other links must be absolute and start with https://. Links to resources hosted on Salesforce servers can be relative, starting with a /. All other links must be absolute and start with https://. This field can contain context variables and binding variables in the form {!Bindings.key}, for example, https://www.example.com/{!Bindings.itemId}. Set the binding variable’s value when you instantiate the action link group from the template."
            },
            "RequestBody" : {
              "type" : "string",
              "description" : "Template for the HTTP request body sent when corresponding action links are invoked. This field can be used only for Api and ApiAsync action links. This field can contain context variables and binding variables in the form {!Bindings.key}."
            },
            "Headers" : {
              "type" : "string",
              "description" : "Template for the HTTP headers sent when corresponding action links are invoked. This field can be used only for Api and ApiAsync action links. This field can contain context variables and binding variables in the form {!Bindings.key}."
            }
          }
        } ]
      },
      "ActiveFeatureLicenseMetric" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MetricsDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "FeatureType" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AssignedUserCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ActiveUserCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "TotalLicenseCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ActivePermSetLicenseMetric" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MetricsDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "PermissionSetLicenseId" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AssignedUserCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ActiveUserCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "TotalLicenses" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ActiveProfileMetric" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MetricsDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "UserLicenseId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProfileId" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AssignedUserCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ActiveUserCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ActivityFieldHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ActivityId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ChangedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "FieldName" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDataAvailable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OldValueDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "NewValueDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OldValueNumber" : {
              "type" : "number",
              "readOnly" : true
            },
            "NewValueNumber" : {
              "type" : "number",
              "readOnly" : true
            },
            "OldValueText" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValueText" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ActivityHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "This read-only object is displayed in a related list of closed activities—past events and closed tasks—related to an object. It includes activities for all contacts related to the object. ActivityHistory fields for phone calls are only available if your organization uses Salesforce CRM Call Center.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "description" : "Indicates the ID of the related account, which is determined as follows: The account associated with the WhatId, if it exists; or The account associated with the WhoId, if it exists; otherwise null For information on IDs, see ID Field Type.",
              "readOnly" : true
            },
            "WhoId" : {
              "type" : "string",
              "description" : "The WhoId represents a human such as a lead or a contact. WhoIds are polymorphic. Polymorphic means a WhoId is equivalent to a contact’s ID or a lead’s ID. The label is Name ID. If Shared Activities is enabled, the value of this field is the ID of the related lead or primary contact. If you add, update, or remove the WhoId field, you might encounter problems with triggers, workflows, and data validation rules that are associated with the record. The label is Name ID. If your organization uses Shared Activities, when you query activities in API version 30.0 or later, the returned value of the WhoId field matches the value in the queried object, not necessarily in the activity record itself. If Shared Activities is enabled, the value of this field is not populated and the field PrimaryWhoId should be queried instead.",
              "readOnly" : true
            },
            "WhatId" : {
              "type" : "string",
              "description" : "The WhatId represents nonhuman objects such as accounts, opportunities, campaigns, cases, or custom objects. WhatIds are polymorphic. Polymorphic means a WhatId is equivalent to the ID of a related object. The label is Related To ID.",
              "readOnly" : true
            },
            "Subject" : {
              "type" : "string",
              "description" : "Contains the subject of the task or event.",
              "readOnly" : true
            },
            "IsTask" : {
              "type" : "boolean",
              "description" : "If the value of this field is set to true, then the activity is a task. If the value is set to false, then the activity is an event. Label is Task.",
              "readOnly" : true
            },
            "ActivityDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Indicates one of the following: The due date of a task The due date of an event if IsAllDayEvent is set to true",
              "readOnly" : true
            },
            "ActivityDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Contains the event’s due date if the IsAllDayEvent flag is set to false. The time portion of this field is always transferred in the Coordinated Universal Time (UTC) time zone. Translate the time portion to or from a local time zone for the user or the application, as appropriate. Label is Due Date Time.The value for this field and StartDateTime must match, or one of them must be null.",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "Indicates the ID of the user or group who owns the activity.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "Indicates the current status of a task, such as in progress or complete. Each predefined status field sets a value for IsClosed. To obtain picklist values, query TaskStatus.",
              "readOnly" : true
            },
            "Priority" : {
              "type" : "string",
              "description" : "Indicates the priority of a task, such as high, normal, or low.",
              "readOnly" : true
            },
            "IsHighPriority" : {
              "type" : "boolean",
              "description" : "Indicates a high-priority task. This field is derived from the Priority field.",
              "readOnly" : true
            },
            "ActivityType" : {
              "type" : "string",
              "description" : "Represents one of the following values: Call, Email, Meeting, or Other. Label is Type. These are default values, and can be changed.",
              "readOnly" : true
            },
            "IsClosed" : {
              "type" : "boolean",
              "description" : "Indicates whether a task is closed; value is always true. This field is set indirectly by setting the Status field on the task—each picklist value has a corresponding IsClosed value. Label is Closed.",
              "readOnly" : true
            },
            "IsAllDayEvent" : {
              "type" : "boolean",
              "description" : "If the value of this field is set to true, then the activity is an event spanning a full day, and the ActivityDate defines the date of the event. If the value of this field is set to false, then the activity may be an event spanning less than a full day, or it may be a task. Label is All-Day Event.",
              "readOnly" : true
            },
            "IsVisibleInSelfService" : {
              "type" : "boolean",
              "description" : "If the value of this field is set to true, then the activity can be viewed in the self-service portal. Label is Visible in Self-Service.",
              "readOnly" : true
            },
            "DurationInMinutes" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the duration of the event or task.",
              "readOnly" : true
            },
            "Location" : {
              "type" : "string",
              "description" : "If the activity is an event, then this field contains the location of the event. If the activity is a task, then the value is null.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Contains a description of the event or task. Limit is 32 KB.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the activity has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CallDurationInSeconds" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Duration of the call in seconds.",
              "readOnly" : true
            },
            "CallType" : {
              "type" : "string",
              "description" : "The type of call being answered: Inbound, Internal, or Outbound.",
              "readOnly" : true
            },
            "CallDisposition" : {
              "type" : "string",
              "description" : "Represents the result of a given call, for example, “we'll call back,” or “call unsuccessful.” Limit is 255 characters.",
              "readOnly" : true
            },
            "CallObject" : {
              "type" : "string",
              "description" : "Name of a call center. Limit is 255 characters.",
              "readOnly" : true
            },
            "ReminderDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Represents the time when the reminder is scheduled to fire, if IsReminderSet is set to true. If IsReminderSet is set to false, then the user may have deselected the reminder checkbox in the Salesforce user interface, or the reminder has already fired at the time indicated by the value.",
              "readOnly" : true
            },
            "IsReminderSet" : {
              "type" : "boolean",
              "description" : "Indicates whether a reminder is set for an activity (true) or not (false).",
              "readOnly" : true
            },
            "EndDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Indicates the end date and time of the event or task. Available in versions 27.0 and later. This field is optional, depending on the following: If IsAllDayEvent is true, you can supply a value for either DurationInMinutes or EndDateTime. Supplying values in both fields is allowed if the values add up to the same amount of time. If both fields are null, the duration defaults to one day. If IsAllDayEvent is false, a value must be supplied for either DurationInMinutes or EndDateTime. Supplying values in both fields is allowed if the values add up to the same amount of time.",
              "readOnly" : true
            },
            "StartDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Indicates the start date and time of the event. Available in versions 29.0 and later. If the event’s IsAllDayEvent flag is set to true (indicating an all-day event), then the time stamp in StartDateTime is always set to midnight in the Coordinated Universal Time (UTC) time zone. Don’t attempt to alter the time stamp to account for any time zone differences. If the event’s IsAllDayEvent flag is set to false, then you must translate the time portion of the time stamp in StartDateTime to or from a local time zone for the user or the application, as appropriate. The translation must be in the Coordinated Universal Time (UTC) time zone. If this field has a value, then ActivityDate and ActivityDateTime either must be null or must match the value of this field. If the activity is a task, StartDateTime is null",
              "readOnly" : true
            },
            "ActivitySubtype" : {
              "type" : "string",
              "description" : "Provides standard subtypes to facilitate creating and searching for specific activity subtypes. This field isn’t updateable. ActivitySubtype values: Task Email Call Event List Email",
              "readOnly" : true
            },
            "AlternateDetailId" : {
              "type" : "string",
              "description" : "The ID of a record the activity is related to which contains more details about the activity. For example, an activity can be related to an EmailMessage record.",
              "readOnly" : true
            },
            "CompletedDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AdditionalNumber" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an optional additional number for a call center. This additional number is visible in the call center's phone directory.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CallCenterId" : {
              "type" : "string",
              "description" : "System field that contains the ID of the user who created the call center associated with this additional number. If value is null, this additional number is displayed in every call center's phone directory."
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the additional number. Limit: 80 characters."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the additional number, such as Conference Room B. Limit: 255 characters."
            },
            "Phone" : {
              "type" : "string",
              "description" : "The phone number that corresponds to this additional number."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "AggregateResult" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AnalyticsTaskStatusEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "RuntimeRequest" : {
              "type" : "string"
            },
            "FailureCount" : {
              "type" : "number"
            },
            "InProgressCount" : {
              "type" : "number"
            },
            "NotStartedCount" : {
              "type" : "number"
            },
            "SuccessCount" : {
              "type" : "number"
            },
            "WarningCount" : {
              "type" : "number"
            },
            "TotalTask" : {
              "type" : "number"
            },
            "TotalDurationInSecond" : {
              "type" : "number"
            },
            "RequestStatus" : {
              "type" : "string"
            },
            "TaskStatus" : {
              "type" : "string"
            },
            "Message" : {
              "type" : "string"
            },
            "Result" : {
              "type" : "string"
            },
            "TaskNode" : {
              "type" : "string"
            },
            "TaskPhase" : {
              "type" : "string"
            }
          }
        } ]
      },
      "AnalyticsUserAttrFuncTkn" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "DefinitionName" : {
              "type" : "string"
            },
            "TokenKey" : {
              "type" : "string"
            },
            "TargetObject" : {
              "type" : "string"
            },
            "TargetObjectField" : {
              "type" : "string"
            },
            "ViewerTgtObjRelDesc" : {
              "type" : "string"
            }
          }
        } ]
      },
      "AnalyticsUserAttrFuncTknShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "Announcement" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a Chatter group announcement.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FeedItemId" : {
              "type" : "string",
              "description" : "Required. The ID of the FeedItem that contains the content of the announcement. Announcements are stored as text posts."
            },
            "ExpirationDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Required. The date on which the announcement expires. Announcements display on the group UI until 11:59 p.m. local time on the selected date."
            },
            "SendEmails" : {
              "type" : "boolean",
              "description" : "Set to true to email all group members when an announcement is posted to the group. The default is false. This requires the user to have the “Send announcement on email” permission. This field is available in API version 36.0 and later. This field is currently available to select customers through a pilot program. To be nominated to join this pilot program, contact Salesforce. Additional terms and conditions may apply to participate in the pilot program. Please note that pilot programs are subject to change, and as such, we cannot guarantee acceptance into this pilot program or a particular time frame in which this feature can be enabled. Any unreleased services or features referenced in this document, press releases, or public statements are not currently available and may not be delivered on time or at all. Customers who purchase our services should make their purchase decisions based upon features that are currently available.",
              "readOnly" : true
            },
            "IsArchived" : {
              "type" : "boolean",
              "description" : "When true, the announcement has been dismissed by the user on the user profile.’ This field is available in API version 36.0 and later."
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The ID of the parent CollaborationGroup that the announcement belongs to. An announcement can belong only to a single Chatter group.",
              "readOnly" : true
            }
          }
        } ]
      },
      "ApexClass" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an Apex class.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the class. Limit: 255 characters"
            },
            "ApiVersion" : {
              "type" : "number",
              "description" : "The API version for this class. Every class has an API version specified at creation."
            },
            "Status" : {
              "type" : "string",
              "description" : "The current status of the Apex class. The following string values are valid: Active—The class is active. Deleted—The class is marked for deletion. This is useful for managed packages, because it allows a class to be deleted when a managed package is updated. Inactive—This option is unused and is only supported for ApexTrigger. For more information, see the Metadata API Developer Guide."
            },
            "IsValid" : {
              "type" : "boolean",
              "description" : "Indicates whether any dependent metadata has changed since the class was last compiled (true) or not (false). The default value is false."
            },
            "BodyCrc" : {
              "type" : "number",
              "description" : "The CRC (cyclic redundancy check) of the class or trigger file."
            },
            "Body" : {
              "type" : "string",
              "description" : "The Apex class definition. Limit: 1 million characters."
            },
            "LengthWithoutComments" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Length of the class without comments."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "ApexComponent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a definition for a custom component that can be used in a Visualforce page alongside standard components such as <apex:relatedList> and <apex:dataTable>.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of this Visualforce custom component."
            },
            "ApiVersion" : {
              "type" : "number",
              "description" : "The API version for this custom component. Every custom component has an API version specified at creation. If the API version is less than 15.0 and ApiVersion is not specified, ApiVersion defaults to 15.0."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The text used to identify the Visualforce custom component in the Setup area of Salesforce. The Label for this field is Label."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the Visualforce custom component."
            },
            "ControllerType" : {
              "type" : "string",
              "description" : "The type of controller associated with this Visualforce custom component. Possible values include: Not Specified, for custom components defined without a value for the controller attribute on the <apex:component> tag Standard, a value that can't be used with custom components or errors may occur StandardSet, a value that can't be used with custom components or errors may occur Custom, for components that have a value for the controller attribute on the <apex:component> tag"
            },
            "ControllerKey" : {
              "type" : "string",
              "description" : "The identifier for the controller associated with this custom component: If the ControllerType parameter is set to Standard or StandardSet, this value is the name of the sObject that defines the controller. If the ControllerType parameter is set to Custom, this value is the name of the Apex class that defines the controller."
            },
            "Markup" : {
              "type" : "string",
              "description" : "The Visualforce markup, HTML, Javascript, and any other Web-enabled code that defines the content of the custom component."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "ApexEmailNotification" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string"
            },
            "Email" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ApexLog" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a debug log containing information about a transaction, including information about Apex, Visualforce, and workflow and validation rules.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "LogUserId" : {
              "type" : "string",
              "description" : "ID of the user whose actions triggered the debug log.",
              "readOnly" : true
            },
            "LogLength" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Length of the log in bytes.",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Request" : {
              "type" : "string",
              "description" : "Request type. Values are: API—Request came from the API Application—Request came from the Salesforce user interface",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "description" : "Name of the operation that triggered the debug log, such as APEXSOAP, Apex Sharing Recalculation, and so on.",
              "readOnly" : true
            },
            "Application" : {
              "type" : "string",
              "description" : "This value depends on the client type that triggered the log. For API clients, this value is the client ID. For browser clients, this value is Browser.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "Status of the transaction. This value is either Success, or the text of an unhandled Apex exception.",
              "readOnly" : true
            },
            "DurationMilliseconds" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Duration of the transaction in milliseconds.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "StartTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Start time of the transaction.",
              "readOnly" : true
            },
            "Location" : {
              "type" : "string",
              "description" : "Specifies the location of the origin of the log. Values are: Monitoring—Log is generated as part of debug log monitoring. These types of logs are maintained for seven days or until a user deletes them. SystemLog—Log is generated from the Developer Console. These types of logs are maintained for 24 hours or until the user clears them.",
              "readOnly" : true
            },
            "RequestIdentifier" : {
              "type" : "string",
              "description" : "The unique identifier of the request that triggered the debug log. Use this request identifier to correlate multiple debug logs triggered by the same request.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ApexPage" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a single Visualforce page.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of this Visualforce page."
            },
            "ApiVersion" : {
              "type" : "number",
              "description" : "The API version for this page. Every page has an API version specified at creation. If the API version is less than 15.0 and ApiVersion is not specified, ApiVersion defaults to 15.0."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The text used to identify the Visualforce page in the Setup area of Salesforce. The Label is Label."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the Visualforce page."
            },
            "ControllerType" : {
              "type" : "string",
              "description" : "The type of controller associated with this Visualforce page. Possible values include: Not Specified, for pages defined with neither a standardController nor a controller attribute on the <apex:page> tag Standard, for pages defined with the standardController attribute on the <apex:page> tag StandardSet, for pages defined using the standardController and recordSetVar attribute on the <apex:page> tag Custom, for pages defined with the controller attribute on the <apex:page> tag"
            },
            "ControllerKey" : {
              "type" : "string",
              "description" : "The identifier for the controller associated with this page: If the ControllerType parameter is set to Standard or StandardSet, this value is the name of the sObject that defines the controller. If the ControllerType parameter is set to Custom, this value is the name of the Apex class that defines the controller."
            },
            "IsAvailableInTouch" : {
              "type" : "boolean",
              "description" : "Indicates if Visualforce tabs associated with the Visualforce page can be used in the Salesforce mobile app (true) or not (false). (Use of this field for Salesforce Touch is deprecated.) This field is available in API version 27.0 and later. Standard object tabs that are overridden with a Visualforce page aren’t supported in the Salesforce mobile app, even if you set this field for the page. The default Salesforce app page for the object is displayed instead of the Visualforce page."
            },
            "IsConfirmationTokenRequired" : {
              "type" : "boolean",
              "description" : "Indicates whether GET requests for the page require a CSRF confirmation token (true) or not (false). This field is available in API version 28.0 and later. If you change this field’s value from false to true, links to the page require a CSRF token to be added to them, or the page will be inaccessible."
            },
            "Markup" : {
              "type" : "string",
              "description" : "The Visualforce markup, HTML, Javascript, and any other Web-enabled code that defines the content of the page."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "ApexPageInfo" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents metadata about a single Visualforce page.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "For internal use only.",
              "readOnly" : true
            },
            "ApexPageId" : {
              "type" : "string",
              "description" : "ID for the Visualforce page.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Developer name of the Visualforce page.",
              "readOnly" : true
            },
            "NameSpacePrefix" : {
              "type" : "string",
              "description" : "The namespace prefix associated with this object. Each Developer Edition org that creates a managed package has a unique namespace prefix. Limit: 15 characters. You can refer to a component in a managed package by using the namespacePrefix__componentName notation.",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "description" : "The API version for the page. Every page has an API version specified at creation. If the API version is less than 15.0 and ApiVersion is not specified, ApiVersion defaults to 15.0.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the Visualforce page.",
              "readOnly" : true
            },
            "IsAvailableInTouch" : {
              "type" : "boolean",
              "description" : "Indicates if Visualforce tabs associated with the Visualforce page can be used in the Salesforce app (true) or not (false). The default value is false.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The text used to identify the Visualforce page in the Setup area of Salesforce.",
              "readOnly" : true
            },
            "IsShowHeader" : {
              "type" : "string",
              "description" : "The showHeader value for the Visualforce page. This will be “unknown” if the Visualforce page uses an expression to compute showHeader. The default value is true.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ApexTestQueueItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a single Apex class in the Apex job queue.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ApexClassId" : {
              "type" : "string",
              "description" : "The Apex class whose tests are to be executed."
            },
            "Status" : {
              "type" : "string"
            },
            "ExtendedStatus" : {
              "type" : "string",
              "description" : "The pass rate of the test run. For example: “(4/6)”. This means that four out of a total of six tests passed. If the class fails to execute, this field contains the cause of the failure.",
              "readOnly" : true
            },
            "ParentJobId" : {
              "type" : "string",
              "description" : "Points to the AsyncApexJob that represents the entire test run. If you insert multiple Apex test queue items in a single bulk operation, the queue items share the same parent job. This means that a test run can consist of the execution of the tests of several classes if all the test queue items are inserted in the same bulk operation.",
              "readOnly" : true
            },
            "TestRunResultId" : {
              "type" : "string",
              "description" : "The ID of the associated ApexTestRunResult object.",
              "readOnly" : true
            },
            "ShouldSkipCodeCoverage" : {
              "type" : "boolean",
              "description" : "Indicates whether to opt out of collecting code coverage information during Apex test runs. Available in API version 43.0 and later."
            }
          }
        } ]
      },
      "ApexTestResult" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the result of an Apex test method execution.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "TestTimestamp" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The start time of the test method."
            },
            "Outcome" : {
              "type" : "string",
              "description" : "The result of the test method execution. Can be one of these values: Pass Fail CompileFail Skip"
            },
            "ApexClassId" : {
              "type" : "string",
              "description" : "The Apex class whose test methods were executed."
            },
            "MethodName" : {
              "type" : "string",
              "description" : "The test method name."
            },
            "Message" : {
              "type" : "string",
              "description" : "The exception error message if a test failure occurs; otherwise, null."
            },
            "StackTrace" : {
              "type" : "string",
              "description" : "The Apex stack trace if the test failed; otherwise, null."
            },
            "AsyncApexJobId" : {
              "type" : "string",
              "description" : "Points to the AsyncApexJob that represents the entire test run. This field points to the same object as ApexTestQueueItem.ParentJobId."
            },
            "QueueItemId" : {
              "type" : "string",
              "description" : "Points to the ApexTestQueueItem which is the class that this test method is part of."
            },
            "ApexLogId" : {
              "type" : "string",
              "description" : "Points to the ApexLog for this test method execution if debug logging is enabled; otherwise, null."
            },
            "ApexTestRunResultId" : {
              "type" : "string",
              "description" : "The ID of the ApexTestRunResult that represents the entire test run."
            },
            "RunTime" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The time it took the test method to run, in milliseconds."
            },
            "IsTestSetup" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "ApexTestResultLimits" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Captures the Apex test limits used for a particular test method execution. An instance of this object is associated with each ApexTestResult record.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ApexTestResultId" : {
              "type" : "string",
              "description" : "The ID of the associated ApexTestResult object."
            },
            "Soql" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of SOQL queries made during the test run."
            },
            "QueryRows" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of rows queried during the test run."
            },
            "Sosl" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of SOSL queries made during the test run."
            },
            "Dml" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of DML statements made during the test run."
            },
            "DmlRows" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of rows accessed by DML statements during the test run."
            },
            "Cpu" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The amount of CPU used during the test run, in milliseconds."
            },
            "Callouts" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of callouts made during the test run."
            },
            "Email" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of email invocations made during the test run."
            },
            "AsyncCalls" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of asynchronous calls made during the test run."
            },
            "MobilePush" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of mobile push calls made during the test run."
            },
            "LimitContext" : {
              "type" : "string",
              "description" : "Indicates whether the test run was synchronous or asynchronous."
            },
            "LimitExceptions" : {
              "type" : "string",
              "description" : "Indicates whether your org has any limits that differ from the default limits."
            }
          }
        } ]
      },
      "ApexTestRunResult" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Contains summary information about all the test methods that were run in a particular Apex job.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AsyncApexJobId" : {
              "type" : "string",
              "description" : "The parent Apex job ID for the result."
            },
            "UserId" : {
              "type" : "string",
              "description" : "The user who ran the test run."
            },
            "JobName" : {
              "type" : "string",
              "description" : "Reserved for future use."
            },
            "IsAllTests" : {
              "type" : "boolean",
              "description" : "Indicates whether all Apex test classes were run."
            },
            "Source" : {
              "type" : "string",
              "description" : "The source of the test run, such as the Developer Console."
            },
            "StartTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The time at which the test run started."
            },
            "EndTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The time at which the test run ended."
            },
            "TestTime" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The time it took the test to run, in seconds."
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the test run. Values include: Queued Processing Aborted Completed Failed"
            },
            "ClassesEnqueued" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total number of classes enqueued during the test run."
            },
            "ClassesCompleted" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total number of classes executed during the test run."
            },
            "MethodsEnqueued" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total number of methods enqueued for the test run. This value is initialized before the test runs."
            },
            "MethodsCompleted" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total number of methods completed during the test run. This value is updated after each class is run."
            },
            "MethodsFailed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total number of methods that failed during this test run. This value is updated after each class is run."
            },
            "TestSetupTime" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        } ]
      },
      "ApexTestSuite" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a suite of Apex classes to include in a test run. A TestSuiteMembership object associates each class with the suite.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "TestSuiteName" : {
              "type" : "string",
              "description" : "The name of the Apex test suite. This label appears in the user interface. This value is case-sensitive and must be unique."
            }
          }
        } ]
      },
      "ApexTrigger" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an Apex trigger.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the trigger. Limit: 255 characters"
            },
            "TableEnumOrId" : {
              "type" : "string",
              "description" : "Specifies the object associated with the trigger, such as Account or Contact."
            },
            "UsageBeforeInsert" : {
              "type" : "boolean",
              "description" : "Specifies whether the trigger is a before insert trigger (true) or not (false)."
            },
            "UsageAfterInsert" : {
              "type" : "boolean",
              "description" : "Specifies whether the trigger is an after insert trigger (true) or not (false)."
            },
            "UsageBeforeUpdate" : {
              "type" : "boolean",
              "description" : "Specifies whether the trigger is a before update trigger (true) or not (false)."
            },
            "UsageAfterUpdate" : {
              "type" : "boolean",
              "description" : "Specifies whether the trigger is an after update trigger (true) or not (false)."
            },
            "UsageBeforeDelete" : {
              "type" : "boolean",
              "description" : "Specifies whether the trigger is a before delete trigger (true) or not (false)."
            },
            "UsageAfterDelete" : {
              "type" : "boolean",
              "description" : "Specifies whether the trigger is an after delete trigger (true) or not (false)."
            },
            "UsageIsBulk" : {
              "type" : "boolean",
              "description" : "Specifies whether the trigger is defined as a bulk trigger (true) or not (false). This field is not used for Apex triggers saved using Salesforce API version 10.0 or higher: all triggers starting with that version are automatically considered bulk, and this field will always return true."
            },
            "UsageAfterUndelete" : {
              "type" : "boolean",
              "description" : "Specifies whether the trigger is an after undelete trigger (true) or not (false)."
            },
            "ApiVersion" : {
              "type" : "number",
              "description" : "The API version for this trigger. Every trigger has an API version specified at creation."
            },
            "Status" : {
              "type" : "string",
              "description" : "The current status of the Apex trigger. The following string values are valid: Active—The trigger is active. Inactive—The trigger is inactive, but not deleted. Deleted—The trigger is marked for deletion. This is useful for managed packages, because it allows a class to be deleted when a managed package is updated. Inactive is not valid for ApexClass. For more information, see the Metadata API Developer Guide."
            },
            "IsValid" : {
              "type" : "boolean",
              "description" : "Indicates whether any dependent metadata has changed since the trigger was last compiled (true) or not (false)."
            },
            "BodyCrc" : {
              "type" : "number",
              "description" : "The CRC (cyclic redundancy check) of the class or trigger file."
            },
            "Body" : {
              "type" : "string",
              "description" : "The Apex trigger definition. Limit: 1 million characters."
            },
            "LengthWithoutComments" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Length of the trigger without comments"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "ApexTypeImplementor" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApexClassId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ClassName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ClassNamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsConcrete" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "InterfaceApexClassId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InterfaceName" : {
              "type" : "string",
              "readOnly" : true
            },
            "InterfaceNamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ApiAnomalyEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueriedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "RequestIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "RowsProcessed" : {
              "type" : "number",
              "readOnly" : true
            },
            "Score" : {
              "type" : "number",
              "readOnly" : true
            },
            "SecurityEventData" : {
              "type" : "string",
              "readOnly" : true
            },
            "Summary" : {
              "type" : "string",
              "readOnly" : true
            },
            "Uri" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserAgent" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ApiAnomalyEventStore" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiAnomalyEventNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueriedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "RequestIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "RowsProcessed" : {
              "type" : "number",
              "readOnly" : true
            },
            "Score" : {
              "type" : "number",
              "readOnly" : true
            },
            "SecurityEventData" : {
              "type" : "string",
              "readOnly" : true
            },
            "Summary" : {
              "type" : "string",
              "readOnly" : true
            },
            "Uri" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserAgent" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ApiAnomalyEventStoreFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ApiEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RowsProcessed" : {
              "type" : "number",
              "readOnly" : true
            },
            "RowsReturned" : {
              "type" : "number",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueriedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "AdditionalInfo" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "readOnly" : true
            },
            "Application" : {
              "type" : "string",
              "readOnly" : true
            },
            "Client" : {
              "type" : "string",
              "readOnly" : true
            },
            "ConnectedAppId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ElapsedTime" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Platform" : {
              "type" : "string",
              "readOnly" : true
            },
            "Query" : {
              "type" : "string",
              "readOnly" : true
            },
            "Records" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserAgent" : {
              "type" : "string",
              "readOnly" : true
            },
            "RequestIdentifier" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ApiEventStream" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RowsProcessed" : {
              "type" : "number",
              "readOnly" : true
            },
            "RowsReturned" : {
              "type" : "number",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueriedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "AdditionalInfo" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "readOnly" : true
            },
            "Application" : {
              "type" : "string",
              "readOnly" : true
            },
            "Client" : {
              "type" : "string",
              "readOnly" : true
            },
            "ConnectedAppId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ElapsedTime" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Platform" : {
              "type" : "string",
              "readOnly" : true
            },
            "Query" : {
              "type" : "string",
              "readOnly" : true
            },
            "Records" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserAgent" : {
              "type" : "string",
              "readOnly" : true
            },
            "RequestIdentifier" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AppAnalyticsQueryRequest" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a request for AppExchange App Analytics data.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The auto-generated name of the App Analytics query request.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "description" : "The type of usage data being requested. Valid values include: PackageUsageLog PackageUsageSummary SubscriberSnapshot In Summer ’20, we changed the enum names from CustomObjectUsageSummary and CustomObjectUsageLog to PackageUsageSummary and PackageUsageLog. If you wrote integrations using CustomObjectUsageSummary or CustomObjectUsageLog, they continue to work only with v47 and earlier. After you upgrade to v48, you must update the DataType to PackageUsageSummary and PackageUsageLog."
            },
            "StartTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Required. Enter start time in format yyyy-MM-ddTHH:mm:ss. Example 2019-04-14T12:00:00"
            },
            "EndTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Enter end time in format yyyy-MM-ddTHH:mm:ss. Example 2019-04-15T12:00:00"
            },
            "RequestState" : {
              "type" : "string",
              "description" : "Status of the query request. Valid values are: New Pending Complete Expired Failed NoData",
              "readOnly" : true
            },
            "DownloadUrl" : {
              "type" : "string",
              "description" : "URL that the user can download data from. Populated after the request is completed.",
              "readOnly" : true
            },
            "DownloadExpirationTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The time when the download URL is no longer valid.",
              "readOnly" : true
            },
            "ErrorMessage" : {
              "type" : "string",
              "description" : "Stores error message text that results from this query.",
              "readOnly" : true
            },
            "QuerySubmittedTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PackageIds" : {
              "type" : "string",
              "description" : "Optional. Enter up to 16 comma-separated package IDs without spaces between IDs. Or enter up to 15 comma-separated package IDs with spaces between the IDs. Use the subscriber package ID that begins with 033. To retrieve a list of your second-generation managed package IDs, run sfdx force:package:list --verbose in Salesforce CLI. To request data on all packages registered to this License Management App, leave the field blank."
            },
            "OrganizationIds" : {
              "type" : "string",
              "description" : "Optional. Enter up to 16 comma-separated org IDs without spaces between IDs. Or enter up to 15 comma-separated org IDs with spaces between the IDs. To request data for all the orgs the package is installed in, leave the field blank."
            },
            "DownloadSize" : {
              "type" : "number",
              "description" : "The size of the AppExchange App Analytics results file available for download, in bytes.",
              "readOnly" : true
            },
            "FileCompression" : {
              "type" : "string"
            },
            "AvailableSince" : {
              "type" : "string",
              "format" : "date-time"
            },
            "FileType" : {
              "type" : "string"
            }
          }
        } ]
      },
      "AppDefinition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the metadata of an app and its navigation items. Metadata is returned only for apps that the current user can access.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "description" : "A default Salesforce ID.",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "A unique virtual Salesforce ID for the application.",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "description" : "The localized label value corresponding to the MasterLabel field.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The non-translated label entered when the application was created.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The namespace of the application.",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The developer name of the application.",
              "readOnly" : true
            },
            "LogoUrl" : {
              "type" : "string",
              "description" : "The logo URL of the application as selected by the admin.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "The optional description of the application.",
              "readOnly" : true
            },
            "UiType" : {
              "type" : "string",
              "description" : "Indicates the type of custom application. The value Aloha is for Salesforce Classic, and Lightning is for Lightning Experience.",
              "readOnly" : true
            },
            "NavType" : {
              "type" : "string",
              "description" : "The type of navigation for the application. The value Standard is for Lightning Experience. The value Console is for Salesforce console. A null value is for Salesforce Classic.",
              "readOnly" : true
            },
            "UtilityBar" : {
              "type" : "string",
              "description" : "The ID of the utility bar associated with this application.",
              "readOnly" : true
            },
            "HeaderColor" : {
              "type" : "string",
              "description" : "The header color in the application. Specify the color with a hexadecimal code, such as #0000FF for blue.",
              "readOnly" : true
            },
            "IsOverrideOrgTheme" : {
              "type" : "boolean",
              "description" : "Indicates whether to override the global theme for the org. When true, the color scheme and logo that the user has set are used. When false, the global theme for the org is used, even if the user has set a color scheme and logo.",
              "readOnly" : true
            },
            "IsSmallFormFactorSupported" : {
              "type" : "boolean",
              "description" : "Indicates whether the Small form factor is set in the CustomApplication metadata.",
              "readOnly" : true
            },
            "IsMediumFormFactorSupported" : {
              "type" : "boolean",
              "description" : "Indicates whether the Medium form factor is set in the CustomApplication metadata.",
              "readOnly" : true
            },
            "IsLargeFormFactorSupported" : {
              "type" : "boolean",
              "description" : "Indicates whether the Large form factor is set in the CustomApplication metadata.",
              "readOnly" : true
            },
            "IsNavPersonalizationDisabled" : {
              "type" : "boolean",
              "description" : "Indicates whether navigation personalization is disabled.",
              "readOnly" : true
            },
            "IsNavAutoTempTabsDisabled" : {
              "type" : "boolean",
              "description" : "Indicates whether the navigation automatically creates temporary tabs settings.",
              "readOnly" : true
            },
            "IsNavTabPersistenceDisabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsOmniPinnedViewEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AppMenuItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the organization’s default settings for items in the app menu or App Launcher.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The index value that controls where this item appears in the menu. For example, a menu item with a sort order of 5 appears between items with sort order values of 3 and 9.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The API name of the item.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The namespace prefix that is associated with this object. Each Developer Edition org that creates a managed package has a unique namespace prefix. Limit: 15 characters. You can refer to a component in a managed package by using the namespacePrefix__componentName notation. The namespace prefix can have one of the following values:In Developer Edition orgs, NamespacePrefix is set to the namespace prefix of the org for all objects that support it, unless an object is in an installed managed package. In that case, the object has the namespace prefix of the installed managed package. This field’s value is the namespace prefix of the Developer Edition org of the package developer. In orgs that are not Developer Edition orgs, NamespacePrefix is set only for objects that are part of an installed managed package. All other objects have no namespace prefix.",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "description" : "The app’s name.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "A description of this menu item.",
              "readOnly" : true
            },
            "StartUrl" : {
              "type" : "string",
              "description" : "For a connected app, the location users are directed to after they’ve authenticated. Otherwise, the application’s default start page.",
              "readOnly" : true
            },
            "MobileStartUrl" : {
              "type" : "string",
              "description" : "The location mobile users are directed to after they’ve authenticated. This field is used with connected apps and Experience Builder sites. For sites only, this location is a fully qualified domain name. For other apps, it’s a relative URL.",
              "readOnly" : true
            },
            "LogoUrl" : {
              "type" : "string",
              "description" : "The logo for the menu item’s application. The default is the initials of the Label value.",
              "readOnly" : true
            },
            "IconUrl" : {
              "type" : "string",
              "description" : "The icon for the menu item’s application.",
              "readOnly" : true
            },
            "InfoUrl" : {
              "type" : "string",
              "description" : "The URL for more information about the application.",
              "readOnly" : true
            },
            "IsUsingAdminAuthorization" : {
              "type" : "boolean",
              "description" : "If true, the app is pre-authorized for certain users by the administrator. The default setting is false.",
              "readOnly" : true
            },
            "MobilePlatform" : {
              "type" : "string",
              "description" : "The mobile platform for the app. Possible values include: android – Android ios – iOS Available in API version 49.0 and later.",
              "readOnly" : true
            },
            "MobileMinOsVer" : {
              "type" : "string",
              "description" : "The minimum version required for the app. Available in API version 49.0 and later.",
              "readOnly" : true
            },
            "MobileDeviceType" : {
              "type" : "string",
              "description" : "The supported device form factors for the mobile app. Available in API version 49.0 and later.",
              "readOnly" : true
            },
            "IsRegisteredDeviceOnly" : {
              "type" : "boolean",
              "description" : "If true, indicates that the app is available to registered devices only. The default setting is false. Available in API version 49.0 and later.",
              "readOnly" : true
            },
            "MobileAppVer" : {
              "type" : "string",
              "description" : "The version number of the mobile app. Available in API version 49.0 and later.",
              "readOnly" : true
            },
            "MobileAppInstalledDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time that a user installed a mobile app. Available in API version 49.0 and later.",
              "readOnly" : true
            },
            "MobileAppInstalledVersion" : {
              "type" : "string",
              "description" : "The version of the user’s installed mobile app. Available in API version 49.0 and later.",
              "readOnly" : true
            },
            "MobileAppBinaryId" : {
              "type" : "string",
              "description" : "The URL for the Mobile App Binary file.",
              "readOnly" : true
            },
            "MobileAppInstallUrl" : {
              "type" : "string",
              "description" : "The location mobile users are directed to install the app. Available in API version 49.0 and later.",
              "readOnly" : true
            },
            "CanvasEnabled" : {
              "type" : "boolean",
              "description" : "Indicates if the app menu item is a canvas app (true) or not (false). The default setting is false.",
              "readOnly" : true
            },
            "CanvasReferenceId" : {
              "type" : "string",
              "description" : "The canvas app unique identifier.",
              "readOnly" : true
            },
            "CanvasUrl" : {
              "type" : "string",
              "description" : "The URL of the canvas app.",
              "readOnly" : true
            },
            "CanvasAccessMethod" : {
              "type" : "string",
              "description" : "The access method for the canvas app. Values can be: Get—OAuth Webflow Post—Signed Request",
              "readOnly" : true
            },
            "CanvasSelectedLocations" : {
              "type" : "string",
              "description" : "The selected locations for the canvas app which define where the canvas app can appear in the user interface. For example:Chatter,ChatterFeed,Publisher,ServiceDesk",
              "readOnly" : true
            },
            "CanvasOptions" : {
              "type" : "string",
              "description" : "Represents the options enabled for a canvas connected app. The options are: PersonalEnabled—The app is enabled as a canvas personal app. HideHeader—The publisher header, which contains the “What are you working on?” text, is hidden. HideShare—The publisher Share button is hidden. This field is available in API version 34.0 and later.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "The type of application represented by this item. The types are: ConnectedApplication Network ServiceProvider TabSet",
              "readOnly" : true
            },
            "ApplicationId" : {
              "type" : "string",
              "description" : "The 15-character ID for the menu item.",
              "readOnly" : true
            },
            "UserSortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The index value that represents where the user set this item in the menu (or App Launcher). For example, an item with a sort order value of 5 appears between items with sort order values of 3 and 9. This value is separate from SortOrder so you can create logic incorporating both values. For example, if you want the user-sorted items to appear first, followed by the organization order for the rest, use: SELECT ApplicationId,SortOrder,UserSortOrder FROM AppMenuItem order by userSortOrder NULLS LAST, sortOrder NULLS LAST",
              "readOnly" : true
            },
            "IsVisible" : {
              "type" : "boolean",
              "description" : "If true, the app is visible to users of the organization. The default setting is false."
            },
            "IsAccessible" : {
              "type" : "boolean",
              "description" : "If true, the current user is authorized to use the app. The default setting is false.",
              "readOnly" : true
            }
          }
        } ]
      },
      "AppTabMember" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the list of tabs for each of the available apps.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "A unique virtual Salesforce ID for the color.",
              "readOnly" : true
            },
            "AppDefinitionId" : {
              "type" : "string",
              "description" : "The ID of the AppDefinition object.",
              "readOnly" : true
            },
            "TabDefinitionId" : {
              "type" : "string",
              "description" : "The ID of the TabDefinition object.",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number used to sort this tab in the application.",
              "readOnly" : true
            },
            "WorkspaceDriverField" : {
              "type" : "string",
              "description" : "Refers to the workspace mapping in the CustomApplication Metadata API object.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Approval" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an approval request for a Contract.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "Required. ID of the Contract associated with this approval request. Must be a valid contract ID.",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "Required. ID of the User being asked to approve or reject the approval request. Must be a valid User ID. Required.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "Required. Status of this approval request. One of the following picklist values: Pending—Specified only when the Approval request is created (create() call) Approved—Specified only when the Approval request is approved (update() call) Rejected—Specified when the Approval request is rejected (update() call) or when it is created (create() call) and immediately rejected for archival/historical purposes.",
              "readOnly" : true
            },
            "RequestComment" : {
              "type" : "string",
              "description" : "Text entered by the User who created the approval request. Optional. This field can't be updated after the Approval has been created. Limit: 4,000 characters.",
              "readOnly" : true
            },
            "ApproveComment" : {
              "type" : "string",
              "description" : "Text entered by the user when they approved or rejected this approval request. Required. Limit: 4,000 characters.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ApprovalSubmission" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowOrchestrationInstanceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "SubmittedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Comments" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelatedRecordObjectName" : {
              "type" : "string",
              "readOnly" : true
            },
            "DoesSendApprovalEmail" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ApprovalSubmissionDetail" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ApprovalSubmissionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApprovalWorkItemId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActionName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActionContext" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActionPerformedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActionPerformerRole" : {
              "type" : "string",
              "readOnly" : true
            },
            "Comments" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActionChannelName" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ApprovalSubmissionShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "ApprovalWorkItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ApprovalSubmissionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowOrchestrationWorkItemId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "AssignedToId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReviewedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Comments" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelatedRecordObjectName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApprovalConditionName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReviewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Asset" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an item of commercial value, such as a product sold by your company or a competitor, that a customer has purchased and installed.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "description" : "Required if AccountId isn’t specified. ID of the Contact associated with this asset. Must be a valid contact ID that has an account parent (but doesn’t need to match the asset’s AccountId)."
            },
            "AccountId" : {
              "type" : "string",
              "description" : "(Required) ID of the Account associated with this asset. Must be a valid account ID. Required if ContactId isn’t specified."
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The asset’s parent asset. Its UI label is Parent Asset."
            },
            "RootAssetId" : {
              "type" : "string",
              "description" : "(Read only) The top-level asset in an asset hierarchy. Depending on where an asset lies in the hierarchy, its root could be the same as its parent. Its UI label is Root Asset.",
              "readOnly" : true
            },
            "Product2Id" : {
              "type" : "string",
              "description" : "(Optional) ID of the Product2 associated with this asset. Must be a valid Product2 ID. Its UI label is Product."
            },
            "IsCompetitorProduct" : {
              "type" : "boolean",
              "description" : "Indicates whether this Asset represents a product sold by a competitor (true) or not (false). Default value is false. Its UI label is Competitor Asset."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "(Required) Name of the asset. Label is Asset Name."
            },
            "SerialNumber" : {
              "type" : "string",
              "description" : "Serial number for this asset."
            },
            "InstallDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date when the asset was installed."
            },
            "PurchaseDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date on which this asset was purchased."
            },
            "UsageEndDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date when usage for this asset ends or expires."
            },
            "Status" : {
              "type" : "string",
              "description" : "Customizable picklist of values. The default picklist includes the following values: Purchased Shipped Installed Registered Obsolete"
            },
            "Price" : {
              "type" : "number",
              "description" : "Price paid for this asset."
            },
            "Quantity" : {
              "type" : "number",
              "description" : "Quantity purchased or installed."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the asset."
            },
            "StockKeepingUnit" : {
              "type" : "string",
              "description" : "The SKU assigned to the related product.",
              "readOnly" : true
            },
            "Street" : {
              "type" : "string"
            },
            "City" : {
              "type" : "string"
            },
            "State" : {
              "type" : "string"
            },
            "PostalCode" : {
              "type" : "string"
            },
            "Country" : {
              "type" : "string"
            },
            "Latitude" : {
              "type" : "number"
            },
            "Longitude" : {
              "type" : "number"
            },
            "GeocodeAccuracy" : {
              "type" : "string"
            },
            "Address" : {
              "type" : "object",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time that the asset was last viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time that the asset was last modified. Its UI label is Last Modified Date.",
              "readOnly" : true
            }
          }
        } ]
      },
      "AssetChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RootAssetId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Product2Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsCompetitorProduct" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "SerialNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "InstallDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "PurchaseDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "UsageEndDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "Price" : {
              "type" : "number",
              "readOnly" : true
            },
            "Quantity" : {
              "type" : "number",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "Street" : {
              "type" : "string",
              "readOnly" : true
            },
            "City" : {
              "type" : "string",
              "readOnly" : true
            },
            "State" : {
              "type" : "string",
              "readOnly" : true
            },
            "PostalCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "Country" : {
              "type" : "string",
              "readOnly" : true
            },
            "Latitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "Longitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "GeocodeAccuracy" : {
              "type" : "string",
              "readOnly" : true
            },
            "Address" : {
              "type" : "object",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AssetFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AssetHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "AssetId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AssetRelationship" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a non-hierarchical relationship between assets due to replacement, upgrade, or other circumstances.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "AssetRelationshipNumber" : {
              "type" : "string",
              "description" : "An auto-generated number identifying the asset relationship.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date the asset relationship was last viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date when the asset relationship was last modified. Its label in the user interface is Last Modified Date.",
              "readOnly" : true
            },
            "AssetId" : {
              "type" : "string",
              "description" : "The replacement asset."
            },
            "RelatedAssetId" : {
              "type" : "string",
              "description" : "The asset being replaced."
            },
            "FromDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The day the replacement asset is installed."
            },
            "ToDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The day the replacement asset is uninstalled."
            }
          }
        } ]
      },
      "AssetRelationshipChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "AssetRelationshipNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "AssetId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelatedAssetId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FromDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ToDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AssetRelationshipFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AssetRelationshipHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "AssetRelationshipId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AssetTokenEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "The documentation has moved to AssetTokenEvent in the Platform Events Developer Guide.",
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "ConnectedAppId" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AssetId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeviceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeviceKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "Expiration" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AssetSerialNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "AssetName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActorTokenPayload" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalClientApplicationId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AssignmentRule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an assignment rule associated with a Case or Lead.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of this assignment rule.",
              "readOnly" : true
            },
            "SobjectType" : {
              "type" : "string",
              "description" : "Type of assignment rule—Case or Lead.",
              "readOnly" : true
            },
            "Active" : {
              "type" : "boolean",
              "description" : "Indicates whether this assignment rule is active (true) or not (false).",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AsyncApexJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an individual Apex sharing recalculation job, a batch Apex job, a method with the future annotation, or a job that implements Queueable. Use this object to query Apex batch jobs in your organization.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "JobType" : {
              "type" : "string",
              "description" : "The type of job being processed. Valid values are: Future SharingRecalculation ScheduledApex BatchApex BatchApexWorker TestRequest TestWorker ApexToken Queueable",
              "readOnly" : true
            },
            "ApexClassId" : {
              "type" : "string",
              "description" : "The ID of the Apex class executing the job. Label is Class ID.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the job. Valid values are: Holding1 Queued Preparing Processing Aborted Completed Failed 1 This status applies to batch jobs in the Apex flex queue.",
              "readOnly" : true
            },
            "JobItemsProcessed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of job items processed. Label is Batches Processed.",
              "readOnly" : true
            },
            "TotalJobItems" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Total number of batches processed. Each batch contains a set of records. Label is Total Batches.",
              "readOnly" : true
            },
            "NumberOfErrors" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Total number of batches with a failure. A batch is considered transactional, so any unhandled exceptions constitute an entire failure of the batch. Label is Failures.",
              "readOnly" : true
            },
            "CompletedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the job was completed.",
              "readOnly" : true
            },
            "MethodName" : {
              "type" : "string",
              "description" : "The name of the Apex method being executed. Label is Apex Method.",
              "readOnly" : true
            },
            "ExtendedStatus" : {
              "type" : "string",
              "description" : "If one or more errors occurred during the batch processing, this contains a short description of the first error. A more detailed description of that error, along with any subsequent errors, is emailed to the last user who modified the batch class. This field is available in API version 19.0 and later.",
              "readOnly" : true
            },
            "ParentJobId" : {
              "type" : "string",
              "description" : "Fill out your description here! Remember: table cells should never start with a paragraph tag. It's only here to wrap the draft-comment tag.",
              "readOnly" : true
            },
            "LastProcessed" : {
              "type" : "string",
              "description" : "Fill out your description here! Remember: table cells should never start with a paragraph tag. It's only here to wrap the draft-comment tag.",
              "readOnly" : true
            },
            "LastProcessedOffset" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Fill out your description here! Remember: table cells should never start with a paragraph tag. It's only here to wrap the draft-comment tag.",
              "readOnly" : true
            },
            "CronTriggerId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AsyncOperationEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "OperationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceEvent" : {
              "type" : "object",
              "readOnly" : true
            },
            "OperationDetails" : {
              "type" : "object",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AsyncOperationStatus" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "Fields" : {
              "type" : "object",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "Category" : {
              "type" : "string",
              "readOnly" : true
            },
            "Message" : {
              "type" : "string",
              "readOnly" : true
            },
            "StatusCode" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AttachedContentDocument" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "This read-only object contains all ContentDocument objects associated with an object.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LinkedEntityId" : {
              "type" : "string",
              "description" : "ID of the record the ContentDocument is attached to.",
              "readOnly" : true
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "ID of the attached ContentDocument.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "Title of the attached ContentDocument.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FileType" : {
              "type" : "string",
              "description" : "Type of document, determined by the file extension.",
              "readOnly" : true
            },
            "ContentSize" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Size of the document in bytes.",
              "readOnly" : true
            },
            "FileExtension" : {
              "type" : "string",
              "description" : "File extension of the attached ContentDocument. This field is available in API version 31.0 and later.",
              "readOnly" : true
            },
            "ContentUrl" : {
              "type" : "string",
              "description" : "URL for links and Google Docs. This field is set only for links and Google Docs, and is one of the fields that determine the FileType. This field is available in API version 31.0 and later.",
              "readOnly" : true
            },
            "ExternalDataSourceName" : {
              "type" : "string",
              "description" : "Name of the external data source in which the document is stored. This field is set only for external documents that are connected to Salesforce. This field is available in API version 32.0 and later.",
              "readOnly" : true
            },
            "ExternalDataSourceType" : {
              "type" : "string",
              "description" : "Type of external data source in which the document is stored. This field is set only for external documents that are connected to Salesforce. This field is available in APIAPI version 35.0 and later.",
              "readOnly" : true
            },
            "SharingOption" : {
              "type" : "string",
              "description" : "Controls whether or not sharing is frozen for a file. Only administrators and file owners with Collaborator access to the file can modify this field. Default is Allowed, which means that new shares are allowed. When set to Restricted, new shares are prevented without affecting existing shares. This field is available in API versions 35.0 and later.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Attachment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a file that a User has uploaded and attached to a parent object.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "Required. ID of the parent object of the attachment. The following objects are supported as parents of attachments: Account Asset Campaign Case Contact Contract Custom objects EmailMessage EmailTemplate Event Lead Opportunity Product2 Solution Task"
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of the attached file. Maximum size is 255 characters. Label is File Name."
            },
            "IsPrivate" : {
              "type" : "boolean",
              "description" : "Indicates whether this record is viewable only by the owner and administrators (true) or viewable by all otherwise-allowed users (false). During a create or update call, it is possible to mark an Attachment record as private even if you are not the owner. This can result in a situation in which you can no longer access the record that you just inserted or updated. Label is Private. Attachments on tasks or events can't be marked private."
            },
            "ContentType" : {
              "type" : "string",
              "description" : "The content type of the attachment. If the Don't allow HTML uploads as attachments or document records security setting is enabled for your organization, you cannot upload files with the following file extensions: .htm, .html, .htt, .htx, .mhtm, .mhtml, .shtm, .shtml, .acgi, .svg. When you insert a document or attachment through the API, make sure that this field is set to the appropriate MIME type."
            },
            "BodyLength" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Size of the file (in bytes).",
              "readOnly" : true
            },
            "Body" : {
              "type" : "object",
              "description" : "Required. Encoded file data."
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the User who owns the attachment. This field was required previous to release 9.0. Beginning with release 9.0, it can be null on create. The owner of an attachment on a task or event must be the same as the owner of the task or event."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the attachment. Maximum size is 500 characters. This field is available in API version 18.0 and later."
            }
          }
        } ]
      },
      "AuraDefinition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an Aura component definition, such as component markup, a client-side controller, or an event.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AuraDefinitionBundleId" : {
              "type" : "string",
              "description" : "The ID of the bundle containing the definition. A bundle contains a Lightning definition and all its related resources."
            },
            "DefType" : {
              "type" : "string",
              "description" : "The definition type. Valid values are: APPLICATION — Lightning Aura Components app CONTROLLER — client-side controller COMPONENT — component markup EVENT — event definition HELPER — client-side helper INTERFACE — interface definition RENDERER — client-side renderer STYLE — style (CSS) resource PROVIDER — reserved for future use MODEL — deprecated, do not use TESTSUITE — reserved for future use DOCUMENTATION — documentation markup TOKENS — tokens collection DESIGN — design definition SVG — SVG graphic resource MODULE — reserved for future use"
            },
            "Format" : {
              "type" : "string",
              "description" : "The format of the definition. Valid values are: XML for component markup JS for JavaScript code CSS for styles TEMPLATE_CSS reserved for future use SVG for an SVG graphic"
            },
            "Source" : {
              "type" : "string",
              "description" : "The contents of the definition. This is all the markup or code for the definition."
            }
          }
        } ]
      },
      "AuraDefinitionBundle" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a Lightning Aura component definition bundle, such as a component or application bundle. A bundle contains a Lightning Aura component definition and all its related resources.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the record in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. This field is automatically generated but you can supply your own value if you create the record using the API.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "Language" : {
              "type" : "string",
              "description" : "The language of the MasterLabel."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Master label for the Lightning bundle. This internal label doesn’t get translated."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "description" : "The API version for this bundle. Every bundle has an API version specified at creation."
            },
            "Description" : {
              "type" : "string",
              "description" : "The text description of the bundle. Maximum size of 255 characters."
            }
          }
        } ]
      },
      "AuraDefinitionBundleInfo" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "For internal use only.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuraDefinitionBundleId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AuraDefinitionInfo" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "For internal use only.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuraDefinitionBundleInfoId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuraDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DefType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Format" : {
              "type" : "string",
              "readOnly" : true
            },
            "Source" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AuthConfig" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents authentication options for an org with a My Domain configured, an Experience Cloud site, or a custom domain.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The name of the domain created using My Domain or, for an Experience Cloud site, a concatenated string of site name_site prefix.",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "description" : "The language for the organization.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The text that’s used to identify the Visualforce page in Setup.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Url" : {
              "type" : "string",
              "description" : "The login URL of the organization for this AuthConfig object. Each URL has only one associated AuthConfig object.",
              "readOnly" : true
            },
            "AuthOptionsUsernamePassword" : {
              "type" : "boolean",
              "description" : "If true, the login option for a username and password appears on the login page.",
              "readOnly" : true
            },
            "AuthOptionsSaml" : {
              "type" : "boolean",
              "description" : "If true, at least one SAML configuration is selected to show up on the login page. If the organization has only one SAML configuration, this value indicates whether that configuration is selected to show up on the login page. If the organization has multiple SAML configurations, see the child AuthConfigProvider objects for each configuration.",
              "readOnly" : true
            },
            "AuthOptionsAuthProvider" : {
              "type" : "boolean",
              "description" : "If true, at least one Auth. Provider is selected to show up on the login page, and this object has child AuthConfigProvider objects for each provider.",
              "readOnly" : true
            },
            "AuthOptionsCertificate" : {
              "type" : "boolean",
              "description" : "If true, certificate-based login displays on the My Domain login page.",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Whether this configuration is in use.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "The organization type for this object. Org (includes custom domains) Community Site Portal",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AuthConfigProviders" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an authentication provider that’s configured in an organization. This object is a child of the AuthConfig object.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AuthConfigId" : {
              "type" : "string",
              "description" : "The ID for this configuration."
            },
            "AuthProviderId" : {
              "type" : "string",
              "description" : "The ID of the Auth. Provider or SAML configuration."
            }
          }
        } ]
      },
      "AuthProvParamFwdAllowlist" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AuthProviderId" : {
              "type" : "string"
            },
            "Param" : {
              "type" : "string"
            },
            "Description" : {
              "type" : "string"
            }
          }
        } ]
      },
      "AuthProvider" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an authentication provider (auth provider). An auth provider lets users log in to your Salesforce org from an external service provider, such as Facebook, Google, or GitHub.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ProviderType" : {
              "type" : "string",
              "description" : "Required. The third-party authentication provider to use. Valid values include: Apple. Available in API version 48.0 and later. Facebook. Salesforce. Janrain. LinkedIn. Available in API version 32.0 and later. Twitter. Available in API version 32.0 and later. OpenIdConnect. Available in API version 29.0 and later. MicrosoftACS—Microsoft Access Control Service provides authentication for a Microsoft Office 365 service, like SharePoint Online. Available in API version 31.0 and later. GitHub—Provides authentication for a GitHub provider. Used to log in users of your Lightning Platform app to GitHub using OAuth. When logged in to GitHub, your app can make calls to GitHub APIs. The GitHub provider isn’t available as an SSO provider, so users can’t log in to your Salesforce org using their GitHub login credentials. Available in API version 35.0 and later. Custom—A provider configured with a custom authentication provider plug-in. Available in API version 36.0 and later."
            },
            "FriendlyName" : {
              "type" : "string",
              "description" : "Required. A user-friendly name for the authentication provider."
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "Required. Used when referring to the authentication provider from a program."
            },
            "RegistrationHandlerId" : {
              "type" : "string",
              "description" : "An existing Apex class that implements the Auth.RegistrationHandler interface."
            },
            "ExecutionUserId" : {
              "type" : "string",
              "description" : "Required when specifying a registration handler class. The username of the Salesforce admin or system user who runs the Apex handler, which provides the context in which the Apex handler runs. For example, if the Apex handler creates a contact, the creation can be easily traced back to the registration process. In production, use a system user. The user must have the Manage Users permission. Available in API version 27.0 and later."
            },
            "PortalId" : {
              "type" : "string"
            },
            "ConsumerKey" : {
              "type" : "string",
              "description" : "The app’s key that is registered at the third-party (external) authentication provider. In API version 33.0 and later, for Salesforce-managed auth providers, leave the field blank to let Salesforce supply and manage the value."
            },
            "ConsumerSecret" : {
              "type" : "string",
              "description" : "The consumer secret of the authentication provider that is registered at the third-party SSO provider. It’s used by the consumer for identification to Salesforce. In API version 33.0 and later, for Salesforce-managed auth providers, leave the field blank to let Salesforce supply and manage the value. You can create your own consumer secret on create(). However, after you set it, you can’t change the value."
            },
            "ErrorUrl" : {
              "type" : "string",
              "description" : "A custom error URL for the authentication provider to use to report errors."
            },
            "AuthorizeUrl" : {
              "type" : "string",
              "description" : "Required when creating an OpenID Connect authentication provider. The OAuth authorization endpoint URL. Available in API version 29.0 and later. In API version 33.0 and later, for Salesforce-managed auth providers, leave the field blank to let Salesforce supply and manage the value."
            },
            "TokenUrl" : {
              "type" : "string",
              "description" : "The OAuth token endpoint URL of an OpenID Connect authentication provider. Available in API version 29.0 and later. In API version 33.0 and later, for Salesforce-managed auth providers, leave the field blank to let Salesforce supply and manage the value."
            },
            "UserInfoUrl" : {
              "type" : "string",
              "description" : "The OpenID Connect endpoint URL of the OpenID Connect authentication provider. Available in API version 29.0 and later. In API version 33.0 and later, for Salesforce-managed auth providers, leave the field blank to let Salesforce supply and manage the value."
            },
            "DefaultScopes" : {
              "type" : "string",
              "description" : "For OpenID Connect authentication providers, the scopes to send with the authorization request, if not specified when a flow starts. Available in API version 29.0 and later. In API version 33.0 and later, for Salesforce-managed auth providers, leave the field blank to let Salesforce supply and manage the value."
            },
            "IdTokenIssuer" : {
              "type" : "string",
              "description" : "Available when configuring an OpenID Connect authentication provider, the source of the authentication token in https: URI format. If provided, Salesforce validates the returned id_token value. OpenID Connect requires returning an id_token value with the access_token value. Available in API version 30.0 and later."
            },
            "OptionsSendAccessTokenInHeader" : {
              "type" : "boolean",
              "description" : "If enabled (true), the access token is sent to the UserInfoUrl in a header instead of a query string. Available in API version 30.0 and later."
            },
            "OptionsSendClientCredentialsInHeader" : {
              "type" : "boolean",
              "description" : "Required when creating an OpenID Connect authentication provider. If enabled (true), the client credentials are sent in a header to the tokenUrl instead of a query string. The credentials are in the standard OpenID Connect Basic Credentials header format, which is Basic <token>, where <token> is the base64-encoded string \"clientkey:clientsecret\". Available in API version 30.0 and later."
            },
            "OptionsIncludeOrgIdInId" : {
              "type" : "boolean",
              "description" : "Used to differentiate between users with the same user ID from two sources (such as two sandboxes). If enabled (true), Salesforce stores the org ID of the third-party identity in addition to the user ID. After you enable this setting, you can’t disable it. Applies only to a Salesforce-managed auth provider. Available in API version 32.0 and later."
            },
            "OptionsSendSecretInApis" : {
              "type" : "boolean",
              "description" : "Determines whether the encrypted consumer secret appears in API responses. If enabled (default), the secret appears in the response. If disabled (false), responses don’t include the consumer secret. For security, you can disable the setting. However, keep in mind that: By disabling this setting, the consumer secret is excluded from API responses in all API versions. Change sets and other metadata deployments break because both the consumer key and secret are expected. To fix this problem, insert the consumer key manually during deployment. Available in API version 47.0 and later."
            },
            "OptionsIsMuleSoftUS" : {
              "type" : "boolean"
            },
            "OptionsIsMuleSoftEU" : {
              "type" : "boolean"
            },
            "OptionsRequireMfa" : {
              "type" : "boolean"
            },
            "OptionsIsSegmentIntelligence" : {
              "type" : "boolean"
            },
            "OptionsIsPkceEnabled" : {
              "type" : "boolean"
            },
            "OptionsIsWebDataConnector" : {
              "type" : "boolean"
            },
            "OptionsIsBitbucket" : {
              "type" : "boolean"
            },
            "OptionsIsEmiSnapchatAds" : {
              "type" : "boolean"
            },
            "OptionsIsEmi" : {
              "type" : "boolean"
            },
            "OptionsIsEmiTikTokAds" : {
              "type" : "boolean"
            },
            "IconUrl" : {
              "type" : "string",
              "description" : "The path to an icon to use as a button on the login page. Users click the button to log in with the associated authentication provider, such as Twitter or Facebook. Available in API version 32.0 and later."
            },
            "LogoutUrl" : {
              "type" : "string",
              "description" : "The destination for users after they log out if they authenticated using single sign-on. The URL must be fully qualified with an http or https prefix, such as https://acme.my.salesforce.com. Available in API version 33.0 and later."
            },
            "PluginId" : {
              "type" : "string",
              "description" : "An existing Apex class that extends the Auth.AuthProviderPluginClass abstract class. Available in API version 39.0 and later."
            },
            "CustomMetadataTypeRecord" : {
              "type" : "string",
              "description" : "Required when creating a custom authentication provider plug-in. The API name of the custom authentication provider. Available in API version 36.0 and later."
            },
            "EcKey" : {
              "type" : "string",
              "description" : "Required when using Apple as a third-party authentication provider. Available in API version 48.0 and later."
            },
            "AppleTeam" : {
              "type" : "string",
              "description" : "Required when using Apple as a third-party authentication provider. A 10-character team ID, obtained from an Apple developer account. Available in API version 48.0 and later."
            },
            "SsoKickoffUrl" : {
              "type" : "string",
              "description" : "The URL for performing SSO into Salesforce from a third party by using its third-party credentials. This field is read-only. Available in API version 43.0 and later.",
              "readOnly" : true
            },
            "LinkKickoffUrl" : {
              "type" : "string",
              "description" : "The URL for linking existing Salesforce users to a third-party account. This field is read-only. Available in API version 43.0 and later.",
              "readOnly" : true
            },
            "OauthKickoffUrl" : {
              "type" : "string",
              "description" : "The URL for obtaining OAuth access tokens for a third party. This field is read-only. Available in API version 43.0 and later.",
              "readOnly" : true
            }
          }
        } ]
      },
      "AuthSession" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "The AuthSession object represents an individual user session in your organization.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "description" : "The current session’s ID.",
              "readOnly" : true
            },
            "UsersId" : {
              "type" : "string",
              "description" : "The user’s Salesforce user ID.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time this session was created. This field is a standard system field.",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time this session was last updated. A session expires when the current date and time equals LastModifiedDate + NumSecondsValid. This field is a standard system field.",
              "readOnly" : true
            },
            "NumSecondsValid" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of seconds before the session expires, starting from the last update time.",
              "readOnly" : true
            },
            "UserType" : {
              "type" : "string",
              "description" : "The kind of user for this session. Types include Standard, Partner, Customer Portal Manager, High Volume Portal, and CSN Only.",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "description" : "IP address of the end user’s device from which the session started. This address can be an IPv4 or IPv6 address.",
              "readOnly" : true
            },
            "LoginType" : {
              "type" : "string",
              "description" : "The type of login used to access the session. Possible values are: AJAX Toolkit Apex Office Toolkit AppExchange Application AppStore Certificate-based login Chatter Communities Eternal User Third Party SSO Chatter Communities External User Community Customer Service Portal Third-Party SSO Customer Service Portal DataJunction DB Replication Employee Login to Community Excel Integration Help and Training HOTP YubiKey Lightning Login Networks Portal API Only Offline Client Order Center Other Apex API Outlook Integration Partner Portal Third-Party SSO Partner Portal Partner Product Passwordless Login Remote Access 2.0 Remote Access Client Sales Anywhere Salesforce Outlook Integration Salesforce.com Website SAML Chatter Communities External User SSO SAML Customer Service Portal SSO SAML Idp Initiated SSO SAML Partner Portal SSO SAML Sfdc Initiated SSO SAML Site SSO Self-Service Signup Sync SysAdmin Switch Third Party SSO Validate",
              "readOnly" : true
            },
            "SessionType" : {
              "type" : "string",
              "description" : "The type of session. Common ones are UI, Content, API, and Visualforce.",
              "readOnly" : true
            },
            "SessionSecurityLevel" : {
              "type" : "string",
              "description" : "Standard or High, depending upon the authentication method used.",
              "readOnly" : true
            },
            "LogoutUrl" : {
              "type" : "string",
              "description" : "The page or view to display after users log out of an Experience Cloud site, or an org if they authenticated using SAML. This field is available in API version 32.0 and later.",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The 18-character ID for the parent session, if one exists (for example, if the current session is for a canvas app). If the current session doesn’t have a parent, this value is the current session’s own ID.",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "description" : "The 18-character ID for a successful login event. When a session is reused, Salesforce updates the LoginHistoryId with the value from the most recent login. This field is available in API version 33.0 and later.",
              "readOnly" : true
            },
            "LoginGeoId" : {
              "type" : "string",
              "description" : "The 18-character ID for the record of the geographic location of the user for a login event. Due to the nature of geolocation technology, the accuracy of geolocation fields (for example, country, city, postal code) can vary. This field is available in API version 34.0 and later.",
              "readOnly" : true
            },
            "IsCurrent" : {
              "type" : "boolean",
              "description" : "If true, the session is a member of the user’s current session family. This field is available in API version 37.0 and later.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AuthorizationForm" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the specific version and effective dates of a form that is associated with consent, such as a privacy policy or terms and conditions.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the owner of the account associated with this customer."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. The name of the authorization form."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "RevisionNumber" : {
              "type" : "string",
              "description" : "The revision number of the authorization form. For example, \"rev1.21.\""
            },
            "EffectiveFromDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The date when the authorization form takes effect."
            },
            "EffectiveToDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The date when the authorization form is no longer in effect."
            },
            "DefaultAuthFormTextId" : {
              "type" : "string",
              "description" : "Required. The ID of the default authorization form text to use if text isn’t available for a specific language."
            },
            "IsSignatureRequired" : {
              "type" : "boolean",
              "description" : "Indicates whether the authorization form requires a signature."
            }
          }
        } ]
      },
      "AuthorizationFormChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "RevisionNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "EffectiveFromDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "EffectiveToDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "DefaultAuthFormTextId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsSignatureRequired" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AuthorizationFormConsent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the date and way in which a user consented to an authorization form.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "Required. The ID of the owner of the account associated with this customer."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. The name of the authorization form consent."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "ConsentGiverId" : {
              "type" : "string",
              "description" : "Required. The ID of the person consenting to the authorization form."
            },
            "AuthorizationFormTextId" : {
              "type" : "string",
              "description" : "Required. The authorization form text that the Individual consented to."
            },
            "ConsentCapturedSource" : {
              "type" : "string",
              "description" : "Required. The source through which consent was captured. For example, user@example.com, www.example.com."
            },
            "ConsentCapturedSourceType" : {
              "type" : "string",
              "description" : "Required. The source type through which consent was captured. For example, phone, email, or website."
            },
            "ConsentCapturedDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Required. The date and time that consent was given."
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the authorization form."
            },
            "DocumentVersionId" : {
              "type" : "string",
              "description" : "The ID of the document version for which consent is given."
            },
            "RelatedRecordId" : {
              "type" : "string",
              "description" : "The ID of a record showing consent of an authorization form."
            }
          }
        } ]
      },
      "AuthorizationFormConsentChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ConsentGiverId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuthorizationFormTextId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ConsentCapturedSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "ConsentCapturedSourceType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ConsentCapturedDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "DocumentVersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AuthorizationFormConsentHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "AuthorizationFormConsentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AuthorizationFormConsentShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "AuthorizationFormDataUse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the data use consented to in an authorization form.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the owner of the account associated with this customer."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. The name of the authorization form data use."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "AuthorizationFormId" : {
              "type" : "string",
              "description" : "Required. The ID of the associated authorization form record."
            },
            "DataUsePurposeId" : {
              "type" : "string",
              "description" : "Required. Identifies the data use purpose record associated with the authorization form."
            }
          }
        } ]
      },
      "AuthorizationFormDataUseChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuthorizationFormId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataUsePurposeId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AuthorizationFormDataUseHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "AuthorizationFormDataUseId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AuthorizationFormDataUseShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "AuthorizationFormHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "AuthorizationFormId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AuthorizationFormShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "AuthorizationFormText" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an authorization form’s text and language settings.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. The name of the authorization form text."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "AuthorizationFormId" : {
              "type" : "string",
              "description" : "Required. The ID of the associated authorization form record."
            },
            "FullAuthorizationFormUrl" : {
              "type" : "string",
              "description" : "The URL where the full text of the authorization form is located."
            },
            "SummaryAuthFormText" : {
              "type" : "string",
              "description" : "A shortened version of the authorization form that is displayed to the user."
            },
            "Locale" : {
              "type" : "string",
              "description" : "The combined language and locale ISO code that control the language of the authorization form text. Locale and LocaleSelection have the same function. Locale can contain custom values not included in the picklist if added before version 47.0."
            },
            "LocaleSelection" : {
              "type" : "string",
              "description" : "The combined language and locale ISO code that control the language of the authorization form text. Locale and LocaleSelection have the same function."
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "The ID of the ContentDocument that provides the authorization form’s text."
            }
          }
        } ]
      },
      "AuthorizationFormTextChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuthorizationFormId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FullAuthorizationFormUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "SummaryAuthFormText" : {
              "type" : "string",
              "readOnly" : true
            },
            "Locale" : {
              "type" : "string",
              "readOnly" : true
            },
            "LocaleSelection" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentDocumentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AuthorizationFormTextFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "AuthorizationFormTextHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "AuthorizationFormTextId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "BackgroundOperation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a background operation in an asynchronous job queue.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Identifies the background operation.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SubmittedAt" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "When the operation was added to the job queue.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "Status of the background operation. The options are: New Scheduled Canceled Merged Waiting Running Error Complete",
              "readOnly" : true
            },
            "ExecutionGroup" : {
              "type" : "string",
              "description" : "Applies only if the operation is merged with other operations into an execution group to be processed in bulk. Identifies the execution group.",
              "readOnly" : true
            },
            "SequenceGroup" : {
              "type" : "string",
              "description" : "Identifies the sequence group. Applies only if the operation is merged with other operations into an execution group to be processed in bulk. Within an execution group, operations can be placed into a sequence group to be executed in a specific order.",
              "readOnly" : true
            },
            "SequenceNumber" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Order position within the sequence group. Applies only if the operation is merged with other operations into an execution group to be processed in bulk. Within an execution group, operations can be placed into a sequence group to be executed in a specific order.",
              "readOnly" : true
            },
            "GroupLeaderId" : {
              "type" : "string",
              "description" : "Applies only if the operation is merged with other operations into an execution group to be processed in bulk. Identifies the operation that’s selected as the leader of the execution group.",
              "readOnly" : true
            },
            "StartedAt" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "When the operation started running.",
              "readOnly" : true
            },
            "FinishedAt" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "When the operation reached the status of completed or error.",
              "readOnly" : true
            },
            "WorkerUri" : {
              "type" : "string",
              "description" : "URI of the worker that performed the operation. Example for a Salesforce Connect OData operation: services/data/v35.0/xds/upsert",
              "readOnly" : true
            },
            "Timeout" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Maximum time in milliseconds to wait for results after the operation started running.",
              "readOnly" : true
            },
            "ExpiresAt" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "After this time, the operation is removed from the asynchronous job queue. Applies only if the operation has a status of complete, canceled, error, or merged.",
              "readOnly" : true
            },
            "NumFollowers" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Applies only if the operation is merged with other operations into an execution group to be processed in bulk. Number of other operations that are in the execution group.",
              "readOnly" : true
            },
            "ProcessAfter" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The operation is scheduled to be processed after this time.",
              "readOnly" : true
            },
            "ParentKey" : {
              "type" : "string",
              "description" : "Tag that identifies related sets of operations, if any.",
              "readOnly" : true
            },
            "RetryLimit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Maximum number of retries to attempt. Applies only if the operation has an error status.",
              "readOnly" : true
            },
            "RetryCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of attempted retries. Applies only if the operation has an error status.",
              "readOnly" : true
            },
            "RetryBackoff" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Applies only if the operation has an error status. The first retry is attempted immediately. Each subsequent retry is increasingly delayed according to an exponential expression that’s multiplied by the RetryBackoff, in milliseconds. Specifically, the delay time is (2n-1)×R, where n is the RetryCount, and R is the RetryBackoff. The default value for RetryBackoff depends on the type of operation. For example, the RetryBackoff default for write operations on external objects is 1,000 milliseconds. For write operations, retries are attempted immediately, after 3 seconds, after 7 seconds, after 15 seconds, and so on.",
              "readOnly" : true
            },
            "Error" : {
              "type" : "string",
              "description" : "The error message for the operation. Applies only if the operation has an error status.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "BatchApexErrorEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "The documentation has moved to BatchApexErrorEvent in the Platform Events Developer Guide.",
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExceptionType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Message" : {
              "type" : "string",
              "readOnly" : true
            },
            "StackTrace" : {
              "type" : "string",
              "readOnly" : true
            },
            "RequestId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AsyncApexJobId" : {
              "type" : "string",
              "readOnly" : true
            },
            "JobScope" : {
              "type" : "string",
              "readOnly" : true
            },
            "DoesExceedJobScopeMaxLength" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Phase" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "BrandTemplate" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Letterhead for HTML EmailTemplate.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "Name" : {
              "type" : "string",
              "description" : "Label of the template as it appears in the user interface. Limited to 255 characters. Label is Brand Template Name."
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization. Label is Letterhead Unique Name.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the letterhead is available for use (true) or not (false). Label is Active."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the letterhead. Limited to 1000 characters."
            },
            "Value" : {
              "type" : "string",
              "description" : "The contents of the letterhead, in HTML, including any logos."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "BrandingSet" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string"
            },
            "Language" : {
              "type" : "string"
            },
            "MasterLabel" : {
              "type" : "string"
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string"
            }
          }
        } ]
      },
      "BrandingSetProperty" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "BrandingSetId" : {
              "type" : "string"
            },
            "PropertyName" : {
              "type" : "string"
            },
            "PropertyValue" : {
              "type" : "string"
            }
          }
        } ]
      },
      "BriefcaseAssignment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the assignment of a briefcase definition to selected users and user groups.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "Required. ID of the user or group requiring access to the briefcase. Label is User or Group ID."
            },
            "BriefcaseId" : {
              "type" : "string",
              "description" : "Required. ID of the briefcase definition. Label is Briefcase Definition ID."
            }
          }
        } ]
      },
      "BriefcaseAssignmentChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserOrGroupId" : {
              "type" : "string",
              "readOnly" : true
            },
            "BriefcaseId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "BriefcaseDefinition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a briefcase definition. A briefcase makes selected records available for users to view when they’re offline in the Salesforce Field Service mobile app for iOS and Android.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization. Limited to 80 characters. Label is Name.",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "description" : "The language for the briefcase. This field defaults to the user's language unless the org is multi-language enabled. Specifies the language of the labels returned.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The master label for the briefcase. This internal label doesn’t get translated. Limited to 80 characters.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the briefcase is available for use (true) or not (false). Label is Active.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the briefcase definition. Limited to 1024 characters.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "BriefcaseDefinitionChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "BriefcaseRule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a rule that specifies records for a briefcase definition.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "BriefcaseId" : {
              "type" : "string",
              "description" : "Required. ID of the briefcase definition. Label is Briefcase Definition ID.",
              "readOnly" : true
            },
            "TargetEntity" : {
              "type" : "string",
              "description" : "The standard or custom object that the briefcase rule evaluates. Label is Target Object.",
              "readOnly" : true
            },
            "ParentRuleId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FilterLogic" : {
              "type" : "string",
              "description" : "The filter logic for record selection, for example, 1 AND 2 where 1 and 2 correspond to filter 1 and filter 2. Filter logic operators include AND and OR. Limited to 255 characters. Label is Filter Logic.",
              "readOnly" : true
            },
            "QueryScope" : {
              "type" : "string",
              "description" : "Required. A group of records to restrict the scope of this rule.",
              "readOnly" : true
            },
            "RecordLimit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The record limit for the object. The recommended number for record limit is up to 500 records per object for optimal performance. The maximum number is 2000. Label is Limit.",
              "readOnly" : true
            },
            "OrderBy" : {
              "type" : "string",
              "description" : "The field to order the records by, which determines how the records can be sorted. For example, AccountName or CreatedBy. Label is Order By.",
              "readOnly" : true
            },
            "IsAscendingOrder" : {
              "type" : "boolean",
              "description" : "Required. Indicates whether the records should be sorted in ascending order. Label is Ascending.",
              "readOnly" : true
            },
            "RelationshipField" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelationshipType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OptionsIsRelatedFilesRule" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "BriefcaseRuleFilter" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a filter criteria for a briefcase rule.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "BriefcaseRuleId" : {
              "type" : "string",
              "description" : "Required. ID of the briefcase rule.",
              "readOnly" : true
            },
            "TargetEntityField" : {
              "type" : "string",
              "description" : "Required. The field to filter by. Compound fields and encrypted fields aren’t supported. Label is Field.",
              "readOnly" : true
            },
            "FilterOperator" : {
              "type" : "string",
              "description" : "Required. The comparison operator for this rule filter.",
              "readOnly" : true
            },
            "FilterValue" : {
              "type" : "string",
              "description" : "The value for the field and criteria. For example, true or false for a boolean field whose criteria or filter operator is Equals. Capitalization matters with date filter operators. Be sure to specify date literals in uppercase. Some valid date literals include TODAY, YESTERDAY and TOMORROW.",
              "readOnly" : true
            },
            "FilterSeqNumber" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Required. The filter number. When you apply multiple filters, the filters are numbered sequentially, 1, 2, 3, and so on.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "BrowserPolicyViolation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UntrustedUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "ViolationContext" : {
              "type" : "string",
              "readOnly" : true
            },
            "ViolationType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "BulkApiResultEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Query" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "BulkApiResultEventStore" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Query" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "BusinessBrand" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "BusinessBrandChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "BusinessBrandShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "BusinessHours" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Specifies the business hours of your support organization. Escalation rules are run only during these hours.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the business hours."
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the business hours is active (true) or not active (false)."
            },
            "IsDefault" : {
              "type" : "boolean",
              "description" : "Indicates whether the business hours are set as the default business hours (true) or not (false)."
            },
            "SundayStartTime" : {
              "type" : "object",
              "description" : "Time that business opens."
            },
            "SundayEndTime" : {
              "type" : "object",
              "description" : "Time that business closes."
            },
            "MondayStartTime" : {
              "type" : "object",
              "description" : "Time that business opens."
            },
            "MondayEndTime" : {
              "type" : "object",
              "description" : "Time that business closes."
            },
            "TuesdayStartTime" : {
              "type" : "object",
              "description" : "Time that business opens."
            },
            "TuesdayEndTime" : {
              "type" : "object",
              "description" : "Time that business closes."
            },
            "WednesdayStartTime" : {
              "type" : "object",
              "description" : "Time that business opens."
            },
            "WednesdayEndTime" : {
              "type" : "object",
              "description" : "Time that business closes."
            },
            "ThursdayStartTime" : {
              "type" : "object",
              "description" : "Time that business opens."
            },
            "ThursdayEndTime" : {
              "type" : "object",
              "description" : "Time that business closes."
            },
            "FridayStartTime" : {
              "type" : "object",
              "description" : "Time that business opens."
            },
            "FridayEndTime" : {
              "type" : "object",
              "description" : "Time that business closes."
            },
            "SaturdayStartTime" : {
              "type" : "object",
              "description" : "Time that business opens."
            },
            "SaturdayEndTime" : {
              "type" : "object",
              "description" : "Time that business closes."
            },
            "TimeZoneSidKey" : {
              "type" : "string",
              "description" : "The time zone of the business hours."
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date when the business hours were last viewed.",
              "readOnly" : true
            }
          }
        } ]
      },
      "BusinessProcess" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a business process.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of this business process. Limit: 80 characters."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of this business process. Limit: 255 characters."
            },
            "TableEnumOrId" : {
              "type" : "string",
              "description" : "Required. One of the following values: Case, Opportunity, or Solution. Label is Entity Enumeration Or ID."
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether this business process can be presented to users in the Salesforce user interface (true) or not (false) when creating a new record type or changing the business process of an existing record type."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "Calendar" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a calendar. This can be a default user calendar, public calendar, resource calendar, or holiday calendar.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "A user provided name that identifies the calendar. It is text-indexed for searchability. Note that this is not an enumerated field; it can be any string to a maximum length of 80 characters.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "The ID of the user that owns that calendar record. If Type=User, there’s a UserID associated (foreign key reference to the user). Otherwise, the user field is null.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "The type of the calendar. Possible values are: Holiday (Holiday Calendar) Public (Public Calendar) Resource (Resource Calendar) User (User Calendar)",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "This field indicates whether a user can save events to the calendar.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CalendarView" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "These calendars can be created and assigned to users other than the creator. Available calendars include object, shared, public, resource, and user list calendars. Object calendars represent a calendar based on a Salesforce object, either standard or custom.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "Represents the user, user list, public, or resource calendar from where event data is populated."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "A user-provided name that identifies the calendar. This isn’t an enumerated field; it can be any string to a maximum length of 80 characters."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CalendarModelId" : {
              "type" : "string"
            },
            "IsDisplayed" : {
              "type" : "boolean",
              "description" : "Defines whether users can see a calendar’s records in their calendar view in the user interface. When true, records are visible in the user’s calendar view. When false, records are hidden from the user’s calendar view. The default is true."
            },
            "Color" : {
              "type" : "string",
              "description" : "Represents the color used in the background for records displayed in a user’s calendar view within the user interface."
            },
            "FillPattern" : {
              "type" : "string",
              "description" : "Represents the pattern displayed as the background for records displayed in a user’s calendar view within the user interface. Valid values include: verticalStripes ascDiagonalStripes descDiagonalStripes"
            },
            "ListViewFilterId" : {
              "type" : "string",
              "description" : "References the ListView used to filter records represented by the CalendarView. ListView must have the same sObjectType. If no ListViewFilterId is defined, the calendar displays only records with the same owner as the CalendarView."
            },
            "DateHandlingType" : {
              "type" : "string",
              "description" : "Determined by the data type of the StartField. Valid values include:",
              "readOnly" : true
            },
            "StartField" : {
              "type" : "string",
              "description" : "Represents the SobjectType field used as the start time for records displayed in a user’s calendar view within the user interface. Must be a date or dateTime field type."
            },
            "EndField" : {
              "type" : "string",
              "description" : "An optional field that represents the sObjectType field used as the end time for records displayed in a user’s calendar view within the user interface. Must be a date or dateTime field that matches the type in StartField."
            },
            "DisplayField" : {
              "type" : "string",
              "description" : "Represents the SobjectType field used as the subject for records displayed in a user’s calendar view within the user interface."
            },
            "SobjectType" : {
              "type" : "string",
              "description" : "The type of standard or custom Salesforce object that is used to create records for the CalendarView. Use the API name of the desired SobjectType."
            },
            "PublisherId" : {
              "type" : "string",
              "description" : "Represents the owner of the CalendarView."
            }
          }
        } ]
      },
      "CalendarViewChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CalendarModelId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDisplayed" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Color" : {
              "type" : "string",
              "readOnly" : true
            },
            "FillPattern" : {
              "type" : "string",
              "readOnly" : true
            },
            "ListViewFilterId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DateHandlingType" : {
              "type" : "string",
              "readOnly" : true
            },
            "StartField" : {
              "type" : "string",
              "readOnly" : true
            },
            "EndField" : {
              "type" : "string",
              "readOnly" : true
            },
            "DisplayField" : {
              "type" : "string",
              "readOnly" : true
            },
            "SobjectType" : {
              "type" : "string",
              "readOnly" : true
            },
            "PublisherId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CalendarViewShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "CallCenter" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a call center, which is a logical representation of a single computer-telephony integration (CTI) system instance in an organization.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "description" : "System field that uniquely identifies this call center. Label is Call Center ID. This ID is created automatically when the call center is created.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the call center. Limit is 80 characters."
            },
            "InternalName" : {
              "type" : "string",
              "description" : "The internal name of the call center. Limit is 80 characters."
            },
            "Version" : {
              "type" : "number",
              "description" : "The version of the CTI Toolkit used to create the call center (for versions 2.0 and later). This field is available in API version 18.0 and later."
            },
            "AdapterUrl" : {
              "type" : "string",
              "description" : "An optional field that specifies the location of where the CTI adapter is hosted. For example, http://localhost:11000. This field is available in API version 23.0 or later."
            },
            "CustomSettings" : {
              "type" : "string",
              "description" : "Specifies settings in the call center definition file, such as whether the call center uses the Open CTI, and SoftPhone properties, such as height in pixels. This field is available for Open CTI and in API version 25.0 or later."
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "CallCoachingMediaProvider" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the media provider for call recordings.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ProviderName" : {
              "type" : "string",
              "description" : "The name of the media provider."
            },
            "ProviderDescription" : {
              "type" : "string",
              "description" : "The description of the media provider."
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Whether the connection with the provider is active or not.",
              "readOnly" : true
            }
          }
        } ]
      },
      "Campaign" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents and tracks a marketing campaign, such as a direct mail promotion, webinar, or trade show.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of the campaign. Limit: is 80 characters.",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the parent Campaign record, if any.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "Type of campaign, for example, Direct Mail or Referral Program. Limit: 40 characters.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "Status of the campaign, for example, Planned, In Progress. Limit: 40 characters.",
              "readOnly" : true
            },
            "StartDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Starting date for the campaign.",
              "readOnly" : true
            },
            "EndDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Ending date for the campaign. Responses received after this date are still counted.",
              "readOnly" : true
            },
            "ExpectedRevenue" : {
              "type" : "number",
              "description" : "Amount of money you expect to generate from the campaign.",
              "readOnly" : true
            },
            "BudgetedCost" : {
              "type" : "number",
              "description" : "Amount of money budgeted for the campaign.",
              "readOnly" : true
            },
            "ActualCost" : {
              "type" : "number",
              "description" : "Amount of money spent to run the campaign.",
              "readOnly" : true
            },
            "ExpectedResponse" : {
              "type" : "number",
              "description" : "Percentage of responses you expect to receive for the campaign.",
              "readOnly" : true
            },
            "NumberSent" : {
              "type" : "number",
              "description" : "Number of individuals targeted by the campaign. For example, the number of emails sent. Label is Num Sent.",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether this campaign is active (true) or not (false). Default value is false. Label is Active.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the campaign. Limit: 32 KB. Only the first 255 characters display in reports.",
              "readOnly" : true
            },
            "NumberOfLeads" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of leads associated with the campaign. Label is Leads in Campaign.",
              "readOnly" : true
            },
            "NumberOfConvertedLeads" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of leads that were converted to an account and contact due to the marketing efforts in the campaign. Label is Converted Leads.",
              "readOnly" : true
            },
            "NumberOfContacts" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of contacts associated with the campaign. Label is Total Contacts.",
              "readOnly" : true
            },
            "NumberOfResponses" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of contacts and unconverted leads with a Member Status equivalent to “Responded” for the campaign. Label is Responses in Campaign.",
              "readOnly" : true
            },
            "NumberOfOpportunities" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of opportunities associated with the campaign. Label is Opportunities in Campaign.",
              "readOnly" : true
            },
            "NumberOfWonOpportunities" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of closed or won opportunities associated with the campaign. Label is Won Opportunities in Campaign.",
              "readOnly" : true
            },
            "AmountAllOpportunities" : {
              "type" : "number",
              "description" : "Amount of money in all opportunities associated with the campaign, including closed/won opportunities. Label is Value Opportunities in Campaign.",
              "readOnly" : true
            },
            "AmountWonOpportunities" : {
              "type" : "number",
              "description" : "Amount of money in closed or won opportunities associated with the campaign. Label is Value Won Opportunities in Campaign.",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the user who owns this campaign. Default value is the user logging in to the API to perform the create.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastActivityDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Value is one of the following, whichever is the most recent: Due date of the most recent event logged against the record. Due date of the most recently closed task associated with the record.",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            },
            "CampaignMemberRecordTypeId" : {
              "type" : "string",
              "description" : "The record type ID for CampaignMember records associated with the campaign.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CampaignChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "StartDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "EndDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "ExpectedRevenue" : {
              "type" : "number",
              "readOnly" : true
            },
            "BudgetedCost" : {
              "type" : "number",
              "readOnly" : true
            },
            "ActualCost" : {
              "type" : "number",
              "readOnly" : true
            },
            "ExpectedResponse" : {
              "type" : "number",
              "readOnly" : true
            },
            "NumberSent" : {
              "type" : "number",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "NumberOfLeads" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "NumberOfConvertedLeads" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "NumberOfContacts" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "NumberOfResponses" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "NumberOfOpportunities" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "NumberOfWonOpportunities" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "AmountAllOpportunities" : {
              "type" : "number",
              "readOnly" : true
            },
            "AmountWonOpportunities" : {
              "type" : "number",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CampaignMemberRecordTypeId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CampaignFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CampaignHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CampaignId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CampaignMember" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the association between a campaign and either a lead or a contact.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CampaignId" : {
              "type" : "string",
              "description" : "Required. ID of the Campaign to which this Lead or Contact is associated."
            },
            "LeadId" : {
              "type" : "string",
              "description" : "Required. ID of the Lead who is associated with a Campaign."
            },
            "ContactId" : {
              "type" : "string",
              "description" : "Required. ID of the Contact who is associated with a Campaign."
            },
            "Status" : {
              "type" : "string",
              "description" : "Controls the HasResponded flag on this object. You can't directly set the HasResponded flag, as it is read-only. You can set it indirectly by setting this field in a create or update call. Each predefined value implies a HasResponded flag value. Each time you update this field, you implicitly update the HasResponded flag. In the Salesforce user interface, Marketing users can define valid status values for the Status picklist. They can choose one status as the default status. For each Status field value, they can also select which values to count as “Responded,” meaning that the HasResponded flag is set to true for those values. 40 character limit.When creating or updating campaign members, use the text value for Status instead of the ID from the CampaignMemberStatus object."
            },
            "HasResponded" : {
              "type" : "boolean",
              "description" : "Indicates whether the campaign member has responded to the campaign (true) or not (false). Label is Responded.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FirstRespondedDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Indicates the date on which the campaign member was first given a responded status.",
              "readOnly" : true
            },
            "Salutation" : {
              "type" : "string",
              "description" : "Salutation for the lead or contact.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "First and last name of the contact or lead with which the campaign member is associated.",
              "readOnly" : true
            },
            "FirstName" : {
              "type" : "string",
              "description" : "The first name of the contact or lead.",
              "readOnly" : true
            },
            "LastName" : {
              "type" : "string",
              "description" : "The last name of the contact or lead. Limit is 80 characters.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "Title for the lead or contact.",
              "readOnly" : true
            },
            "Street" : {
              "type" : "string",
              "description" : "The street for the address of the lead or contact.",
              "readOnly" : true
            },
            "City" : {
              "type" : "string",
              "description" : "The city for the address of the lead or contact.",
              "readOnly" : true
            },
            "State" : {
              "type" : "string",
              "description" : "The state for the address of the lead or contact. Limit is 80 characters.",
              "readOnly" : true
            },
            "PostalCode" : {
              "type" : "string",
              "description" : "The postal code of the lead or contact.",
              "readOnly" : true
            },
            "Country" : {
              "type" : "string",
              "description" : "The country for the address of the lead or contact.",
              "readOnly" : true
            },
            "Email" : {
              "type" : "string",
              "description" : "Email address for the contact or lead.",
              "readOnly" : true
            },
            "Phone" : {
              "type" : "string",
              "description" : "The phone number of the lead or contact.",
              "readOnly" : true
            },
            "Fax" : {
              "type" : "string",
              "description" : "Fax number for the contact or lead.",
              "readOnly" : true
            },
            "MobilePhone" : {
              "type" : "string",
              "description" : "The mobile phone number of the lead or contact.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "The description of the associated lead or contact.",
              "readOnly" : true
            },
            "DoNotCall" : {
              "type" : "boolean",
              "description" : "Indicates that the contact does not wish to be called.",
              "readOnly" : true
            },
            "HasOptedOutOfEmail" : {
              "type" : "boolean",
              "description" : "Indicates whether the contact or lead would prefer not to receive email from Salesforce (true) or not (false).",
              "readOnly" : true
            },
            "HasOptedOutOfFax" : {
              "type" : "boolean",
              "description" : "Indicates that the contact or lead does not wish to receive faxes.",
              "readOnly" : true
            },
            "LeadSource" : {
              "type" : "string",
              "description" : "The source from which the lead was obtained.",
              "readOnly" : true
            },
            "CompanyOrAccount" : {
              "type" : "string",
              "description" : "The company or account of the lead or contact.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "Indicates whether the campaign member is a lead or a contact.",
              "readOnly" : true
            },
            "LeadOrContactId" : {
              "type" : "string",
              "description" : "The ID of the associated lead or contact.",
              "readOnly" : true
            },
            "LeadOrContactOwnerId" : {
              "type" : "string",
              "description" : "The ID of the owner of the associated lead or contact.",
              "readOnly" : true
            }
          }
        } ]
      },
      "CampaignMemberChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "CampaignId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LeadId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "HasResponded" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "FirstRespondedDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CampaignMemberStatus" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "One or more member status values defined for a campaign.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "CampaignId" : {
              "type" : "string",
              "description" : "ID of the campaign associated with this member status.",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "description" : "Label for the status in the picklist. Limited to 765 characters.",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Unique number order where this campaign member status appears in the picklist.",
              "readOnly" : true
            },
            "IsDefault" : {
              "type" : "boolean",
              "description" : "Indicates whether this status is the default status (true) or not (false). Beginning with API version 39.0, there must be a default CampaignMemberStatus defined for every campaign.",
              "readOnly" : true
            },
            "HasResponded" : {
              "type" : "boolean",
              "description" : "Indicates whether this status is equivalent to “Responded” (true) or not (false). Beginning with API version 39.0, at least one CampaignMemberStatus on each campaign must have a hasResponded value of true.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CampaignMemberStatusChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "CampaignId" : {
              "type" : "string",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "IsDefault" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "HasResponded" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CampaignShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a sharing entry on a Campaign.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CampaignId" : {
              "type" : "string",
              "description" : "ID of the Campaign associated with this sharing entry. This field can't be updated.",
              "readOnly" : true
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "ID of the User or Group that has been given access to the Campaign. This field can't be updated.",
              "readOnly" : true
            },
            "CampaignAccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the User or Group has to the Campaign. The possible values are: Read Edit All (This value is not valid for creating or updating records.) This field must be set to an access level that is higher than the organization’s default access level for Campaign.",
              "readOnly" : true
            },
            "RowCause" : {
              "type" : "string",
              "description" : "Reason that this sharing entry exists. You can only write to this field when its value is either omitted or set to Manual (default). You can create a value for this field in API versions 32.0 and later with the correct organization-wide sharing settings.",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Case" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a case, which is a customer issue or problem.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "MasterRecordId" : {
              "type" : "string",
              "description" : "If this object was deleted as the result of a merge, this field contains the ID of the record that was kept. If this object was deleted for any other reason, or has not been deleted, the value is null.",
              "readOnly" : true
            },
            "CaseNumber" : {
              "type" : "string",
              "description" : "Assigned automatically when each case is inserted. It can't be set directly, and it can't be modified after the case is created.",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "description" : "ID of the associated contact."
            },
            "AccountId" : {
              "type" : "string",
              "description" : "ID of the account associated with this case."
            },
            "AssetId" : {
              "type" : "string"
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The ID of the parent case in the hierarchy. The label is Parent Case."
            },
            "SuppliedName" : {
              "type" : "string",
              "description" : "The name that was entered when the case was created. Label is Name."
            },
            "SuppliedEmail" : {
              "type" : "string",
              "description" : "The email address that was entered when the case was created. Label is Email. If your organization has an active auto-response rule, SuppliedEmail is required when creating a case via the API. Auto-response rules use the email in the contact specified by ContactId. If no email address is in the contact record, the email specified here is used."
            },
            "SuppliedPhone" : {
              "type" : "string",
              "description" : "The phone number that was entered when the case was created. Label is Phone."
            },
            "SuppliedCompany" : {
              "type" : "string",
              "description" : "The company name that was entered when the case was created. Label is Company."
            },
            "Type" : {
              "type" : "string",
              "description" : "The type of case, such as Feature Request or Question."
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the case, such as New, Closed, or Escalated. This field directly controls the IsClosed flag. Each predefined Status value implies an IsClosed flag value. For more information, see CaseStatus."
            },
            "Reason" : {
              "type" : "string",
              "description" : "The reason why the case was created, such as Instructions not clear, or User didn’t attend training."
            },
            "Origin" : {
              "type" : "string",
              "description" : "The source of the case, such as Email, Phone, or Web. Label is Case Origin."
            },
            "Subject" : {
              "type" : "string",
              "description" : "The subject of the case. Limit: 255 characters."
            },
            "Priority" : {
              "type" : "string",
              "description" : "The importance or urgency of the case, such as High, Medium, or Low."
            },
            "Description" : {
              "type" : "string",
              "description" : "A text description of the case. Limit: 32 KB."
            },
            "IsClosed" : {
              "type" : "boolean",
              "description" : "Indicates whether the case is closed (true) or open (false). This field is controlled by the Status field; it can't be set directly. Label is Closed.",
              "readOnly" : true
            },
            "ClosedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the case was closed.",
              "readOnly" : true
            },
            "IsEscalated" : {
              "type" : "boolean",
              "description" : "Indicates whether the case has been escalated (true) or not. A case's escalated state does not affect how you can use a case, or whether you can query, delete, or update it. You can set this flag via the API. Label is Escalated."
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the contact who owns the case."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ContactPhone" : {
              "type" : "string",
              "description" : "Telephone number for the contact. Label is Contact Phone. This field is available in API version 38.0 and later.",
              "readOnly" : true
            },
            "ContactMobile" : {
              "type" : "string",
              "description" : "Mobile telephone number for the contact. Label is Contact Mobile. This field is available in API version 38.0 and later.",
              "readOnly" : true
            },
            "ContactEmail" : {
              "type" : "string",
              "description" : "Email address for the contact. The Case.ContactEmail field displays the Email field on the contact that is referenced by Case.ContactId. Label is Contact Email. This field is available in API version 38.0 and later.",
              "readOnly" : true
            },
            "ContactFax" : {
              "type" : "string",
              "description" : "Fax number for the contact. Label is Contact Fax. This field is available in API version 38.0 and later.",
              "readOnly" : true
            },
            "Comments" : {
              "type" : "string",
              "description" : "Used to insert a new CaseComment. Email textarea has a length of 4000 chars."
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            },
            "EngineeringReqNumber__c" : {
              "type" : "string"
            },
            "SLAViolation__c" : {
              "type" : "string"
            },
            "Product__c" : {
              "type" : "string"
            },
            "PotentialLiability__c" : {
              "type" : "string"
            },
            "Neuron_Case_ID__c" : {
              "type" : "string"
            },
            "Neuron_Case_Status__c" : {
              "type" : "string"
            }
          }
        } ]
      },
      "CaseChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "CaseNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AssetId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "SuppliedName" : {
              "type" : "string",
              "readOnly" : true
            },
            "SuppliedEmail" : {
              "type" : "string",
              "readOnly" : true
            },
            "SuppliedPhone" : {
              "type" : "string",
              "readOnly" : true
            },
            "SuppliedCompany" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "Reason" : {
              "type" : "string",
              "readOnly" : true
            },
            "Origin" : {
              "type" : "string",
              "readOnly" : true
            },
            "Subject" : {
              "type" : "string",
              "readOnly" : true
            },
            "Priority" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsClosed" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ClosedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsEscalated" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EngineeringReqNumber__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "SLAViolation__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "Product__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "PotentialLiability__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "Neuron_Case_ID__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "Neuron_Case_Status__c" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CaseComment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a comment that provides additional information about the associated Case.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "Required. ID of the parent Case of the CaseComment."
            },
            "IsPublished" : {
              "type" : "boolean",
              "description" : "Indicates whether the CaseComment is visible to customers in the Self-Service portal (true) or not (false). Label is Published. This is the only CaseComment field that can be updated via the API."
            },
            "CommentBody" : {
              "type" : "string",
              "description" : "Text of the CaseComment. The maximum size of the comment body is 4,000 bytes. Label is Body."
            },
            "CommentBodyRichtext" : {
              "type" : "string"
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            }
          }
        } ]
      },
      "CaseContactRole" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the role that a given Contact plays on a Case.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CasesId" : {
              "type" : "string",
              "description" : "ID of the cases associated with this contact."
            },
            "ContactId" : {
              "type" : "string",
              "description" : "Required. ID of the contact."
            },
            "Role" : {
              "type" : "string",
              "description" : "Name of the role played by the contact on this case, such as Technical Contact, Business Contact, Decision Maker, and so on. Must be unique—there can't be multiple records in which the CaseId, ContactId , and Role values are identical. Different contacts can play the same role on the same case. A contact can play different roles on the same case."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            }
          }
        } ]
      },
      "CaseFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CaseHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents historical information about changes that have been made to the associated Case.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "CaseId" : {
              "type" : "string",
              "description" : "ID of the Case associated with this record.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "description" : "Name of the case field that was modified, or a special value to indicate some other modification to the case. The possible values, in addition to the case field names, are: ownerAssignment—The owner of the case was changed. ownerAccepted—A user took ownership of a case from a queue. ownerEscalated—The owner of the case was changed due to case escalation. external—A user made the case visible to customers in the Customer Self-Service Portal.",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "description" : "Previous value of the modified case field. Maximum of 255 characters.",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "description" : "New value of the modified case field. Maximum of 255 characters.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CaseHistory2" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CaseId" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousUpdate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CaseHistory2ChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "CaseId" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousUpdate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CaseShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a sharing entry on a Case.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CaseId" : {
              "type" : "string",
              "description" : "ID of the Case associated with this sharing entry. This field can't be updated."
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "ID of the User or Group that has been given access to the Case. This field can't be updated."
            },
            "CaseAccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the User or Group has to the Case. The possible values are: Read Edit All This value is not valid for creating or deleting records. This field must be set to an access level that is higher than the organization’s default access level for cases."
            },
            "RowCause" : {
              "type" : "string",
              "description" : "Reason that this sharing entry exists. You can only write to this field when its value is either omitted or set to Manual (default). You can create a value for this field in API versions 32.0 and later with the correct organization-wide sharing settings."
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            }
          }
        } ]
      },
      "CaseSolution" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the association between a Case and a Solution.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CaseId" : {
              "type" : "string",
              "description" : "Required. ID of the Case associated with the Solution."
            },
            "SolutionId" : {
              "type" : "string",
              "description" : "Required. ID of the Solution associated with the case."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            }
          }
        } ]
      },
      "CaseStatus" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the status of a Case, such as New, On Hold, or In Process.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Master label for this case status value. This display value is the internal label that does not get translated.",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "description" : "Uniquely identifies a picklist value so it can be retrieved without using an id or master label.",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number used to sort this value in the case status picklist. These numbers are not guaranteed to be sequential, as some previous case status values might have been deleted.",
              "readOnly" : true
            },
            "IsDefault" : {
              "type" : "boolean",
              "description" : "Indicates whether this is the default case status value (true) or not (false) in the picklist.",
              "readOnly" : true
            },
            "IsClosed" : {
              "type" : "boolean",
              "description" : "Indicates whether this case status value represents a closed Case (true) or not (false). Multiple case status values can represent a closed Case.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CaseTeamMember" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a case team member, who works with a team of other users to help resolve a case.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The ID of the case with which the case team member is associated."
            },
            "MemberId" : {
              "type" : "string",
              "description" : "The ID of the user or contact who is a member on a case team."
            },
            "TeamTemplateMemberId" : {
              "type" : "string",
              "description" : "The ID of the team member included in a predefined case team.",
              "readOnly" : true
            },
            "TeamRoleId" : {
              "type" : "string",
              "description" : "The ID of the case team role with which the case team member is associated."
            },
            "TeamTemplateId" : {
              "type" : "string",
              "description" : "The ID of the predefined team with which the case team member is associated.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "CaseTeamRole" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a case team role. Every case team member has a role on a case, such as “Customer Contact” or “Case Manager.”",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the case team role."
            },
            "AccessLevel" : {
              "type" : "string",
              "description" : "A value that represents the type of access granted to the target Group for cases. The possible values are: None Read Edit"
            },
            "PreferencesVisibleInCSP" : {
              "type" : "boolean",
              "description" : "Indicates whether or not the case team role is visible to Customer Portal users."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "CaseTeamTemplate" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a predefined case team, which is a group of users that helps resolve a case.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the predefined case team."
            },
            "Description" : {
              "type" : "string",
              "description" : "A text description of the predefined case team."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "CaseTeamTemplateMember" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a member on a predefined case team, which is a group of users that helps resolve cases.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "TeamTemplateId" : {
              "type" : "string",
              "description" : "The ID of the predefined case team's template."
            },
            "MemberId" : {
              "type" : "string",
              "description" : "The ID of the user or contact who is a team member on a predefined case team."
            },
            "TeamRoleId" : {
              "type" : "string",
              "description" : "The ID of the predefined case team member's case team role."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "CaseTeamTemplateRecord" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "The CaseTeamTemplateRecord object is a linking object between the Case and CaseTeamTemplate objects. To assign a predefined case team to a case (customer inquiry), create a CaseTeamTemplateRecord record and point the ParentId to the case and the TeamTemplateId to the predefined case team.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The ID of the case with which the case team template record is associated."
            },
            "TeamTemplateId" : {
              "type" : "string",
              "description" : "The ID of the predefined case team with which the case team template record is associated."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "CategoryData" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a logical grouping of Solution records.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CategoryNodeId" : {
              "type" : "string",
              "description" : "ID of the CategoryNode associated with the solution."
            },
            "RelatedSobjectId" : {
              "type" : "string",
              "description" : "ID of the solution related to the category."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "CategoryNode" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a tree of Solution categories.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the parent of this node, if any."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Label for the category node."
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the sort order of child CategoryNode objects."
            },
            "SortStyle" : {
              "type" : "string",
              "description" : "Indicates whether the sort order is alphabetical or custom."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "ChatRetirementRdyMetrics" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MetricsDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ActiveChatDeployments" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EmbeddedServiceDeployments" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ActiveVfDeployments" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ActiveChatButtons" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ActiveChatInvitations" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ActiveSbrButtons" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ActiveQbrButtons" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Queues" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Skills" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "SkillBasedRoutingRules" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CustomLabels" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CustomWebComponents" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ChatBots" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "IpBlockingRules" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ChatApexClasses" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ChatApexClassList" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChatObjectsInApexList" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChatFlowCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ChatFlowList" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChatObjectsInFlowList" : {
              "type" : "string",
              "readOnly" : true
            },
            "PrimaryChatReportTypes" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "PrimaryChatReportTypeList" : {
              "type" : "string",
              "readOnly" : true
            },
            "PrimaryChatReportList" : {
              "type" : "string",
              "readOnly" : true
            },
            "SecondaryChatReportTypes" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "SecondaryChatReportTypeList" : {
              "type" : "string",
              "readOnly" : true
            },
            "SecondaryChatReportList" : {
              "type" : "string",
              "readOnly" : true
            },
            "UniqueChatObjectsInReport" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ChatterActivity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "ChatterActivity represents the number of posts and comments made by a user and the number of comments and likes on posts and comments received by the same user.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the object type to which the ChatterActivity is related. In API version 52.0, the ParentId must be a UserId or SelfServiceUser ID.",
              "readOnly" : true
            },
            "PostCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of FeedItems made by the ParentId.",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of FeedComments made by the ParentId.",
              "readOnly" : true
            },
            "CommentReceivedCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of FeedComments received by the ParentId.",
              "readOnly" : true
            },
            "LikeReceivedCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of FeedLikes received by the ParentId.",
              "readOnly" : true
            },
            "InfluenceRawRank" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number indicating the ParentId’s Chatter influence rank, which is calculated based on the ParentId’s ChatterActivity statistics, relative to the other users in the organization. This field is available in API version 26.0 and later.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ChatterExtension" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a Rich Publisher App that’s integrated with the Chatter publisher.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The name of the developer who is responsible for the app."
            },
            "Language" : {
              "type" : "string",
              "description" : "The language used for this instance of the ChatterExtension. This field requires a value."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The master label for the ChatterExtension object. This field requires a value."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The prefix to use for the extension’s namespace.",
              "readOnly" : true
            },
            "IsProtected" : {
              "type" : "boolean",
              "description" : "An auto-generated value. It currently has no impact."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExtensionName" : {
              "type" : "string",
              "description" : "The name of your extension. This field requires a value."
            },
            "Type" : {
              "type" : "string",
              "description" : "Describes the type of the extension. Currently, the only value supported is Lightning. Included to allow for other possible types in the future."
            },
            "IconId" : {
              "type" : "string",
              "description" : "The icon to show in the Chatter publisher. Use an existing file asset ID from your org. This field requires a value."
            },
            "Description" : {
              "type" : "string",
              "description" : "The description of your custom Rich Publisher App. This field requires a value."
            },
            "CompositionComponentEnumOrId" : {
              "type" : "string",
              "description" : "The ID of the composition component for the Rich Publisher App. This field requires a value."
            },
            "RenderComponentEnumOrId" : {
              "type" : "string",
              "description" : "The rendering component of the Rich Publisher App that you provide. It’s comprised of the lightning:availableForChatterExtensionRenderer interface. This field requires a value."
            },
            "HoverText" : {
              "type" : "string",
              "description" : "The text to show when a user mouses over your extension’s icon. Mouse-over text is required for Lightning type extensions."
            },
            "HeaderText" : {
              "type" : "string",
              "description" : "The text to show in the header of your app composer. Header text is required for Lightning type extensions."
            }
          }
        } ]
      },
      "ChatterExtensionConfig" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Configuration for the Chatter extension for Experience Cloud sites.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ChatterExtensionId" : {
              "type" : "string",
              "description" : "The ID of the ChatterExtension."
            },
            "CanCreate" : {
              "type" : "boolean",
              "description" : "Determines whether the ChatterExtension can create an instance that appears by rendering."
            },
            "CanRead" : {
              "type" : "boolean",
              "description" : "Determines whether the ChatterExtension can be viewed."
            },
            "Position" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The position of the ChatterExtension icon in the Chatter publisher."
            }
          }
        } ]
      },
      "ClientBrowser" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a cookie added to the browser upon login, and also includes information about the browser application where the cookie was inserted.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UsersId" : {
              "type" : "string",
              "description" : "The ID of the user associated with this item.",
              "readOnly" : true
            },
            "FullUserAgent" : {
              "type" : "string",
              "description" : "Detailed information about the client (browser). For example, Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.1) Gecko/2008070208 Firefox/3.0.1",
              "readOnly" : true
            },
            "ProxyInfo" : {
              "type" : "string",
              "description" : "The browser’s current proxy information.",
              "readOnly" : true
            },
            "LastUpdate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Represents the last time the cookie was changed.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CollaborationGroup" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a Chatter group.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the group. Group names must be unique across public and private groups. Unlisted groups don’t require unique names."
            },
            "MemberCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of members in the group.",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the owner of the group. Only the current group owner or people with the Modify All Data permission can update the OwnerId."
            },
            "CollaborationType" : {
              "type" : "string",
              "description" : "The type of Chatter group. Available values are: Public—Anyone can see and post updates. Anyone can join a public group. Private—Only members can see the group feed and post updates. Non-members can only see the group name and a few other details in list views, search, and on the group page. The group's owner or managers must add members who request to join the group. Unlisted—Only members and users with the Manage Unlisted Groups permission can see the group and post updates. Other users can’t access the group or see it in lists, search, and feeds."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the group."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FullPhotoUrl" : {
              "type" : "string",
              "description" : "The URL for the group's profile photo. The URL is updated every time a photo is uploaded and reflects the most recent photo. If a newer photo has been uploaded, the URL returned for an older photo is not guaranteed to return a photo. Query this field for the URL of the most recent photo. This field is available in API version 20.0 and later.",
              "readOnly" : true
            },
            "MediumPhotoUrl" : {
              "type" : "string",
              "description" : "The URL for the larger, cropped photo size.",
              "readOnly" : true
            },
            "SmallPhotoUrl" : {
              "type" : "string",
              "description" : "The URL for a thumbnail of the group's profile photo. The URL is updated every time a photo is uploaded and reflects the most recent photo. If a newer photo has been uploaded, the URL returned for an older photo is not guaranteed to return a photo. Query this field for the URL of the most recent photo. This field is available in API version 20.0 and later.",
              "readOnly" : true
            },
            "LastFeedModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date of the last post or comment on the group.",
              "readOnly" : true
            },
            "InformationTitle" : {
              "type" : "string",
              "description" : "The title of the Information section. For private groups, only visible to members and users with Modify All Data or View All Data permissions."
            },
            "InformationBody" : {
              "type" : "string",
              "description" : "The text of the Information section. For private groups, only visible to members and users with Modify All Data or View All Data permissions."
            },
            "HasPrivateFieldsAccess" : {
              "type" : "boolean",
              "description" : "If set to true, indicates that a user can see the InformationBody and InformationTitle fields in a private group. This field is set to true for members of a private group and users with Modify All Data or View All Data permissions.",
              "readOnly" : true
            },
            "CanHaveGuests" : {
              "type" : "boolean",
              "description" : "If set to true, indicates that a group allows customers. Chatter customers are people outside your company's email domains. Customers can see only the groups they're invited to. They can interact only with members of those groups. Customers can’t see any Salesforce information. This field is available starting in API version 23.0, but groups that allow customers are accessible from earlier API versions. However, when accessed from earlier API versions, groups that allow customers aren't distinguishable from private groups. We strongly recommend that you upgrade to the latest API version. If you must use an earlier version, name groups that allow customers to indicate that they include customers."
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, this record might only have been referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "IsArchived" : {
              "type" : "boolean",
              "description" : "Indicates whether the group is archived (true) or not (false). This field is available in API version 28.0 and later."
            },
            "IsAutoArchiveDisabled" : {
              "type" : "boolean",
              "description" : "Indicates whether automatic archiving is disabled for the group (true) or not (false). This field is available in API version 29.0 and later."
            },
            "AnnouncementId" : {
              "type" : "string",
              "description" : "Contains the ID of the Announcement last associated with the group. This field is available in API version 30.0 and later."
            },
            "BannerPhotoUrl" : {
              "type" : "string",
              "description" : "The URL for the group's banner photo. The URL is updated every time a photo is uploaded and reflects the most recent photo. If a newer photo has been uploaded, the URL returned for an older photo is not guaranteed to return a photo. Query this field for the URL of the most recent photo. This field is available in API version 36.0 and later.",
              "readOnly" : true
            },
            "IsBroadcast" : {
              "type" : "boolean",
              "description" : "Indicates whether the group is a broadcast group (true) or not (false). This field is available in API version 36.0 and later."
            }
          }
        } ]
      },
      "CollaborationGroupFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CollaborationGroupMember" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a member of a Chatter group.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CollaborationGroupId" : {
              "type" : "string",
              "description" : "ID of the associated CollaborationGroup."
            },
            "MemberId" : {
              "type" : "string",
              "description" : "ID of the group member."
            },
            "CollaborationRole" : {
              "type" : "string",
              "description" : "The role of a group member. Group owners and managers can change roles for members of their groups. The valid values are: Standard—Indicates that a user is a group member. Members can post and comment in the group. Admin—Indicates that a user is a group manager. Managers can post and comment, change member roles, edit group settings, add and remove members, delete posts and comments, and edit the group information field. To change the group owner, use the OwnerId field on the CollaborationGroup object."
            },
            "NotificationFrequency" : {
              "type" : "string",
              "description" : "Required. The frequency at which Salesforce sends Chatter group email digests to this member. Can only be set by the member or users with the “Modify All Data” permission. The valid values are: D—Daily W—Weekly N—Never P—On every post The default value is specified by the member in their Chatter email settings. In communities, the Email on every post option is disabled once more than 10,000 members choose this setting for the group. All members who had this option selected are automatically switched to Daily digests."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastFeedAccessDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date and time when a group member last accessed the group’s feed. The value is only updated when a member explicitly consumes the group’s feed, not when the member sees group posts in other feeds, like the profile feed.",
              "readOnly" : true
            }
          }
        } ]
      },
      "CollaborationGroupMemberRequest" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a request to join a private Chatter group.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CollaborationGroupId" : {
              "type" : "string",
              "description" : "ID of the private Chatter group."
            },
            "RequesterId" : {
              "type" : "string",
              "description" : "ID of the user requesting to join the group; must be the ID of the context user."
            },
            "ResponseMessage" : {
              "type" : "string",
              "description" : "Optional message to be included in the notification email when Status is Declined."
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the request. Available values are: Accepted Declined Pending"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "CollaborationGroupRecord" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the records associated with Chatter groups.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CollaborationGroupId" : {
              "type" : "string",
              "description" : "Required. ID of the Chatter group."
            },
            "RecordId" : {
              "type" : "string",
              "description" : "Required. The ID of the record associated with the Chatter group."
            }
          }
        } ]
      },
      "CollaborationGroupRecordChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CollaborationGroupId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecordId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CollaborationInvitation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an invitation to join Chatter, either directly or through a group.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "Used when the email address on the invitation is different than the one entered when the invitee accepts the invitation.",
              "readOnly" : true
            },
            "SharedEntityId" : {
              "type" : "string",
              "description" : "ID of the user or group associated with this invitation. If the invitation is to join Chatter, the SharedEntityId is the ID of the User that created the invitation. The invitee will auto-follow the inviter. If the invitation is to join a group within Chatter, the SharedEntityId is the ID of the Chatter CollaborationGroup. SM: Need to link to API topic that defines guests when it's available.To invite a customer, set SharedEntityId to the ID of the private CollaborationGroup with Allow Customers turned on."
            },
            "InviterId" : {
              "type" : "string",
              "description" : "The person that initiated the invitation.",
              "readOnly" : true
            },
            "InvitedUserEmail" : {
              "type" : "string",
              "description" : "The email address for the user invited to join Chatter. Label is Invited Email."
            },
            "InvitedUserEmailNormalized" : {
              "type" : "string",
              "description" : "A normalized version of the InvitedUserEmail entered. Label is Invited Email (Normalized).",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the invitation. Possible values are: Sent Accepted Canceled",
              "readOnly" : true
            },
            "OptionalMessage" : {
              "type" : "string",
              "description" : "An optional message from the person sending the invitation to the person receiving it."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "ColorDefinition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the color-related metadata for a custom tab.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "A unique virtual Salesforce ID for the color.",
              "readOnly" : true
            },
            "TabDefinitionId" : {
              "type" : "string",
              "description" : "The TabDefinition ID.",
              "readOnly" : true
            },
            "Color" : {
              "type" : "string",
              "description" : "The color described in web color RGB format—for example, “00FF00”.",
              "readOnly" : true
            },
            "Theme" : {
              "type" : "string",
              "description" : "The icon’s theme.",
              "readOnly" : true
            },
            "Context" : {
              "type" : "string",
              "description" : "The color context, which determines whether the color is the main color (or primary) for the tab.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CombinedAttachment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "This read-only object contains all notes, attachments, Google Docs, documents uploaded to libraries in Salesforce CRM Content, and files added to Chatter that are associated with a record.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The ID of the parent object.",
              "readOnly" : true
            },
            "RecordType" : {
              "type" : "string",
              "description" : "The parent object type.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "Title of the attached file.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "FileType" : {
              "type" : "string",
              "description" : "Type of document, determined by the file extension.",
              "readOnly" : true
            },
            "ContentSize" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Size of the document in bytes.",
              "readOnly" : true
            },
            "FileExtension" : {
              "type" : "string",
              "description" : "File extension of the document. This field is available in API version 31.0 and later.",
              "readOnly" : true
            },
            "ContentUrl" : {
              "type" : "string",
              "description" : "URL for links and Google Docs. This field is set only for links and Google Docs, and is one of the fields that determine the FileType. This field is available in API version 31.0 and later.",
              "readOnly" : true
            },
            "ExternalDataSourceName" : {
              "type" : "string",
              "description" : "Name of the external data source in which the document is stored. This field is set only for external documents that are connected to Salesforce. This field is available in API version 32.0 and later.",
              "readOnly" : true
            },
            "ExternalDataSourceType" : {
              "type" : "string",
              "description" : "Type of external data source in which the document is stored. This field is set only for external documents that are connected to Salesforce. This field is available in API version 35.0 and later.",
              "readOnly" : true
            },
            "SharingOption" : {
              "type" : "string",
              "description" : "Controls whether or not sharing is frozen for a file. Only administrators and file owners with Collaborator access to the file can modify this field. Default is Allowed, which means that new shares are allowed. When set to Restricted, new shares are prevented without affecting existing shares. This field is available in API versions 35.0 and later.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CommSubscription" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a customer’s subscription preferences for a specific communication.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the account owner associated with this customer."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of the communication subscription record."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            }
          }
        } ]
      },
      "CommSubscriptionChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CommSubscriptionChannelType" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the engagement channel through which you can reach a customer for a communication subscription.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID account owner associated with this customer."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of the communication subscription channel type record."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "CommunicationSubscriptionId" : {
              "type" : "string",
              "description" : "ID of the associated communication subscription record."
            },
            "EngagementChannelTypeId" : {
              "type" : "string",
              "description" : "ID of the associated engagement channel type record."
            },
            "DataUsePurposeId" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "CommSubscriptionChannelTypeChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CommunicationSubscriptionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "EngagementChannelTypeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataUsePurposeId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CommSubscriptionChannelTypeFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CommSubscriptionChannelTypeHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CommSubscriptionChannelTypeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CommSubscriptionChannelTypeShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "CommSubscriptionFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CommSubscriptionHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CommSubscriptionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CommSubscriptionShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "Community" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsPublished" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ConcurLongRunApexErrEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "RequestId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RequestUri" : {
              "type" : "string",
              "readOnly" : true
            },
            "Quiddity" : {
              "type" : "string",
              "readOnly" : true
            },
            "LimitValue" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CurrentValue" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ConferenceNumber" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExternalEventId" : {
              "type" : "string"
            },
            "Label" : {
              "type" : "string"
            },
            "Number" : {
              "type" : "string"
            },
            "AccessCode" : {
              "type" : "string"
            },
            "Vendor" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ConferenceNumberChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalEventId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "readOnly" : true
            },
            "Number" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccessCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "Vendor" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ConnectedApplication" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a connected app and its details; all fields are read-only.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The unique name for this object.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OptionsAllowAdminApprovedUsersOnly" : {
              "type" : "boolean",
              "description" : "Indicates whether access is limited to users granted approval to use the connected app by an administrator. Manage profiles for the app by editing each profile’s Access list.",
              "readOnly" : true
            },
            "OptionsRefreshTokenValidityMetric" : {
              "type" : "boolean",
              "description" : "Specifies whether the refresh token validity is based on duration or inactivity. If true, the token validity is measured based on the last use of the token; otherwise, it is based on the token duration.",
              "readOnly" : true
            },
            "OptionsHasSessionLevelPolicy" : {
              "type" : "boolean",
              "description" : "Specifies whether the connected app requires a High Assurance level session.",
              "readOnly" : true
            },
            "OptionsIsInternal" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsFullContentPushNotifications" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsCodeCredentialGuestEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsAppIssueJwtTokenEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsTokenExchangeManageBitEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MobileSessionTimeout" : {
              "type" : "string",
              "description" : "Length of time after which the system logs out inactive mobile users.",
              "readOnly" : true
            },
            "PinLength" : {
              "type" : "string",
              "description" : "For mobile apps, this field is the PIN length requirement for users of the connected app. Valid values are 4, 5, 6, 7, or 8.",
              "readOnly" : true
            },
            "StartUrl" : {
              "type" : "string",
              "description" : "If the app is not accessed from a mobile device, users are directed to this URL after they’ve authenticated.",
              "readOnly" : true
            },
            "MobileStartUrl" : {
              "type" : "string",
              "description" : "Users are directed to this URL after they’ve authenticated when the app is accessed from a mobile device.",
              "readOnly" : true
            },
            "RefreshTokenValidityPeriod" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The duration of an authorization token until it expires in hours, months, or days as set in the connected app management page.",
              "readOnly" : true
            },
            "UvidTimeout" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamedUserUvidTimeout" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ConsumptionRate" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ConsumptionScheduleId" : {
              "type" : "string"
            },
            "Description" : {
              "type" : "string"
            },
            "ProcessingOrder" : {
              "type" : "integer",
              "format" : "int32"
            },
            "PricingMethod" : {
              "type" : "string"
            },
            "LowerBound" : {
              "type" : "integer",
              "format" : "int32"
            },
            "UpperBound" : {
              "type" : "integer",
              "format" : "int32"
            },
            "Price" : {
              "type" : "number"
            }
          }
        } ]
      },
      "ConsumptionRateHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ConsumptionRateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ConsumptionSchedule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean"
            },
            "Description" : {
              "type" : "string"
            },
            "BillingTerm" : {
              "type" : "integer",
              "format" : "int32"
            },
            "BillingTermUnit" : {
              "type" : "string"
            },
            "Type" : {
              "type" : "string"
            },
            "UnitOfMeasure" : {
              "type" : "string"
            },
            "RatingMethod" : {
              "type" : "string"
            },
            "MatchingAttribute" : {
              "type" : "string"
            },
            "NumberOfRates" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          }
        } ]
      },
      "ConsumptionScheduleFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ConsumptionScheduleHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ConsumptionScheduleId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ConsumptionScheduleShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "Contact" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a contact, which is a person associated with an account.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "MasterRecordId" : {
              "type" : "string",
              "description" : "If this record was deleted as the result of a merge, this field contains the ID of the record that remains. If this record was deleted for any other reason, or has not been deleted, the value is null.",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "description" : "ID of the account that’s the parent of this contact. We recommend that you update up to 50 contacts simultaneously when changing the accounts on contacts enabled for a Customer Portal or partner portal. We also recommend that you make this update after business hours."
            },
            "LastName" : {
              "type" : "string",
              "description" : "Required. Last name of the contact up to 80 characters."
            },
            "FirstName" : {
              "type" : "string",
              "description" : "The contact’s first name up to 40 characters."
            },
            "Salutation" : {
              "type" : "string",
              "description" : "Honorific abbreviation, word, or phrase to be used in front of name in greetings, such as Dr. or Mrs."
            },
            "Name" : {
              "type" : "string",
              "description" : "Concatenation of FirstName, MiddleName, LastName, and Suffix up to 203 characters, including whitespaces.",
              "readOnly" : true
            },
            "OtherStreet" : {
              "type" : "string",
              "description" : "Street for alternate address."
            },
            "OtherCity" : {
              "type" : "string",
              "description" : "Alternate address details."
            },
            "OtherState" : {
              "type" : "string",
              "description" : "Alternate address details."
            },
            "OtherPostalCode" : {
              "type" : "string",
              "description" : "Alternate address details."
            },
            "OtherCountry" : {
              "type" : "string",
              "description" : "Alternate address details."
            },
            "OtherLatitude" : {
              "type" : "number",
              "description" : "Used with OtherLongitude to specify the precise geolocation of an alternate address. Acceptable values are numbers between –90 and 90 up to 15 decimal places. For details on geolocation compound fields, see ."
            },
            "OtherLongitude" : {
              "type" : "number",
              "description" : "Used with OtherLatitude to specify the precise geolocation of an alternate address. Acceptable values are numbers between –180 and 180 up to 15 decimal places. For details on geolocation compound fields, see ."
            },
            "OtherGeocodeAccuracy" : {
              "type" : "string",
              "description" : "Accuracy level of the geocode for the other address. For details on geolocation compound fields, see ."
            },
            "OtherAddress" : {
              "type" : "object",
              "description" : "The compound form of the other address. Read-only. For details on compound address fields, see Address Compound Fields.",
              "readOnly" : true
            },
            "MailingStreet" : {
              "type" : "string",
              "description" : "Street address for mailing address."
            },
            "MailingCity" : {
              "type" : "string",
              "description" : "Mailing address details."
            },
            "MailingState" : {
              "type" : "string",
              "description" : "Mailing address details."
            },
            "MailingPostalCode" : {
              "type" : "string",
              "description" : "Mailing address details."
            },
            "MailingCountry" : {
              "type" : "string",
              "description" : "Mailing address details."
            },
            "MailingLatitude" : {
              "type" : "number",
              "description" : "Used with MailingLongitude to specify the precise geolocation of a mailing address. Acceptable values are numbers between –90 and 90 up to 15 decimal places. For details on geolocation compound fields, see ."
            },
            "MailingLongitude" : {
              "type" : "number",
              "description" : "Used with MailingLatitude to specify the precise geolocation of a mailing address. Acceptable values are numbers between –180 and 180 up to 15 decimal places. For details on geolocation compound fields, see ."
            },
            "MailingGeocodeAccuracy" : {
              "type" : "string",
              "description" : "Accuracy level of the geocode for the mailing address. For details on geolocation compound field, see ."
            },
            "MailingAddress" : {
              "type" : "object",
              "description" : "The compound form of the mailing address. Read-only. For details on compound address fields, see Address Compound Fields.",
              "readOnly" : true
            },
            "Phone" : {
              "type" : "string",
              "description" : "Telephone number for the contact. Label is Business Phone."
            },
            "Fax" : {
              "type" : "string",
              "description" : "The contact’s fax number. Label is Business Fax."
            },
            "MobilePhone" : {
              "type" : "string",
              "description" : "Contact’s mobile phone number."
            },
            "HomePhone" : {
              "type" : "string",
              "description" : "The contact’s home telephone number."
            },
            "OtherPhone" : {
              "type" : "string",
              "description" : "Telephone for alternate address."
            },
            "AssistantPhone" : {
              "type" : "string",
              "description" : "The assistant’s telephone number."
            },
            "ReportsToId" : {
              "type" : "string",
              "description" : "This field doesn’t appear if IsPersonAccount is true."
            },
            "Email" : {
              "type" : "string",
              "description" : "The contact’s email address."
            },
            "Title" : {
              "type" : "string",
              "description" : "Title of the contact, such as CEO or Vice President."
            },
            "Department" : {
              "type" : "string",
              "description" : "The contact’s department."
            },
            "AssistantName" : {
              "type" : "string",
              "description" : "The assistant’s name."
            },
            "LeadSource" : {
              "type" : "string",
              "description" : "The lead’s source."
            },
            "Birthdate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The contact’s birthdate. Filter criteria for report filters, list view filters, and SOQL queries ignore the year portion of the Birthdate field. For example, this SOQL query returns contacts with birthdays later in the year than today:SELECT Name, Birthdate FROM Contact WHERE Birthdate > TODAY"
            },
            "Description" : {
              "type" : "string",
              "description" : "A description of the contact. Label is Contact Description up to 32 KB."
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the owner of the account associated with this contact."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastActivityDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Value is the most recent of either: Due date of the most recent event logged against the record. Due date of the most recently closed task associated with the record.",
              "readOnly" : true
            },
            "LastCURequestDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastCUUpdateDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            },
            "EmailBouncedReason" : {
              "type" : "string",
              "description" : "If bounce management is activated and an email sent to the contact bounces, the reason for the bounce."
            },
            "EmailBouncedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "If bounce management is activated and an email sent to the contact bounces, the date and time of the bounce."
            },
            "IsEmailBounced" : {
              "type" : "boolean",
              "description" : "If bounce management is activated and an email is sent to a contact, indicates whether the email bounced (true) or not (false).",
              "readOnly" : true
            },
            "PhotoUrl" : {
              "type" : "string",
              "description" : "Path to be combined with the URL of a Salesforce instance (Example: https://yourInstance.salesforce.com/) to generate a URL to request the social network profile image associated with the contact. Generated URL returns an HTTP redirect (code 302) to the social network profile image for the contact. Empty if Social Accounts and Contacts isn't enabled or if Social Accounts and Contacts is disabled for the requesting user.",
              "readOnly" : true
            },
            "Jigsaw" : {
              "type" : "string",
              "description" : "References the company’s ID in Data.com. If an account has a value in this field, it means that the account was imported from Data.com. If the field value is null, the account was not imported from Data.com. Maximum size is 20 characters. Available in API version 22.0 and later. Label is Data.com Key.The Jigsaw field is exposed in the API to support troubleshooting for import errors and reimporting of corrected data. Do not modify this value."
            },
            "JigsawContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IndividualId" : {
              "type" : "string",
              "description" : "ID of the data privacy record associated with this contact. This field is available if Data Protection and Privacy is enabled."
            },
            "ContactSource" : {
              "type" : "string"
            },
            "Level__c" : {
              "type" : "string"
            },
            "Languages__c" : {
              "type" : "string"
            },
            "Dynamics_Contact__c" : {
              "type" : "string"
            },
            "NetSuite_Contact_ID__c" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ContactChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastName" : {
              "type" : "string",
              "readOnly" : true
            },
            "FirstName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Salutation" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "OtherStreet" : {
              "type" : "string",
              "readOnly" : true
            },
            "OtherCity" : {
              "type" : "string",
              "readOnly" : true
            },
            "OtherState" : {
              "type" : "string",
              "readOnly" : true
            },
            "OtherPostalCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "OtherCountry" : {
              "type" : "string",
              "readOnly" : true
            },
            "OtherLatitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "OtherLongitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "OtherGeocodeAccuracy" : {
              "type" : "string",
              "readOnly" : true
            },
            "OtherAddress" : {
              "type" : "object",
              "readOnly" : true
            },
            "MailingStreet" : {
              "type" : "string",
              "readOnly" : true
            },
            "MailingCity" : {
              "type" : "string",
              "readOnly" : true
            },
            "MailingState" : {
              "type" : "string",
              "readOnly" : true
            },
            "MailingPostalCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "MailingCountry" : {
              "type" : "string",
              "readOnly" : true
            },
            "MailingLatitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "MailingLongitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "MailingGeocodeAccuracy" : {
              "type" : "string",
              "readOnly" : true
            },
            "MailingAddress" : {
              "type" : "object",
              "readOnly" : true
            },
            "Phone" : {
              "type" : "string",
              "readOnly" : true
            },
            "Fax" : {
              "type" : "string",
              "readOnly" : true
            },
            "MobilePhone" : {
              "type" : "string",
              "readOnly" : true
            },
            "HomePhone" : {
              "type" : "string",
              "readOnly" : true
            },
            "OtherPhone" : {
              "type" : "string",
              "readOnly" : true
            },
            "AssistantPhone" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReportsToId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Email" : {
              "type" : "string",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Department" : {
              "type" : "string",
              "readOnly" : true
            },
            "AssistantName" : {
              "type" : "string",
              "readOnly" : true
            },
            "LeadSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "Birthdate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastCURequestDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastCUUpdateDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EmailBouncedReason" : {
              "type" : "string",
              "readOnly" : true
            },
            "EmailBouncedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Jigsaw" : {
              "type" : "string",
              "readOnly" : true
            },
            "JigsawContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IndividualId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContactSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "Level__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "Languages__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "Dynamics_Contact__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "NetSuite_Contact_ID__c" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContactFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContactHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContactPointTypeConsent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents consent for a contact point type, such as email or phone.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the owner of the account associated with this customer."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the contact point type consent record."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "PartyId" : {
              "type" : "string",
              "description" : "Required. Represents the record based on the Individual object you want to associate consent with."
            },
            "ContactPointType" : {
              "type" : "string",
              "description" : "Required. Represents the contact method you want to apply consent to. Possible values are: Email MailingAddress Phone Social Web"
            },
            "DataUsePurposeId" : {
              "type" : "string",
              "description" : "Represents the record for data use purpose that you want to associate this consent with."
            },
            "PrivacyConsentStatus" : {
              "type" : "string",
              "description" : "Required. Identify whether the individual associated with this record agrees to this form of contact. Possible values are: NotSeen Seen OptIn OptOut"
            },
            "EffectiveFrom" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date when consents starts."
            },
            "EffectiveTo" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date when consent ends."
            },
            "CaptureDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Required. Date when consent was captured."
            },
            "CaptureContactPointType" : {
              "type" : "string",
              "description" : "Required. Indicates how you captured consent. Possible values are: Email MailingAddress Phone Social Web"
            },
            "CaptureSource" : {
              "type" : "string",
              "description" : "Required. Indicates how you captured consent. For example, a website or online form."
            },
            "DoubleConsentCaptureDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date when double opt-in was captured."
            },
            "PartyRoleId" : {
              "type" : "string"
            },
            "BusinessBrandId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ContactPointTypeConsentChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "PartyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContactPointType" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataUsePurposeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PrivacyConsentStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "EffectiveFrom" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EffectiveTo" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CaptureDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CaptureContactPointType" : {
              "type" : "string",
              "readOnly" : true
            },
            "CaptureSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "DoubleConsentCaptureDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PartyRoleId" : {
              "type" : "string",
              "readOnly" : true
            },
            "BusinessBrandId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContactPointTypeConsentHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ContactPointTypeConsentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContactPointTypeConsentShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "ContactRequest" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a customer’s request for support to get back to them about an issue.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the Salesforce record that owns the request."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The contact request number.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, this record might only have been referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "WhatId" : {
              "type" : "string",
              "description" : "ID of the Salesforce record the contact request is related to, such as an account, case, opportunity, or work order."
            },
            "WhoId" : {
              "type" : "string",
              "description" : "ID of the Salesforce contact record the contact request is related to, such as a contact, lead, or user."
            },
            "PreferredPhone" : {
              "type" : "string",
              "description" : "The phone number the customer provided when requesting help in the contact request flow."
            },
            "PreferredChannel" : {
              "type" : "string",
              "description" : "The channel the customer selected as their preferred method of communication in the contact request flow. For example: Phone"
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the contact request. For example: Abandoned Attempted Contacted New"
            },
            "RequestReason" : {
              "type" : "string",
              "description" : "The reason the customer provided when requesting help in the contact request flow. These values are customizable in Object Manager. The default values are: Account Billing Case General Order Other Product"
            },
            "RequestDescription" : {
              "type" : "string",
              "description" : "The description of the customer’s issue that they provided when requesting help in the contact request flow."
            },
            "IsCallback" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "ContactRequestShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a list of access levels to a ContactRequest with an explanation of the access level.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the parent object, if any."
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "ID of the User or Group that has been given access to the ContactRequest."
            },
            "AccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the User or Group has to contact requests. The possible values are: Read Edit All (This value is not valid for create() or update() calls.) This value must be set to an access level that is higher than the organization’s default access level for contact requests."
            },
            "RowCause" : {
              "type" : "string",
              "description" : "Reason that this sharing entry exists."
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "ContactShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a list of access levels to a Contact along with an explanation of the access level. For example, if you have access to a record because you own it, the ContactAccessLevel is All and RowCause is Owner.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "description" : "ID of the Contact associated with this sharing entry. This field can't be updated.",
              "readOnly" : true
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "ID of the User or Group that has been given access to the Contact. This field can't be updated.",
              "readOnly" : true
            },
            "ContactAccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the User or Group has to cases associated with the account Contact. The possible values are: Read Edit All This value is not valid for create or update. This field must be set to an access level that is higher than the organization’s default access level for contacts.",
              "readOnly" : true
            },
            "RowCause" : {
              "type" : "string",
              "description" : "Reason that this sharing entry exists. You can only write to this field when its value is either omitted or set to Manual (default). There are many possible values, including: Rule—The User or Group has access via a Contact sharing rule. GuestRule—The User or Group has access via a Contact guest user sharing rule. ImplicitChild—The User or Group has access to the Contact via sharing access on the associated Account. ImplicitPerson—The User or Group has access to the business contact of a person account via a Contact sharing rule. GuestPersonImplicit—The guest user has access to the business contact of a person account via a Contact sharing rule. PortalImplicit—The Contact is associated with the portal user. LpuImplicit—The User has access to records owned by high-volume Experience Cloud site users via a share group. ARImplicit—The User, who belongs to a partner or customer account, has access to the Contact via an account relationship data sharing rule. Manual—The User or Group has access because a User with “All” access manually shared the Contact with them. Owner—The User is the owner of the Contact.",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentAsset" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a Salesforce file that has been converted to an asset file in a custom app in Lightning Experience. Use asset files for org setup and configuration. Asset files can be packaged and referenced by other components.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the asset file in the API. ContentAsset.DeveloperName: must be 40 characters or fewer must begin with a letter can contain only underscores and alphanumeric characters can’t include spaces can’t end with an underscore can’t contain 2 consecutive underscores In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization."
            },
            "Language" : {
              "type" : "string",
              "description" : "The language for this document. This field defaults to the user's language unless the org is multi-language enabled. Specifies the language of the labels returned. The value must be a valid user locale (language and country), such as de_DE or en_GB. For more information on locales, see the Language field on the CategoryNodeLocalization object."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The master label for the asset file. This internal label doesn’t get translated."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The namespace prefix associated with this object. Each Developer Edition organization that creates a managed package has a unique namespace prefix. Limit: 15 characters. You can refer to a component in a managed package by using the namespacePrefix__componentName notation.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "ID of the document.",
              "readOnly" : true
            },
            "IsVisibleByExternalUsers" : {
              "type" : "boolean",
              "description" : "Indicates whether unauthenticated users can see the asset file."
            }
          }
        } ]
      },
      "ContentBody" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the body of a file in Salesforce CRM Content or Salesforce Files",
          "properties" : {
            "Id" : {
              "type" : "string",
              "description" : "ID of the file body.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentDistribution" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents information about sharing a document externally.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the user who owns the shared document."
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the content delivery."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ContentVersionId" : {
              "type" : "string",
              "description" : "ID of the shared document version."
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "ID of the shared document.",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "description" : "ID of the record, such as an Account, Campaign, or Case, that the shared document is related to."
            },
            "PreferencesAllowPDFDownload" : {
              "type" : "boolean",
              "description" : "When true, the shared document can be downloaded as a PDF if the original file type is PDF or if a PDF preview has been generated."
            },
            "PreferencesAllowOriginalDownload" : {
              "type" : "boolean",
              "description" : "When true, the shared document can be downloaded as the file type that it was uploaded as. When false, download availability depends on whether a preview of the file exists. If a preview exists, the file can’t be downloaded. If a preview doesn’t exist, the file can still be downloaded. If the shared document is a link, it can’t be downloaded."
            },
            "PreferencesPasswordRequired" : {
              "type" : "boolean",
              "description" : "When true, a password, specified by Password, is required to access the shared document."
            },
            "PreferencesNotifyOnVisit" : {
              "type" : "boolean",
              "description" : "When true, the owner of the shared document is emailed the first time that someone views or downloads the shared document."
            },
            "PreferencesLinkLatestVersion" : {
              "type" : "boolean",
              "description" : "When true, users see the most recent version of a shared document. When false, users see the version of the document that’s shared, even if it isn’t the most recent version."
            },
            "PreferencesAllowViewInBrowser" : {
              "type" : "boolean",
              "description" : "When true, a preview of the shared document can be viewed in a Web browser."
            },
            "PreferencesExpires" : {
              "type" : "boolean",
              "description" : "When true, access to the shared document expires on the date that’s specified by ExpiryDate."
            },
            "PreferencesNotifyRndtnComplete" : {
              "type" : "boolean",
              "description" : "When true, the owner of the shared document is emailed when renditions of the shared document that can be previewed in a Web browser are generated."
            },
            "ExpiryDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date when the shared document becomes inaccessible."
            },
            "Password" : {
              "type" : "string",
              "description" : "A password that allows access to a shared document.",
              "readOnly" : true
            },
            "ViewCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of times that the shared document has been viewed.",
              "readOnly" : true
            },
            "FirstViewDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date when the shared document is first viewed.",
              "readOnly" : true
            },
            "LastViewDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date when the shared document was last viewed.",
              "readOnly" : true
            },
            "DistributionPublicUrl" : {
              "type" : "string",
              "description" : "URL of the link to the shared document.",
              "readOnly" : true
            },
            "ContentDownloadUrl" : {
              "type" : "string",
              "description" : "The link for downloading the file. This field is available in API version 40.0 and later.",
              "readOnly" : true
            },
            "PdfDownloadUrl" : {
              "type" : "string",
              "description" : "The link for downloading the file as a PDF. This field is available in API version 40.0 and later.",
              "readOnly" : true
            }
          }
        } ]
      },
      "ContentDistributionView" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents information about views of a shared document.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DistributionId" : {
              "type" : "string",
              "description" : "ID of the content delivery that the document is part of.",
              "readOnly" : true
            },
            "ParentViewId" : {
              "type" : "string",
              "description" : "ID of this instance of accessing the shared document.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsInternal" : {
              "type" : "boolean",
              "description" : "true if the shared document is viewed by a user in the same organization; false if viewed by an external user.",
              "readOnly" : true
            },
            "IsDownload" : {
              "type" : "boolean",
              "description" : "true if the shared document is downloaded; false if the shared document is viewed.",
              "readOnly" : true
            }
          }
        } ]
      },
      "ContentDocument" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a document that has been uploaded to a library in Salesforce CRM Content or Salesforce Files. This object is available in versions 17.0 and later for Salesforce CRM Content.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsArchived" : {
              "type" : "boolean",
              "description" : "Indicates whether the document has been archived (true) or not (false)."
            },
            "ArchivedById" : {
              "type" : "string",
              "description" : "The ID of the user who archived the document. This field is available in API version 24.0 and later.",
              "readOnly" : true
            },
            "ArchivedDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The date when the document was archived. This field is available in API version 24.0 and later.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the owner of this document."
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "The title of a document."
            },
            "PublishStatus" : {
              "type" : "string",
              "description" : "Indicates if and how the document is published. Valid values are: P—The document is published to a public library and is visible to other users. Label is Public. R—The document is published to a personal library and is not visible to other users. Label is Personal Library. U—The document is not published because publishing was interrupted. Label is Upload Interrupted.",
              "readOnly" : true
            },
            "LatestPublishedVersionId" : {
              "type" : "string",
              "description" : "ID of the latest document version (ContentVersion).",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the library that owns the document. Created automatically when inserting a ContentVersion via the API for the first time. This field is available in API version 24.0 and later when Salesforce CRM Content is enabled."
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, this record might only have been referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "A description of the document. This field is available in API version 31.0 and later."
            },
            "ContentSize" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The size of the document in bytes. This field is available in API version 31.0 and later.",
              "readOnly" : true
            },
            "FileType" : {
              "type" : "string",
              "description" : "Type of document, determined by the file extension. This field is available in API version 31.0 and later.",
              "readOnly" : true
            },
            "FileExtension" : {
              "type" : "string",
              "description" : "File extension of the document. This field is available in API version 31.0 and later.",
              "readOnly" : true
            },
            "SharingOption" : {
              "type" : "string",
              "description" : "Controls whether sharing is frozen for a file. Only administrators and file owners with Collaborator access to the file can modify this field. Default is Allowed, which means that new shares are allowed. When set to Restricted, new shares are prevented without affecting existing shares. This field is available in API versions 35.0 and later."
            },
            "SharingPrivacy" : {
              "type" : "string",
              "description" : "Controls sharing privacy for a file. Only administrators and file owners with Collaborator access to the file can modify this field. Default is Visible to Anyone With Record Access. When set to Private on Records, the file is private on records but can be shared selectively with others. This field is available in API versions 41.0 and later."
            },
            "ContentModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date the document was modified. ContentModifiedDate updates when, for example, the document is renamed or a new document version is uploaded. When you’re uploading the first version of a document, ContentModifiedDate can be set to the current time or anytime in the past. This field is available in API version 32.0 and later.",
              "readOnly" : true
            },
            "ContentAssetId" : {
              "type" : "string",
              "description" : "If the ContentDocument is an asset file, this field points to the asset. For most entities, the value of this field is null. This field is available in API version 38.0 and later."
            },
            "IsInternalOnly" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "ContentDocumentChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsArchived" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ArchivedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ArchivedDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "PublishStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "LatestPublishedVersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ContentAssetId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsInternalOnly" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentDocumentFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentDocumentHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the history of a document.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "ID of the document.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "description" : "The name of the field that was changed. Possible values include: contentDocPublished—The document is published into a library. contentDocUnpublished—The document is archived or removed from a library, either directly or when the owning library is changed. contentDocRepublished—The document is removed from the archive. contentDocFeatured—The document is featured. contentDocSubscribed—The document is subscribed to. contentDocUnsubscribed—The document is no longer subscribed to.",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "description" : "The latest value of the field before it was changed.",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "description" : "The new value of the field that was changed.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentDocumentLink" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the link between a Salesforce CRM Content document or Salesforce file and where it's shared. A file can be shared with other users, groups, records, and Salesforce CRM Content libraries.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkedEntityId" : {
              "type" : "string",
              "description" : "ID of the linked object. Can include Chatter users, groups, records (any that support Chatter feed tracking including custom objects), and Salesforce CRM Content libraries."
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "ID of the document."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ShareType" : {
              "type" : "string",
              "description" : "Required. The permission granted to the user of the shared file in a library. This is determined by the permission the user already has in the library. This field is available in API version 25.0 and later. V Viewer permission. The user can explicitly view but not edit the shared file. C Collaborator permission. The user can explicitly view and edit the shared file. I Inferred permission. The user’s permission is determined by the related record. For shares with a library, this is defined by the permissions the user has in that library. Inferred permission on shares with libraries and file owners is available in API versions 21.0 and later. Inferred permission on shares with standard objects is available in API versions 36.0 and later."
            },
            "Visibility" : {
              "type" : "string",
              "description" : "Specifies whether this file is available to all users, internal users, or shared users. This field is available in API version 26.0 and later. Visibility can have the following values. AllUsers—The file is available to all users who have permission to see the file. InternalUsers—The file is available only to internal users who have permission to see the file. SharedUsers—The file is available to all users who can see the feed to which the file is posted. SharedUsers is used only for files shared with users, and is available only when an org has private org-wide sharing on by default. The SharedUsers value is available in API version 32.0 and later. Note the following exceptions for Visibility. AllUsers & InternalUsers values apply to files posted on standard and custom object records, but not to users, groups, or content libraries. For posts to a record feed, Visibility is set to InternalUsers for all internal users by default. External users can set Visibility only to AllUsers. On user and group posts, only internal users can set Visibility to InternalUsers. For posts to a user feed, if the organization-wide default for user sharing is set to private, Visibility is set to SharedUsers. Only internal users can update Visibility. Visibility can be updated on links to files posted on standard and custom object records, but not to users, groups, or content libraries. Visibility is updatable in API version 43.0 and later."
            }
          }
        } ]
      },
      "ContentDocumentLinkChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "LinkedEntityId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentDocumentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ShareType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Visibility" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentDocumentSubscription" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a subscription for a user following or commenting on a file in a library.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the user following or commenting on the file.",
              "readOnly" : true
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "ID of the file.",
              "readOnly" : true
            },
            "IsCommentSub" : {
              "type" : "boolean",
              "description" : "Specifies whether the user made comments on the file.",
              "readOnly" : true
            },
            "IsDocumentSub" : {
              "type" : "boolean",
              "description" : "Specifies whether the user follows the file.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentFolder" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a folder in a content library for adding files.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the folder."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ParentContentFolderId" : {
              "type" : "string",
              "description" : "ID of the ParentFolder."
            }
          }
        } ]
      },
      "ContentFolderChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentContentFolderId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentFolderItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a file (ContentDocument) or folder (ContentFolder) that resides in a ContentFolder in a ContentWorkspace.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsFolder" : {
              "type" : "boolean",
              "description" : "Indicates that the ContentFolderItem is a folder, and not a file.",
              "readOnly" : true
            },
            "ParentContentFolderId" : {
              "type" : "string",
              "description" : "The ID of the ContentFolder that the ContentFolderItem resides in.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "The name of the file or folder.",
              "readOnly" : true
            },
            "FileType" : {
              "type" : "string",
              "description" : "Specifies the type of file if ContentFolderItem is a file.",
              "readOnly" : true
            },
            "ContentSize" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The file or folder size of the ContentFolderItem.",
              "readOnly" : true
            },
            "FileExtension" : {
              "type" : "string",
              "description" : "Specifies the file extension if the ContentFolderItem is a file.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentFolderLink" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Defines the association between a library and its root folder.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentEntityId" : {
              "type" : "string",
              "description" : "Name of the entity the folder hierarchy is linked to.",
              "readOnly" : true
            },
            "ContentFolderId" : {
              "type" : "string",
              "description" : "ID of the folder.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "EnableFolderStatus" : {
              "type" : "string",
              "description" : "Indicates the status of enabling folders for the library. Valid values are: C — Completed folder enablement S — Started folder enablement F — Failed folder enablement This field is available in API version 39.0 and later.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentFolderMember" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Defines the association between a file and a folder.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentContentFolderId" : {
              "type" : "string",
              "description" : "ID of the folder the file is in."
            },
            "ChildRecordId" : {
              "type" : "string",
              "description" : "ID of the file.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "ContentNotification" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a notification for a file.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Nature" : {
              "type" : "string",
              "description" : "Type of notification.",
              "readOnly" : true
            },
            "UsersId" : {
              "type" : "string",
              "description" : "ID of the user who received the notification.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EntityType" : {
              "type" : "string",
              "description" : "Type of object with the notification. One of the following. ContentDocument ContentTagName ContentVersion ContentWorkspace ContentWorkspacePermission User",
              "readOnly" : true
            },
            "EntityIdentifierId" : {
              "type" : "string",
              "description" : "ID of the object with the notification.",
              "readOnly" : true
            },
            "Subject" : {
              "type" : "string",
              "description" : "Subject of the notification.",
              "readOnly" : true
            },
            "Text" : {
              "type" : "string",
              "description" : "Text of the notification.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentTagSubscription" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a subscription for a user following a tag on a file.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentTagNameId" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the user following the tag on the file.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentUserSubscription" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a subscription for a user following another user.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "SubscriberUserId" : {
              "type" : "string",
              "description" : "ID of the user who follows another user.",
              "readOnly" : true
            },
            "SubscribedToUserId" : {
              "type" : "string",
              "description" : "ID of the user who is followed by another user.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentVersion" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a specific version of a document in Salesforce CRM Content or Salesforce Files.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "ID of the document."
            },
            "IsLatest" : {
              "type" : "boolean",
              "description" : "Indicates whether this is the latest version of the document (true) or not (false).",
              "readOnly" : true
            },
            "ContentUrl" : {
              "type" : "string",
              "description" : "URL for links. This is only set for links. One of the fields that determines the FileType. The character limit in API versions 33.0 and later is 1,300. The character limit in API versions 32.0 and earlier was 255."
            },
            "ContentBodyId" : {
              "type" : "string",
              "description" : "Allows inserting a file version independently of the file blob being uploaded. This field is available for query and insert only. It can only point to a ContentBody record. This field is available in API version 40.0 and later."
            },
            "VersionNumber" : {
              "type" : "string",
              "description" : "The version number. The number increments with each version of the document, for example, 1, 2, 3.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "The title of a document."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the content version."
            },
            "ReasonForChange" : {
              "type" : "string",
              "description" : "The reason why the document was changed. This field can only be set when inserting a new version (revising) a document."
            },
            "SharingOption" : {
              "type" : "string",
              "description" : "Controls whether sharing is frozen for a file. Only administrators and file owners with Collaborator access to the file can modify this field. Default is Allowed, which means that new shares are allowed. When set to Restricted, new shares are prevented without affecting existing shares. This field is available in API versions 35.0 and later."
            },
            "SharingPrivacy" : {
              "type" : "string",
              "description" : "Controls sharing privacy for a file. Only administrators and file owners with Collaborator access to the file can modify this field. Default is Visible to Anyone With Record Access. When set to Private on Records, the file is private on records but can be shared selectively with others. This field is available in API versions 41.0 and later."
            },
            "PathOnClient" : {
              "type" : "string",
              "description" : "The complete path of the document. One of the fields that determines the FileType.Specify a complete path including the path extension in order for the document to be visible in the Preview tab."
            },
            "RatingCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Read only. Total number of positive and negative ratings.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ContentModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date the document was modified. ContentModifiedDate updates when, for example, the document is renamed or a new document version is uploaded. When uploading the first version of a document, ContentModifiedDate can be set to the current time or any time in the past."
            },
            "ContentModifiedById" : {
              "type" : "string",
              "description" : "ID of the user who modified the document.",
              "readOnly" : true
            },
            "PositiveRatingCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Read only. The number of times different users have given the document a thumbs up. Rating counts for the latest version are not version-specific. If Version 1 receives 10 thumbs-up votes, and Version 2 receives 2 thumbs-up votes, the PositiveRatingCount on Version 2 is 12. However, rating counts are not retroactive for prior versions. The PositiveRatingCount on Version 1 is 10.",
              "readOnly" : true
            },
            "NegativeRatingCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Read only. The number of times different users have given the document a thumbs down. Rating counts for the latest version are not version-specific. If Version 1 receives 10 thumbs-down votes, and Version 2 receives 2 thumbs-down votes, the NegativeRatingCount on Version 2 is 12. However, rating counts are not retroactive for prior versions. The NegativeRatingCount on Version 1 is 10.",
              "readOnly" : true
            },
            "FeaturedContentBoost" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Read only. Designates a document as featured.",
              "readOnly" : true
            },
            "FeaturedContentDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date the document was featured.",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the owner of this document."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "TagCsv" : {
              "type" : "string",
              "description" : "Text used to apply tags to a content version via the API."
            },
            "FileType" : {
              "type" : "string",
              "description" : "Type of content determined by ContentUrl for links or PathOnClient for documents.",
              "readOnly" : true
            },
            "PublishStatus" : {
              "type" : "string",
              "description" : "Indicates if and how the document is published. Valid values are: P—The document is published to a public library and is visible to other users. Label is Public. R—The document is published to a personal library and is not visible to other users. Label is Personal Library. U—The document is not published because publishing was interrupted. Label is Upload Interrupted.",
              "readOnly" : true
            },
            "VersionData" : {
              "type" : "object",
              "description" : "The content or body of the note, which can include properly formatted HTML or plain text. When a document is uploaded or downloaded via the API, it should be base64 encoded (for upload) or decoded (for download). Any special characters within plain text in the Content field must be escaped. You can escape special characters by calling content.escapeHtml4()."
            },
            "ContentSize" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Size of the document in bytes. Always zero for links.",
              "readOnly" : true
            },
            "FileExtension" : {
              "type" : "string",
              "description" : "File extension of the document. This field is available in API version 31.0 and later.",
              "readOnly" : true
            },
            "FirstPublishLocationId" : {
              "type" : "string",
              "description" : "ID of the location where the version was first published. If the version is first published into a user's personal library or My Files, the field will contain the ID of the user who owns the personal library or My Files. In Lightning Experience, if the first version is published into a public library, the field will contain the ID of that library. Accepts all record IDs supported by ContentDocumentLink (anything a file can be attached to, like records and groups). Setting FirstPublishLocationId allows you to create a file and share it with an initial record/group in a single transaction, and have the option to create more links to share the file with other records or groups later. When a file is created, it’s automatically linked to the record, and PublishStatus will change to Public from Pending/Personal. This field is only set the first time a version is published via the API. FirstPublishLocationId can’t be set to another ID when a new content version is inserted.Salesforce updates the FirstPublishLocationId updates automatically when a new OwnerId is added to the ContentVersion. For example, when you publish a new version with a different OwnerId than the current OwnerId, the FirstPublishLocationId of all previous versions updates to the previous OwnerId. The new published version sets the FirstPublishLocationId to the new OwnerId."
            },
            "Origin" : {
              "type" : "string",
              "description" : "The source of the content version. Valid values are: C—Content document from the user's personal library. Label is Content. The FirstPublishLocationId must be the user's ID. If FirstPublishLocationId is left blank, it defaults to the user's ID. H—Salesforce file from the user's My Files. Label is Chatter. The FirstPublishLocationId must be the user's ID. If FirstPublishLocationId is left blank, it defaults to the user's ID. Origin can only be set to H if Chatter is enabled for your organization. This field defaults to C. Label is Content Origin."
            },
            "ContentLocation" : {
              "type" : "string",
              "description" : "Origin of the document. Valid values are: S—Document is located within Salesforce. Label is Salesforce. E—Document is located outside of Salesforce. Label is External. L—Document is located on a social network and accessed via Social Customer Service. Label is Social Customer Service."
            },
            "TextPreview" : {
              "type" : "string",
              "description" : "A preview of a document. Available in API version 35.0 and later.",
              "readOnly" : true
            },
            "ExternalDocumentInfo1" : {
              "type" : "string",
              "description" : "Stores the URL of the file in the external content repository. The integration from the external source determines the content for this string. After the reference or copy is created, the URL of the external file is updated when you: Republish a file reference in Lightning Experience Open the document Create a file reference in the Connect REST API with reuseReference set to true. When the file is updated, the shared link is updated to the most current version."
            },
            "ExternalDocumentInfo2" : {
              "type" : "string",
              "description" : "Contains the external file ID. Salesforce determines the content for this string, which is private. The content can change without notice, depending on the external system. After the file reference is created, this field isn’t updated, even if the file path changes."
            },
            "ExternalDataSourceId" : {
              "type" : "string",
              "description" : "ID of the external document referenced in the ExternalDataSource object."
            },
            "Checksum" : {
              "type" : "string",
              "description" : "MD5 checksum for the file.",
              "readOnly" : true
            },
            "IsMajorVersion" : {
              "type" : "boolean",
              "description" : "true if the document is a major version; false if the document is a minor version. Major versions can’t be replaced."
            },
            "IsAssetEnabled" : {
              "type" : "boolean",
              "description" : "Can be specified on insert of ContentVersion to automatically convert a ContentDocument file into a ContentAsset. This field can be SOQL queried, but it can’t be edited. This field is available in API version 38.0 and later."
            },
            "VersionDataUrl" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "ContentVersionChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "ContentDocumentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsLatest" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ContentUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentBodyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "VersionNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReasonForChange" : {
              "type" : "string",
              "readOnly" : true
            },
            "SharingOption" : {
              "type" : "string",
              "readOnly" : true
            },
            "SharingPrivacy" : {
              "type" : "string",
              "readOnly" : true
            },
            "PathOnClient" : {
              "type" : "string",
              "readOnly" : true
            },
            "RatingCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ContentModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ContentModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "PositiveRatingCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "NegativeRatingCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "FeaturedContentBoost" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "FeaturedContentDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FileType" : {
              "type" : "string",
              "readOnly" : true
            },
            "PublishStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentSize" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "FirstPublishLocationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Origin" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentLocation" : {
              "type" : "string",
              "readOnly" : true
            },
            "TextPreview" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalDocumentInfo1" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalDocumentInfo2" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalDataSourceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsMajorVersion" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentVersionComment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a comment on a version of a file.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "ID of the file.",
              "readOnly" : true
            },
            "ContentVersionId" : {
              "type" : "string",
              "description" : "ID of the version of the file.",
              "readOnly" : true
            },
            "UserComment" : {
              "type" : "string",
              "description" : "ID of the user who commented on the file.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentVersionHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the history of a specific version of a document.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ContentVersionId" : {
              "type" : "string",
              "description" : "ID of the version.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "description" : "The name of the field that was changed. Possible values include: contentVersionCreated—A new version is created. contentVersionUpdated—The title, description, or any custom field on the version is changed. contentVersionDownloaded—A version is downloaded. contentVersionViewed—The version details are viewed. contentVersionRated—The version is rated. contentVersionCommented—The version receives a comment. contentVersionDataReplaced—The new version replaces the previous version, which can happen only when the new version is uploaded immediately after the previous version.",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "description" : "The latest value of the field before it was changed.",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "description" : "The new value of the field that was changed.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentVersionRating" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a rating on a version of a file.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the user who rated the file.",
              "readOnly" : true
            },
            "ContentVersionId" : {
              "type" : "string",
              "description" : "ID of the version of the file.",
              "readOnly" : true
            },
            "Rating" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Rating of the file.",
              "readOnly" : true
            },
            "UserComment" : {
              "type" : "string",
              "description" : "Comment made by the user who rated the file.",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContentWorkspace" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a content library.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the library."
            },
            "Description" : {
              "type" : "string",
              "description" : "Text description of the content library."
            },
            "TagModel" : {
              "type" : "string",
              "description" : "The type of tagging assigned to a library. Valid values are: U — Unrestricted. No restrictions on tagging. Users can enter any tag when publishing or editing content. G — Guided. Users can enter any tag when publishing or editing content, but they are also offered a list of suggested tags. R — Restricted. Users must choose from a list of suggested tags.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "DefaultRecordTypeId" : {
              "type" : "string",
              "description" : "ID of the default content type for the library. Content types are the containers for custom fields in Salesforce CRM Content.",
              "readOnly" : true
            },
            "IsRestrictContentTypes" : {
              "type" : "boolean",
              "description" : "Read only. Indicates whether content types have been restricted (true) or not (false).",
              "readOnly" : true
            },
            "IsRestrictLinkedContentTypes" : {
              "type" : "boolean",
              "description" : "Read only. Indicates whether linked content types have been restricted (true) or not (false).",
              "readOnly" : true
            },
            "WorkspaceType" : {
              "type" : "string",
              "description" : "Differentiates between different types of libraries. Valid values are: R — Regular library B — Org asset library This field is available in API version 39.0 and later.",
              "readOnly" : true
            },
            "ShouldAddCreatorMembership" : {
              "type" : "boolean",
              "description" : "Automatically create a library membership for the user creating the library. Please note this field is not meant for query and always returns false in query. This field is available in API version 40.0 and later."
            },
            "LastWorkspaceActivityDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RootContentFolderId" : {
              "type" : "string",
              "description" : "ID of root folder of the library. This field is available in API version 39.0 and later.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The unique name of the library in the API. Allows a link to the library to be packaged when an asset file is added to a package. Limit: 15 characters. This field is available in API version 39.0 and later.",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the library in the API. Allows a link to the library to be packaged when an asset file is added to a package. Although libraries are not a packageable entity, references to libraries with a developer name will be included in the package when asset files are packaged. These links can then be restored in the target org."
            },
            "WorkspaceImageId" : {
              "type" : "string",
              "description" : "ID of a library image. Image files can be assigned to libraries for branding and easy identification. Library image is visible to all users, even if they are not library members. This field is available in API version 43.0 and later."
            }
          }
        } ]
      },
      "ContentWorkspaceDoc" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a link between a document and a public library in Salesforce CRM Content.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentWorkspaceId" : {
              "type" : "string",
              "description" : "Read only. ID of the library."
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "Read only. ID of the library document."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsOwner" : {
              "type" : "boolean",
              "description" : "Read only. Indicates whether the library owns the document and determines permissions for that document (true) or not (false). Documents can belong to more than one library, but only one library owns the document and determines its permissions.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "ContentWorkspaceMember" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a member of a content library.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentWorkspaceId" : {
              "type" : "string",
              "description" : "ID of the library."
            },
            "ContentWorkspacePermissionId" : {
              "type" : "string",
              "description" : "The id of the library permission or role."
            },
            "MemberId" : {
              "type" : "string",
              "description" : "ID of the library member (the member is either a user or a group)."
            },
            "MemberType" : {
              "type" : "string",
              "description" : "The type of library member. Valid values are: G - Group U - User",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "ContentWorkspacePermission" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a library permission.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the library."
            },
            "Type" : {
              "type" : "string",
              "description" : "Provides the type of access a user has to a library. Valid values are: Library Administrator Author Viewer Custom",
              "readOnly" : true
            },
            "PermissionsManageWorkspace" : {
              "type" : "boolean",
              "description" : "Permission for user to perform any action in the library. This privilege is required to edit a library’s name and description, add or remove library members, or delete a library. Manage Library is a super permission which provides all other permission options listed except Deliver Content. Creating a library requires the Manage Salesforce CRM Content app permission or Create Libraries system permission."
            },
            "PermissionsAddContent" : {
              "type" : "boolean",
              "description" : "Permission for user to publish new content to the library, upload new content versions, or restore archived (deleted) content. Content authors can also change any tags associated with their content and archive or delete their own content."
            },
            "PermissionsAddContentOBO" : {
              "type" : "boolean",
              "description" : "Permission for user to choose an author when publishing content in the library."
            },
            "PermissionsArchiveContent" : {
              "type" : "boolean",
              "description" : "Permission for user to archive and restore any content in the library."
            },
            "PermissionsDeleteContent" : {
              "type" : "boolean",
              "description" : "Permission for user to delete any content in the library. Authors can undelete their own content from the Recycle Bin."
            },
            "PermissionsFeatureContent" : {
              "type" : "boolean",
              "description" : "Permission for user to identify any content in the library as “featured.”"
            },
            "PermissionsViewComments" : {
              "type" : "boolean",
              "description" : "Permission for user to view comments."
            },
            "PermissionsAddComment" : {
              "type" : "boolean",
              "description" : "Permission for user to post comments to any content in the library and view all comments in the library. Users can edit or delete their own comments."
            },
            "PermissionsModifyComments" : {
              "type" : "boolean",
              "description" : "Permission for user to edit or delete comments made to any content in the library."
            },
            "PermissionsTagContent" : {
              "type" : "boolean",
              "description" : "Permission for user to add tags when publishing content or editing content details in the library."
            },
            "PermissionsDeliverContent" : {
              "type" : "boolean",
              "description" : "Permission for user to share content outside the org via a content delivery or public link."
            },
            "PermissionsChatterSharing" : {
              "type" : "boolean",
              "description" : "Permission for user to make content from this library accessible outside of the library, sharing with a record or in Chatter. From a record or from Chatter, select a file from the library and attach it to a record or a post."
            },
            "PermissionsOrganizeFileAndFolder" : {
              "type" : "boolean",
              "description" : "Permission for user to create, rename, and delete folders in libraries."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ContentWorkspaceSubscription" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a subscription for a user following a library.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the user following the library.",
              "readOnly" : true
            },
            "ContentWorkspaceId" : {
              "type" : "string",
              "description" : "ID of the library.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Contract" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a contract (a business agreement) associated with an Account.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "description" : "Required. ID of the Account associated with this contract. Is this field supposed to be uneditable (we know it’s supposed to be undeletable) if contract is active?"
            },
            "OwnerExpirationNotice" : {
              "type" : "string",
              "description" : "Number of days ahead of the contract end date (15, 30, 45, 60, 90, and 120). Used to notify the owner in advance that the contract is ending."
            },
            "StartDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Start date for this contract. Label is Contract Start Date."
            },
            "EndDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Read-only. Calculated end date of the contract. This value is calculated by adding the ContractTerm to the StartDate.",
              "readOnly" : true
            },
            "BillingStreet" : {
              "type" : "string",
              "description" : "Street address for the billing address."
            },
            "BillingCity" : {
              "type" : "string",
              "description" : "Details for the billing address. Maximum size is 40 characters."
            },
            "BillingState" : {
              "type" : "string",
              "description" : "Details for the billing address. Maximum size is 80 characters."
            },
            "BillingPostalCode" : {
              "type" : "string",
              "description" : "Details for the billing address of this account. Maximum size is 20 characters."
            },
            "BillingCountry" : {
              "type" : "string",
              "description" : "Details for the billing address of this account. Maximum size is 80 characters."
            },
            "BillingLatitude" : {
              "type" : "number",
              "description" : "Used with BillingLongitude to specify the precise geolocation of a billing address. Acceptable values are numbers between –90 and 90 with up to 15 decimal places."
            },
            "BillingLongitude" : {
              "type" : "number",
              "description" : "Used with BillingLatitude to specify the precise geolocation of a billing address. Acceptable values are numbers between –180 and 180 with up to 15 decimal places."
            },
            "BillingGeocodeAccuracy" : {
              "type" : "string",
              "description" : "The accuracy of the geocode for the billing address."
            },
            "BillingAddress" : {
              "type" : "object",
              "description" : "The compound form of the billing address. Read-only. See Address Compound Fields for details on compound address fields.",
              "readOnly" : true
            },
            "ContractTerm" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of months that the contract is valid."
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the user who owns the contract."
            },
            "Status" : {
              "type" : "string",
              "description" : "The picklist of values that indicate order status. Each value is within one of two status categories defined in StatusCode. For example, the status picklist may contain: Ready to Ship, Shipped, Received as values within the Activated StatusCode."
            },
            "CompanySignedId" : {
              "type" : "string",
              "description" : "ID of the User who signed the contract."
            },
            "CompanySignedDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date on which the contract was signed by your organization."
            },
            "CustomerSignedId" : {
              "type" : "string",
              "description" : "ID of the Contact who signed this contract."
            },
            "CustomerSignedTitle" : {
              "type" : "string",
              "description" : "Title of the customer who signed the contract."
            },
            "CustomerSignedDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date on which the customer signed the contract."
            },
            "SpecialTerms" : {
              "type" : "string",
              "description" : "Special terms that apply to the contract."
            },
            "ActivatedById" : {
              "type" : "string",
              "description" : "ID of the User who activated this contract."
            },
            "ActivatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date and time when this contract was activated."
            },
            "StatusCode" : {
              "type" : "string",
              "description" : "The status category for the contract. A contract can be Draft, InApproval, or Activated. Label is Status Category.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the contract."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "ContractNumber" : {
              "type" : "string",
              "description" : "Number of the contract.",
              "readOnly" : true
            },
            "LastApprovedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Last date the contract was approved.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastActivityDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Value is one of the following, whichever is the most recent: Due date of the most recent event logged against the record. Due date of the most recently closed task associated with the record.",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            }
          }
        } ]
      },
      "ContractChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerExpirationNotice" : {
              "type" : "string",
              "readOnly" : true
            },
            "StartDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "EndDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "BillingStreet" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingCity" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingState" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingPostalCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingCountry" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingLatitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "BillingLongitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "BillingGeocodeAccuracy" : {
              "type" : "string",
              "readOnly" : true
            },
            "BillingAddress" : {
              "type" : "object",
              "readOnly" : true
            },
            "ContractTerm" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "CompanySignedId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CompanySignedDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "CustomerSignedId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CustomerSignedTitle" : {
              "type" : "string",
              "readOnly" : true
            },
            "CustomerSignedDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "SpecialTerms" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActivatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActivatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "StatusCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContractNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastApprovedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContractContactRole" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the role that a given Contact plays on a Contract.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContractId" : {
              "type" : "string",
              "description" : "Required. ID of the Contract."
            },
            "ContactId" : {
              "type" : "string",
              "description" : "ID of the Contact associated with this Contract."
            },
            "Role" : {
              "type" : "string",
              "description" : "Name of the role played by the Contact on this Contract, such as Decision Maker, Approver, Buyer, and so on. Must be unique—there can't be multiple records in which the ContractId, ContactId, and Role values are identical. Different contacts can play the same role on the same contract. A contact can play different roles on the same contract."
            },
            "IsPrimary" : {
              "type" : "boolean",
              "description" : "Specifies whether this Contact plays the primary role on this Contract (true) or not (false). Note that each contract has only one primary contact role. Default is false. Labels is Primary."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            }
          }
        } ]
      },
      "ContractFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContractHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ContractId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ContractStatus" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the status of a Contract, such as Draft, InApproval, Activated, Terminated, or Expired.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Master label for this contract status value. This display value is the internal label that does not get translated.",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "description" : "Uniquely identifies a picklist value so it can be retrieved without using an id or master label.",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number used to sort this value in the contract status picklist. These numbers are not guaranteed to be sequential, as some previous contract status values might have been deleted.",
              "readOnly" : true
            },
            "IsDefault" : {
              "type" : "boolean",
              "description" : "Indicates whether this is the default contract status value (true) or not (false) in the picklist.",
              "readOnly" : true
            },
            "StatusCode" : {
              "type" : "string",
              "description" : "Code indicating the status of a contract. One of the following values: Draft InApproval Activated Two other values (Terminated and Expired) are defined but are not available for use via the API.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CorsWhitelistEntry" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Cross-Origin Resource Sharing (CORS) enables web browsers to request resources from origins other than their own. For example, using CORS, JavaScript code at https://www.example.com could request a resource from https://www.salesforce.com. To access supported Salesforce APIs, Apex REST resources, and Lightning Out from JavaScript code in a web browser, add the origin serving the code to a Salesforce CORS allowlist.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the record in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. This field is automatically generated but you can supply your own value if you create the record using the API.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "Language" : {
              "type" : "string",
              "description" : "This picklist contains the following fully-supported languages: Chinese (Simplified): zh_CN Chinese (Traditional): zh_TW Danish: da Dutch: nl_NL English: en_US Finnish: fi French: fr German: de Italian: it Japanese: ja Korean: ko Norwegian: no Portuguese (Brazil): pt_BR Russian: ru Spanish: es Spanish (Mexico): es_MX Spanish (Mexico) defaults to Spanish for customer-defined translations. Swedish: sv Thai: th The Salesforce user interface is fully translated to Thai, but Help is in English."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Primary label for the CORS allowlist entry."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "For managed packages, this field is the namespace prefix assigned to the package. For unmanaged packages, this field is blank.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UrlPattern" : {
              "type" : "string",
              "description" : "The origin URL pattern must include the HTTPS protocol (unless you’re using your localhost) and a domain name, and can include a port. The wildcard character (*) is supported and must be in front of a second-level domain name. For example, https://*.example.com adds all subdomains of example.com to the allowlist."
            }
          }
        } ]
      },
      "CredentialStuffingEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "AcceptLanguage" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginType" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserAgent" : {
              "type" : "string",
              "readOnly" : true
            },
            "Score" : {
              "type" : "number",
              "readOnly" : true
            },
            "Summary" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CredentialStuffingEventStore" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CredentialStuffingEventNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "AcceptLanguage" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginType" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "Score" : {
              "type" : "number",
              "readOnly" : true
            },
            "Summary" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserAgent" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CredentialStuffingEventStoreFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CronJobDetail" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Contains details about the associated scheduled job, such as the job’s name and type.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the associated scheduled job.",
              "readOnly" : true
            },
            "JobType" : {
              "type" : "string",
              "description" : "The type of the associated scheduled job. The following are the available job types. Each job type label is listed with its value in parenthesis. Use the job type value when querying for a specific job type. 1—Data Export 3—Dashboard Refresh 4—Reporting Snapshot 6—Scheduled Flow 7—Scheduled Apex 8—Report Run 9—Batch Job A—Reporting Notification",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CronTrigger" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Contains schedule information for a scheduled job. CronTrigger is similar to a cron job on UNIX systems. This object is available in API version 17.0 and later.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CronJobDetailId" : {
              "type" : "string",
              "description" : "The ID of the CronJobDetail record containing more details about this scheduled job.",
              "readOnly" : true
            },
            "NextFireTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The next date and time the job is scheduled to run. null if the job is not scheduled to run again.",
              "readOnly" : true
            },
            "PreviousFireTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The most recent date and time the job ran. null if the job has not run before current local time.",
              "readOnly" : true
            },
            "State" : {
              "type" : "string",
              "description" : "The current state of the job. The job state is managed by the system. Possible values are: WAITING—The job is waiting for execution. ACQUIRED—The job has been picked up by the system and is about to execute. EXECUTING—The job is executing. COMPLETE—The trigger has fired and is not scheduled to fire again. ERROR—The trigger definition has an error. DELETED—The job has been deleted. PAUSED—A job can have this state during patch and major releases. After the release has finished, the job state is automatically set to WAITING or another state. BLOCKED—Execution of a second instance of the job is attempted while one instance is running. This state lasts until the first job instance is completed. PAUSED_BLOCKED—A job has this state due to a release occurring. When the release has finished and no other instance of the job is running, the job’s status is set to another state.",
              "readOnly" : true
            },
            "StartTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the most recent iteration of the scheduled job started.",
              "readOnly" : true
            },
            "EndTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the job either finished or will finish.",
              "readOnly" : true
            },
            "CronExpression" : {
              "type" : "string",
              "description" : "The cron expression used to initiate the schedule.",
              "readOnly" : true
            },
            "TimeZoneSidKey" : {
              "type" : "string",
              "description" : "Returns the timezone ID. For example, America/Los_Angeles.",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "Owner of the job.",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "TimesTriggered" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of times this job has been triggered.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CspTrustedSite" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a CSP Trusted Site. The Lightning Component framework uses Content Security Policy (CSP) to impose restrictions on content. The main objective is to help prevent cross-site scripting (XSS) and other code injection attacks. To use third-party APIs that make requests to an external (non-Salesforce) server or to use a WebSocket connection, add a CSP Trusted Site.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The developer name of the trusted site."
            },
            "Language" : {
              "type" : "string",
              "description" : "The language for the trusted site."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Master label for this trusted site."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "Namespace prefix for this trusted site.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EndpointUrl" : {
              "type" : "string",
              "description" : "The URL for the trusted site."
            },
            "Description" : {
              "type" : "string",
              "description" : "The description of the trusted site. Limit: 255 characters."
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the trusted site is active."
            },
            "Context" : {
              "type" : "string",
              "description" : "Declares the scope of trust for the listed third-party host."
            },
            "IsApplicableToConnectSrc" : {
              "type" : "boolean",
              "description" : "Indicates if Lightning components can load URLs using script interfaces from this site."
            },
            "IsApplicableToFrameSrc" : {
              "type" : "boolean",
              "description" : "Indicates if Lightning components can load resources contained in <iframe> elements from this site."
            },
            "IsApplicableToImgSrc" : {
              "type" : "boolean",
              "description" : "Indicates if Lightning components can load images from this site."
            },
            "IsApplicableToStyleSrc" : {
              "type" : "boolean",
              "description" : "Indicates if Lightning components can load style sheets from this site."
            },
            "IsApplicableToFontSrc" : {
              "type" : "boolean",
              "description" : "Indicates if Lightning components can load fonts from this site."
            },
            "IsApplicableToMediaSrc" : {
              "type" : "boolean",
              "description" : "Indicates if Lightning components can load audio and video from this site."
            },
            "CanAccessCamera" : {
              "type" : "boolean"
            },
            "CanAccessMicrophone" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "CustomBrand" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a custom branding and color scheme.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The ID of the parent entity that this branding applies to. The parent entity can be an Experience Cloud site, organization, topic, or reputation level. The branding applies to the entity that the ParentId references. For example, if the ParentId references a network ID, the branding applies to that Experience Cloud site only, and if the ParentId references an organization ID, the branding applies to the organization that it is accessed through, and so on. Label is Branded Entity ID."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "CustomBrandAsset" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a branding element in a custom branding scheme. For example, a color, logo image, header image, or footer text.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CustomBrandId" : {
              "type" : "string",
              "description" : "ID of the associated ."
            },
            "AssetCategory" : {
              "type" : "string",
              "description" : "Values include: MotifZeronaryColor—The background color for the header. Label is Zeronary motif color. If this CustomBrandAsset is for a network, this is the header color for the network. If it is for an org, this is the header color when users access the Salesforce mobile app. MotifPrimaryColor—The color used for the active tab. Label is Primary motif color. Not used for the Salesforce mobile app branding. MotifSecondaryColor—The color used for the top borders of lists and tables. Label is Secondary motif color.Not used for the Salesforce mobile app branding. MotifTertiaryColor—The background color for section headers on edit and detail pages. Label is Tertiary motif color.Not used for the Salesforce mobile app branding. MotifQuaternaryColor—If this CustomBrandAsset is for a network, this is the background color for network pages. If it is for an org, this is the background color on a splash page. Label is Quaternary motif color. MotifZeronaryComplementColor—Font color used with zeronaryColor. Label is Zeronary motif colors complement color. MotifPrimaryComplementColor—Font color used with primaryColor. Label is Primary motif colors complement color.Not used for the Salesforce mobile app branding. MotifTertiaryComplementColor—Font color used with tertiaryColor. Label is Tertiary motif colors complement color.Not used for the Salesforce mobile app branding. MotifQuaternaryComplementColor—Font color used with quaternaryColor. Label is Quaternary motif colors complement color.Not used for the Salesforce mobile app branding. PageHeader—An image that appears on the header of the pages. Can be an .html, .gif, .jpg, or .png file. Label is Page Header.Not used for the Salesforce mobile app branding. PageFooter—An image that appears on the footer of the pages. Must be an .html file. Label is Page Footer.Not used for the Salesforce mobile app branding. LoginFooterText—The text that appears in the footer of the login page. Label is Footer text displayed on the login page.Not used for the Salesforce mobile app branding. LoginLogoImageId—The logo that appears on the login page for external users. In the Salesforce mobile app, this logo also appears on the Experience Cloud site splash page. Label is Logo image displayed on the login page. LargeLogoImageId—Only used for the Salesforce mobile app. The logo that appears on the splash page when you start the Salesforce mobile app. Label is Large logo image. SmallLogoImageId—Only used for the Salesforce mobile app. The logo that appears on the publisher in the Salesforce mobile app. Label is Small logo image. StaticLogoImageURL—The logo that appears on the login page for external users. Label is Static logo image url. LoginQuaternaryColor—The background color that appears on the Experience Cloud site login page for external users. Label is Login background color. LoginRightFrameUrl—The URL to the contents that appears on right side of the Experience Cloud site login page for external users. Label is Login right frame url. LogoAssetId—Navigation tile menu item images. Label is Logo asset image. LoginPrimaryColor—The background color of the login button. Label is Login primary color. LoginBackgroundImageUrl—The path to the image URL that appears as the background on the Experience Cloud site’s login page. Label is Background image url. LargeLogoAssetId—Navigational topic images. Label is Large logo asset image. MediumLogoAssetId—Featured topic images. Label is Medium logo asset image."
            },
            "TextAsset" : {
              "type" : "string",
              "description" : "Text used if the AssetCategory is LoginFooterText."
            },
            "AssetSourceId" : {
              "type" : "string",
              "description" : "ID of the document uploaded to the Documents folder if the value of AssetCategory is: PageHeader PageFooter LoginLogoImageId LargeLogoImageId SmallLogoImageId ID of the content asset if the value of the AssetCategory is: LogoAssetId LargeLogoAssetId MediumLogoAssetId"
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "CustomHelpMenuItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the items within a section of the Lightning Experience help menu that the admin added to display custom, org-specific help resources.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The ID of the custom help section the item belongs to."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Required. The name of the resource. Specify up to 100 characters."
            },
            "LinkUrl" : {
              "type" : "string",
              "description" : "Required. The URL for the resource. Specify up to 1,000 characters."
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Required. The order of the item within the custom section. Valid values are 1 through 15."
            }
          }
        } ]
      },
      "CustomHelpMenuSection" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a section of the Lightning Experience help menu that the admin added to display custom, org-specific help resources.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the custom help section in the API. This name can contain only underscores and alphanumeric characters and must be unique in your organization. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. The label corresponds to section title in the user interface. Limit: 80 characters.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "Language" : {
              "type" : "string",
              "description" : "Required. Language of the label. Possible values are: da (Danish) de (German) en_US (English) es (Spanish) es_MX (Spanish (Mexico)) fi (Finnish) fr (French) it (Italian) ja (Japanese) ko (Korean) nl_NL (Dutch) no (Norwegian) pt_BR (Portuguese (Brazil)) ru (Russian) sv (Swedish) th (Thai) zh_CN (Chinese (Simplified)) zh_TW (Chinese (Traditional))"
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Required. The name of the resource. Specify up to 100 characters."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "CustomHttpHeader" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a custom HTTP header that provides context information from Salesforce such as region, org details, or the role of the person viewing the external object.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the entity that the custom HTTP header is related to.",
              "readOnly" : true
            },
            "HeaderFieldName" : {
              "type" : "string",
              "description" : "Name of the header field. The name must contain at least one alphanumeric character or underscore. It can also include: ! # $ % & ' * + - . ^ _ ` | ~",
              "readOnly" : true
            },
            "HeaderFieldValue" : {
              "type" : "string",
              "description" : "A formula that resolves to the value for the header. The values in the formula must evaluate to a string. If the formula resolves to null and an empty string, the header isn’t sent.",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the custom HTTP header is available to use.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "A text description of the header field’s purpose.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CustomNotificationType" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Stores information about custom notification types.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "Specifies the API name of the notification type."
            },
            "Language" : {
              "type" : "string",
              "description" : "Specifies the language of the custom notification type. The value for this field is the language value of the org."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Specifies the notification type label."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "Specifies the namespace of the notification type, if installed with a managed package.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CustomNotifTypeName" : {
              "type" : "string",
              "description" : "Specifies a notification type name. The notification type name is unique within your organization. Maximum number of characters: 80."
            },
            "Description" : {
              "type" : "string",
              "description" : "Specifies a general description of the notification type, which is displayed with the notification type name. Maximum number of characters: 255."
            },
            "Desktop" : {
              "type" : "boolean",
              "description" : "Indicates whether the desktop delivery channel is enabled (true) or not (false). The default is false."
            },
            "Mobile" : {
              "type" : "boolean",
              "description" : "Indicates whether the mobile delivery channels is enabled (true) or not (false). The default is false."
            },
            "IsSlack" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "CustomPermission" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a permission created to control access to a custom process or app, such as sending email.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the custom permission in the API. This name can contain only underscores and alphanumeric characters and must be unique in your organization. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. The label corresponds to Name in the user interface. Limit: 80 characters.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record.",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "description" : "The language of the custom permission. Valid values are:Chinese (Simplified): zh_CN Chinese (Traditional): zh_TW Danish: da Dutch: nl_NL English: en_US Finnish: fi French: fr German: de Italian: it Japanese: ja Korean: ko Norwegian: no Portuguese (Brazil): pt_BR Russian: ru Spanish: es Spanish (Mexico): es_MX Spanish (Mexico) defaults to Spanish for customer-defined translations. Swedish: sv Thai: th The Salesforce user interface is fully translated to Thai, but Help is in English.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The custom permission label, which corresponds to Label in the user interface. Limit: 80 characters.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsProtected" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "A description of the custom permission. Limit: 255 characters.",
              "readOnly" : true
            },
            "ConnectedAppId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalClientApplicationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsLicensed" : {
              "type" : "boolean",
              "description" : "When enabled (true) indicates that the appropriate Salesforce license is required before accessing the permission. This field is available in API version 50.0 and later.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "CustomPermissionDependency" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the dependency between two custom permissions when one custom permission requires that you enable another custom permission.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CustomPermissionId" : {
              "type" : "string",
              "description" : "The ID of the custom permission that requires the permission that’s specified in RequiredCustomPermissionId.",
              "readOnly" : true
            },
            "RequiredCustomPermissionId" : {
              "type" : "string",
              "description" : "The ID of the custom permission that must be enabled when CustomPermissionId is enabled.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Customer" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PartyId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "CustomerShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "Dashboard" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a dashboard, which shows data from custom reports as visual components. Access is read-only.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FolderId" : {
              "type" : "string",
              "description" : "Required. Returns the ID of the Folder that contains the dashboard. See Folder.",
              "readOnly" : true
            },
            "FolderName" : {
              "type" : "string",
              "description" : "Name of the folder that contains the dashboard. Available in API version 35.0 and later.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "Returns the title of the dashboard. Limit: 80 characters.",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "Required. The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization. Label is Dashboard Unique Name.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Returns the description of the dashboard. Limit: 255 characters.",
              "readOnly" : true
            },
            "LeftSize" : {
              "type" : "string",
              "description" : "Returns the size of the left column of the dashboard. Available values are: Narrow Medium Wide",
              "readOnly" : true
            },
            "MiddleSize" : {
              "type" : "string",
              "description" : "Returns the size of the middle column of the dashboard. Available values are: Narrow Medium Wide",
              "readOnly" : true
            },
            "RightSize" : {
              "type" : "string",
              "description" : "Returns the size of the right column in the dashboard. Available values are: Narrow Medium Wide",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RunningUserId" : {
              "type" : "string",
              "description" : "Returns the ID of the running user specified for the dashboard. If the dashboard was created in Lightning Experience and is configured to run as the viewing user, returns the user ID of the dashboard creator. If the dashboard was created in Salesforce Classic and is configured to run as the logged-in user, returns the user ID of the last specified running user.",
              "readOnly" : true
            },
            "TitleColor" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Returns the title text color in hexadecimal. Label is Title Color.",
              "readOnly" : true
            },
            "TitleSize" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Returns the title font size in points. Label is Title Size.",
              "readOnly" : true
            },
            "TextColor" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Returns the body text color in hexadecimal. Label is Text Color.",
              "readOnly" : true
            },
            "BackgroundStart" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Returns the starting fade color in hexadecimal. Label is Starting Color.",
              "readOnly" : true
            },
            "BackgroundEnd" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Returns the ending fade color in hexadecimal. Label is Ending Color.",
              "readOnly" : true
            },
            "BackgroundDirection" : {
              "type" : "string",
              "description" : "Returns the direction of the background fade. Available values are: Top to Bottom Left to Right Diagonal (default value)",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "Returns the dashboard type. Available values are: SpecificUser—The dashboard displays data according to the access level of one specific running user. LoggedInUser—The dashboard displays data according to the access level of the logged-in user. MyTeamUser—The dashboard displays data according to the access level of the logged-in user, and managers can view dashboards from the point of view of users beneath them in the role hierarchy.",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            },
            "DashboardResultRefreshedDate" : {
              "type" : "string",
              "readOnly" : true
            },
            "DashboardResultRunningUser" : {
              "type" : "string",
              "readOnly" : true
            },
            "ColorPalette" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChartTheme" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DashboardComponent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a dashboard component, which can be a chart, metric, table, or gauge on a dashboard. Access is read-only.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the dashboard component.",
              "readOnly" : true
            },
            "DashboardId" : {
              "type" : "string",
              "description" : "The ID of the dashboard that contains the dashboard component. See .",
              "readOnly" : true
            },
            "CustomReportId" : {
              "type" : "string",
              "description" : "Requires the user permission \"Manage All Private Reports and Dashboards.\" The ID of the report that provides data for the dashboard component. See .",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DashboardComponentFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DashboardFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DataAssessmentFieldMetric" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents summary statistics for matched, blank, and differing fields in account records of an org compared to records in Data.com.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "An optional field used to name your record.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "DataAssessmentMetricId" : {
              "type" : "string",
              "description" : "A unique number that identifies the parent DataAssessmentMetric record.",
              "readOnly" : true
            },
            "FieldName" : {
              "type" : "string",
              "description" : "The name of the assessed field.",
              "readOnly" : true
            },
            "NumMatchedInSync" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of matched records that have the same value for this field.",
              "readOnly" : true
            },
            "NumMatchedDifferent" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of matched records that have a different value for this field.",
              "readOnly" : true
            },
            "NumMatchedBlanks" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of matched records that contain blank fields.",
              "readOnly" : true
            },
            "NumUnmatchedBlanks" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of unmatched records that contain blank fields.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DataAssessmentMetric" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a summary of statistics for fields matched and unmatched in your account records with Data.com account records.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "An optional field used to name your record.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "NumTotal" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of records available for data assessment processing.",
              "readOnly" : true
            },
            "NumProcessed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of records processed in the data assessment.",
              "readOnly" : true
            },
            "NumMatched" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of matched records.",
              "readOnly" : true
            },
            "NumMatchedDifferent" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of records in your org matched with a Data.com record that have different fields.",
              "readOnly" : true
            },
            "NumUnmatched" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of records not matched.",
              "readOnly" : true
            },
            "NumDuplicates" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of duplicate records.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DataAssessmentValueMetric" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Summarizes the number of fields matched for your account records with Data.com account records.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "An optional field used to name your record.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "DataAssessmentFieldMetricId" : {
              "type" : "string",
              "description" : "A unique number that identifies the parent DataAssessementFieldMetric record.",
              "readOnly" : true
            },
            "FieldValue" : {
              "type" : "string",
              "description" : "The value in the matched field.",
              "readOnly" : true
            },
            "ValueCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of times this value appears in this field.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DataObjectDataChgEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventType" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventSchemaVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventCreationDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventPublishDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SourceObjectDeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActionDeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventPrompt" : {
              "type" : "string",
              "readOnly" : true
            },
            "PayloadPrevValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "PayloadCurrentValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "PayloadSchema" : {
              "type" : "string",
              "readOnly" : true
            },
            "Offset" : {
              "type" : "string",
              "readOnly" : true
            },
            "PayloadMetadata" : {
              "type" : "string",
              "readOnly" : true
            },
            "TraceIdValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "TriggerEntity" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProfileIdValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DataStatistics" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string",
              "readOnly" : true
            },
            "StatType" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "StatValue" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DataType" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsComplex" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ContextServiceDataTypeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContextWsdlDataTypeId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DataUseLegalBasis" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the legal basis for contacting a customer, such as billing or contract.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the owner of the account associated with this customer."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Specifies a name for the legal basis. For example, “billing” or “contract”."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "Source" : {
              "type" : "string",
              "description" : "Indicates the source of the legal basis. For example, the URL of a contract."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the data use legal basis."
            }
          }
        } ]
      },
      "DataUseLegalBasisChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Source" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DataUseLegalBasisHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DataUseLegalBasisId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DataUseLegalBasisShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "DataUsePurpose" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the reason for contacting a prospect or customer, such as for billing, marketing, or surveys",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the owner of the account associated with this customer."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Identifies the reason for contacting a customer. For example, billing or marketing."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "LegalBasisId" : {
              "type" : "string",
              "description" : "Identifies the legal basis record associated with the data use purpose."
            },
            "Description" : {
              "type" : "string",
              "description" : "Indicates the purpose for contacting a customer."
            },
            "CanDataSubjectOptOut" : {
              "type" : "boolean",
              "description" : "Required. Indicates whether the customer can decline contact for the described purpose."
            }
          }
        } ]
      },
      "DataUsePurposeChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LegalBasisId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "CanDataSubjectOptOut" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DataUsePurposeHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DataUsePurposeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DataUsePurposeShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "DataWeaveResource" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsProtected" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ContentType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "readOnly" : true
            },
            "BodyLength" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "IsGlobal" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DatacloudAddress" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a set of read-only fields used to return geolocation information to enhance your company and account records in Salesforce. This object is accessible only from the Data.com suite of products.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AddressLine1" : {
              "type" : "string",
              "description" : "A standard postal address.",
              "readOnly" : true
            },
            "AddressLine2" : {
              "type" : "string",
              "description" : "Additional information for a standard postal address, such as apartment number or suite number.",
              "readOnly" : true
            },
            "City" : {
              "type" : "string",
              "description" : "The name of the city where the address is located.",
              "readOnly" : true
            },
            "State" : {
              "type" : "string",
              "description" : "A name or abbreviation for a state or province in the address.",
              "readOnly" : true
            },
            "Country" : {
              "type" : "string",
              "description" : "The name of the country where the address is located.",
              "readOnly" : true
            },
            "PostalCode" : {
              "type" : "string",
              "description" : "Standard postal code for the address.",
              "readOnly" : true
            },
            "Latitude" : {
              "type" : "string",
              "description" : "The distance, measured in degrees, north or south of the equator.",
              "readOnly" : true
            },
            "Longitude" : {
              "type" : "string",
              "description" : "The distance, measured in degrees, east or west of the prime meridian.",
              "readOnly" : true
            },
            "GeoAccuracyCode" : {
              "type" : "string",
              "description" : "Address Single close or exact match with the address, or an address that shares the house number. Near address Single match point with a calculated possible address along the street segment of the address. Block Single close match with a street address centered on a block. Street Single close match with an address at the center of the street segment. Extended Zip Single close match with the address centered in the extended postal code. A more specific location within a ZIP code. Zip Single close match with the address centered in the postal code. Locality The center of a village, suburb, neighborhood, or another locally recognized geographic boundary where the address is located. City The center of the city where the address is located. County The largest administrative division of most states in the United States where the address is located. State A geographical and political boundary that is part of the United States where the address is located. California is a state in the United States. Unknown The address could not be found.",
              "readOnly" : true
            },
            "GeoAccuracyNum" : {
              "type" : "string",
              "description" : "A value for the accuracy of the address. Geo Accuracy Code Geo Accuracy Number Address 100 Near address 90 Block 80 Street 70 Extended Zip 60 Zip 50 Locality 40 City 30 County 20 State 10 Unknown 0",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DeclinedEventRelation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents event participants (invitees or attendees) with the status Declined for a given event.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelationId" : {
              "type" : "string",
              "description" : "Indicates the ID of the invitee.",
              "readOnly" : true
            },
            "EventId" : {
              "type" : "string",
              "description" : "Indicates the ID of the event.",
              "readOnly" : true
            },
            "RespondedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Indicates the most recent date and time when the invitee declined an invitation to the event.",
              "readOnly" : true
            },
            "Response" : {
              "type" : "string",
              "description" : "Indicates the content of the response field. Label is Comment.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "Indicates whether the invitee is a user, lead or contact, or resource.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DeleteEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a record that has been soft deleted.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Record" : {
              "type" : "string",
              "description" : "The ID of the record that was deleted.",
              "readOnly" : true
            },
            "RecordName" : {
              "type" : "string",
              "description" : "The name of the record that was deleted.",
              "readOnly" : true
            },
            "DeletedById" : {
              "type" : "string",
              "description" : "The ID of the user who deleted the record.",
              "readOnly" : true
            },
            "DeletedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the record was deleted.",
              "readOnly" : true
            },
            "SobjectName" : {
              "type" : "string",
              "description" : "The type of record that was deleted, for example, Account.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Document" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a file that a user has uploaded. Unlike Attachment records, documents are not attached to a parent object.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "FolderId" : {
              "type" : "string",
              "description" : "Required. ID of the Folder that contains the document."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of the document. Label is Document Name."
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization. Label is Document Unique Name.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentType" : {
              "type" : "string",
              "description" : "Type of content. Label is Mime Type. Limit: 120 characters. If the Don't allow HTML uploads as attachments or document records security setting is enabled for your organization, you cannot upload files with the following file extensions: .htm, .html, .htt, .htx, .mhtm, .mhtml, .shtm, .shtml, .acgi, .svg."
            },
            "Type" : {
              "type" : "string",
              "description" : "File type of the Document. In general, the values match the file extension for the type of Document (such as pdf or jpg). Label is File Extension."
            },
            "IsPublic" : {
              "type" : "boolean",
              "description" : "Indicates whether the object is available for external use (true) or not (false). Label is Externally Available."
            },
            "BodyLength" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Size of the file (in bytes).",
              "readOnly" : true
            },
            "Body" : {
              "type" : "object",
              "description" : "Required. Encoded file data. If specified, then do not specify a URL."
            },
            "Url" : {
              "type" : "string",
              "description" : "URL reference to the file (instead of storing it in the database). If specified, do not specify the Body or BodyLength."
            },
            "Description" : {
              "type" : "string",
              "description" : "Text description of the Document. Limit: 255 characters."
            },
            "Keywords" : {
              "type" : "string",
              "description" : "Keywords. Limit: 255 characters."
            },
            "IsInternalUseOnly" : {
              "type" : "boolean",
              "description" : "Indicates whether the object is only available for internal use (true) or not (false). Label is Internal Use Only."
            },
            "AuthorId" : {
              "type" : "string",
              "description" : "ID of the User who is responsible for the Document."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsBodySearchable" : {
              "type" : "boolean",
              "description" : "Indicates whether the contents of the object can be searched using a SOSL FIND call. The ALL FIELDS search group includes the content as a searchable field.",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, this record might only have been referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            }
          }
        } ]
      },
      "DocumentAttachmentMap" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Maps the relationship between an EmailTemplate and its attachment, which is stored as a Document.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the EmailTemplate parent. The attachment identified by DocumentId is attached to the EmailTemplate specified in this field."
            },
            "DocumentId" : {
              "type" : "string",
              "description" : "ID of the document that this object tracks."
            },
            "DocumentSequence" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Represents the order that the attachments will be included in the email defined by the EmailTemplate specified by the DocumentId. Label is Attachment Sequence. The first attachment is given a value of 0, and each subsequent attachment is given a value incremented by 1."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "Domain" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Read-only object that represents a custom Web address assigned to a site in your organization.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DomainType" : {
              "type" : "string",
              "description" : "The global namespace that this custom Web address belongs to. This value is set to DNS for custom Web addresses in the global DNS. DomainType can have the following value: DNS—Domain Name System (DNS)",
              "readOnly" : true
            },
            "Domain" : {
              "type" : "string",
              "description" : "The branded custom Web address within the global namespace identified by this domain's type. In the Domain Name System (DNS) global namespace, this field is the custom Web address that you registered with a third-party domain name registrar. The custom Web address can be used to access the site of this domain.",
              "readOnly" : true
            },
            "OptionsHstsPreload" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CnameTarget" : {
              "type" : "string",
              "description" : "The canonical name (CNAME) of the external host or server. If you use a custom domain with a non-Salesforce provider, such as your own external server or CDN provider, to serve your domain, this field points to the CNAME of the external provider. This field is available in API version 43.0 and later.",
              "readOnly" : true
            },
            "HttpsOption" : {
              "type" : "string",
              "description" : "Current HTTPS option. Values may include: CdnPartner—Content Delivery Network (CDN) partner of Salesforce Community—Experience Cloud site Force.com Subdomain CommunityAlt—Experience Cloud site My Domain ExternalHttps—Domain is served by an external host NoHttps—No HTTPS OrgDomain—My Domain Sites—Salesforce Sites Subdomain SitesAlt—Salesforce Sites My Domain SitesRuntime—Salesforce Cloud This field is available in API version 47.0 and higher.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DomainSite" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Read-only junction object that joins together the Site and Domain objects.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DomainId" : {
              "type" : "string",
              "description" : "The ID of the associated Domain.",
              "readOnly" : true
            },
            "SiteId" : {
              "type" : "string",
              "description" : "The ID of the associated Site.",
              "readOnly" : true
            },
            "PathPrefix" : {
              "type" : "string",
              "description" : "Shows where a site’s root exists on a domain. Can only be set for custom Web addresses. Always begins with a /.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "DuplicateRecordItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an individual record that’s part of a duplicate record set. Use this object to create custom report types.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The autogenerated name that’s given to the Duplicate Record Item. Label is Duplicate Record Item Name.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "DuplicateRecordSetId" : {
              "type" : "string",
              "description" : "The duplicate record set that the duplicate record item is assigned to."
            },
            "RecordId" : {
              "type" : "string",
              "description" : "The name of the record as it appears on the record’s detail page."
            }
          }
        } ]
      },
      "DuplicateRecordSet" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a group of records that have been identified as duplicates. Each duplicate record set contains one or more duplicate record items. Use this object to create custom report types and view the results of duplicate jobs.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The autogenerated name that’s given to the duplicate record set. Label is Duplicate Record Set Name.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            },
            "DuplicateRuleId" : {
              "type" : "string",
              "description" : "The duplicate rule used to identify this list of duplicate records."
            },
            "RecordCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of record items in the set.",
              "readOnly" : true
            }
          }
        } ]
      },
      "DuplicateRule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a duplicate rule for detecting duplicate records.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SobjectType" : {
              "type" : "string",
              "description" : "The type of object the duplicate rule is defined for. For example, account, contact, or lead.",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The developer name for the duplicate rule.",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "description" : "The language for the duplicate rule.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The label for the duplicate rule.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether a duplicate rule is active (true) or not (false). This field is read only.",
              "readOnly" : true
            },
            "SobjectSubtype" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EmailBounceEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "BouncedAddress" : {
              "type" : "string"
            },
            "ErrorMessage" : {
              "type" : "string"
            },
            "SenderAddress" : {
              "type" : "string"
            },
            "Classification" : {
              "type" : "string"
            },
            "BouncedObjectId" : {
              "type" : "string"
            },
            "BounceDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "ShouldGenerateDsn" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "EmailCapture" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ToPattern" : {
              "type" : "string"
            },
            "FromPattern" : {
              "type" : "string"
            },
            "Sender" : {
              "type" : "string",
              "readOnly" : true
            },
            "Recipient" : {
              "type" : "string",
              "readOnly" : true
            },
            "CaptureDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RawMessageLength" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RawMessage" : {
              "type" : "object",
              "readOnly" : true
            }
          }
        } ]
      },
      "EmailDomainFilter" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a filter that determines whether an email relay is restricted to a specific list of domains.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PriorityNumber" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the order in which the email domain filter is processed. Filters are evaluated in ascending order. The priority number must be unique. If this field is left blank, it is assigned the next available number and is processed last. Processing stops after the first matching filter is applied."
            },
            "EmailRelayId" : {
              "type" : "string",
              "description" : "The ID of the EmailRelay record."
            },
            "ToDomain" : {
              "type" : "string",
              "description" : "Restricts the email relay to send emails based on the recipient domains (ToDomain) listed in this field. This field is optional, accepts a list of comma-separated values, and supports the wildcard character."
            },
            "FromDomain" : {
              "type" : "string",
              "description" : "Restricts the email relay to send emails based on the sender domains (FromDomain) listed in this field. This field is optional, accepts a list of comma-separated values, and supports the wildcard character."
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the email domain filter is active (true) or not (false). Use this field to enable or disable the email domain filter."
            }
          }
        } ]
      },
      "EmailDomainKey" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a domain key for an organization’s domain, used to authenticate outbound email that Salesforce sends on the organization’s behalf.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Selector" : {
              "type" : "string",
              "description" : "Text used to distinguish the DKIM key from any other DKIM keys your organization uses for the specified domain."
            },
            "Domain" : {
              "type" : "string",
              "description" : "The organization’s domain name that the DKIM key is generated for."
            },
            "DomainMatch" : {
              "type" : "string",
              "description" : "The specificity of match required on the sending domain name before signing with this DKIM key. Valid values are: DomainOnly—Sign if sending domain matches at the domain level only (example.com but not mail.example.com) SubdomainsOnly—Sign if sending domain matches at the subdomain level only (mail.example.com but not example.com) DomainAndSubdomains—Sign if sending domain matches at the domain and subdomain levels (example.com and mail.example.com)"
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether this DKIM key is active (true) or not (false)."
            },
            "AlternateSelector" : {
              "type" : "string",
              "description" : "The text used to distinguish the DKIM key from any other DKIM keys your organization uses for the specified domain. This field is available in API version 44.0 and later after activating the Critical Update."
            },
            "TxtRecordName" : {
              "type" : "string",
              "description" : "Read-only. The TXT record name is used to create the CNAME record. Refer to the Usage section for more information. This field is available in API version 44.0 and later after activating the Critical Update.",
              "readOnly" : true
            },
            "AlternateTxtRecordName" : {
              "type" : "string",
              "description" : "The alternate TXT record name is used to create the CNAME record. Refer to the Usage section for more information. This field is available in API version 44.0 and later after activating the Critical Update.",
              "readOnly" : true
            },
            "TxtRecordsPublishState" : {
              "type" : "string",
              "description" : "The possible values are: Published Publishing in progress Publishing failed This field is available in API version 44.0 and later after activating the Critical Update.",
              "readOnly" : true
            },
            "KeySize" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the RSA key size, in bits. The possible values are: 1024 2048 This field is available in API version 45.0 and later."
            },
            "PublicKey" : {
              "type" : "string",
              "description" : "Part of the domain key pair that mail recipients retrieve to decrypt the DKIM header and verify your domain. Add the PublicKey value to your domain’s DNS records before you start signing with this domain key."
            },
            "AlternatePublicKey" : {
              "type" : "string",
              "description" : "Read-only. Alternate public keys are used by Salesforce to auto-rotate domain keys. This field is available in API version 44.0 and later after activating the Critical Update.",
              "readOnly" : true
            },
            "DomainMatchPattern" : {
              "type" : "string"
            },
            "PlatformType" : {
              "type" : "string"
            },
            "ThirdSelector" : {
              "type" : "string"
            },
            "ThirdTxtRecordName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "StatusMessage" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "EmailMessage" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an email in Salesforce.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the case that’s associated with the email."
            },
            "ActivityId" : {
              "type" : "string",
              "description" : "ID of the activity that is associated with the email. Usually represents an open task that is created for the case owner when a new unread email message is received. ActivityId can only be specified for emails on cases. It’s auto-created for other entities."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "TextBody" : {
              "type" : "string",
              "description" : "The body of the email, in plain text format. If TextBody is not set, then it is extracted from HtmlBody."
            },
            "HtmlBody" : {
              "type" : "string",
              "description" : "The body of the email in HTML format."
            },
            "Headers" : {
              "type" : "string",
              "description" : "The Internet message headers of the incoming email. Used for debugging and tracing purposes. Does not apply to outgoing emails."
            },
            "Subject" : {
              "type" : "string",
              "description" : "The subject line of the email."
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "FromName" : {
              "type" : "string",
              "description" : "The sender’s name. When using this field, specify an email address that exists in EmailMessageRelation, with a RelationType of FromAddress."
            },
            "FromAddress" : {
              "type" : "string",
              "description" : "The address that originated the email. When using this field, specify an email address that exists in EmailMessageRelation, with a RelationType of FromAddress."
            },
            "ValidatedFromAddress" : {
              "type" : "string",
              "description" : "A picklist value with either the sender's address, validated org-wide email addresses that originated the email, or Email-to-Case Routing Address.ValidatedFromAddress isn’t suitable for use in Group By or Sort By statements. Use FromAddressinstead."
            },
            "ToAddress" : {
              "type" : "string",
              "description" : "A string array of email addresses for recipients who were sent the email message. Include only email addresses that are not associated with Contact, Lead, or User records in Salesforce. If the recipient is a contact, lead, or user, add their ID to the ToIds field instead of adding their email address to the ToAddress field. Then the email message is automatically associated with the contact, lead, or user."
            },
            "CcAddress" : {
              "type" : "string",
              "description" : "A string array of email addresses for recipients who were sent a carbon copy of the email message. Include only email addresses that are not associated with Contact, Lead, or User records in Salesforce. If the recipient is a contact, lead, or user, add their ID to the CcIds field instead of adding their email address to the CcAddress field. Then the email message is automatically associated with the contact, lead, or user."
            },
            "BccAddress" : {
              "type" : "string",
              "description" : "A string array of email addresses for recipients who were sent a blind carbon copy of the email message. Include only email addresses that are not associated with Contact, Lead, or User records in Salesforce. If the recipient is a contact, lead, or user, add their ID to the BccIds field instead of adding their email address to the BccAddress field. When adding their ID, the email message is automatically associated with the contact, lead, or user. For an Experience Cloud site user who is not the sender of the email, this field returns null."
            },
            "Incoming" : {
              "type" : "boolean",
              "description" : "Indicates whether the email was received (true) or sent (false)."
            },
            "HasAttachment" : {
              "type" : "boolean",
              "description" : "Indicates whether the email was sent with an attachment (true) or not (false).",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the email. The Status field is mostly read-only. You can change the status only from New to Read.Possible values are: 0 (New) 1 (Read) 2 (Replied) 3 (Sent) 4 (Forwarded) 5 (Draft)"
            },
            "MessageDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date the email was created."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "ReplyToEmailMessageId" : {
              "type" : "string",
              "description" : "ID of the inbound or outbound email message the current email message is a reply to. It’s not possible to reply to a message whose Status is Draft."
            },
            "IsExternallyVisible" : {
              "type" : "boolean",
              "description" : "If the Experience Cloud site case feed is enabled, IsExternallyVisible controls the external visibility of emails in sites. When IsExternallyVisible is set to true—its default value—email messages are visible to external users in the case feed.",
              "readOnly" : true
            },
            "MessageIdentifier" : {
              "type" : "string",
              "description" : "The ID of the email message."
            },
            "ThreadIdentifier" : {
              "type" : "string",
              "description" : "The ID of the email thread the email message belongs to."
            },
            "ClientThreadIdentifier" : {
              "type" : "string"
            },
            "FromId" : {
              "type" : "string"
            },
            "IsClientManaged" : {
              "type" : "boolean",
              "description" : "If EmailMessage is created with IsClientManaged set to true, users can modify EmailMessage.ContentDocumentIds to link file attachments even when the Status of the EmailMessage is not set to Draft."
            },
            "AttachmentIds" : {
              "type" : "string"
            },
            "RelatedToId" : {
              "type" : "string",
              "description" : "The RelatedToId represents nonhuman objects such as accounts, opportunities, campaigns, cases, or custom objects. RelatedToIds are polymorphic. Polymorphic means a RelatedToId is equivalent to the ID of a related object."
            },
            "IsTracked" : {
              "type" : "boolean",
              "description" : "Indicates whether the email is being tracked."
            },
            "IsOpened" : {
              "type" : "boolean",
              "description" : "Indicates whether the email has been opened.",
              "readOnly" : true
            },
            "FirstOpenedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date the email was first opened."
            },
            "LastOpenedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date the email was last opened."
            },
            "IsBounced" : {
              "type" : "boolean",
              "description" : "Indicates whether the email bounced."
            },
            "EmailTemplateId" : {
              "type" : "string",
              "description" : "The email template, if any, that was chosen for the email. This field is populated in Lightning Experience only."
            },
            "AutomationType" : {
              "type" : "string"
            }
          }
        } ]
      },
      "EmailMessageChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActivityId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "TextBody" : {
              "type" : "string",
              "readOnly" : true
            },
            "HtmlBody" : {
              "type" : "string",
              "readOnly" : true
            },
            "Headers" : {
              "type" : "string",
              "readOnly" : true
            },
            "Subject" : {
              "type" : "string",
              "readOnly" : true
            },
            "FromName" : {
              "type" : "string",
              "readOnly" : true
            },
            "FromAddress" : {
              "type" : "string",
              "readOnly" : true
            },
            "ToAddress" : {
              "type" : "string",
              "readOnly" : true
            },
            "CcAddress" : {
              "type" : "string",
              "readOnly" : true
            },
            "BccAddress" : {
              "type" : "string",
              "readOnly" : true
            },
            "Incoming" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "HasAttachment" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "MessageDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ReplyToEmailMessageId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsExternallyVisible" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MessageIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "ThreadIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "ClientThreadIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsClientManaged" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedToId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsTracked" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "FirstOpenedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastOpenedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsBounced" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "EmailTemplateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AutomationType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EmailMessageRelation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the relationship between an email and contacts, leads, and users.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "EmailMessageId" : {
              "type" : "string",
              "description" : "The ID of the EmailMessage record."
            },
            "RelationId" : {
              "type" : "string",
              "description" : "The RecordId of the sender or recipient.If a record relates an email to an email address that’s not associated with an existing contact, lead, or user record in Salesforce, the value of RelationId is null."
            },
            "RelationType" : {
              "type" : "string",
              "description" : "The type of relationship the contact, lead, or user has with the email message. Possible values include: ToAddress CcAddress BccAddress FromAddress OtherAddress For an Experience Cloud site user who is not the sender of the email, no BccAddress relations are returned."
            },
            "RelationAddress" : {
              "type" : "string",
              "description" : "The email address of the sender or recipient.If a record relates an email to an existing contact, lead, or user record in Salesforce, the value of RelationAddress is the current value of the email address. If the value is not set, it is auto-populated from RelationId."
            },
            "RelationObjectType" : {
              "type" : "string",
              "description" : "The API name of the object type of the RecordId in the RelationId field. It can be a contact, lead, or user.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "EmailRelay" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the configuration for sending an email relay. An email relay routes email sent from Salesforce through your company’s email servers.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Host" : {
              "type" : "string",
              "description" : "Indicates the host name or IP address of your company's SMTP server."
            },
            "Port" : {
              "type" : "string",
              "description" : "Indicates the port number of your company's SMTP server. 25 587 10025 11025"
            },
            "TlsSetting" : {
              "type" : "string",
              "description" : "Specifies whether Salesforce uses TLS for SMTP sessions. Off: TLS is turned off. SMTP session continues through an insecure connection. Preferred: If the remote server supports TLS, Salesforce upgrades the current SMTP session to use TLS. If TLS is unavailable, Salesforce continues the session without TLS. Required: Salesforce continues the session only if the remote server supports TLS. If TLS is unavailable, Salesforce terminates the session without delivering the email. PreferredVerify: If the remote server supports TLS, Salesforce upgrades the current SMTP session to use TLS. Before the session begins, Salesforce verifies that the certificate is signed by a valid certificate authority, and that the common name presented in the certificate matches the domain or mail exchange of the current connection. If TLS is available but the certificate is not signed or the common name does not match, Salesforce disconnects the session and does not deliver the email. If TLS is unavailable, Salesforce continues the session without TLS. RequiredVerify: Salesforce continues the session only if the remote server supports TLS, the certificate is signed by a valid certificate authority, and the common name presented in the certificate matches the domain or mail exchange to which Salesforce is connected. If any of these criteria are not met, Salesforce terminates the session without delivering the email."
            },
            "IsRequireAuth" : {
              "type" : "boolean",
              "description" : "Indicates whether (true) or not (false) authentication is required. When setting this field to true, the TlsSetting must be set to RequiredVerify. This field is available in API version 44.0 and later."
            },
            "Username" : {
              "type" : "string",
              "description" : "Specifies the username for relay host STMP authentication. When IsRequireAuth is set to true, this field is required. This field is available in API version 44.0 and later."
            },
            "Password" : {
              "type" : "string",
              "description" : "Specifies the password for relay host STMP authentication. When IsRequireAuth is set to true, this field is required. This field is available in API version 44.0 and later."
            },
            "AuthType" : {
              "type" : "string"
            }
          }
        } ]
      },
      "EmailServicesAddress" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "An email service address.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether this object is active (true) or not (false)."
            },
            "LocalPart" : {
              "type" : "string",
              "description" : "The local-part of the email service address. The local-part of the address is the string that comes before the @ symbol."
            },
            "EmailDomainName" : {
              "type" : "string",
              "description" : "A read only field you can query that contains the system-generated domain part of this email service address. The system generates a unique domain-part for each email service address to ensure that no two email service addresses are identical.",
              "readOnly" : true
            },
            "AuthorizedSenders" : {
              "type" : "string",
              "description" : "Configures the email service address to only accept messages from the email addresses or domains listed in this field. If the email service address receives a message from an unlisted email address or domain, the email service performs the action specified in the AuthorizationFailureAction field of its associated email service. Leave this field blank if you want the email service address to receive email from any email address."
            },
            "RunAsUserId" : {
              "type" : "string",
              "description" : "The username of the user whose permissions the email service assumes when processing messages sent to this address."
            },
            "FunctionId" : {
              "type" : "string",
              "description" : "The ID of the email service for which the email service address receives messages."
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The name of the object in the API. This name can contain only underscores and alphanumeric characters and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. This 25-character field must be unique among other EmailServicesAddress records under the same EmailServiceFunction parent. In managed packages, this field prevents naming conflicts on package installations. This field is automatically generated, but you can supply your own value if you create the record using the API. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance might be slow while Salesforce generates one for each record."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "EmailServicesFunction" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "An email service.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether this object is active (true) or not (false)."
            },
            "FunctionName" : {
              "type" : "string",
              "description" : "The name of the email service."
            },
            "AuthorizedSenders" : {
              "type" : "string",
              "description" : "Configures the email service to only accept messages from the email addresses or domains listed in this field. If the email service receives a message from an unlisted email address or domain, the email service performs the action specified in the AuthorizationFailureAction field. Leave this field blank if you want the email service to receive email from any email address."
            },
            "IsAuthenticationRequired" : {
              "type" : "boolean",
              "description" : "Configures the email service to verify the legitimacy of the sending server before processing a message. The email service uses the SPF, SenderId, and DomainKeys protocols to verify the sender's legitimacy: If the sending server passes at least one of these protocols and does not fail any, the email service accepts the email. If the server fails a protocol or does not support any of the protocols, the email service performs the action specified in the AuthenticationFailureAction field."
            },
            "IsTlsRequired" : {
              "type" : "boolean",
              "description" : "Not currently in use."
            },
            "AttachmentOption" : {
              "type" : "string",
              "description" : "Indicates the types of attachments the email service accepts. One of the following values: None—The email service accepts the message but discards any attachment. (In API version 41.0 and earlier, the value specified for this choice is 0.) NoContent—The attachment metadata (filename, MIME type, and so on) is provided to the Apex class, but the body is set to null. There was no previous numeric value for this choice. TextOnly—The email service only accepts the following types of attachments: Attachments with a Multipurpose Internet Mail Extension (MIME) type of text. Attachments with a MIME type of application/octet-stream and a file name that ends with either a .vcf or .vcs extension. These are saved as text/x-vcard and text/calendar MIME types, respectively. (In API version 41.0 and earlier, the value specified for this choice is 1.) BinaryOnly—The email service only accepts binary attachments, such as image, audio, application, and video files. (In API version 41.0 and earlier, the value specified for this choice is 2.) All—The email service accepts any type of attachment. (In API version 41.0 and earlier, the value specified for this choice is 3.)"
            },
            "ApexClassId" : {
              "type" : "string",
              "description" : "Required. The ID of the Apex class that the email service uses to process inbound messages. This field is required for API version 12.0 and later."
            },
            "OverLimitAction" : {
              "type" : "string",
              "description" : "Indicates what the email service does with messages if the total number of messages processed by all email services combined has reached the daily limit for your organization. One of the following values: UseSystemDefault—The system default is used. (In API version 41.0 and earlier, the value specified for this choice is 0.) Bounce—The email service returns the message to the sender with a notification that explains why the message was rejected. (In API version 41.0 and earlier, the value specified for this choice is 1.) Discard—The email service deletes the message without notifying the sender. (In API version 41.0 and earlier, the value specified for this choice is 2.) Requeue—The email service queues the message for processing in the next 24 hours. If the message is not processed within 24 hours, the email service returns the message to the sender with a notification that explains why the message was rejected. (In API version 41.0 and earlier, the value specified for this choice is 3.) The system calculates the limit by multiplying the number of user licenses by 1,000."
            },
            "FunctionInactiveAction" : {
              "type" : "string",
              "description" : "Indicates what the email service does with messages it receives when the email service itself is inactive. One of the following values: UseSystemDefault—The system default is used. (In API version 41.0 and earlier, the value specified for this choice is 0.) Bounce—The email service returns the message to the sender with a notification that explains why the message was rejected. (In API version 41.0 and earlier, the value specified for this choice is 1.) Discard—The email service deletes the message without notifying the sender. (In API version 41.0 and earlier, the value specified for this choice is 2.) Requeue—The email service queues the message for processing in the next 24 hours. If the message is not processed within 24 hours, the email service returns the message to the sender with a notification that explains why the message was rejected. (In API version 41.0 and earlier, the value specified for this choice is 3.)"
            },
            "AddressInactiveAction" : {
              "type" : "string",
              "description" : "Indicates what the email service does with messages received at an email address that is inactive.One of the following values: UseSystemDefault—The system default is used. (In API version 41.0 and earlier, the value specified for this choice is 0.) Bounce—The email service returns the message to the sender with a notification that explains why the message was rejected. (In API version 41.0 and earlier, the value specified for this choice is 1.) Discard—The email service deletes the message without notifying the sender. (In API version 41.0 and earlier, the value specified for this choice is 2.) Requeue—The email service queues the message for processing in the next 24 hours. If the message is not processed within 24 hours, the email service returns the message to the sender with a notification that explains why the message was rejected. (In API version 41.0 and earlier, the value specified for this choice is 3.)"
            },
            "AuthenticationFailureAction" : {
              "type" : "string",
              "description" : "Indicates what the email service does with messages that fail or do not support any of the authentication protocols if the IsAuthenticationRequired field is true. One of the following values: UseSystemDefault—The system default is used. (In API version 41.0 and earlier, the value specified for this choice is 0.) Bounce—The email service returns the message to the sender with a notification that explains why the message was rejected. (In API version 41.0 and earlier, the value specified for this choice is 1.) Discard—The email service deletes the message without notifying the sender. (In API version 41.0 and earlier, the value specified for this choice is 2.) Requeue—The email service queues the message for processing in the next 24 hours. If the message is not processed within 24 hours, the email service returns the message to the sender with a notification that explains why the message was rejected. (In API version 41.0 and earlier, the value specified for this choice is 3.)"
            },
            "AuthorizationFailureAction" : {
              "type" : "string",
              "description" : "Indicates what the email service does with messages received from senders who are not listed in the AuthorizedSenders field on either the email service or email service address.One of the following values: UseSystemDefault—The system default is used. (In API version 41.0 and earlier, the value specified for this choice is 0.) Bounce—The email service returns the message to the sender with a notification that explains why the message was rejected. (In API version 41.0 and earlier, the value specified for this choice is 1.) Discard—The email service deletes the message without notifying the sender. (In API version 41.0 and earlier, the value specified for this choice is 2.) Requeue—The email service queues the message for processing in the next 24 hours. If the message is not processed within 24 hours, the email service returns the message to the sender with a notification that explains why the message was rejected. (In API version 41.0 and earlier, the value specified for this choice is 3.)"
            },
            "IsErrorRoutingEnabled" : {
              "type" : "boolean",
              "description" : "When incoming email messages can’t be processed, indicates whether error notification email messages are routed to a chosen address or to the senders."
            },
            "ErrorRoutingAddress" : {
              "type" : "string",
              "description" : "The destination email address for error notification email messages when IsErrorRoutingEnabled is true."
            },
            "IsTextAttachmentsAsBinary" : {
              "type" : "boolean",
              "description" : "If true, text attachments are supplied to the Apex code as a Messaging.BinaryAttachment instead of as a Messaging.TextAttachment. This means that the body is supplied as an Apex Blob instead of as an Apex String."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "EmailStatus" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the status of email sent.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "TaskId" : {
              "type" : "string",
              "description" : "The activity (task or event) associated with the email. Label is Activity ID.",
              "readOnly" : true
            },
            "WhoId" : {
              "type" : "string",
              "description" : "The WhoId represents a human such as a lead or a contact. WhoIds are polymorphic. Polymorphic means a WhoId is equivalent to a contact’s ID or a lead’s ID. The label is Name ID.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "TimesOpened" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of times the recipient opened the email.",
              "readOnly" : true
            },
            "FirstOpenDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date when the email was first opened by recipient. Label is Date Opened.",
              "readOnly" : true
            },
            "LastOpenDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date when the email was last opened by recipient. Need label",
              "readOnly" : true
            },
            "EmailTemplateName" : {
              "type" : "string",
              "description" : "The name of the EmailTemplate.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EmailTemplate" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a template for mass email, or email sent when the activity history related list of a record is modified.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the template. Label is Email Template Name."
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization. Label is Template Unique Name.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the owner of the template."
            },
            "FolderId" : {
              "type" : "string",
              "description" : "ID of the folder that contains the template."
            },
            "FolderName" : {
              "type" : "string",
              "description" : "The name of the folder that contains the template.",
              "readOnly" : true
            },
            "BrandTemplateId" : {
              "type" : "string",
              "description" : "Required. ID of the BrandTemplate associated with this email template. The brand template supplies letterhead information for the email template."
            },
            "TemplateStyle" : {
              "type" : "string",
              "description" : "Style of the template."
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates that this template is active if true, or inactive if false."
            },
            "TemplateType" : {
              "type" : "string",
              "description" : "Type of template."
            },
            "Encoding" : {
              "type" : "string",
              "description" : "Character set encoding for the template."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the template, for example, Promotion Mass Mailing."
            },
            "Subject" : {
              "type" : "string",
              "description" : "Content of the subject line."
            },
            "HtmlValue" : {
              "type" : "string",
              "description" : "This field contains the content of the email message, including HTML coding to render the email message. Limit: 384 KB."
            },
            "Body" : {
              "type" : "string",
              "description" : "Content of the email. Limit: 384 KB."
            },
            "TimesUsed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of times this template has been used.",
              "readOnly" : true
            },
            "LastUsedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date and time when this EmailTemplate was last used.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "description" : "The API version for this class. Every class has an API version specified at creation."
            },
            "Markup" : {
              "type" : "string",
              "description" : "The Visualforce markup, HTML, JavaScript, or any other Web-enabled code that defines the content of the template."
            },
            "UiType" : {
              "type" : "string"
            },
            "RelatedEntityType" : {
              "type" : "string",
              "description" : "When UIType is 2 (Lightning Experience) or 3 (Lightning ExperienceSample), RelatedEntityType indicates which entities this template can be used with. Valid values are the entity API name: \"Account\" for account, \"Contact\" for contact, \"Opportunity\" for opportunity, \"Lead\" for lead, and so on. The value can be any entity the user has read access to (including custom entities) but not virtual entities, setup entities, or platform entities."
            }
          }
        } ]
      },
      "EmailTemplateChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FolderId" : {
              "type" : "string",
              "readOnly" : true
            },
            "BrandTemplateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "TemplateStyle" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "TemplateType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Encoding" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "Subject" : {
              "type" : "string",
              "readOnly" : true
            },
            "HtmlValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "TimesUsed" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LastUsedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "readOnly" : true
            },
            "Markup" : {
              "type" : "string",
              "readOnly" : true
            },
            "UiType" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelatedEntityType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EmbeddedServiceDetail" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a metadata catalog object that exposes fields from the underlying Embedded Service setup objects defined in each EmbeddedServiceConfig deployment for guest users. Guest users don’t have direct access to the Embedded Service setup objects.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "Developer name for the EmbeddedServiceConfig.",
              "readOnly" : true
            },
            "Site" : {
              "type" : "string",
              "description" : "Value of the Site field in the EmbeddedServiceConfig setup object.",
              "readOnly" : true
            },
            "PrimaryColor" : {
              "type" : "string",
              "description" : "Value of the PrimaryColor field in the EmbeddedServiceBranding setup object.",
              "readOnly" : true
            },
            "SecondaryColor" : {
              "type" : "string",
              "description" : "Value of the SecondaryColor field in the EmbeddedServiceBranding setup object.",
              "readOnly" : true
            },
            "ContrastPrimaryColor" : {
              "type" : "string",
              "description" : "Value of the ContrastPrimaryColor field in the EmbeddedServiceBranding setup object.",
              "readOnly" : true
            },
            "ContrastInvertedColor" : {
              "type" : "string",
              "description" : "Accent branding color used in the embedded component, displayed as a hexadecimal value. Changes made to this field in the API aren’t reflected in the embedded component.",
              "readOnly" : true
            },
            "NavBarColor" : {
              "type" : "string",
              "description" : "Value of the NavBarColor field in the EmbeddedServiceBranding setup object.",
              "readOnly" : true
            },
            "NavBarTextColor" : {
              "type" : "string",
              "description" : "This field is used to set the text color for the header.",
              "readOnly" : true
            },
            "SecondaryNavBarColor" : {
              "type" : "string",
              "description" : "This field is used to set the color of a secondary header.",
              "readOnly" : true
            },
            "Font" : {
              "type" : "string",
              "description" : "Font used in the chat text of the Embedded Chat window.",
              "readOnly" : true
            },
            "IsLiveAgentEnabled" : {
              "type" : "boolean",
              "description" : "Specifies whether Chat is enabled for this Embedded Service deployment (true) or not (false).",
              "readOnly" : true
            },
            "IsFieldServiceEnabled" : {
              "type" : "boolean",
              "description" : "Specifies whether Field Service is enabled for this Embedded Service deployment (true) or not (false). Embedded Appointment Management is currently beta.",
              "readOnly" : true
            },
            "Width" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Width of the embedded component.",
              "readOnly" : true
            },
            "Height" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Height of the embedded component.",
              "readOnly" : true
            },
            "IsPrechatEnabled" : {
              "type" : "boolean",
              "description" : "Value of the PrechatEnabled field in the EmbeddedServiceLiveAgent setup object.",
              "readOnly" : true
            },
            "CustomPrechatComponent" : {
              "type" : "string",
              "description" : "The custom Aura component that’s used for the pre-chat page for this Embedded Chat deployment.",
              "readOnly" : true
            },
            "AvatarImg" : {
              "type" : "string",
              "description" : "URL of the image used as the agent avatar image.",
              "readOnly" : true
            },
            "SmallCompanyLogoImg" : {
              "type" : "string",
              "description" : "URL of the logo image used with Embedded Chat.",
              "readOnly" : true
            },
            "PrechatBackgroundImg" : {
              "type" : "string",
              "description" : "URL of the image used for the background for the pre-chat form in Embedded Chat.",
              "readOnly" : true
            },
            "WaitingStateBackgroundImg" : {
              "type" : "string",
              "description" : "URL of the image used for the background image in Embedded Chat while the customer waits to be connected with a support agent.",
              "readOnly" : true
            },
            "FontSize" : {
              "type" : "string",
              "description" : "Font size for the embedded component. Possible values are: Small Medium Large",
              "readOnly" : true
            },
            "OfflineCaseBackgroundImg" : {
              "type" : "string",
              "description" : "URL of the image used for the background for the offline support case form in Embedded Chat.",
              "readOnly" : true
            },
            "IsOfflineCaseEnabled" : {
              "type" : "boolean",
              "description" : "Specifies whether offline support is enabled for this Embedded Chat deployment (true) or not (false).",
              "readOnly" : true
            },
            "IsQueuePositionEnabled" : {
              "type" : "boolean",
              "description" : "Specifies whether queue position (displaying the customer’s place in line while they wait for an agent) is enabled for this Embedded Chat deployment (true) or not (false).",
              "readOnly" : true
            },
            "ShouldShowNewAppointment" : {
              "type" : "boolean",
              "description" : "Specifies whether to display a button on the home screen for customers to create a new appointment (true) or not (false) for embedded Appointment Management (beta).",
              "readOnly" : true
            },
            "ShouldShowExistingAppointment" : {
              "type" : "boolean",
              "description" : "Specifies whether to display a button on the home screen for customers to access their existing appointments (true) or not (false) for embedded Appointment Management (beta).",
              "readOnly" : true
            },
            "FieldServiceHomeImg" : {
              "type" : "string",
              "description" : "URL of the image used for the home screen in embedded Appointment Management (beta).",
              "readOnly" : true
            },
            "FieldServiceLogoImg" : {
              "type" : "string",
              "description" : "URL of the logo used for the home screen in embedded Appointment Management (beta).",
              "readOnly" : true
            },
            "FieldServiceConfirmCardImg" : {
              "type" : "string",
              "description" : "URL of the image used for the confirmation card in embedded Appointment Management (beta).",
              "readOnly" : true
            },
            "ShouldHideAuthDialog" : {
              "type" : "boolean",
              "description" : "Specifies whether the prompt that the customer log in again during a flow should be hidden (true) or not (false). When it’s hidden, the customer is taken directly to your login page.",
              "readOnly" : true
            },
            "CustomMinimizedComponent" : {
              "type" : "string",
              "description" : "The custom Aura component that’s used for the minimized state for this Embedded Chat deployment.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EmbeddedServiceLabel" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a customized label in Embedded Chat or embedded Appointment Management.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "The unique name containing EmbeddedServiceConfig.labelKey.",
              "readOnly" : true
            },
            "EmbeddedServiceConfigDeveloperName" : {
              "type" : "string",
              "description" : "Developer name for the EmbeddedServiceConfig.",
              "readOnly" : true
            },
            "LabelKey" : {
              "type" : "string",
              "description" : "The type of label for this embedded component. The value corresponds to the label within a label group (substate of chat state or page type).",
              "readOnly" : true
            },
            "CustomLabelName" : {
              "type" : "string",
              "description" : "The developer name for the custom label.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EngagementChannelType" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a channel through which a customer can be reached for communication.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the account owner associated with this customer."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of the communication subscription consent record."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "ContactPointType" : {
              "type" : "string",
              "description" : "The contact point type of the channel."
            }
          }
        } ]
      },
      "EngagementChannelTypeChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContactPointType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EngagementChannelTypeFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EngagementChannelTypeHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "EngagementChannelTypeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EngagementChannelTypeShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "EngmtChannelTypeSettings" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string"
            },
            "Language" : {
              "type" : "string"
            },
            "MasterLabel" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SettingKey" : {
              "type" : "string"
            },
            "EngagementChannelType" : {
              "type" : "string"
            },
            "IsSettingEnabled" : {
              "type" : "string"
            }
          }
        } ]
      },
      "EntityDefinition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "QualifiedApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "readOnly" : true
            },
            "PluralLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "DefaultCompactLayoutId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsCustomizable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsApexTriggerable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsWorkflowEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsProcessEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsCompactLayoutable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeploymentStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "KeyPrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsCustomSetting" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsDeprecatedAndHidden" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsReplicateable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsRetrieveable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsSearchLayoutable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsSearchable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsTriggerable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsIdEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsEverCreatable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsEverUpdatable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsEverDeletable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsFeedEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsQueryable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsMruEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DetailUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "EditUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "EditDefinitionUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "HelpSettingPageName" : {
              "type" : "string",
              "readOnly" : true
            },
            "HelpSettingPageUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "RunningUserEntityAccessId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PublisherId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsLayoutable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RecordTypesSupported" : {
              "type" : "object",
              "readOnly" : true
            },
            "InternalSharingModel" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalSharingModel" : {
              "type" : "string",
              "readOnly" : true
            },
            "HasSubtypes" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsSubtype" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsAutoActivityCaptureEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsInterface" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ImplementsInterfaces" : {
              "type" : "string",
              "readOnly" : true
            },
            "ImplementedBy" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExtendsInterfaces" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExtendedBy" : {
              "type" : "string",
              "readOnly" : true
            },
            "DefaultImplementation" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EntityParticle" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "QualifiedApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "EntityDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FieldDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "readOnly" : true
            },
            "Length" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ServiceDataTypeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ValueTypeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExtraTypeInfo" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsAutonumber" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ByteLength" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "IsCaseSensitive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsUnique" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsCreatable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsUpdatable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsDefaultedOnCreate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsWriteRequiresMasterRead" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsCalculated" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsHighScaleNumber" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsHtmlFormatted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsNameField" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsNillable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsPermissionable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsEncrypted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Digits" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "InlineHelpText" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelationshipName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReferenceTargetField" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "Mask" : {
              "type" : "string",
              "readOnly" : true
            },
            "MaskType" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsWorkflowFilterable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsCompactLayoutable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Precision" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Scale" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "IsFieldHistoryTracked" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsApiFilterable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsApiSortable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsApiGroupable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsListVisible" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsLayoutable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsDependentPicklist" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsDeprecatedAndHidden" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsDisplayLocationInDecimal" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DefaultValueFormula" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsIdLookup" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsNamePointing" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelationshipOrder" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ReferenceTo" : {
              "type" : "object",
              "readOnly" : true
            },
            "IsComponent" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsCompound" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EntitySubscription" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a subscription for a user following a record or another user.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "Required. ID of the record or user which the user is following."
            },
            "SubscriberId" : {
              "type" : "string",
              "description" : "Required. ID of the user who is following the record or user."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "ErrorInfo" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          },
          "errorCode" : {
            "type" : "string"
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "extendedErrorDetails" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "extendedErrorCode" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      },
      "Event" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an event in the calendar. In the user interface, event and task records are collectively referred to as activities.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "WhoId" : {
              "type" : "string",
              "description" : "The WhoId represents a human such as a lead or a contact. WhoIds are polymorphic. Polymorphic means a WhoId is equivalent to a contact’s ID or a lead’s ID. The label is Name ID. If Shared Activities is enabled, the value of this field is the ID of the related lead or primary contact. If you add, update, or remove the WhoId field, you might encounter problems with triggers, workflows, and data validation rules that are associated with the record. The label is Name ID. If the JunctionIdList field is used, all WhoIds are included in the relationship list. Beginning in API version 37.0, if the contact or lead ID in the WhoId field is not in the EventWhoIds list, no error occurs and the ID is added to the EventWhoIds as the primary WhoId. If WhoId is set to null, an arbitrary ID from the existing EventWhoIds list is promoted to the primary position."
            },
            "WhatId" : {
              "type" : "string",
              "description" : "The WhatId represents nonhuman objects such as accounts, opportunities, campaigns, cases, or custom objects. WhatIds are polymorphic. Polymorphic means a WhatId is equivalent to the ID of a related object. The label is Related To ID."
            },
            "Subject" : {
              "type" : "string",
              "description" : "The subject line of the event, such as Call, Email, or Meeting. Limit: 255 characters."
            },
            "Location" : {
              "type" : "string",
              "description" : "Contains the location of the event."
            },
            "IsAllDayEvent" : {
              "type" : "boolean",
              "description" : "Indicates whether the ActivityDate field (true) or the ActivityDateTime field (false) is used to define the date or time of the event. Label is All-Day Event. See also DurationInMinutes and EndDateTime."
            },
            "ActivityDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Contains the event’s due date if the IsAllDayEvent flag is set to false. The time portion of this field is always transferred in the Coordinated Universal Time (UTC) time zone. Translate the time portion to or from a local time zone for the user or the application, as appropriate. Label is Due Date Time. This field is required in versions 12.0 and earlier if the IsAllDayEvent flag is set to false. The value for this field and StartDateTime must match, or one of them must be null."
            },
            "ActivityDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Contains the event’s due date if the IsAllDayEvent flag is set to true. This field is a date field with a timestamp that is always set to midnight in the Coordinated Universal Time (UTC) time zone. Don’t attempt to alter the timestamp to account for time zone differences. Label is Due Date Only. This field is required in versions 12.0 and earlier if the IsAllDayEvent flag is set to true. The value for this field and StartDateTime must match, or one of them must be null."
            },
            "DurationInMinutes" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Contains the event length, in minutes. Even though this field represents a temporal value, it is an integer type—not a Date/Time type. Required in versions 12.0 and earlier if IsAllDayEvent is false. In versions 13.0 and later, this field is optional, depending on the following: If IsAllDayEvent is true, you can supply a value for either DurationInMinutes or EndDateTime. Supplying values in both fields is allowed if the values add up to the same amount of time. If both fields are null, the duration defaults to one day. If IsAllDayEvent is false, a value must be supplied for either DurationInMinutes or EndDateTime. Supplying values in both fields is allowed if the values add up to the same amount of time. If the multiday event feature is enabled, then API versions 13.0 and later support values greater than 1440 for the DurationInMinutes field. API versions 12.0 and earlier can’t access event objects whose DurationInMinutes is greater than 1440. For more information, see Multiday Events. Depending on your API version, errors with the DurationInMinutes and EndDateTime fields may appear in different places. Versions 38.0 and before—Errors always appear in the DurationInMinutes field. Versions 39.0 and later—If there’s no value for the DurationInMinutes field, errors appear in the EndDateTime field. Otherwise, they appear in the DurationInMinutes field."
            },
            "StartDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Indicates the start date and time of the event. Available in versions 13.0 and later. If the Event IsAllDayEvent flag is set to true (indicating that it is an all-day Event), then the event start date information is contained in the StartDateTime field. The time portion of this field is always transferred in the Coordinated Universal Time (UTC) time zone. Translate the time portion to or from a local time zone for the user or the application, as appropriate. If the Event IsAllDayEvent flag is set to false (indicating that it is not an all-day event), then the event start date information is contained in the StartDateTime field. The time portion is always transferred in the Coordinated Universal Time (UTC) time zone. You need to translate the time portion to or from a local time zone for the user or the application, as appropriate. If this field has a value, then ActivityDate and ActivityDateTime must either be null or match the value of this field."
            },
            "EndDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Available in versions 13.0 and later. The time portion of this field is always transferred in the Coordinated Universal Time (UTC) time zone. Translate the time portion to or from a local time zone for the user or the application, as appropriate. This field is optional, depending on the following: If IsAllDayEvent is true, you can supply a value for either DurationInMinutes or EndDateTime. Supplying values in both fields is allowed if the values add up to the same amount of time. If both fields are null, the duration defaults to one day. If IsAllDayEvent is false, a value must be supplied for either DurationInMinutes or EndDateTime. Supplying values in both fields is allowed if the values add up to the same amount of time.Depending on your API version, errors with the DurationInMinutes and EndDateTime fields may appear in different places. Versions 38.0 and before—Errors always appear in the DurationInMinutes field. Versions 39.0 and later—If there’s no value for the DurationInMinutes field, errors appear in the EndDateTime field. Otherwise, they appear in the DurationInMinutes field."
            },
            "EndDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Read-only. Available in versions 46.0 and later. This field supplies the date value that appears in the EndDateTime field. This field is a date field with a timestamp that is always set to midnight in the Coordinated Universal Time (UTC) time zone.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Contains a text description of the event. Limit: 32,000 characters."
            },
            "AccountId" : {
              "type" : "string",
              "description" : "Represents the ID of the related account. The AccountId is determined as follows. If the value of WhatId is any of the following objects, then Salesforce uses that object’s AccountId. Account Opportunity Contract Custom object that is a child of Account If the value of the WhatId field is any other object, and the value of the WhoId field is a contact object, then Salesforce uses that contact’s AccountId. (If your org uses Shared Activities, Salesforce uses the AccountId of the primary contact.) Otherwise, Salesforce sets the value of the AccountId field to null. For information on IDs, see ID Field Type.",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "Contains the ID of the user or public calendar who owns the event. Label is Assigned to ID."
            },
            "IsPrivate" : {
              "type" : "boolean",
              "description" : "Indicates whether users other than the creator of the event can (false) or can’t (true) see the event details when viewing the event user’s calendar. However, users with the View All Data or Modify All Data permission can see private events in reports and searches, or when viewing other users’ calendars. Private events can’t be associated with opportunities, accounts, cases, campaigns, contracts, leads, or contacts. Label is Private."
            },
            "ShowAs" : {
              "type" : "string",
              "description" : "Indicates how this event appears when another user views the calendar: Busy, Out of Office, or Free. Label is Show Time As."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsChild" : {
              "type" : "boolean",
              "description" : "Indicates whether the event is a child of another event (true) or not (false).",
              "readOnly" : true
            },
            "IsGroupEvent" : {
              "type" : "boolean",
              "description" : "Indicates whether the event is a group event—that is, whether it has invitees (true) or not (false).",
              "readOnly" : true
            },
            "GroupEventType" : {
              "type" : "string",
              "description" : "Read-only. Available in API versions 19.0 and later. The possible values are: 0 (Non–group event)—An event with no invitees. 1 (Group event)—An event with invitees. 2 (Proposed event)—An event created when a user requests a meeting with a contact, lead, or person account using the Salesforce user interface. When the user confirms the meeting, the proposed event becomes a group event. You can’t create, edit, or delete proposed events in the API. This value is no longer used in API version 41.0 and later. 3 (IsRecurrence2 Series Pattern)—An event representing an event series recurrence pattern in Lightning Experience.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsArchived" : {
              "type" : "boolean",
              "description" : "Indicates whether the event has been archived.",
              "readOnly" : true
            },
            "RecurrenceActivityId" : {
              "type" : "string",
              "description" : "Read-only. Not required on create. Contains the ID of the main record of the Salesforce Classic recurring event. Subsequent occurrences have the same value in this field.",
              "readOnly" : true
            },
            "IsRecurrence" : {
              "type" : "boolean",
              "description" : "Indicates whether a Salesforce Classic event is scheduled to repeat itself (true) or only occurs once (false). This is a read-only field when updating records, but not when creating them. If this field value is true, then RecurrenceEndDateOnly, RecurrenceStartDateTime, RecurrenceType, and any recurrence fields associated with the given recurrence type must be populated. Label is Create recurring series of events."
            },
            "RecurrenceStartDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Indicates the date and time when the Salesforce Classic recurring event begins. The value must precede the RecurrenceEndDateOnly. The time portion of this field is always transferred in the Coordinated Universal Time (UTC) time zone. Translate the time portion to or from a local time zone for the user or the application, as appropriate."
            },
            "RecurrenceEndDateOnly" : {
              "type" : "string",
              "format" : "date",
              "description" : "Indicates the last date on which the event repeats. For multiday Salesforce Classic recurring events, this is the day on which the last occurrence starts. This field is a date field with a timestamp that is always set to midnight in the Coordinated Universal Time (UTC) time zone. Don’t attempt to alter the timestamp to account for time zone differences."
            },
            "RecurrenceTimeZoneSidKey" : {
              "type" : "string",
              "description" : "Indicates the time zone associated with a Salesforce Classic recurring event. For example, “UTC-8:00” for Pacific Standard Time."
            },
            "RecurrenceType" : {
              "type" : "string",
              "description" : "Indicates how often the Salesforce Classic event repeats. For example, daily, weekly, or every nth month (where “nth” is defined in RecurrenceInstance)."
            },
            "RecurrenceInterval" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the interval between Salesforce Classic recurring events."
            },
            "RecurrenceDayOfWeekMask" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the day or days of the week on which the Salesforce Classic recurring event repeats. This field contains a bitmask. The values are as follows: Sunday = 1 Monday = 2 Tuesday = 4 Wednesday = 8 Thursday = 16 Friday = 32 Saturday = 64 Multiple days are represented as the sum of their numerical values. For example, Tuesday and Thursday = 4 + 16 = 20."
            },
            "RecurrenceDayOfMonth" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the day of the month on which the event repeats."
            },
            "RecurrenceInstance" : {
              "type" : "string",
              "description" : "Indicates the frequency of the Salesforce Classic event’s recurrence. For example, 2nd or 3rd."
            },
            "RecurrenceMonthOfYear" : {
              "type" : "string",
              "description" : "Indicates the month in which the Salesforce Classic recurring event repeats."
            },
            "ReminderDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Represents the time when the reminder is scheduled to fire, if IsReminderSet is set to true. If IsReminderSet is set to false, then the user may have deselected the reminder checkbox in the Salesforce user interface, or the reminder has already fired at the time indicated by the value."
            },
            "IsReminderSet" : {
              "type" : "boolean",
              "description" : "Indicates whether the activity is a reminder (true) or not (false)."
            },
            "EventSubtype" : {
              "type" : "string",
              "description" : "Provides standard subtypes to facilitate creating and searching for events. This field isn’t updateable."
            },
            "IsRecurrence2Exclusion" : {
              "type" : "boolean",
              "description" : "Read-only. This field available in API version 44.0 and later. Indicates when updates to a Lightning Experience event series recurrence pattern have been made, but affect future event occurrences only. For past event occurrences, IsRecurrence2Exclusion is set to true, excluding past occurrences from the series recurrence pattern.",
              "readOnly" : true
            },
            "Recurrence2PatternText" : {
              "type" : "string",
              "description" : "Read-only. This field available in API version 44.0 and later. Indicates the recurrence pattern for Lightning Experience event series. Recurrence2PatternText is implemented with RFC 5545 standard specifications for internet calendaring and scheduling. See Event Series section in this topic for usage examples. This field has a maximum length of 512 characters."
            },
            "Recurrence2PatternVersion" : {
              "type" : "string",
              "description" : "Read-only. This field available in API version 44.0 and later. Indicates the standard specifications for Lightning Experience event series recurrence patterns. The only possible value is 1 (RFC 5545 v4 RRULE)—RFC 5545 is a standard set of specifications for internet calendaring and scheduling that IsRecurrence2 adheres to for series recurrence patterns. RFC 5545 specifications for series recurrence patterns are called rrules. For examples of rrule usage, see the Event Series section in this topic.",
              "readOnly" : true
            },
            "IsRecurrence2" : {
              "type" : "boolean",
              "description" : "Read-only. This field available in API version 44.0 and later. Indicates whether a Lightning Experience event is scheduled to repeat (true) or only occurs once (false. If this field value is true, then Recurrence2PatternText and Recurrence2PatternVersion must be populated. Label is Repeat.",
              "readOnly" : true
            },
            "IsRecurrence2Exception" : {
              "type" : "boolean",
              "description" : "Read-only. This field available in API version 44.0 and later. Indicates whether an individual event in a Lightning Experience event series has a recurrence pattern that’s different from the rest of the series, making it an exception.",
              "readOnly" : true
            },
            "Recurrence2PatternStartDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Read-only. This field available in API version 44.0 and later. Indicates the date and time when the Lightning Experience event series begins. The time portion of this field is always transferred in the Coordinated Universal Time (UTC) time zone. Translate the time portion to or from a local time zone for the user or the application, as appropriate.",
              "readOnly" : true
            },
            "Recurrence2PatternTimeZone" : {
              "type" : "string",
              "description" : "This field available in API version 44.0 and later. Indicates the time zone in which the Lightning Experience event series was created or updated. This field uses standard Java TimeZone IDs. For example, America/Los_Angeles.",
              "readOnly" : true
            }
          }
        } ]
      },
      "EventBusSubscriber" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a trigger, process, or flow that’s subscribed to a platform event or a change data capture event. Doesn’t include CometD subscribers.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string",
              "description" : "The ID of the subscriber. For example, the trigger ID.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the subscribed item, such as the trigger or process name. If the subscribed item’s name is “Process”, at least one flow Pause element is subscribed to the event.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "The subscriber type (ApexTrigger). If the subscriber is a process or flow Pause element, the type is blank.",
              "readOnly" : true
            },
            "Topic" : {
              "type" : "string",
              "description" : "The name of the subscription channel that corresponds to a platform event or change event. For a platform event, the topic name is the event name appended with __e, such as MyEvent__e. For a change event, the topic is the name of the change event, such as AccountChangeEvent.",
              "readOnly" : true
            },
            "Position" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The replay ID of the last event that the subscriber processed.",
              "readOnly" : true
            },
            "Tip" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The replay ID of the last published event.For high-volume platform events and change events, the value for Tip isn’t available and is always -1.",
              "readOnly" : true
            },
            "Retries" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of times the trigger was retried due to throwing the EventBus.RetryableException. This field applies to Apex triggers only. Available in API version 43.0 and later.",
              "readOnly" : true
            },
            "LastError" : {
              "type" : "string",
              "description" : "The error message that the last thrown EventBus.RetryableException contains. This field applies to Apex triggers only. Available in API version 43.0 and later.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "Indicates the status of the subscriber. Can be one of the following values: Running—The subscriber is actively listening to events. If you modify the subscriber, the subscription continues to process events. Error— The subscriber was disconnected and stopped receiving published events. A trigger reaches this state when it exceeds the number of maximum retries with the EventBus.RetryableException. Trigger assertion failures and unhandled exceptions don’t cause the error state. We recommend limiting the retries to fewer than nine times to avoid reaching this state. When you fix and save the trigger, or for a managed package trigger, if you redeploy the package, the trigger resumes automatically from the tip, starting from new events. Also, you can resume a trigger subscription in the subscription detail page that you access from the platform event page. Suspended—The subscriber is disconnected and can’t receive events because a Salesforce admin suspended it or due to an internal error. You can resume a trigger subscription in the subscription detail page that you access from the platform event page. To resume a process, deactivate it and then reactivate it. If you modify the subscriber, the subscription resumes automatically from the tip, starting from new events.",
              "readOnly" : true
            },
            "IsPartitioned" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EventChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "WhoId" : {
              "type" : "string",
              "readOnly" : true
            },
            "WhatId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Subject" : {
              "type" : "string",
              "readOnly" : true
            },
            "Location" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsAllDayEvent" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ActivityDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ActivityDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "DurationInMinutes" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsPrivate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ShowAs" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsChild" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsGroupEvent" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "GroupEventType" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecurrenceActivityId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRecurrence" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RecurrenceStartDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RecurrenceEndDateOnly" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "RecurrenceTimeZoneSidKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecurrenceType" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecurrenceInterval" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RecurrenceDayOfWeekMask" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RecurrenceDayOfMonth" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RecurrenceInstance" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecurrenceMonthOfYear" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReminderDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsReminderSet" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsRecurrence2Exclusion" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Recurrence2PatternText" : {
              "type" : "string",
              "readOnly" : true
            },
            "Recurrence2PatternVersion" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EventFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EventLogFile" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents event log files for event monitoring. The event monitoring product gathers information about your Salesforce org’s operational events, which you can use to analyze usage trends and user behavior.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventType" : {
              "type" : "string",
              "description" : "The event type—API, Login, Report, URI, and so forth. Use to determine which files were generated for your org. For the corresponding LogFile schema, see EventLogFile Supported Event Types.",
              "readOnly" : true
            },
            "LogDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time of the log file’s creation. For daily event log files, tracks usage activity for a 24-hour period, from 12:00 a.m. to 11:59 p.m. UTC time. For hourly event log files, indicates the hour in which the log file was generated. For example, for events that occur between 11:00 AM and 12:00 PM on 3/7/2016, this field’s value is 2016-03-07T11:00:00.000Z.For hourly event log files, we recommend using CreatedDate to query the date and time that an EventLogFile object was created.",
              "readOnly" : true
            },
            "LogFileLength" : {
              "type" : "number",
              "description" : "The log file length in bytes. You can use this field to plan storage needs for your log files.",
              "readOnly" : true
            },
            "LogFileContentType" : {
              "type" : "string",
              "description" : "The content type of the log file; always .csv.",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "description" : "The specific API version for this log file. This field is available in API version 30.0 and later.",
              "readOnly" : true
            },
            "Sequence" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number for the portion of the event log file data captured in an hour. For 24-hour event log file generation, the value of this field is 0. For hourly event log files, the initial value is 1. This value increases by 1 when events are added in the same hour after the latest event log file is created. The value resets to 1 in the subsequent hour. For example, you have activity between 2:00 and 3:00 PM. Two-log files are generated that contain the event log data for that hour, with Sequence values of 1 and 2. For event log data that occurs at 3:01 PM, the Sequence value resets to 1. This field is available in API version 37.0 and later.",
              "readOnly" : true
            },
            "Interval" : {
              "type" : "string",
              "description" : "The generation schedule for the event log file. Possible values are: Daily Hourly This field is available in API version 37.0 and later.",
              "readOnly" : true
            },
            "LogFileFieldNames" : {
              "type" : "string",
              "description" : "The ordered list of fields in the log file data. LogFileFieldNames and LogFileFieldTypes are specific to each EventType. For example, LogFileFieldNames has a different value for an API EventType and a Login EventType.",
              "readOnly" : true
            },
            "LogFileFieldTypes" : {
              "type" : "string",
              "description" : "The ordered list of field types in the log file data (String, Id, and so forth). LogFileFieldNames and LogFileFieldTypes are specific to each EventType. For example, LogFileFieldTypes has a different value for an API EventType and a Login EventType.",
              "readOnly" : true
            },
            "LogFile" : {
              "type" : "object",
              "description" : "Encoded file data in .csv format. The EventType field defines the schema for this data.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EventRelation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a person (a user, lead, or contact) or a resource (such as a conference room) invited to an event. This object lets you add or remove invitees from an event and use the API to manage invitees’ responses to invitations. If Shared Activities is enabled, EventRelation can also represent other objects that are related to an event. EventRelation does not support triggers, workflow, or data validation rules.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelationId" : {
              "type" : "string",
              "description" : "Contains the ID of the person (User, Contact, or Lead) or the resource invited to an event. When Shared Activities is enabled, RelationId can also contain the ID of an account, opportunity, or other object related to an event."
            },
            "EventId" : {
              "type" : "string",
              "description" : "Contains the ID of the event. This value can’t be changed after it’s been specified."
            },
            "Status" : {
              "type" : "string",
              "description" : "Indicates the invitee status with one of the following values: New: Invitee has received the invitation but hasn’t yet responded. This value is the default. Declined: Invitee has declined the invitation. Accepted: Invitee has accepted the invitation. Uninvited and Maybe aren’t currently supported."
            },
            "RespondedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Indicates the most recent date and time when the invitee responded to an invitation to an event."
            },
            "Response" : {
              "type" : "string",
              "description" : "Contains optional text that the invitee can enter when responding to an invitation to an event."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            }
          }
        } ]
      },
      "EventRelationChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "RelationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "RespondedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Response" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EventRelayConfig" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventChannel" : {
              "type" : "string",
              "readOnly" : true
            },
            "DestinationResourceName" : {
              "type" : "string",
              "readOnly" : true
            },
            "State" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelayOption" : {
              "type" : "string",
              "readOnly" : true
            },
            "UsageType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EventRelayConfigChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventChannel" : {
              "type" : "string",
              "readOnly" : true
            },
            "DestinationResourceName" : {
              "type" : "string",
              "readOnly" : true
            },
            "State" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelayOption" : {
              "type" : "string",
              "readOnly" : true
            },
            "UsageType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EventRelayFeedback" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "EventRelayNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventRelayConfigId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RemoteResource" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "ErrorMessage" : {
              "type" : "string",
              "readOnly" : true
            },
            "ErrorTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ErrorIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "ErrorCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastRelayedEventTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UsageType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "EvfPipelineSubTaskDetails" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string"
            },
            "Language" : {
              "type" : "string"
            },
            "MasterLabel" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SubTaskName" : {
              "type" : "string"
            },
            "SubTaskStatus" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ExpressionFilter" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a logical expression that’s used to control the execution of macro instructions.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Optional. A label for the expression.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FilterConditionLogic" : {
              "type" : "string",
              "description" : "Optional. The filter conditions to use and the order in which to apply them. For example, ‘1 AND 2’ evaluates condition 1 and then condition 2."
            },
            "ContextId" : {
              "type" : "string",
              "description" : "Required. The ID of the MacroInstruction object that contains the expression."
            },
            "FilterDescription" : {
              "type" : "string",
              "description" : "Optional. A description of the filter expression that helps to explain the logic to users. For example, ‘Applies to New cases.’"
            }
          }
        } ]
      },
      "ExpressionFilterCriteria" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a condition in an expression that’s used to control the execution of macro instructions.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Optional. A label for the condition.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FilterTarget" : {
              "type" : "string",
              "description" : "Required. The target object or field used in the condition. For example, to create a condition that applies to new cases, use Case.Status as the FilterTarget."
            },
            "FilterTargetValue" : {
              "type" : "string",
              "description" : "Optional. The value that’s compared to the value of the FilterTarget. For example, to create a condition that applies to new cases, use New as the FilterTargetValue."
            },
            "Operation" : {
              "type" : "string",
              "description" : "Required. Specifies the operator used to compare the target field and the target value. For example, to create a condition that applies to new cases, use EQUALS for the Operation field, as in Case.Status EQUALS New. EQUALS NOTEQUALS CONTAINS NOTCONTAIN"
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Required. The order in which the criteria are evaluated."
            },
            "ExpressionFilterId" : {
              "type" : "string",
              "description" : "Required. The ID of the ExpressionFilter object that references this condition."
            }
          }
        } ]
      },
      "ExpressionSetView" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsTemplate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedBy" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExpressionSetDetails" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsExecutable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UsageType" : {
              "type" : "string",
              "readOnly" : true
            },
            "UsageTypeLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "HasContextDefinitionRef" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExternalClientApplication" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ContactEmail" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContactPhone" : {
              "type" : "string",
              "readOnly" : true
            },
            "DistributionState" : {
              "type" : "string",
              "readOnly" : true
            },
            "ManagedType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ManagedCollection" : {
              "type" : "string",
              "readOnly" : true
            },
            "ManagedSetupPointer" : {
              "type" : "string",
              "readOnly" : true
            },
            "OrgScopedExternalApp" : {
              "type" : "string",
              "readOnly" : true
            },
            "LogoUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "InfoUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IconUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "Version" : {
              "type" : "string",
              "readOnly" : true
            },
            "MigratedAppId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExternalDataSource" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an external data source, which defines connection details for integration with data and content that are stored outside the Salesforce org.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record.",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "description" : "The language of the MasterLabel.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Master label for the external data source. This internal label doesn’t get translated.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The namespace prefix that is associated with this object. Each Developer Edition org that creates a managed package has a unique namespace prefix. Limit: 15 characters. You can refer to a component in a managed package by using the namespacePrefix__componentName notation.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "Specifies the adapter that connects to the external system.",
              "readOnly" : true
            },
            "Endpoint" : {
              "type" : "string",
              "description" : "The URL of the external system, or if that URL is defined in a named credential, the named credential URL.",
              "readOnly" : true
            },
            "Repository" : {
              "type" : "string",
              "description" : "Used for SharePoint Online. An optional name of the repository in the data source. Not applicable to all data source types.",
              "readOnly" : true
            },
            "IsWritable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PrincipalType" : {
              "type" : "string",
              "description" : "Specifies whether the org uses one set (NamedUser), multiple sets (PerUser), or no (Anonymous) credentials to access the external system. Each set of credentials corresponds to a login account on the external system. Corresponds to Identity Type in the user interface.",
              "readOnly" : true
            },
            "Protocol" : {
              "type" : "string",
              "description" : "Specifies whether to use OAuth, password authentication, or no authentication to access the external system.",
              "readOnly" : true
            },
            "AuthProviderId" : {
              "type" : "string",
              "description" : "Salesforce ID of the authentication provider, which defines the service that provides the login process and approves access to the external system. Only users with the “Customize Application” and “Manage AuthProviders” permissions can view this field. This field is available in API version 39.0 and later.",
              "readOnly" : true
            },
            "LargeIconId" : {
              "type" : "string",
              "readOnly" : true
            },
            "SmallIconId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CustomConfiguration" : {
              "type" : "string",
              "description" : "A JSON-encoded configuration string that defines parameters specific to the type of external data source.",
              "readOnly" : true
            },
            "NamedCredentialId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExternalDataSrcDescriptor" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ExternalDataSourceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemVersion" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DescriptorVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "Subtype" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExternalDataUserAuth" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Stores authentication settings for a Salesforce user to access an external system. The external system must be defined in an external data source or a named credential that’s configured to use per-user authentication.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExternalDataSourceId" : {
              "type" : "string",
              "description" : "Salesforce ID of the external data source or named credential that defines the external system."
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the Salesforce user who’s accessing the external system."
            },
            "Protocol" : {
              "type" : "string",
              "description" : "Specifies whether to use OAuth, password authentication, or no authentication when the user accesses the external system."
            },
            "Username" : {
              "type" : "string",
              "description" : "Username portion of the credentials for the Salesforce user to access the external system."
            },
            "Password" : {
              "type" : "string",
              "description" : "Password portion of the credentials for the Salesforce user to access the external system."
            },
            "AuthProviderId" : {
              "type" : "string",
              "description" : "Salesforce ID of the authentication provider, which defines the service that provides the login process and approves access to the external system. Only users with the “Customize Application” and “Manage AuthProviders” permissions can view this field. This field is available in API version 39.0 and later."
            }
          }
        } ]
      },
      "ExternalEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string"
            },
            "Title" : {
              "type" : "string"
            },
            "Location" : {
              "type" : "string"
            },
            "Notes" : {
              "type" : "string"
            },
            "Time" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ExternalEventChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Location" : {
              "type" : "string",
              "readOnly" : true
            },
            "Notes" : {
              "type" : "string",
              "readOnly" : true
            },
            "Time" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExternalEventMapping" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string"
            },
            "EventId" : {
              "type" : "string"
            },
            "StartDate" : {
              "type" : "string",
              "format" : "date"
            },
            "EndDate" : {
              "type" : "string",
              "format" : "date"
            },
            "IsRecurring" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "ExternalEventMappingShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "ExtlClntAppOauthConsumer" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExternalClientApplicationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExtlClntAppOauthSettingsId" : {
              "type" : "string",
              "readOnly" : true
            },
            "OauthConsumerId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExtlClntAppOauthIpRange" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExtlClntAppOauthSettingsId" : {
              "type" : "string",
              "readOnly" : true
            },
            "StartIpAddress" : {
              "type" : "string",
              "readOnly" : true
            },
            "EndIpAddress" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExtlClntAppOauthPlcyAttr" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExtlClntAppOauthPlcyCnfgId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Key" : {
              "type" : "string",
              "readOnly" : true
            },
            "Value" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExtlClntAppOauthPlcyCnfg" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExternalClientApplicationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RefreshTokenPolicyType" : {
              "type" : "string",
              "readOnly" : true
            },
            "RefreshTokenValidityPeriod" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RefreshTokenValidityUnit" : {
              "type" : "string",
              "readOnly" : true
            },
            "IpRelaxationPolicyType" : {
              "type" : "string",
              "readOnly" : true
            },
            "PermittedUsersPolicyType" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionTimeoutInMinutes" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RequiredSessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyAction" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExtlClntAppOauthSettingsId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsClientCredentialsFlowEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ClientCredentialsFlowUser" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApexHandlerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExecuteHandlerAsId" : {
              "type" : "string",
              "readOnly" : true
            },
            "SingleLogoutUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "StartUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsTokenExchangeFlowEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsGuestCodeCredFlowEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsNamedUserJwtEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "GuestJwtTimeout" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamedUserJwtTimeout" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExtlClntAppOauthPlcyCustmScp" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExtlClntAppOauthPlcyCnfgId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalClientApplicationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "OauthCustomScopeId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExtlClntAppOauthSetAttr" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExtlClntAppOauthSettingsId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Key" : {
              "type" : "string",
              "readOnly" : true
            },
            "Value" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExtlClntAppOauthSetCustmScp" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExtlClntAppOauthSettingsId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalClientApplicationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "OauthCustomScopeId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExtlClntAppOauthSettings" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExternalClientApplicationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "OauthScopesSSO" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesAPI" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesWEB" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesFULL" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesCHATTER_REST_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesVF" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesREFRESH_TOKEN" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesOPENID" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesPROFILE" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesEMAIL" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesADDRESS" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesPHONE" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesOFFLINE_ACCESS" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesCUSTOM_PERMISSIONS" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesWAVE_REST_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesECLAIR_REST_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesHUB_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesPARDOT_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesLIGHTNING" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesCONTENT" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesCDP_INGEST_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesCDP_PROFILE_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesCDP_QUERY_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesCHATBOT_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesCDP_SEGMENT_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesCDP_IDENTITYRESOLUTION_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesFORGOT_PASSWORD" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesCDP_CALCULATED_INSIGHT_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesUSER_REGISTRATION_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesSFAP_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesINTERACTION_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesCDP_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesEINSTEIN_GPT_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthScopesPWDLESS_LOGIN_API" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthLink" : {
              "type" : "string",
              "readOnly" : true
            },
            "SingleLogoutUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExtlClntAppOauthOptionsFirstPartyAppEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ClientAssertionCertificate" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExtlClntAppPlcyCnfg" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExternalClientApplicationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OauthPluginStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "StartPage" : {
              "type" : "string",
              "readOnly" : true
            },
            "SamlPluginStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "StartUrl" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExtlClntAppSamplePlcyCnfg" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExternalClientApplicationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AdminOnlyPolicy" : {
              "type" : "string",
              "readOnly" : true
            },
            "Policy1" : {
              "type" : "string",
              "readOnly" : true
            },
            "Policy2" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExtlClntAppSampleSettingsId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ExtlClntAppSampleSettings" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExternalClientApplicationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Version" : {
              "type" : "string",
              "readOnly" : true
            },
            "DevicePlatform" : {
              "type" : "string",
              "readOnly" : true
            },
            "MinimumOsVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeviceType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Policy1" : {
              "type" : "string",
              "readOnly" : true
            },
            "Policy2" : {
              "type" : "string",
              "readOnly" : true
            },
            "DevManagedPolicyFieldsPolicy1" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DevManagedPolicyFieldsPolicy2" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FeedAttachment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an attachment to a feed item, such as a file attachment or a link. Use FeedAttachment to add various attachments to one feed item.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "FeedEntityId" : {
              "type" : "string",
              "description" : "The ID of the associated feed entity that contains this attachment."
            },
            "Type" : {
              "type" : "string",
              "description" : "The type of this feed attachment. Valid values are: 0 Content—A content attachment. 1 InlineImage—An inline image. The system creates an inline image attachment when an image is added to the body of the associated FeedItem. You can’t add an inline image directly using FeedAttachment. 2 Link—A link. 3 FeedEntity—A feed entity, for example, a post that is shared. Available in API version 39 and later in Lightning Experience. 4 ChatterExtension—a Rich Publisher App that’s integrated with the Chatter publisher. 5 Record—A record."
            },
            "RecordId" : {
              "type" : "string",
              "description" : "The ID of the record that this feed attachment contains. For inline images, RecordId is a ContentDocument ID. For content attachments, RecordId is a ContentVersion ID, For feed items, RecordId is a FeedItem ID."
            },
            "Title" : {
              "type" : "string",
              "description" : "The title of this feed attachment. When Type is Link, Title value is the label for the attachment link. Otherwise, Title value isn’t used."
            },
            "Value" : {
              "type" : "string",
              "description" : "The string value of this FeedAttachment. This field is optional. If the feed attachment is a Link FeedAttachment, the value is the link URL string."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "FeedComment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a comment added to a feed by a user.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "FeedItemId" : {
              "type" : "string",
              "description" : "ID of the feed item containing the comment."
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of a record associated with the feed comment. For example, if you are commenting on a change to a field on Account, ParentId is set to the account ID.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date and time when a user or automated process (such as a trigger) last modified this record. In this context, \\\"trigger\\\" refers to Salesforce code that runs to implement standard functionality, and not an Apex trigger. SystemModstamp is a read-only system field, available in FeedComment as of API version 37.0.",
              "readOnly" : true
            },
            "Revision" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of times the comment was revised."
            },
            "LastEditById" : {
              "type" : "string",
              "description" : "ID of the user who last edited the feed comment."
            },
            "LastEditDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date the feed comment was last edited."
            },
            "CommentBody" : {
              "type" : "string",
              "description" : "The text in the comment."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "description" : "ID of the user who added this item to the feed. For example, if an application migrates posts and comments from another application into a feed, the InsertedBy value is set to the ID of the context user.",
              "readOnly" : true
            },
            "CommentType" : {
              "type" : "string",
              "description" : "The type of comment: ContentComment—an uploaded file on a comment TextComment—a direct text entry on a comment Before API version 24.0, a text entry was required on a comment. As of version 24.0, a text entry is optional if the CommentType is ContentComment."
            },
            "RelatedRecordId" : {
              "type" : "string",
              "description" : "ID of the ContentVersion record associated with a ContentComment. This field is null for all comments except ContentComment. For example, set this field to an existing ContentVersion ID and set the CommentType to ContentComment."
            },
            "IsRichText" : {
              "type" : "boolean",
              "description" : "Indicates whether the feed CommentBody contains rich text. If you post a rich text feed comment using SOAP API, set IsRichText to true and escape HTML entities from the body. Otherwise, the comment is rendered as plain text. Rich text supports the following HTML tags: <p>Though the <br> tag isn’t supported, you can use <p> </p> to create lines. <a> <b> <code> <i> <u> <s> <ul> <ol> <li> <img> The <img> tag is accessible only through the API and must reference files in Salesforce similar to this example: <img src=\"sfdc://069B0000000omjh\"></img> This attribute is available as of API version 38.0. In API version 38.0 and later, the system replaces special characters in rich text with escaped HTML. In API version 37.0 and prior, all rich text appears as a plain-text representation."
            },
            "IsVerified" : {
              "type" : "boolean",
              "description" : "Determines whether a comment on a question is marked as Company Verified. This field is available in API version 41.0 and later.",
              "readOnly" : true
            },
            "HasEntityLinks" : {
              "type" : "boolean",
              "description" : "Indicates whether the feed CommentBody includes at least one link to a record.This field is available starting in API version 43.0.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "Specifies whether this feed comment is published and visible to all who can access the parent feed item. To change a comment’s status, the comment’s parent feed item must be in a published state. This field is available in API version 38.0 and later."
            },
            "ThreadParentId" : {
              "type" : "string",
              "description" : "The identifier of the feed item that is the parent of this comment. This field is available on the object when Allow discussion threads is selected in the Administration Workspace. This field is available in API version 44.0 and later."
            },
            "ThreadLevel" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The identifier that shows the level of this Feed Comment in a thread. By default, there are a maximum of three levels in a thread. The ThreadLevel value shows in which of the three levels this comment falls. This field is available on the object when Allow discussion threads is selected in the Administration Workspace. This field is available in API version 44.0 and later."
            },
            "ThreadChildrenCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The count of comments associated with this parent feed object. The feed object can be either a Feed Item or a Feed Comment. The count shows how many comments are directly subordinate to the parent. This field is available on the object when Allow discussion threads is selected in the Administration Workspace. This field is available in API version 44.0 and later."
            },
            "ThreadLastUpdatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time the thread on this comment was last updated. This field is available on the object when Allow discussion threads is selected in the Administration Workspace. This field is available in API version 44.0 and later."
            }
          }
        } ]
      },
      "FeedItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "FeedItem represents an entry in the feed, such as changes in a record feed, including text posts, link posts, and content posts.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the object type to which the feed item is related. For example, set this field to a UserId to post to someone’s profile feed, or an AccountId to post to a specific account."
            },
            "Type" : {
              "type" : "string",
              "description" : "The type of feed item. Except for ContentPost, LinkPost, and TextPost, don’t create feed items of other types directly from the API. ActivityEvent—indirectly generated event when a user or the API adds a Task associated with a feed-enabled parent record (excluding email tasks on cases). Also occurs when a user or the API adds or updates a Task or Event associated with a case record (excluding email and call logging). For a recurring Task with CaseFeed disabled, one event is generated for the series only. For a recurring Task with CaseFeed enabled, events are generated for the series and each occurrence. AdvancedTextPost—created when a user posts a group announcement and, in Lightning Experience as of API version 39.0 and later, when a user shares a post. AnnouncementPost—Not used. ApprovalPost—generated when a user submits an approval. BasicTemplateFeedItem—Not used. CanvasPost—a post made by a canvas app posted on a feed. CollaborationGroupCreated—generated when a user creates a public group. CollaborationGroupUnarchived—Not used. ContentPost—a post with an attached file. CreatedRecordEvent—generated when a user creates a record from the publisher. DashboardComponentAlert—generated when a dashboard metric or gauge exceeds a user-defined threshold. DashboardComponentSnapshot—created when a user posts a dashboard snapshot on a feed. LinkPost—a post with an attached URL. PollPost—a poll posted on a feed. ProfileSkillPost—generated when a skill is added to a user’s Chatter profile. QuestionPost—generated when a user posts a question. ReplyPost—generated when Chatter Answers posts a reply. RypplePost—generated when a user creates a Thanks badge in WDC. TextPost—a direct text entry on a feed. TrackedChange—a change or group of changes to a tracked field. UserStatus—automatically generated when a user adds a post. Deprecated. The following values appear in the Type picklist for all feed objects but apply only to CaseFeed: AttachArticleEvent—generated event when a user attaches an article to a case. CallLogPost—generated event when a user logs a call for a case through the user interface. CTI calls also generate this event. CaseCommentPost—generated event when a user adds a case comment for a case object. ChangeStatusPost—generated event when a user changes the status of a case. ChatTranscriptPost—generated event when Chat transcript is saved to a case. EmailMessageEvent—generated event when an email related to a case object is sent or received. FacebookPost—generated when a Facebook post is created from a case. Deprecated. MilestoneEvent—generated when a case milestone is completed or reaches violation status. SocialPost—generated when a social post is created from a case. If you set Type to ContentPost, also specify ContentData and ContentFileName."
            },
            "CreatedById" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Standard system field. Indicates whether the record has been moved to the Recycle Bin (true) or not (false).",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Revision" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The revision number of the feed item."
            },
            "LastEditById" : {
              "type" : "string",
              "description" : "ID of the user who last edited the feed item."
            },
            "LastEditDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date the feed item was last edited."
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of comments associated with this feed item.",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of likes associated with this feed item.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "The title of the feed item. When the Type is LinkPost, the LinkUrl is the URL and this field is the link name. The Title field can be updated on posts of Type QuestionPost."
            },
            "Body" : {
              "type" : "string",
              "description" : "The body of the feed item. Required when Type is TextPost or AdvancedTextPost. Optional when Type is ContentPost or LinkPost."
            },
            "LinkUrl" : {
              "type" : "string",
              "description" : "The URL of a LinkPost."
            },
            "IsRichText" : {
              "type" : "boolean",
              "description" : "Indicates whether the feed item Body contains rich text. If you post a rich text feed comment using SOAP API, set IsRichText to true and escape HTML entities from the body. Otherwise, the post is rendered as plain text. Rich text supports the following HTML tags: <p>Though the <br> tag isn’t supported, you can use <p> </p> to create lines. <a> <b> <code> <i> <u> <s> <ul> <ol> <li> <img> The <img> tag is accessible only through the API and must reference files in Salesforce similar to this example: <img src=\"sfdc://069B0000000omjh\"></img> In API version 35.0 and later, the system replaces special characters in rich text with escaped HTML. In API version 34.0 and prior, all rich text appears as a plain-text representation."
            },
            "RelatedRecordId" : {
              "type" : "string",
              "description" : "ID of the ContentVersion record associated with a ContentPost. For WDC thanks posts, it’s the ID of the WorkThanks object associated with a RypplePost. This field is typically null for all posts except ContentPost and RypplePost. For example, set this field to an existing ContentVersion ID and post it to a feed with Type set to ContentPost."
            },
            "InsertedById" : {
              "type" : "string",
              "description" : "ID of the user who added this item to the feed. For example, if an application migrates posts and comments from another application into a feed, the InsertedBy value is set to the ID of the context user.",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "description" : "The ID of the comment marked as best answer on a question post.",
              "readOnly" : true
            },
            "HasContent" : {
              "type" : "boolean",
              "description" : "Indicates whether the feed item has content.",
              "readOnly" : true
            },
            "HasLink" : {
              "type" : "boolean",
              "description" : "Indicates whether the feed item has a link attached.",
              "readOnly" : true
            },
            "HasFeedEntity" : {
              "type" : "boolean",
              "description" : "Indicates whether the feed item has a feed entity, for example, a post, as an attachment. Available in API version 39 and later when sharing a feed entity in Lightning Experience.",
              "readOnly" : true
            },
            "HasVerifiedComment" : {
              "type" : "boolean",
              "description" : "Determines whether a question has an answer that is marked as Company Verified. This field is available in API version 41.0 and later.",
              "readOnly" : true
            },
            "IsClosed" : {
              "type" : "boolean",
              "description" : "As of API version 43, a read-only field that indicates whether the feed item is open or closed to new actions. A value of true places restrictions on the actions a user can take on a feed item and its comments. For more information, see the Usage section.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "Specifies whether this feed item is published and visible to all who can access the feed. This field is available in API version 37.0 and later."
            }
          }
        } ]
      },
      "FeedLike" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Indicates that a user has liked a feed item.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "FeedItemId" : {
              "type" : "string",
              "description" : "ID of the feed item that the user liked."
            },
            "FeedEntityId" : {
              "type" : "string",
              "description" : "The ID of a feed item or feed comment the user liked. If the user liked a comment, FeedEntityId is set to the ID of the comment. If the user liked a feed item, FeedEntityId is set to the ID of the feed item. This field is optional. The default value is the ID of the feed item."
            },
            "CreatedById" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "description" : "ID of the user who added this item to the feed. For example, if an application migrates posts and comments from another application into a feed, the InsertedBy value is set to the ID of the context user.",
              "readOnly" : true
            }
          }
        } ]
      },
      "FeedPollChoice" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Shows the choices for a poll posted in the feed.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "FeedItemId" : {
              "type" : "string",
              "description" : "ID of the feed item for the poll.",
              "readOnly" : true
            },
            "Position" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Shows the position of the poll choice.",
              "readOnly" : true
            },
            "ChoiceBody" : {
              "type" : "string",
              "description" : "A choice in the poll.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FeedPollVote" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Shows how users voted on a poll posted in the feed.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "FeedItemId" : {
              "type" : "string",
              "description" : "ID of the feed item for the poll.",
              "readOnly" : true
            },
            "ChoiceId" : {
              "type" : "string",
              "description" : "Indicates which choice a user selected on a poll posted in a feed.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FeedRevision" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Holds the revision history of a specific feed item or comment, including a list of attributes that changed for each revision.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the record has been moved to the Recycle Bin (true) or not (false). This field is a standard system field.",
              "readOnly" : true
            },
            "FeedEntityId" : {
              "type" : "string",
              "description" : "Identifies the modified feed item or comment.",
              "readOnly" : true
            },
            "Revision" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The revision number of the feed item or comment.",
              "readOnly" : true
            },
            "Action" : {
              "type" : "string",
              "description" : "Holds the type of modification to the underlying feed item or comment attribute. Action can have the value Changed.",
              "readOnly" : true
            },
            "EditedAttribute" : {
              "type" : "string",
              "description" : "Identifies the part of the feed item or comment which was modified. A single revision can have many edited attributes.",
              "readOnly" : true
            },
            "Value" : {
              "type" : "string",
              "description" : "Identifies the value of the EditedAttribute field before the update.",
              "readOnly" : true
            },
            "IsValueRichText" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FeedSignal" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "FeedItemId" : {
              "type" : "string"
            },
            "FeedEntityId" : {
              "type" : "string"
            },
            "SignalValue" : {
              "type" : "integer",
              "format" : "int32"
            },
            "SignalType" : {
              "type" : "string"
            },
            "CreatedById" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "FeedTrackedChange" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an individual field change or set of field changes. A FeedTrackedChange is a child object of a record feed, such as AccountFeed.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "FeedItemId" : {
              "type" : "string",
              "description" : "ID of the parent feed that tracks the field change.",
              "readOnly" : true
            },
            "FieldName" : {
              "type" : "string",
              "description" : "The name of the field that was changed.This field also tracks other events that are not related to an individual field for a parent feed. These events occur as the parent record advances through its pipeline. For example, a value of leadConverted indicates that a lead has been converted to an opportunity. For a full list of values, see Tracking of Special Events.",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "description" : "The last value of the field before it was changed.",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "description" : "The new value of the field that was changed.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FieldDefinition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "QualifiedApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "EntityDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "readOnly" : true
            },
            "Length" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ServiceDataTypeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ValueTypeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExtraTypeInfo" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsCalculated" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsHighScaleNumber" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsHtmlFormatted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsNameField" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsNillable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsWorkflowFilterable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsCompactLayoutable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Precision" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Scale" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "IsFieldHistoryTracked" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsIndexed" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsApiFilterable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsApiSortable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsListFilterable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsListSortable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsApiGroupable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsListVisible" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ControllingFieldDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "PublisherId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RunningUserFieldAccessId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelationshipName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReferenceTo" : {
              "type" : "object",
              "readOnly" : true
            },
            "ReferenceTargetField" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsCompound" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsSearchPrefilterable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsPolymorphicForeignKey" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "BusinessOwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "BusinessStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "SecurityClassification" : {
              "type" : "string",
              "readOnly" : true
            },
            "ComplianceGroup" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FieldPermissions" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the enabled field permissions for the parent PermissionSet.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The Id of the field’s parent PermissionSet."
            },
            "SobjectType" : {
              "type" : "string",
              "description" : "The object’s API name. For example, Merchandise__c."
            },
            "Field" : {
              "type" : "string",
              "description" : "The field’s API name. This name must be prefixed with the SobjectType. For example, Merchandise__c.Description__c"
            },
            "PermissionsEdit" : {
              "type" : "boolean",
              "description" : "If true, users assigned to the parent PermissionSet can edit this field. Requires PermissionsRead for the same field to be true."
            },
            "PermissionsRead" : {
              "type" : "boolean",
              "description" : "If true, users assigned to the parent PermissionSet can view this field. A FieldPermissions record must have at minimum PermissionsRead set to true, or it will be deleted."
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "FieldSecurityClassification" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a field’s data sensitivity value selected from the SecurityClassification picklist.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The data sensitivity picklist value. Default values: Public Internal Confidential Restricted MissionCritical",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "description" : "The API name of the data sensitivity picklist value. Default values: Public Internal Confidential Restricted MissionCritical",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The value’s position in the picklist.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "The description of the data sensitivity picklist value.",
              "readOnly" : true
            },
            "IsHighRiskLevel" : {
              "type" : "boolean",
              "description" : "Indicates that fields with this picklist value contain data highly sensitive to your company.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FileEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "DocumentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "VersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FileName" : {
              "type" : "string",
              "readOnly" : true
            },
            "FileType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentSize" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CanDownloadPdf" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "VersionNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProcessDuration" : {
              "type" : "number",
              "readOnly" : true
            },
            "IsLatestVersion" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "FileSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "FileAction" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FileEventStore" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "DocumentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "VersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FileName" : {
              "type" : "string",
              "readOnly" : true
            },
            "FileType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentSize" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CanDownloadPdf" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "VersionNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProcessDuration" : {
              "type" : "number",
              "readOnly" : true
            },
            "IsLatestVersion" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "FileSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "FileAction" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FileSearchActivity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SearchTerm" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueryDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "CountQueries" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CountUsers" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "AvgNumResults" : {
              "type" : "number",
              "readOnly" : true
            },
            "Period" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueryLanguage" : {
              "type" : "string",
              "readOnly" : true
            },
            "ClickRank" : {
              "type" : "number",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FiscalYearSettings" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Settings to define a custom or standard fiscal year for your organization. This object has a parent-child relationship with the Period object.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "PeriodId" : {
              "type" : "string",
              "description" : "ID of the associated fiscal period.",
              "readOnly" : true
            },
            "StartDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Start date of the fiscal year.",
              "readOnly" : true
            },
            "EndDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "End date of the fiscal year.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "A name for the fiscal year. Limit: 80 characters.",
              "readOnly" : true
            },
            "IsStandardYear" : {
              "type" : "boolean",
              "description" : "Indicates whether the fiscal year is a standard calendar year (true) or a custom fiscal year (false).",
              "readOnly" : true
            },
            "YearType" : {
              "type" : "string",
              "description" : "Indicates one of two types of fiscal years, Standard or Custom. Standard denotes the standard Gregorian calendar, while Custom means a fiscal year with a custom structure.",
              "readOnly" : true
            },
            "QuarterLabelScheme" : {
              "type" : "string",
              "description" : "The numbering scheme used for fiscal quarters.",
              "readOnly" : true
            },
            "PeriodLabelScheme" : {
              "type" : "string",
              "description" : "The numbering scheme used for fiscal periods.",
              "readOnly" : true
            },
            "WeekLabelScheme" : {
              "type" : "string",
              "description" : "The numbering scheme used for weeks.",
              "readOnly" : true
            },
            "QuarterPrefix" : {
              "type" : "string",
              "description" : "The prefix of fiscal quarters. For example, if “Q” is the prefix, then the fourth quarter would be “Q4.”",
              "readOnly" : true
            },
            "PeriodPrefix" : {
              "type" : "string",
              "description" : "The prefix of fiscal periods. For example, if p is the prefix, then the first period is “P1.”",
              "readOnly" : true
            },
            "WeekStartDay" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The name of the day that starts the week, for example Monday or Sunday",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the setting.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlexQueueItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an asynchronous Apex job in the Apex flex queue. Provides information about the job type and flex queue position of the AsyncApexJob.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlexQueueItemId" : {
              "type" : "string",
              "description" : "The primary key for this FlexQueueItem.",
              "readOnly" : true
            },
            "JobType" : {
              "type" : "string",
              "description" : "The type of the job. Valid values are: ApexToken BatchApex BatchApexWorker Future Queueable ScheduledApex SharingRecalculation TestRequest TestWorker Currently, queries are supported only on BatchApex jobs.",
              "readOnly" : true
            },
            "AsyncApexJobId" : {
              "type" : "string",
              "description" : "The ID of an that’s waiting in the flex queue.",
              "readOnly" : true
            },
            "JobPosition" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The position in the flex queue of the waiting job. The highest-priority job in the queue is at position 0.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowDefinitionView" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the description of a flow definition.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "The ID of the flow definition.",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "description" : "The API name of the flow definition.",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "description" : "The label of the flow definition.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Flow definition information, specified by the org’s admin.",
              "readOnly" : true
            },
            "ProcessType" : {
              "type" : "string",
              "description" : "The type of the flow. Valid values are:Appointments—A flow for Lightning Scheduler. This value is available in API version 44.0 and later. AutoLaunchedFlow—A flow that doesn’t require user interaction. CheckoutFlow—A flow used in Lightning B2B Commerce to create a checkout in a store. This value is available in API version 48.0 and later. ContactRequestFlow—A flow that lets customers request that customer support get back to them. This flow is used to create contact request records. This value is available in API version 45.0 and later. CustomerLifecycle—A Salesforce Surveys flow that lets you associate survey questions with different stages in customer lifecycles. This value is available in API version 49.0 and later and only when the Customer Lifecycle Designer license is enabled. CustomEvent—A process that is invoked when it receives a platform event message. In the UI, it’s an event process. This value is available in API version 41.0 and later. FieldServiceMobile—A flow for the Field Service mobile app. This value is available in API version 39.0 and later. FieldServiceWeb—A flow for embedded Appointment Booking. Its UI label is Field Service Embedded Flow. This value is available in API version 41.0 and later. Flow—A flow that requires user interaction because it contains one or more screens or local actions, choices, or dynamic choices. In the UI and Salesforce Help, it’s a screen flow. Screen flows can be launched from the UI, such as with a flow action, Lightning page, or web tab. FSCLending— A flow for Financial Services Cloud Mortgage. This value is available in API version 46.0 and later. FSCLending—A flow for login. This value is available in API version 51.0 and later. InvocableProcess—A process that can be invoked by another process or the Invocable Actions resource in REST API. This value is available in API version 38.0 and later. Survey—A flow for Salesforce Surveys. From the UI, this type of flow is created in Survey Builder. This value is available in API version 42.0 and later. SurveyEnrich—A Salesforce Surveys flow that uses the Survey Data Mapper. From the UI, this type of flow is created in the Survey Builder and requires an associated survey flow type. This value is available in API version 49.0 or later and only when the Customer Lifecycle Designer license is enabled. Workflow—A process that is invoked when a record is created or edited. In the UI and Salesforce Help, it’s a record change process. These values are reserved for future use. ActionCadenceFlow ActionPlan AppProcess CartAsyncFlow DigitalForm Journey JourneyBuilderIntegration LoginFlow ManagedContentFlow OrchestrationFlow RecommendationStrategy SalesEntryExperienceFlow TransactionSecurityFlow UserProvisioningFlowThis value has significant impact on validation when saving the flow and on the flow’s runtime behavior. Don’t change this value unless you understand the flow properties of the specified type.",
              "readOnly" : true
            },
            "TriggerType" : {
              "type" : "string",
              "description" : "Specifies what causes the flow to run. If you exclude this field, the flow has no trigger and starts only when a user or app launches the flow. Valid value is: PlatformEvent—The flow starts when a platform event message is received. This value is available in API version 49.0 and later. RecordAfterSave—The flow starts after a record is saved. This value is available in API version 49.0 and later. RecordBeforeSave—Creating and/or updating a record triggers an autolaunched flow to make additional updates to that record before it's saved to the database. This value is available in API version 48.0 and later. Scheduled—The flow starts at the scheduled time. This value is available in API version 47.0 and later.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The namespace prefix associated with the flow definition.",
              "readOnly" : true
            },
            "ActiveVersionId" : {
              "type" : "string",
              "description" : "The ID of the active flow version.",
              "readOnly" : true
            },
            "LatestVersionId" : {
              "type" : "string",
              "description" : "The ID of the latest flow version, regardless of the flow’s status.",
              "readOnly" : true
            },
            "LastModifiedBy" : {
              "type" : "string",
              "description" : "Name of the user who last updated this flow definition.",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the latest version of the flow definition is the active flow version.",
              "readOnly" : true
            },
            "IsOutOfDate" : {
              "type" : "boolean",
              "description" : "Indicates whether the active flow version is the latest version of the flow definition.",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsTemplate" : {
              "type" : "boolean",
              "description" : "Indicates whether the process or flow is a template. When installed from managed packages, processes and flows can’t be viewed or cloned by subscribers because of intellectual property (IP) protection. But when those processes and flows are templates, subscribers can open them in a builder, clone them, and customize the clones.",
              "readOnly" : true
            },
            "IsOverridable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OverriddenById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceTemplateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "OverriddenFlowId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsSwingFlow" : {
              "type" : "boolean",
              "description" : "Indicates whether the flow is built with Desktop Flow Designer.",
              "readOnly" : true
            },
            "Builder" : {
              "type" : "string",
              "description" : "The name of the tool that created this flow. Possible values are: Cloud Flow Designer Flow Builder Swing Designer",
              "readOnly" : true
            },
            "ManageableState" : {
              "type" : "string",
              "description" : "Indicates the manageable state of the flow that is contained in a package. Possible values are: beta deleted deprecated deprecatedEditable installed installedEditable released unmanaged",
              "readOnly" : true
            },
            "InstalledPackageName" : {
              "type" : "string",
              "description" : "The name of the installed package that includes this flow definition.",
              "readOnly" : true
            },
            "TriggerObjectOrEventLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "TriggerObjectOrEventId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecordTriggerType" : {
              "type" : "string",
              "readOnly" : true
            },
            "HasAsyncAfterCommitPath" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "VersionNumber" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "TriggerOrder" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Environments" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CapacityCategory" : {
              "type" : "string",
              "readOnly" : true
            },
            "AreMetricsLoggedToDataCloud" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SupportedEnvironments" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowExecutionErrorEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "InterviewStartDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FlowExecutionStartDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FlowExecutionEndDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "InterviewGuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "InterviewBatchId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InterviewRequestId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowNamespace" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowVersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "StageQualifiedApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProcessType" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventType" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowVersionNumber" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ContextRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContextObject" : {
              "type" : "string",
              "readOnly" : true
            },
            "InterviewStartedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ErrorId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExtendedErrorCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "ErrorMessage" : {
              "type" : "string",
              "readOnly" : true
            },
            "ElementApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ElementType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowInterview" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a flow interview. A flow interview is a running instance of a flow.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the user who owns the interview. Only this user or an admin can resume the interview.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name for the interview.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CurrentElement" : {
              "type" : "string",
              "description" : "The flow element at which the interview is currently paused.",
              "readOnly" : true
            },
            "InterviewLabel" : {
              "type" : "string",
              "description" : "Label for the interview. This label helps users and administrators differentiate interviews from the same flow.In the user interface, this label appears in the Paused Flow Interviews component on the user’s Home tab and in the list of paused flow interviews in Setup.",
              "readOnly" : true
            },
            "PauseLabel" : {
              "type" : "string",
              "description" : "Information about why the interview was paused. This string is entered by the user who paused the flow interview. The label is Why Paused.",
              "readOnly" : true
            },
            "Guid" : {
              "type" : "string",
              "description" : "Globally unique identifier for the interview.",
              "readOnly" : true
            },
            "WasPausedFromScreen" : {
              "type" : "boolean",
              "description" : "Whether or not the flow interview was paused by a user from a flow Screen element. This field is available in API version 46.0 and later.",
              "readOnly" : true
            },
            "FlowVersionViewId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InterviewStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "EngineType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Error" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowInterviewLog" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FlowDeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowInterviewGuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowVersionNumber" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "InterviewStartTimestamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "InterviewEndTimestamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "InterviewDurationInMinutes" : {
              "type" : "number",
              "readOnly" : true
            },
            "InterviewStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowNamespace" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowLabel" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowInterviewLogEntry" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FlowInterviewLogId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LogEntryType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ElementApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "LogEntryTimestamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "DurationSinceStartInMinutes" : {
              "type" : "number",
              "readOnly" : true
            },
            "ElementDurationInMinutes" : {
              "type" : "number",
              "readOnly" : true
            },
            "ElementLabel" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowInterviewLogShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowInterviewShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a sharing entry on a FlowInterview.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the FlowInterview associated with this sharing entry."
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "ID of the User or Group that has been given access to the FlowInterview. This field can't be updated."
            },
            "AccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the User or Group has to the FlowInterview. The possible values are: Read Edit—In API version 42.0 and later, when Let users resume shared flow interviews is enabled for your org, users can resume all flow interviews that they have edit access to. All—This value is not valid for creating or deleting records."
            },
            "RowCause" : {
              "type" : "string",
              "description" : "Reason that this sharing entry exists. You can only write to this field when its value is either omitted or set to Manual (default)."
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowOrchestration" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OrchestrationDefinition" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string"
            },
            "TriggerType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OrchestrationType" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "ManageableState" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActiveVersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsCitizenEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OrchestrationLabel" : {
              "type" : "string"
            },
            "ApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "InstalledPackageName" : {
              "type" : "string",
              "readOnly" : true
            },
            "RunCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CompletionRate" : {
              "type" : "number",
              "readOnly" : true
            },
            "AverageRunTime" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "FailedRunCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "IsTemplate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SourceTemplateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsOverridable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OverriddenById" : {
              "type" : "string",
              "readOnly" : true
            },
            "OverriddenOrchestrationId" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowOrchestrationChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "OrchestrationDefinition" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "TriggerType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OrchestrationType" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "ManageableState" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActiveVersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsCitizenEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OrchestrationLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "InstalledPackageName" : {
              "type" : "string",
              "readOnly" : true
            },
            "RunCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CompletionRate" : {
              "type" : "number",
              "readOnly" : true
            },
            "AverageRunTime" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "FailedRunCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "IsTemplate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SourceTemplateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsOverridable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OverriddenById" : {
              "type" : "string",
              "readOnly" : true
            },
            "OverriddenOrchestrationId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowOrchestrationEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "OrchestrationInstanceId" : {
              "type" : "string"
            },
            "StepInstanceId" : {
              "type" : "string"
            },
            "StepStatus" : {
              "type" : "string"
            },
            "EventPayload" : {
              "type" : "string"
            }
          }
        } ]
      },
      "FlowOrchestrationInstance" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string"
            },
            "InterviewId" : {
              "type" : "string"
            },
            "OrchestrationDeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "OrchestrationLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "Duration" : {
              "type" : "number",
              "readOnly" : true
            },
            "CurrentStage" : {
              "type" : "string",
              "readOnly" : true
            },
            "TriggeringRecord" : {
              "type" : "string"
            }
          }
        } ]
      },
      "FlowOrchestrationInstanceShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowOrchestrationLog" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OrchestrationName" : {
              "type" : "string",
              "readOnly" : true
            },
            "OrchestrationVersion" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "OrchestrationInstanceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "StageName" : {
              "type" : "string",
              "readOnly" : true
            },
            "StepName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Actor" : {
              "type" : "string",
              "readOnly" : true
            },
            "Kind" : {
              "type" : "string",
              "readOnly" : true
            },
            "Timestamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Duration" : {
              "type" : "number",
              "readOnly" : true
            },
            "Context" : {
              "type" : "string",
              "readOnly" : true
            },
            "AssigneeType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Assignee" : {
              "type" : "string",
              "readOnly" : true
            },
            "Comments" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowOrchestrationStageInstance" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OrchestrationInstanceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "Position" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowOrchestrationStageInstanceShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowOrchestrationStepInstance" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OrchestrationInstanceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "StageInstanceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "StepType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowOrchestrationStepInstanceShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowOrchestrationVersion" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FlowOrchestrationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "VersionNumber" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ActivatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActivatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OrchestrationType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "RunInMode" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "readOnly" : true
            },
            "IsTemplate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "TriggerObjectOrEventLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceTemplateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsOverridable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OverriddenById" : {
              "type" : "string",
              "readOnly" : true
            },
            "OverriddenOrchestrationId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowOrchestrationVersionChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowOrchestrationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "VersionNumber" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ActivatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActivatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OrchestrationType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "RunInMode" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "readOnly" : true
            },
            "IsTemplate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "TriggerObjectOrEventLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceTemplateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsOverridable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OverriddenById" : {
              "type" : "string",
              "readOnly" : true
            },
            "OverriddenOrchestrationId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowOrchestrationWorkItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "StepInstanceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "AssigneeId" : {
              "type" : "string"
            },
            "ScreenFlow" : {
              "type" : "string",
              "readOnly" : true
            },
            "ScreenFlowInputs" : {
              "type" : "string",
              "readOnly" : true
            },
            "ElapsedTimeSinceCreationInSec" : {
              "type" : "number",
              "readOnly" : true
            },
            "ElapsedTimeSinceAsgntInSec" : {
              "type" : "number",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowOrchestrationWorkItemShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowRecord" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FlowDefinition" : {
              "type" : "string",
              "readOnly" : true
            },
            "AssociatedRecordId" : {
              "type" : "string"
            },
            "Description" : {
              "type" : "string"
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProgressStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "ScheduledStartDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ErrorCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "ErrorDetails" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowCategory" : {
              "type" : "string"
            },
            "FlowSubcategory" : {
              "type" : "string"
            },
            "IsPaused" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "FlowType" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "ManageableState" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActiveVersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "IsTemplate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "TriggerObjectOrEventLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "Builder" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceTemplateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsOverridable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OverriddenById" : {
              "type" : "string",
              "readOnly" : true
            },
            "OverriddenFlowId" : {
              "type" : "string",
              "readOnly" : true
            },
            "StartSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsCitizenEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "FlowLabel" : {
              "type" : "string"
            },
            "ApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "InstalledPackageName" : {
              "type" : "string",
              "readOnly" : true
            },
            "CapacityCategory" : {
              "type" : "string",
              "readOnly" : true
            },
            "AreMetricsLoggedToDataCloud" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowRecordChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowDefinition" : {
              "type" : "string",
              "readOnly" : true
            },
            "AssociatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProgressStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "ScheduledStartDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ErrorCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "ErrorDetails" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowCategory" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowSubcategory" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsPaused" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "FlowType" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "ManageableState" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActiveVersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "IsTemplate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "TriggerObjectOrEventLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "Builder" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceTemplateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsOverridable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OverriddenById" : {
              "type" : "string",
              "readOnly" : true
            },
            "OverriddenFlowId" : {
              "type" : "string",
              "readOnly" : true
            },
            "StartSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsCitizenEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "FlowLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "InstalledPackageName" : {
              "type" : "string",
              "readOnly" : true
            },
            "CapacityCategory" : {
              "type" : "string",
              "readOnly" : true
            },
            "AreMetricsLoggedToDataCloud" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowRecordElement" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FlowRecordVersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ElementName" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowRecordElementChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowRecordVersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ElementName" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowRecordRelation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a relationship between a record and a flow interview. When a flow interview is paused, Salesforce uses the $Flow.CurrentRecord global variable in the flow to associate the interview with a record.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The auto-generated ID of this relation.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The flow interview that the record is related to."
            },
            "RelatedRecordId" : {
              "type" : "string",
              "description" : "The record that the flow interview is related to. Make sure that this field contains only one ID, and that the ID is for a valid object. Custom objects and most standard objects are supported. To confirm whether an object is supported, see the Reference To property for this field in Workbench."
            }
          }
        } ]
      },
      "FlowRecordShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowRecordVersion" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FlowRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "VersionNumber" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ActivatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActivatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ProgressStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsPaused" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PausingUserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PausedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ResumingUserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ResumedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ReasonPaused" : {
              "type" : "string",
              "readOnly" : true
            },
            "ScheduledStartDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FlowType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "RunInMode" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "readOnly" : true
            },
            "IsTemplate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "TriggerObjectOrEventLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "Builder" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceTemplateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsOverridable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OverriddenById" : {
              "type" : "string",
              "readOnly" : true
            },
            "OverriddenFlowId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CapacityCategory" : {
              "type" : "string",
              "readOnly" : true
            },
            "AreMetricsLoggedToDataCloud" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowRecordVersionChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "VersionNumber" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ActivatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActivatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ProgressStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsPaused" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PausingUserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PausedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ResumingUserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ResumedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ReasonPaused" : {
              "type" : "string",
              "readOnly" : true
            },
            "ScheduledStartDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FlowType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "RunInMode" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "readOnly" : true
            },
            "IsTemplate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "TriggerObjectOrEventLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "Builder" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceTemplateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsOverridable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OverriddenById" : {
              "type" : "string",
              "readOnly" : true
            },
            "OverriddenFlowId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CapacityCategory" : {
              "type" : "string",
              "readOnly" : true
            },
            "AreMetricsLoggedToDataCloud" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowRecordVersionOccurrence" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FlowRecordVersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProgressStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "ScheduledDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ErrorDetail" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowStageRelation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a relationship between a paused flow interview and its stages. When a flow interview is paused, Salesforce creates a FlowStageRelation record for each stage that’s set to the $Flow.CurrentStage or $Flow.ActiveStages global variable.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The auto-generated ID of this relation.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The flow interview that the record is related to.",
              "readOnly" : true
            },
            "StageId" : {
              "type" : "string",
              "readOnly" : true
            },
            "StageOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The order of this stage when the flow interview was paused. This order may differ from the order in the stage definition. If the type is Active, the order corresponds to the order of the stage in $Flow.ActiveStages. If the type is Current and corresponds to an active stage, the order matches the order of the active stage. If the type is Current and doesn't correspond to an active stage, the order is 0.",
              "readOnly" : true
            },
            "StageType" : {
              "type" : "string",
              "description" : "Type of stage. The valid values are: Current: Identifies that the stage is set to $Flow.CurrentStage. Active: Identifies that the stage is set to $Flow.ActiveStages.",
              "readOnly" : true
            },
            "StageLabel" : {
              "type" : "string",
              "description" : "Label for the stage. If the stage is translated, the label respects the language of the user who is querying the label.",
              "readOnly" : true
            },
            "FlexIndex" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowTestResult" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FlowVersionNumber" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Result" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowTestViewId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowVersionViewId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowDefinitionViewId" : {
              "type" : "string",
              "readOnly" : true
            },
            "TestStartDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "TestEndDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowTestResultShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "FlowTestView" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowDefinitionViewId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowTestApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "FlowTestLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowVariableView" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a variable within the flow version.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "The Id of the flow variable.",
              "readOnly" : true
            },
            "FlowVersionViewId" : {
              "type" : "string",
              "description" : "The Id of the flow version.",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "description" : "The API name of the flow variable.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Flow variable information, specified by the org’s admin.",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "description" : "The data type of the flow variable. Valid values are: Apex—This value is available in API version 46.0 and later. Boolean Currency Date DateTime—This value is available in API version 30.0 and later. Number Multipicklist—This value is available in API version 34.0 and later. Picklist—This value is available in API version 34.0 and later. String sObject",
              "readOnly" : true
            },
            "IsInput" : {
              "type" : "boolean",
              "description" : "Indicated whether or not the flow variable is available for input.",
              "readOnly" : true
            },
            "IsOutput" : {
              "type" : "boolean",
              "description" : "Indicates whether or not the flow variable is available for output.",
              "readOnly" : true
            },
            "IsCollection" : {
              "type" : "boolean",
              "description" : "Indicates whether or not the flow variable is a collection of values.",
              "readOnly" : true
            },
            "ObjectType" : {
              "type" : "string",
              "description" : "If the data type is sObject, this field indicates which object.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FlowVersionView" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the version of a flow definition.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "The ID of the flow version.",
              "readOnly" : true
            },
            "FlowDefinitionViewId" : {
              "type" : "string",
              "description" : "The ID of the flow definition.",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "description" : "The label of the flow version.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Flow version information, specified by the org’s admin.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "The flow’s status. Active Draft Obsolete InvalidDraft",
              "readOnly" : true
            },
            "VersionNumber" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The flow’s version number.",
              "readOnly" : true
            },
            "ProcessType" : {
              "type" : "string",
              "description" : "The type of the flow. Valid values are:Appointments—A flow for Lightning Scheduler. This value is available in API version 44.0 and later. AutoLaunchedFlow—A flow that doesn’t require user interaction. CheckoutFlow—A flow used in Lightning B2B Commerce to create a checkout in a store. This value is available in API version 48.0 and later. ContactRequestFlow—A flow that lets customers request that customer support get back to them. This flow is used to create contact request records. This value is available in API version 45.0 and later. CustomerLifecycle—A Salesforce Surveys flow that lets you associate survey questions with different stages in customer lifecycles. This value is available in API version 49.0 and later and only when the Customer Lifecycle Designer license is enabled. CustomEvent—A process that is invoked when it receives a platform event message. In the UI, it’s an event process. This value is available in API version 41.0 and later. FieldServiceMobile—A flow for the Field Service mobile app. This value is available in API version 39.0 and later. FieldServiceWeb—A flow for embedded Appointment Booking. Its UI label is Field Service Embedded Flow. This value is available in API version 41.0 and later. Flow—A flow that requires user interaction because it contains one or more screens or local actions, choices, or dynamic choices. In the UI and Salesforce Help, it’s a screen flow. Screen flows can be launched from the UI, such as with a flow action, Lightning page, or web tab. FSCLending— A flow for Financial Services Cloud Mortgage. This value is available in API version 46.0 and later. FSCLending—A flow for login. This value is available in API version 51.0 and later. InvocableProcess—A process that can be invoked by another process or the Invocable Actions resource in REST API. This value is available in API version 38.0 and later. Survey—A flow for Salesforce Surveys. From the UI, this type of flow is created in Survey Builder. This value is available in API version 42.0 and later. SurveyEnrich—A Salesforce Surveys flow that uses the Survey Data Mapper. From the UI, this type of flow is created in the Survey Builder and requires an associated survey flow type. This value is available in API version 49.0 or later and only when the Customer Lifecycle Designer license is enabled. Workflow—A process that is invoked when a record is created or edited. In the UI and Salesforce Help, it’s a record change process. These values are reserved for future use. ActionCadenceFlow ActionPlan AppProcess CartAsyncFlow DigitalForm Journey JourneyBuilderIntegration LoginFlow ManagedContentFlow OrchestrationFlow RecommendationStrategy SalesEntryExperienceFlow TransactionSecurityFlow UserProvisioningFlowThis value has significant impact on validation when saving the flow and on the flow’s runtime behavior. Don’t change this value unless you understand the flow properties of the specified type.",
              "readOnly" : true
            },
            "IsTemplate" : {
              "type" : "boolean",
              "description" : "Indicates whether the process or flow is a template. When installed from managed packages, processes and flows can’t be viewed or cloned by subscribers because of intellectual property (IP) protection. But when those processes and flows are templates, subscribers can open them in a builder, clone them, and customize the clones. Available in API version 46.0 and later. Default: false",
              "readOnly" : true
            },
            "RunInMode" : {
              "type" : "string",
              "description" : "The mode that the flow runs in. Valid values are: DefaultMode — The flow version runs in system or user context, depending on how the flow is launched. SystemModeWithSharing — The flow version always runs in system mode with sharing. The flow respects org-wide default settings, role hierarchies, sharing rules, manual sharing, teams, and territories. But it doesn’t respect object permissions, field-level access, or other permissions of the running user.",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsSwingFlow" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "number",
              "description" : "The API version for the flow definition. Every flow version has an API version specified at creation. This field is available in API version 50.0 and later.",
              "readOnly" : true
            },
            "ApiVersionRuntime" : {
              "type" : "number",
              "description" : "The API version for running the flow. This value determines which versioned run-time behavior improvements are adopted by the flow version. If not specified when the flow or flow version is created, the latest available API version is used as the API version for running the flow. When an existing flow is saved as a new flow or flow version, the existing flow’s run-time API version is used in the new flow or flow version. This field is available in API version 50.0 and later.",
              "readOnly" : true
            },
            "CapabilityType" : {
              "type" : "string",
              "readOnly" : true
            },
            "CapacityCategory" : {
              "type" : "string",
              "readOnly" : true
            },
            "AreMetricsLoggedToDataCloud" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Folder" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a repository for a Dashboard, Document, EmailTemplate, Macro, QuickText, or Report. Only one type of item can be contained in a folder.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the parent object, if any."
            },
            "Name" : {
              "type" : "string",
              "description" : "Label of the folder as it appears in the user interface. Label is Document Folder Label."
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization. Label is Folder Unique Name.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "AccessType" : {
              "type" : "string",
              "description" : "Required. Indicates who can access the Folder. Available values include: Hidden—Folder is hidden from everyone. Public—Folder is accessible by all users. Shared—Folder is accessible only by a User in a particular Group or UserRole. The API doesn’t allow you to view, insert, or update which group or Role the Folder is shared with. If analytics folder sharing is turned on for your organization, then this field is present but not used."
            },
            "IsReadonly" : {
              "type" : "boolean",
              "description" : "Indicates whether this Folder is read-only (true) or editable (false). Label is Read Only.If analytics folder sharing is turned on for your organization, then this field is present but not used."
            },
            "Type" : {
              "type" : "string",
              "description" : "Required. Type of objects contained in the Folder. This field can’t be updated. Available values include: Dashboard Document Email (for Salesforce Classic email templates) EmailTemplate (for Lightning email templates) Macro QuickText Report"
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "FolderedContentDocument" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the relationship between a parent and child ContentFolderItem in a ContentWorkspace.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsFolder" : {
              "type" : "boolean",
              "description" : "Indicates that the FolderedContentDocument is a folder, rather than a file.",
              "readOnly" : true
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "ID of the ContentDocument that can be in a folder.",
              "readOnly" : true
            },
            "ParentContentFolderId" : {
              "type" : "string",
              "description" : "ID of the ContentFoldr the ContentDocument resides in.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "Name of the file or folder in a ContentFolder.",
              "readOnly" : true
            },
            "FileType" : {
              "type" : "string",
              "description" : "File type of the ContentDocument.",
              "readOnly" : true
            },
            "ContentSize" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "File size of the ContentDocument.",
              "readOnly" : true
            },
            "FileExtension" : {
              "type" : "string",
              "description" : "File extension of the ContentDocument.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FormulaFunction" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a function used when building a formula, including examples and uses.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "Unique identifier for the field. Always retrieve this value before using it, as the value isn’t guaranteed to stay the same from one release to the next. To simplify queries, use this field.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the formula function.",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "description" : "The formula function label that appears in the user interface.",
              "readOnly" : true
            },
            "CategoryId" : {
              "type" : "string",
              "description" : "The ID of the FormulaFunctionCategory.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the formula function.",
              "readOnly" : true
            },
            "ExampleString" : {
              "type" : "string",
              "description" : "Describes the function and what arguments you can use with it.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FormulaFunctionAllowedType" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the functions that are supported in the given formula context.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "Unique identifier for the field. Always retrieve this value before using it, as the value isn’t guaranteed to stay the same from one release to the next. To simplify queries, use this field.",
              "readOnly" : true
            },
            "FunctionId" : {
              "type" : "string",
              "description" : "Unique identifier for the supported function.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "The name of the formula type in which the function is supported.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "FormulaFunctionCategory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the category to which a formula belongs when building a formula.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "Unique identifier for the field. Always retrieve this value before using it, as the value isn’t guaranteed to stay the same from one release to the next. To simplify queries, use this field.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the FormulaFunctionCategory.",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "description" : "Label of the FormulaFunctionCategory that appears in the user interface.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "GrantedByLicense" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "The GrantedByLicense object shows the different settings granted by different licenses.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PermissionSetLicenseId" : {
              "type" : "string",
              "description" : "ID of the related permission set license.",
              "readOnly" : true
            },
            "CustomPermissionId" : {
              "type" : "string",
              "description" : "The ID of the related custom permission.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Group" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "A set of User records.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of the group. Corresponds to Label on the user interface."
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization. This name is unique by group type and corresponds to Group Name in the user interface. This field is available in API version 24.0 and later.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "RelatedId" : {
              "type" : "string",
              "description" : "Represents the ID of the associated groups. For groups of type “Role,” the ID of the associated UserRole. The RelatedId field is polymorphic.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "Required. Type of the group. One of the following values: AllCustomerPortal—Public group that includes all Customer Portal or Customer Community Plus users. This type is only available when a Customer Portal or a Customer Site is enabled for your org. ChannelProgramGroup—Public group for partners in a channel program. CollaborationGroup—Chatter group. Manager—Public group that includes a user’s direct and indirect managers. This group is read-only. ManagerAndSubordinatesInternal—Public group that includes a user and the user’s direct and indirect reports. This group is read-only. Organization—Public group that includes all the User records in the organization. This group is read-only. Participant—Compliant Data Sharing group that includes internal users who have the Use Compliant Data Sharing permission. A group can contain other participant groups only, or a group can contain both internal users with the Use Compliant Data Sharing permission and other participant groups. This value is only available when Compliant Data Sharing is enabled for your org. PRMOrganization—Public group that includes all the partners in an organization that has the partner site or portal feature enabled. Queue—Public group that includes all the User records that are members of a queue. Regular—Standard public group. When you create() a group, its type must be Regular, unless a partner site or portal is enabled for the organization, in which case the type can be Regular or PRMOrganization. Role—Public group that includes all the User records in a particular UserRole. RoleAndSubordinates—Public group that includes all the User records in a particular UserRole and all the User records in any subordinate UserRole. RoleAndSubordinatesInternal—Public group that includes all the User records in an internal UserRole, excluding customer and partner roles, and all the User records in any subordinate internal UserRole. Territory—Public group that includes all the User records in an organization that has the territory feature enabled. TerritoryAndSubordinates—Public group that includes all the User records in a particular UserRole and all the User records in any subordinateUserRole in an organization that has the territory feature enabled. Only Personal, Regular, and Queue can be used when creating a group. The other values are reserved."
            },
            "Email" : {
              "type" : "string",
              "description" : "Email address for a group of type Case. Applies only for a case queue."
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the user who owns the group.",
              "readOnly" : true
            },
            "DoesSendEmailToMembers" : {
              "type" : "boolean",
              "description" : "Indicates whether the email is sent (true) or not sent (false) to the group members. The email is sent to queue members as well."
            },
            "DoesIncludeBosses" : {
              "type" : "boolean",
              "description" : "Indicates whether the managers have access (true) or do not have access (false) to records shared with members of the group. This field is only available for public groups. This field is available in API version 18.0 and later."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string"
            }
          }
        } ]
      },
      "GroupMember" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a User or Group that is a member of a public group.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "GroupId" : {
              "type" : "string",
              "description" : "Required. ID of the Group."
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "Required. ID of the User or Group that is a direct member of the group."
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "GuestUserAnomalyEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SecurityEventData" : {
              "type" : "string",
              "readOnly" : true
            },
            "Score" : {
              "type" : "number",
              "readOnly" : true
            },
            "Summary" : {
              "type" : "string",
              "readOnly" : true
            },
            "RequestedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "TotalControllerEvents" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "UserAgent" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserType" : {
              "type" : "string",
              "readOnly" : true
            },
            "SoqlCommands" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "GuestUserAnomalyEventStore" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "GuestUserAnomalyEventNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SecurityEventData" : {
              "type" : "string",
              "readOnly" : true
            },
            "Score" : {
              "type" : "number",
              "readOnly" : true
            },
            "Summary" : {
              "type" : "string",
              "readOnly" : true
            },
            "RequestedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "TotalControllerEvents" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "UserAgent" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserType" : {
              "type" : "string",
              "readOnly" : true
            },
            "SoqlCommands" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "GuestUserAnomalyEventStoreFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Holiday" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a period of time during which your customer support team is unavailable. Business hours and escalation rules associated with business hours are suspended during any holidays with which they are affiliated.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the holiday."
            },
            "Description" : {
              "type" : "string",
              "description" : "Text description of the holiday."
            },
            "IsAllDay" : {
              "type" : "boolean",
              "description" : "Indicates whether the duration of the holiday is all day (true) or not (false)."
            },
            "ActivityDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "If the Holiday IsAllDay flag is set to true (indicating that it is an all-day holiday), then the holiday due date information is contained in the ActivityDate field. This field is a date field with a timestamp that is always set to midnight in the Coordinated Universal Time (UTC) time zone. The timestamp is not relevant, and you should not attempt to alter it to account for any time zone differences."
            },
            "StartTimeInMinutes" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The start time of the holiday in minutes."
            },
            "EndTimeInMinutes" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The end time of the holiday in minutes."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsRecurrence" : {
              "type" : "boolean",
              "description" : "Indicates whether the holiday is scheduled to repeat itself (true) or only occurs once (false). This is a read only field on update, but not on create. If this field value is true, then any recurrence fields associated with the given recurrence type must be populated."
            },
            "RecurrenceStartDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The date when the recurring holiday begins. Must be a date and time before RecurrenceEndDateOnly."
            },
            "RecurrenceEndDateOnly" : {
              "type" : "string",
              "format" : "date",
              "description" : "The last date on which the holiday repeats. For multiday recurring events, this is the day on which the last occurrence starts."
            },
            "RecurrenceType" : {
              "type" : "string",
              "description" : "Indicates how often the holiday repeats. For example, daily, weekly, or every Nth month (where “Nth” is defined in RecurrenceInstance)."
            },
            "RecurrenceInterval" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The interval between recurring holidays."
            },
            "RecurrenceDayOfWeekMask" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The day or days of the week on which the holiday repeats. This field contains a bitmask. For each day of the week, the values are as follows: Sunday = 1 Monday = 2 Tuesday = 4 Wednesday = 8 Thursday = 16 Friday = 32 Saturday = 64 Multiple days are represented as the sum of their numerical values. For example, Tuesday and Thursday = 4 + 16 = 20."
            },
            "RecurrenceDayOfMonth" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The day of the month on which the holiday repeats."
            },
            "RecurrenceInstance" : {
              "type" : "string",
              "description" : "The frequency of the recurring holiday. For example, 2nd or 3rd."
            },
            "RecurrenceMonthOfYear" : {
              "type" : "string",
              "description" : "The month of the year on which the event repeats."
            }
          }
        } ]
      },
      "IPAddressRange" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string"
            },
            "Language" : {
              "type" : "string"
            },
            "MasterLabel" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IpAddressFeature" : {
              "type" : "string"
            },
            "IpAddressUsageScope" : {
              "type" : "string"
            },
            "StartAddress" : {
              "type" : "string"
            },
            "EndAddress" : {
              "type" : "string"
            },
            "Description" : {
              "type" : "string"
            }
          }
        } ]
      },
      "IconDefinition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the icon-related metadata for a custom tab.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "A unique virtual Salesforce ID for the icon.",
              "readOnly" : true
            },
            "TabDefinitionId" : {
              "type" : "string",
              "description" : "The TabDefinition ID.",
              "readOnly" : true
            },
            "Url" : {
              "type" : "string",
              "description" : "The fully qualified URL for this icon.",
              "readOnly" : true
            },
            "ContentType" : {
              "type" : "string",
              "description" : "The tab icon’s content type, for example, “image/png.”",
              "readOnly" : true
            },
            "Theme" : {
              "type" : "string",
              "description" : "The icon’s theme.",
              "readOnly" : true
            },
            "Height" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The tab icon’s height in pixels. If the icon content type is an SVG type, height and width values are not used.",
              "readOnly" : true
            },
            "Width" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The tab icon’s width in pixels. If the icon content type is an SVG type, height and width values are not used.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Idea" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an idea on which users are allowed to comment and vote, for example, a suggestion for an enhancement to an existing product or process.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "The descriptive title of the idea."
            },
            "RecordTypeId" : {
              "type" : "string",
              "description" : "The ID of the record type assigned to this object.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, this record might only have been referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "CommunityId" : {
              "type" : "string",
              "description" : "The zone ID associated with the idea. Once you create an idea, you can’t change the zone ID associated with that idea.API version 12 does not support zone ID. If you create an idea in version 12, your idea is automatically posted to the oldest zone that you have permission to access."
            },
            "Body" : {
              "type" : "string",
              "description" : "Description of the Idea."
            },
            "NumComments" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of comments (child IdeaComment objects) that users have submitted for the given idea.",
              "readOnly" : true
            },
            "VoteScore" : {
              "type" : "number",
              "description" : "The internal score of the Idea, used to sort Ideas on the Popular tab in the application user interface. The internal algorithm that determines the score gives older votes less weight than newer votes, simulating exponential decay. The score itself does not display in the application user interface.Unlike other fields of type double, you can't use a SOQL aggregate function with this field.",
              "readOnly" : true
            },
            "VoteTotal" : {
              "type" : "number",
              "description" : "An Idea's total number of points. Each vote a user makes is worth ten points, therefore the value of this field is ten times the number of votes an idea has received.Unlike other fields of type double, you can't use a SOQL aggregate function with this field.",
              "readOnly" : true
            },
            "Categories" : {
              "type" : "string",
              "description" : "Customizable multi-select picklist used to organize Ideas into logical groupings.This field is only available if your organization has the Categories field enabled. This field is enabled by default in organizations created after API version 14 was released. If the Categories field is enabled, API versions 13 and earlier do not have access to either the Categories or Category fields."
            },
            "Status" : {
              "type" : "string",
              "description" : "Customizable picklist of values used to specify the status of an idea."
            },
            "LastCommentDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time the last comment (child IdeaComment object) was added.",
              "readOnly" : true
            },
            "LastCommentId" : {
              "type" : "string",
              "description" : "Read only. The ID of the last comment (child IdeaComment object).",
              "readOnly" : true
            },
            "ParentIdeaId" : {
              "type" : "string",
              "description" : "The ID associated with this idea's parent idea. When multiple ideas are merged together, one idea becomes the parent (master) of the other ideas. The ParentIdeaId is automatically set when you merge ideas.",
              "readOnly" : true
            },
            "IsHtml" : {
              "type" : "boolean",
              "description" : "Read-only. If this value is true, your organization has the Ideas HTML editor enabled, and the Idea Body may contain HTML. If this value is false, the HTML editor is disabled and the Idea Body only contains regular text.",
              "readOnly" : true
            },
            "IsMerged" : {
              "type" : "boolean",
              "description" : "Read only. Indicates whether the idea has been merged with a parent idea (true) or not (false). You can’t vote for or add comments to a merged idea.In API version 27, IsMerged replaces IsLocked. Existing formula fields that use IsLocked must be edited to use IsMerged.",
              "readOnly" : true
            },
            "CreatorFullPhotoUrl" : {
              "type" : "string",
              "description" : "URL of the user’s profile photo. This field is available in API version 28.0 and later.",
              "readOnly" : true
            },
            "CreatorSmallPhotoUrl" : {
              "type" : "string",
              "description" : "URL of the user’s thumbnail photo. This field is available in API version 28.0 and later.",
              "readOnly" : true
            },
            "CreatorName" : {
              "type" : "string",
              "description" : "Name of the user who posted the idea or commented on the idea. This field is available in API version 28.0 and later.",
              "readOnly" : true
            }
          }
        } ]
      },
      "IdeaComment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a comment that a user has submitted in response to an idea.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IdeaId" : {
              "type" : "string",
              "description" : "ID of the idea on which this comment was made."
            },
            "CommunityId" : {
              "type" : "string",
              "description" : "The zone ID associated with the idea. Once you create an idea, you can’t change the zone ID associated with that idea.API version 12 does not support zone ID. If you create an idea in version 12, your idea is automatically posted to the oldest zone that you have permission to access.",
              "readOnly" : true
            },
            "CommentBody" : {
              "type" : "string",
              "description" : "Body of the submitted comment."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsHtml" : {
              "type" : "boolean",
              "description" : "Read-only. If this value is true, your organization has the Ideas HTML editor enabled, and the CommentBody field may contain HTML. If this value is false, the HTML editor is disabled and the CommentBody field only contains regular text.",
              "readOnly" : true
            },
            "CreatorFullPhotoUrl" : {
              "type" : "string",
              "description" : "URL of the user’s profile photo. This field is available in API version 28.0 and later.",
              "readOnly" : true
            },
            "CreatorSmallPhotoUrl" : {
              "type" : "string",
              "description" : "URL of the user’s thumbnail photo. This field is available in API version 28.0 and later.",
              "readOnly" : true
            },
            "CreatorName" : {
              "type" : "string",
              "description" : "Name of the user who posted the idea or commented on the idea. This field is available in API version 28.0 and later.",
              "readOnly" : true
            },
            "UpVotes" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Total number of up votes for the question.",
              "readOnly" : true
            }
          }
        } ]
      },
      "IdentityProviderEventStore" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IdentityUsed" : {
              "type" : "string",
              "readOnly" : true
            },
            "SamlEntityUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "InitiatedBy" : {
              "type" : "string",
              "readOnly" : true
            },
            "ErrorCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "SsoType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ServiceProviderId" : {
              "type" : "string",
              "readOnly" : true
            },
            "OauthConsumerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuthSessionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AppId" : {
              "type" : "string",
              "readOnly" : true
            },
            "HasLogoutUrl" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "IdentityVerificationEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "VerificationMethod" : {
              "type" : "string",
              "readOnly" : true
            },
            "Activity" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "Remarks" : {
              "type" : "string",
              "readOnly" : true
            },
            "ResourceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Policy" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventGroup" : {
              "type" : "string",
              "readOnly" : true
            },
            "CountryIso" : {
              "type" : "string",
              "readOnly" : true
            },
            "Country" : {
              "type" : "string",
              "readOnly" : true
            },
            "Latitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "Longitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "City" : {
              "type" : "string",
              "readOnly" : true
            },
            "PostalCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "Subdivision" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "IdpEventLog" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the Identity Provider Event Log. This log records both problems and successes with inbound SAML or OpenID Connect authentication requests from another app provider. It also records outbound SAML responses when Salesforce is acting as an identity provider.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "InitiatedBy" : {
              "type" : "string",
              "description" : "The code describing how the authentication request was initiated.",
              "readOnly" : true
            },
            "Timestamp" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time on which the event occurred.",
              "readOnly" : true
            },
            "ErrorCode" : {
              "type" : "string",
              "description" : "The error code for the authentication issue.",
              "readOnly" : true
            },
            "SamlEntityUrl" : {
              "type" : "string",
              "description" : "The authentication URL of the SAML provider.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "The ID of the user seeking authentication.",
              "readOnly" : true
            },
            "ServiceProviderId" : {
              "type" : "string",
              "readOnly" : true
            },
            "OauthConsumerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuthSessionId" : {
              "type" : "string",
              "description" : "The ID of the authentication session.",
              "readOnly" : true
            },
            "SsoType" : {
              "type" : "string",
              "description" : "The type of SSO. Options are:",
              "readOnly" : true
            },
            "AppId" : {
              "type" : "string",
              "description" : "The ID of the app provider seeking authentication.",
              "readOnly" : true
            },
            "IdentityUsed" : {
              "type" : "string",
              "description" : "The identity (username) of the user being authenticated.",
              "readOnly" : true
            },
            "OptionsHasLogoutUrl" : {
              "type" : "boolean",
              "description" : "Whether a logout URL has been assigned to the app. This URL is where users are redirected when they log out.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "IframeWhiteListUrl" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a list of trusted external domains that you allow to frame your Visualforce pages and Surveys.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Url" : {
              "type" : "string",
              "description" : "The unique domain that is allowed to frame your Visualforce pages and surveys. Accepts these formats: example.com, *example.com, and http://example.com."
            },
            "Context" : {
              "type" : "string",
              "description" : "The type of content in the iframe. This value is available in API v49.0 and later."
            }
          }
        } ]
      },
      "Image" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the details of an image.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "Unique identifier of the record owner."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the record."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date on which the image was last viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date on which the image was last referenced.",
              "readOnly" : true
            },
            "ImageViewType" : {
              "type" : "string",
              "description" : "Orientation of the image."
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates if an image is active. The default value is False. An active image can be used for building or updating a model in Einstein Object Detection."
            },
            "ImageClass" : {
              "type" : "string",
              "description" : "The image category."
            },
            "ImageClassObjectType" : {
              "type" : "string",
              "description" : "The type of image. Used in Einstein Object Detection to identify whether the image is used to detect objects or build a model."
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "Unique identifier of the content document where image is stored."
            },
            "CapturedAngle" : {
              "type" : "string",
              "description" : "Angle at which the image was captured."
            },
            "Title" : {
              "type" : "string",
              "description" : "Title of the image."
            },
            "AlternateText" : {
              "type" : "string",
              "description" : "Accessibility text to explain the image in words."
            },
            "Url" : {
              "type" : "string",
              "description" : "Public URL of the image file."
            }
          }
        } ]
      },
      "ImageFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ImageHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ImageId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ImageShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "Individual" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a customer’s data privacy and protection preferences. Data privacy records based on the Individual object store your customers’ preferences. Data privacy records are associated with related leads, contacts, person accounts, and users.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the owner of the account associated with this customer."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastName" : {
              "type" : "string",
              "description" : "Required. The customer’s last name. Maximum size is 80 characters."
            },
            "FirstName" : {
              "type" : "string",
              "description" : "The customer’s first name. Maximum size is 40 characters."
            },
            "Salutation" : {
              "type" : "string",
              "description" : "The title for addressing the customer, such as Dr. or Mrs."
            },
            "Name" : {
              "type" : "string",
              "description" : "Concatenation of FirstName and LastName. Maximum size is 203 characters, including whitespaces.",
              "readOnly" : true
            },
            "HasOptedOutTracking" : {
              "type" : "boolean",
              "description" : "Preference to not track customer web activity and whether the customer opens email sent through Salesforce."
            },
            "HasOptedOutProfiling" : {
              "type" : "boolean",
              "description" : "Preference to not process data for predicting personal attributes, such as interests, behavior, and location."
            },
            "HasOptedOutProcessing" : {
              "type" : "boolean",
              "description" : "Preference to not process personal data, which can include collecting, storing, and sharing personal data."
            },
            "HasOptedOutSolicit" : {
              "type" : "boolean",
              "description" : "Preference to not solicit products and services."
            },
            "ShouldForget" : {
              "type" : "boolean",
              "description" : "Preference to delete records and personal data related to this customer."
            },
            "SendIndividualData" : {
              "type" : "boolean",
              "description" : "Preference to export personal data for delivery to the customer."
            },
            "CanStorePiiElsewhere" : {
              "type" : "boolean",
              "description" : "Indication that you can store the customer’s personally identifiable information (PII) outside of their legislation area. For example, you could store an EU citizen’s PII data in the US."
            },
            "HasOptedOutGeoTracking" : {
              "type" : "boolean",
              "description" : "Preference to not track geolocation on mobile devices."
            },
            "BirthDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The customer’s birthdate."
            },
            "DeathDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The customer’s death date."
            },
            "ConvictionsCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of convictions for the customer."
            },
            "ChildrenCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of children the customer has."
            },
            "MilitaryService" : {
              "type" : "string",
              "description" : "Indicates whether the customer has served in the military."
            },
            "IsHomeOwner" : {
              "type" : "boolean",
              "description" : "Indicates whether the customer owns a home."
            },
            "Occupation" : {
              "type" : "string",
              "description" : "The customer’s occupation. Maximum size is 150 characters."
            },
            "Website" : {
              "type" : "string",
              "description" : "The URL for the customer’s website."
            },
            "IndividualsAge" : {
              "type" : "string",
              "description" : "Indicates whether the customer is considered to be a minor."
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record.",
              "readOnly" : true
            },
            "MasterRecordId" : {
              "type" : "string",
              "description" : "If this object was deleted as the result of a merge, this field contains the ID of the record that was kept. If this object was deleted for any other reason, or hasn’t been deleted, the value is null.",
              "readOnly" : true
            },
            "ConsumerCreditScore" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The person's credit score (for example, 740)."
            },
            "ConsumerCreditScoreProviderName" : {
              "type" : "string",
              "description" : "The name of the company that provided the credit score."
            },
            "InfluencerRating" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "A measure of the person's influence, irrespective of how we do business with them."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "IndividualChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastName" : {
              "type" : "string",
              "readOnly" : true
            },
            "FirstName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Salutation" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "HasOptedOutTracking" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "HasOptedOutProfiling" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "HasOptedOutProcessing" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "HasOptedOutSolicit" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ShouldForget" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SendIndividualData" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CanStorePiiElsewhere" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "HasOptedOutGeoTracking" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "BirthDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "DeathDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "ConvictionsCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ChildrenCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "MilitaryService" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsHomeOwner" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Occupation" : {
              "type" : "string",
              "readOnly" : true
            },
            "Website" : {
              "type" : "string",
              "readOnly" : true
            },
            "IndividualsAge" : {
              "type" : "string",
              "readOnly" : true
            },
            "ConsumerCreditScore" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ConsumerCreditScoreProviderName" : {
              "type" : "string",
              "readOnly" : true
            },
            "InfluencerRating" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "IndividualHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the history of changes to values in the fields of a data privacy record, based on the Individual object.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IndividualId" : {
              "type" : "string",
              "description" : "ID of the data privacy record. Label is Individual ID.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "description" : "The name of the changed field.",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "description" : "The previous value of the changed field.",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "description" : "The updated value of the changed field.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "IndividualShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a list of access levels to a data privacy record along with an explanation of the access level. For example, if you have access to a record because you own it, the IndividualAccessLevel is All and RowCause is Owner.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IndividualId" : {
              "type" : "string",
              "description" : "ID of the Individual associated with this sharing entry. This field isn’t available for updates."
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "ID of the User or Group that has been given access to the data privacy record. This field isn’t available for updates."
            },
            "IndividualAccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the user or group has to the data privacy record. The possible values include: Read Edit All (Except for create or update.) Set this field to an access level that’s higher than your default access level for individuals."
            },
            "RowCause" : {
              "type" : "string",
              "description" : "Reason that this sharing entry exists. Write to this field when its value is omitted or set to Manual (default). We give you some of the many possible values, including: Manual—The User or Group has access because a user with “All” access manually shared the data privacy record with them. Owner—The User is the owner of the data privacy record. Rule—The User or Group has access to the data privacy record via an Individual sharing rule. LpuImplicit—The User has access to records owned by high-volume Experience Cloud site users via a share group."
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "InstalledMobileApp" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string"
            },
            "UserId" : {
              "type" : "string"
            },
            "ConnectedApplicationId" : {
              "type" : "string"
            },
            "Version" : {
              "type" : "string"
            }
          }
        } ]
      },
      "Invoice__ChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status__c" : {
              "type" : "string",
              "description" : "Choose a value from the drop-down list",
              "readOnly" : true
            },
            "Invoice_Total__c" : {
              "type" : "number",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Invoice__Feed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Invoice__Share" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "Invoice__c" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the assigned owner of the custom object record. If the custom object becomes the detail side of a master-detail relationship, this field is removed, as ownership of the data is controlled by the master object, or by the primary master object for a custom object with two master-detail relationships.Custom objects on the detail side of a master-detail relationship can't have sharing rules, manual sharing, or queues, as these require the Owner field."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Identifier for the custom object record. This name appears in page layouts, related lists, lookup dialogs, search results, and key lists on tab home pages. By default, this field is added to the custom object page layout as a required field.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "description" : "ID of the user who created the record.",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "description" : "ID of the user who most recently changed the record.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Status__c" : {
              "type" : "string",
              "description" : "Choose a value from the drop-down list"
            },
            "Invoice_Total__c" : {
              "type" : "number",
              "readOnly" : true
            }
          }
        } ]
      },
      "KnowledgeableUser" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a user identified as knowledgeable about a specific topic, and ranks them relative to other knowledgeable users.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "Unique ID for the user in Salesforce.",
              "readOnly" : true
            },
            "TopicId" : {
              "type" : "string",
              "description" : "Unique ID for the topic in Salesforce.",
              "readOnly" : true
            },
            "RawRank" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Rank of this user’s knowledge on the topic relative to other users.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Lead" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a prospect or lead.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "MasterRecordId" : {
              "type" : "string",
              "description" : "If this record was deleted as the result of a merge, this field contains the ID of the record that was kept. If this record was deleted for any other reason, or has not been deleted, the value is null.When using Apex triggers to determine which record was deleted in a merge event, this field’s value is the ID of the record that remains in Trigger.old. In Trigger.new, the value is null.",
              "readOnly" : true
            },
            "LastName" : {
              "type" : "string",
              "description" : "Required. Last name of the lead up to 80 characters."
            },
            "FirstName" : {
              "type" : "string",
              "description" : "The lead’s first name up to 40 characters."
            },
            "Salutation" : {
              "type" : "string",
              "description" : "Salutation for the lead."
            },
            "Name" : {
              "type" : "string",
              "description" : "Concatenation of FirstName, MiddleName, LastName, and Suffix up to 203 characters, including whitespaces.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "Title for the lead, such as CFO or CEO."
            },
            "Company" : {
              "type" : "string",
              "description" : "Required. The lead’s company. If person account record types have been enabled, and if the value of Company is null, the lead converts to a person account."
            },
            "Street" : {
              "type" : "string",
              "description" : "Street number and name for the address of the lead."
            },
            "City" : {
              "type" : "string",
              "description" : "City for the lead’s address."
            },
            "State" : {
              "type" : "string",
              "description" : "State for the address of the lead."
            },
            "PostalCode" : {
              "type" : "string",
              "description" : "Postal code for the address of the lead. Label is Zip/Postal Code."
            },
            "Country" : {
              "type" : "string",
              "description" : "The lead’s country."
            },
            "Latitude" : {
              "type" : "number",
              "description" : "Used with Longitude to specify the precise geolocation of an address. Acceptable values are numbers between –90 and 90 up to 15 decimal places. For details on geolocation compound fields, see ."
            },
            "Longitude" : {
              "type" : "number",
              "description" : "Used with Latitude to specify the precise geolocation of an address. Acceptable values are numbers between –180 and 180 up to 15 decimal places. For details on geolocation compound fields, see ."
            },
            "GeocodeAccuracy" : {
              "type" : "string",
              "description" : "Accuracy level of the geocode for the address. For details on geolocation compound fields, see ."
            },
            "Address" : {
              "type" : "object",
              "description" : "The compound form of the address. Read-only. For details on compound address fields, see Address Compound Fields.",
              "readOnly" : true
            },
            "Phone" : {
              "type" : "string",
              "description" : "The lead’s phone number."
            },
            "MobilePhone" : {
              "type" : "string",
              "description" : "The lead’s mobile phone number."
            },
            "Fax" : {
              "type" : "string",
              "description" : "The lead’s fax number."
            },
            "Email" : {
              "type" : "string",
              "description" : "The lead’s email address."
            },
            "Website" : {
              "type" : "string",
              "description" : "Website for the lead."
            },
            "PhotoUrl" : {
              "type" : "string",
              "description" : "Path to be combined with the URL of a Salesforce instance (Example: https://yourInstance.salesforce.com/) to generate a URL to request the social network profile image associated with the lead. Generated URL returns an HTTP redirect (code 302) to the social network profile image for the lead. Empty if Social Accounts and Contacts isn't enabled or if Social Accounts and Contacts has been disabled for the requesting user.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "The lead’s description."
            },
            "LeadSource" : {
              "type" : "string",
              "description" : "The lead’s source."
            },
            "Status" : {
              "type" : "string",
              "description" : "Status code for this converted lead. Status codes are defined in Status and represented in the API by the LeadStatus object."
            },
            "Industry" : {
              "type" : "string",
              "description" : "Industry in which the lead works."
            },
            "Rating" : {
              "type" : "string",
              "description" : "Rating of the lead."
            },
            "AnnualRevenue" : {
              "type" : "number",
              "description" : "Annual revenue for the lead’s company."
            },
            "NumberOfEmployees" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of employees at the lead’s company. Label is Employees."
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the lead’s owner."
            },
            "IsConverted" : {
              "type" : "boolean",
              "description" : "Indicates whether the lead has been converted (true) or not (false). Label is Converted."
            },
            "ConvertedDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date on which this lead was converted.",
              "readOnly" : true
            },
            "ConvertedAccountId" : {
              "type" : "string",
              "description" : "Object reference ID that points to the account into which the lead converted.",
              "readOnly" : true
            },
            "ConvertedContactId" : {
              "type" : "string",
              "description" : "Object reference ID that points to the contact into which the lead converted.",
              "readOnly" : true
            },
            "ConvertedOpportunityId" : {
              "type" : "string",
              "description" : "Object reference ID that points to the opportunity into which the lead has been converted.",
              "readOnly" : true
            },
            "IsUnreadByOwner" : {
              "type" : "boolean",
              "description" : "If true, lead has been assigned, but not yet viewed. See Unread Leads for more information. Label is Unread By Owner."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastActivityDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Value is the most recent of either: Due date of the most recent event logged against the record. Due date of the most recently closed task associated with the record.",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            },
            "Jigsaw" : {
              "type" : "string",
              "description" : "References the ID of a contact in Data.com. If a lead has a value in this field, it means that a contact was imported as a lead from Data.com. If the contact (converted to a lead) was not imported from Data.com, the field value is null. Maximum size is 20 characters. Available in API version 22.0 and later. Label is Data.com Key.The Jigsawfield is exposed in the API to support troubleshooting for import errors and reimporting of corrected data. Do not modify the value in the Jigsaw field."
            },
            "JigsawContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "EmailBouncedReason" : {
              "type" : "string",
              "description" : "If bounce management is activated and an email sent to the lead bounced, the reason for the bounce."
            },
            "EmailBouncedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "If bounce management is activated and an email sent to the lead bounced, the date and time of the bounce."
            },
            "IndividualId" : {
              "type" : "string",
              "description" : "ID of the data privacy record associated with this lead. This field is available if you enabled Data Protection and Privacy in Setup."
            },
            "SICCode__c" : {
              "type" : "string"
            },
            "ProductInterest__c" : {
              "type" : "string"
            },
            "Primary__c" : {
              "type" : "string"
            },
            "CurrentGenerators__c" : {
              "type" : "string"
            },
            "NumberofLocations__c" : {
              "type" : "number"
            }
          }
        } ]
      },
      "LeadChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "LastName" : {
              "type" : "string",
              "readOnly" : true
            },
            "FirstName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Salutation" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Company" : {
              "type" : "string",
              "readOnly" : true
            },
            "Street" : {
              "type" : "string",
              "readOnly" : true
            },
            "City" : {
              "type" : "string",
              "readOnly" : true
            },
            "State" : {
              "type" : "string",
              "readOnly" : true
            },
            "PostalCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "Country" : {
              "type" : "string",
              "readOnly" : true
            },
            "Latitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "Longitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "GeocodeAccuracy" : {
              "type" : "string",
              "readOnly" : true
            },
            "Address" : {
              "type" : "object",
              "readOnly" : true
            },
            "Phone" : {
              "type" : "string",
              "readOnly" : true
            },
            "MobilePhone" : {
              "type" : "string",
              "readOnly" : true
            },
            "Fax" : {
              "type" : "string",
              "readOnly" : true
            },
            "Email" : {
              "type" : "string",
              "readOnly" : true
            },
            "Website" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "LeadSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "Industry" : {
              "type" : "string",
              "readOnly" : true
            },
            "Rating" : {
              "type" : "string",
              "readOnly" : true
            },
            "AnnualRevenue" : {
              "type" : "number",
              "readOnly" : true
            },
            "NumberOfEmployees" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsConverted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ConvertedDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "ConvertedAccountId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ConvertedContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ConvertedOpportunityId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsUnreadByOwner" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Jigsaw" : {
              "type" : "string",
              "readOnly" : true
            },
            "JigsawContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "EmailBouncedReason" : {
              "type" : "string",
              "readOnly" : true
            },
            "EmailBouncedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IndividualId" : {
              "type" : "string",
              "readOnly" : true
            },
            "SICCode__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProductInterest__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "Primary__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "CurrentGenerators__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "NumberofLocations__c" : {
              "type" : "number",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LeadFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LeadHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LeadId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LeadShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a sharing entry on a Lead.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "LeadId" : {
              "type" : "string",
              "description" : "ID of the Lead associated with this sharing entry. This field can’t be updated."
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "ID of the User or Group that has been given access to the Lead. This field can’t be updated."
            },
            "LeadAccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the User or Group has to the Lead. The possible values are: Read Edit All This value is not valid when creating or updating these records."
            },
            "RowCause" : {
              "type" : "string",
              "description" : "Reason that this sharing entry exists. You can only write a value in this field when its value is either omitted or set to Manual (default). You can create a value for this field in API versions 32.0 and later with the correct organization-wide sharing settings."
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            }
          }
        } ]
      },
      "LeadStatus" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the status of a Lead, such as Open, Qualified, or Converted.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Master label for this lead status value. This display value is the internal label that does not get translated.",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "description" : "Uniquely identifies a picklist value so it can be retrieved without using an id or master label.",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number used to sort this value in the lead status picklist. These numbers are not guaranteed to be sequential, as some previous lead status values might have been deleted.",
              "readOnly" : true
            },
            "IsDefault" : {
              "type" : "boolean",
              "description" : "Indicates whether this is the default lead status value (true) or not (false) in the picklist.",
              "readOnly" : true
            },
            "IsConverted" : {
              "type" : "boolean",
              "description" : "Indicates whether this lead status value represents a converted lead (true) or not (false). Multiple lead status values can represent a converted lead.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LightningExitByPageMetrics" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : ".Represents standard pages users switched from Lightning Experience to Salesforce most frequently.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MetricsDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date user viewed page in Lightning Experience.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "UserId of user who viewed page.",
              "readOnly" : true
            },
            "PageName" : {
              "type" : "string",
              "description" : "Name of page user viewed.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RecordCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Total number of pages where the switch occured.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LightningExperienceTheme" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents information for a theme in Lightning Experience.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the theme in the API. This name can contain only underscores and alphanumeric characters and must be unique in your organization. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. The label corresponds to the theme name in the user interface. Limit: 70 characters.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "Language" : {
              "type" : "string",
              "description" : "Required. Language of the label. Possible values are: da (Danish) de (German) en_US (English) es (Spanish) es_MX (Spanish - Mexico) fi (Finnish) fr (French) it (Italian) ja (Japanese) ko (Korean) nl_NL (Dutch) no (Norwegian) pt_BR (Portuguese (Brazil)) ru (Russian) sv (Swedish) th (Thai) zh_CN (Chinese - Simplified) zh_TW (Chinese - Traditional)"
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Required. The name of the theme. Specify up to 70 characters."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "DefaultBrandingSetId" : {
              "type" : "string",
              "description" : "The ID of the default branding set."
            },
            "ShouldOverrideLoadingImage" : {
              "type" : "boolean",
              "description" : "Indicates whether a custom image overrides the Salesforce loading image (true) or not (false)."
            },
            "Description" : {
              "type" : "string",
              "description" : "The description of the theme. Limit: 1,000 characters."
            }
          }
        } ]
      },
      "LightningOnboardingConfig" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the feedback provided when users switch from Lightning Experience to Salesforce Classic. Admins can customize the question, how frequently the form appears, and where the feedback is stored in Chatter from the Adoption Assistance page in Lightning Experience Setup.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "Language" : {
              "type" : "string",
              "description" : "Indicates the language used in the org where the feedback form was created."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The master label for the prompt. Maximum of 80 characters."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CustomQuestion" : {
              "type" : "string",
              "description" : "Text of the custom question added by the admin. Maximum of 1,000 characters."
            },
            "CollaborationGroupId" : {
              "type" : "string",
              "description" : "The ID of the Chatter Group where the user feedback is posted."
            },
            "FeedbackFormDaysFrequency" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of days between showing the feedback form when a user switches. A value of 0 indicates that the form is shown for every switch. Maximum of 30."
            },
            "SendFeedbackToSalesforce" : {
              "type" : "boolean",
              "description" : "Indicates if the user feedback can be shared with Salesforce. If yes, share the feedback with Salesforce. If no, the feedback is only shared in the Chatter Group chosen when customizing the form. The default value is false."
            },
            "IsCustom" : {
              "type" : "boolean",
              "description" : "Indicates if a feedback form includes a custom question yes or not no."
            },
            "PromptDelayTime" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the amount of time in seconds to delay between instances of all prompts, both org- and Salesforce-created. Minimum of 0 hours and 0 minutes. Maximum of 99 hours and 59 minutes."
            }
          }
        } ]
      },
      "LightningToggleMetrics" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents users who switched from Lightning Experience back to Salesforce Classic.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MetricsDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date user switched.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "UserId of user who switched.",
              "readOnly" : true
            },
            "Action" : {
              "type" : "string",
              "description" : "User switched from Lightning Experience to Salesforce Classic or from Salesforce Classic to Lightning Experience.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RecordCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of user switches.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LightningUriEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueriedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "AppName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ConnectionType" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeviceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeviceModel" : {
              "type" : "string",
              "readOnly" : true
            },
            "DevicePlatform" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeviceSessionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Duration" : {
              "type" : "number",
              "readOnly" : true
            },
            "EffectivePageTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "HasEffectivePageTimeDeviation" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "EffectivePageTimeDeviationErrorType" : {
              "type" : "string",
              "readOnly" : true
            },
            "EffectivePageTimeDeviationReason" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserAgent" : {
              "type" : "string",
              "readOnly" : true
            },
            "OsName" : {
              "type" : "string",
              "readOnly" : true
            },
            "OsVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "PageStartTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PageUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousPageAppName" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousPageEntityId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousPageEntityType" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousPageUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "SdkAppType" : {
              "type" : "string",
              "readOnly" : true
            },
            "SdkAppVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "SdkVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LightningUriEventStream" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueriedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "AppName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ConnectionType" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeviceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeviceModel" : {
              "type" : "string",
              "readOnly" : true
            },
            "DevicePlatform" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeviceSessionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Duration" : {
              "type" : "number",
              "readOnly" : true
            },
            "EffectivePageTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "HasEffectivePageTimeDeviation" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "EffectivePageTimeDeviationErrorType" : {
              "type" : "string",
              "readOnly" : true
            },
            "EffectivePageTimeDeviationReason" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserAgent" : {
              "type" : "string",
              "readOnly" : true
            },
            "OsName" : {
              "type" : "string",
              "readOnly" : true
            },
            "OsVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "PageStartTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PageUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousPageAppName" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousPageEntityId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousPageEntityType" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousPageUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "SdkAppType" : {
              "type" : "string",
              "readOnly" : true
            },
            "SdkAppVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "SdkVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LightningUsageByAppTypeMetrics" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents number of users on Lightning Experience and Salesforce Mobile.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MetricsDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date user accessed Lightning Experience or Salesforce Mobile.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "UserId for user accessing Lightning Experience or Salesforce Mobile.",
              "readOnly" : true
            },
            "AppExperience" : {
              "type" : "string",
              "description" : "User’s app (Lightning Experience or Salesforce Mobile).",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LightningUsageByBrowserMetrics" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents Lightning Experience usage grouped by user’s browser.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MetricsDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date user accessed Lightning Experience.",
              "readOnly" : true
            },
            "PageName" : {
              "type" : "string",
              "description" : "Page user viewed in Lightning Experience.",
              "readOnly" : true
            },
            "Browser" : {
              "type" : "string",
              "description" : "Browser used to access Lightning Experience.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RecordCountEPT" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "TotalCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Total number of pages accessed in Lightning Experience.",
              "readOnly" : true
            },
            "SumEPT" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBinUnder3" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBin3To5" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBin5To8" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBin8To10" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBinOver10" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LightningUsageByFlexiPageMetrics" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents custom pages users viewed most frequently in Lightning Experience.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MetricsDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date user viewed page in Lightning Experience.",
              "readOnly" : true
            },
            "FlexiPageType" : {
              "type" : "string",
              "description" : "Custom page type.",
              "readOnly" : true
            },
            "FlexiPageNameOrId" : {
              "type" : "string",
              "description" : "Name or Id of custom page user viewed in Lightning Experience.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RecordCountEPT" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "TotalCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Total number of custom pages viewed.",
              "readOnly" : true
            },
            "MedianEPT" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "SumEPT" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBinUnder3" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBin3To5" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBin5To8" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBin8To10" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBinOver10" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CoresBinUnder2" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CoresBin2To4" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CoresBin4To8" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CoresBinOver8" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DownlinkBinUnder3" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DownlinkBin3To5" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DownlinkBin5To8" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DownlinkBin8To10" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DownlinkBinOver10" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RttBinUnder50" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RttBin50To150" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RttBinOver150" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LightningUsageByPageMetrics" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents standard pages users viewed most frequently in Lightning Experience.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MetricsDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date user viewed page in Lightning Experience.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "UserId of user who viewed page.",
              "readOnly" : true
            },
            "PageName" : {
              "type" : "string",
              "description" : "Name of page user viewed.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RecordCountEPT" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "TotalCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Total number of pages viewed.",
              "readOnly" : true
            },
            "SumEPT" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBinUnder3" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBin3To5" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBin5To8" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBin8To10" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "EptBinOver10" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CoresBinUnder2" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CoresBin2To4" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CoresBin4To8" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CoresBinOver8" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DownlinkBinUnder3" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DownlinkBin3To5" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DownlinkBin5To8" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DownlinkBin8To10" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DownlinkBinOver10" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RttBinUnder50" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RttBin50To150" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RttBinOver150" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Line_Item__ChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Quantity__c" : {
              "type" : "number",
              "readOnly" : true
            },
            "Invoice__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "Merchandise__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "Unit_Price__c" : {
              "type" : "number",
              "readOnly" : true
            },
            "Line_Item_Total__c" : {
              "type" : "number",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Line_Item__c" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Identifier for the custom object record. This name appears in page layouts, related lists, lookup dialogs, search results, and key lists on tab home pages. By default, this field is added to the custom object page layout as a required field."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "description" : "ID of the user who created the record.",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "description" : "ID of the user who most recently changed the record.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Quantity__c" : {
              "type" : "number"
            },
            "Invoice__c" : {
              "type" : "string"
            },
            "Merchandise__c" : {
              "type" : "string"
            },
            "Unit_Price__c" : {
              "type" : "number"
            },
            "Line_Item_Total__c" : {
              "type" : "number",
              "readOnly" : true
            }
          }
        } ]
      },
      "ListEmail" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a list email sent from Salesforce, or sent from Pardot and synced to Salesforce. When the list email is sent, the recipients are generated by combining recipients in ListEmailIndividualRecipients and ListEmailRecipientSource. Duplicate and other invalid recipients are removed. The result is the recipients who are actually sent any given list email. Has a one-to-many relationship with ListEmailRecipientSource and ListEmailIndividualRecipient.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "References Group and User. This field is null for emails sent from Pardot."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Read-only except when list email is in draft state."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, this record might only have been referenced (LastReferencedDate) and not viewed. This field is null for emails sent from Pardot.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp that indicates when the current user last viewed a record that is related to this list email. This field is null for emails sent from Pardot.",
              "readOnly" : true
            },
            "Subject" : {
              "type" : "string",
              "description" : "Read-only except when list email is in draft state. This field is null for emails sent from Pardot."
            },
            "HtmlBody" : {
              "type" : "string",
              "description" : "The body of the list email. This field is null for emails sent from Pardot."
            },
            "TextBody" : {
              "type" : "string",
              "description" : "Read-only except when list email is in draft state. This field is null for emails sent from Pardot."
            },
            "FromName" : {
              "type" : "string",
              "description" : "Read-only except when list email is in draft state. Validated against user’s addresses. This field is null for emails sent from Pardot."
            },
            "FromAddress" : {
              "type" : "string",
              "description" : "Read-only except when list email is in draft state. Validated against user’s addresses."
            },
            "Status" : {
              "type" : "string",
              "description" : "Read-only except when list email is in draft state."
            },
            "HasAttachment" : {
              "type" : "boolean",
              "description" : "Read-only. Defaulted on create and update. Value is true if the list email has an attachment. This field is null for emails sent from Pardot.",
              "readOnly" : true
            },
            "ScheduledDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Read-only. If null and Status is set to Scheduled, defaults to created time."
            },
            "TotalSent" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Read-only. The total number of list emails sent, including bounced, opted-out, and invalid To: addresses.",
              "readOnly" : true
            },
            "CampaignId" : {
              "type" : "string",
              "description" : "The ID of the related campaign. This field is available in API version 42.0 and later."
            },
            "IsTracked" : {
              "type" : "boolean",
              "description" : "Indicates if email tracking was on when the list email was sent. This field is blank for emails sent from Pardot and synced to Salesforce. This field is null for emails sent from Pardot.",
              "readOnly" : true
            },
            "RelatedToId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ListEmailChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Subject" : {
              "type" : "string",
              "readOnly" : true
            },
            "HtmlBody" : {
              "type" : "string",
              "readOnly" : true
            },
            "TextBody" : {
              "type" : "string",
              "readOnly" : true
            },
            "FromName" : {
              "type" : "string",
              "readOnly" : true
            },
            "FromAddress" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "HasAttachment" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ScheduledDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "TotalSent" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CampaignId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsTracked" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedToId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ListEmailIndividualRecipient" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "For a list email in Salesforce, represents a recipient. Each record represents a link from a list email to exactly one recipient for that list email. Recipients can be contacts, leads, or campaign members. Has a one-to-many relationship with ListEmail.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The auto-generated name of the list email recipient source.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ListEmailId" : {
              "type" : "string",
              "description" : "The related list email record. Required on record creation; read-only otherwise."
            },
            "RecipientId" : {
              "type" : "string",
              "description" : "the contact, lead, person account, or campaign member ID of the individual list email recipient."
            }
          }
        } ]
      },
      "ListEmailRecipientSource" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "For a list email in Salesforce, represents the dynamically defined sources of recipient email addresses. Each record represents a link to a single list view or campaign that is examined when the list email is sent. Has a one-to-many relationship with ListEmail.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The auto-generated name of the list email recipient source.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ListEmailId" : {
              "type" : "string",
              "description" : "The related list email record. Required on record creation; read-only otherwise."
            },
            "SourceListId" : {
              "type" : "string",
              "description" : "Required. The id of a list view to send the list email to. Read-only except when list email is in draft state."
            },
            "SourceType" : {
              "type" : "string",
              "description" : "Required. Read-only except when list email is in draft state."
            }
          }
        } ]
      },
      "ListEmailShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "ListView" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a list view. A list view specifies a set of records for an object, based on specific criteria.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the list view.",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The fully qualified developer name of the list view.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The namespace of the list view.",
              "readOnly" : true
            },
            "SobjectType" : {
              "type" : "string",
              "description" : "The API name of the sObject for the list view.",
              "readOnly" : true
            },
            "IsSoqlCompatible" : {
              "type" : "boolean",
              "description" : "Whether the list view can be used with SOQL..",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the list view was last viewed, with a precision of one second.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the list view was last referenced, with a precision of one second.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ListViewChart" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a graphical chart that’s displayed on Salesforce for Android, iOS, and mobile web list views. The chart aggregates data that is filtered based on the list view that’s currently displayed.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SobjectType" : {
              "type" : "string",
              "description" : "The API name of the sObject for the chart."
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The fully qualified developer name of the chart."
            },
            "Language" : {
              "type" : "string",
              "description" : "The language of the MasterLabel."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The label for the chart."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the user who owns the chart."
            },
            "ChartType" : {
              "type" : "string",
              "description" : "The type of chart to create. The supported chart types are horizontal bar chart, vertical bar chart, and donut chart."
            },
            "GroupingField" : {
              "type" : "string",
              "description" : "The field that’s used to divide the data into collections. The field has to be supported by SOQL GROUP BY functionality. GroupingField can’t be the same as AggregateField."
            },
            "AggregateField" : {
              "type" : "string",
              "description" : "The field that’s used for calculating data on each group. AggregateField can’t be the same as GroupingField."
            },
            "AggregateType" : {
              "type" : "string",
              "description" : "The type of calculations to run on each group. The supported AggregateType values are Count, Sum, and Avg."
            }
          }
        } ]
      },
      "ListViewChartInstance" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Retrieves metadata for all standard and custom charts for a given entity in context of a given list view.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string",
              "description" : "Reserved for future use.",
              "readOnly" : true
            },
            "ListViewChartId" : {
              "type" : "string",
              "description" : "ID of the chart created by a user. For standard charts, this is null.",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "description" : "The display name of the chart.",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "API name of the chart. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record.",
              "readOnly" : true
            },
            "SourceEntity" : {
              "type" : "string",
              "description" : "API name of the entity to which the chart is related. Required to query ListViewChartInstance.",
              "readOnly" : true
            },
            "ListViewContextId" : {
              "type" : "string",
              "description" : "ID of the list view in context of which the chart is generated. Required to query ListViewChartInstance.",
              "readOnly" : true
            },
            "ChartType" : {
              "type" : "string",
              "description" : "The type of chart to create. The supported chart types are horizontal bar chart, vertical bar chart, and donut chart.",
              "readOnly" : true
            },
            "IsLastViewed" : {
              "type" : "boolean",
              "description" : "Indicates if a chart is the last viewed by a user.",
              "readOnly" : true
            },
            "DataQuery" : {
              "type" : "string",
              "description" : "The SOQL query that can be executed to fetch the data for drawing a chart.",
              "readOnly" : true
            },
            "DataQueryWithoutUserFilters" : {
              "type" : "string",
              "description" : "The SOQL query that can be executed to fetch the data for drawing a chart, without user filters.",
              "readOnly" : true
            },
            "IsEditable" : {
              "type" : "boolean",
              "description" : "Indicates if the chart can be edited. Standard charts are not editable.",
              "readOnly" : true
            },
            "IsDeletable" : {
              "type" : "boolean",
              "description" : "Indicates if the chart can be deleted.",
              "readOnly" : true
            },
            "GroupingField" : {
              "type" : "string",
              "description" : "The field that’s used to divide the data into collections. The field has to be supported by SOQL GROUP BY functionality. GroupingField can’t be the same as AggregateField.",
              "readOnly" : true
            },
            "AggregateField" : {
              "type" : "string",
              "description" : "The field that’s used for calculating data on each group. AggregateField can’t be the same as GroupingField.",
              "readOnly" : true
            },
            "AggregateType" : {
              "type" : "string",
              "description" : "The type of calculations to run on each group. The supported AggregateType values are Count, Sum, and Avg.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ListViewEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RowsProcessed" : {
              "type" : "number",
              "readOnly" : true
            },
            "QueriedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "ListViewId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Scope" : {
              "type" : "string",
              "readOnly" : true
            },
            "OrderBy" : {
              "type" : "string",
              "readOnly" : true
            },
            "ColumnHeaders" : {
              "type" : "string",
              "readOnly" : true
            },
            "NumberOfColumns" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "FilterCriteria" : {
              "type" : "string",
              "readOnly" : true
            },
            "Records" : {
              "type" : "string",
              "readOnly" : true
            },
            "AppName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExecutionIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "Sequence" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ListViewEventStream" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RowsProcessed" : {
              "type" : "number",
              "readOnly" : true
            },
            "QueriedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "ListViewId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Scope" : {
              "type" : "string",
              "readOnly" : true
            },
            "OrderBy" : {
              "type" : "string",
              "readOnly" : true
            },
            "ColumnHeaders" : {
              "type" : "string",
              "readOnly" : true
            },
            "NumberOfColumns" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "FilterCriteria" : {
              "type" : "string",
              "readOnly" : true
            },
            "Records" : {
              "type" : "string",
              "readOnly" : true
            },
            "AppName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExecutionIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "Sequence" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LoginAsEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserType" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Application" : {
              "type" : "string",
              "readOnly" : true
            },
            "Browser" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Platform" : {
              "type" : "string",
              "readOnly" : true
            },
            "DelegatedUsername" : {
              "type" : "string",
              "readOnly" : true
            },
            "DelegatedOrganizationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "TargetUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginAsCategory" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LoginAsEventStream" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "Application" : {
              "type" : "string",
              "readOnly" : true
            },
            "Browser" : {
              "type" : "string",
              "readOnly" : true
            },
            "DelegatedOrganizationId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DelegatedUsername" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginAsCategory" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Platform" : {
              "type" : "string",
              "readOnly" : true
            },
            "TargetUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LoginEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "The documentation has moved to LoginEvent in the Platform Events Developer Guide.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "AdditionalInfo" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "Application" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuthServiceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Browser" : {
              "type" : "string",
              "readOnly" : true
            },
            "HttpMethod" : {
              "type" : "string",
              "readOnly" : true
            },
            "CountryIso" : {
              "type" : "string",
              "readOnly" : true
            },
            "ForwardedForIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginLatitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "LoginLongitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "Country" : {
              "type" : "string",
              "readOnly" : true
            },
            "City" : {
              "type" : "string",
              "readOnly" : true
            },
            "PostalCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "Subdivision" : {
              "type" : "string",
              "readOnly" : true
            },
            "CipherSuite" : {
              "type" : "string",
              "readOnly" : true
            },
            "ClientVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginGeoId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginType" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "Platform" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "TlsProtocol" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserType" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuthMethodReference" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginSubType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LoginEventStream" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "AdditionalInfo" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "Application" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuthServiceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Browser" : {
              "type" : "string",
              "readOnly" : true
            },
            "CipherSuite" : {
              "type" : "string",
              "readOnly" : true
            },
            "ClientVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginGeoId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginType" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "Platform" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "TlsProtocol" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserType" : {
              "type" : "string",
              "readOnly" : true
            },
            "CountryIso" : {
              "type" : "string",
              "readOnly" : true
            },
            "HttpMethod" : {
              "type" : "string",
              "readOnly" : true
            },
            "Country" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginLatitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "LoginLongitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "City" : {
              "type" : "string",
              "readOnly" : true
            },
            "PostalCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "Subdivision" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuthMethodReference" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginSubType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ForwardedForIp" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LoginGeo" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the geographic location of the user’s IP address for a login event. Due to the nature of geolocation technology, the accuracy of geolocation fields (for example, country, city, postal code) may vary.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LoginTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Time of the login attempt, in GMT time zone.",
              "readOnly" : true
            },
            "CountryIso" : {
              "type" : "string",
              "description" : "The ISO 3166 code for the country where the user’s IP address is physically located. For more information, see Country Codes - ISO 3166",
              "readOnly" : true
            },
            "Country" : {
              "type" : "string",
              "description" : "The country where the user’s IP address is physically located. This value is not localized.",
              "readOnly" : true
            },
            "Latitude" : {
              "type" : "number",
              "description" : "The latitude where the user’s IP address is physically located.",
              "readOnly" : true
            },
            "Longitude" : {
              "type" : "number",
              "description" : "The longitude where the user’s IP address is physically located.",
              "readOnly" : true
            },
            "City" : {
              "type" : "string",
              "description" : "The city where the user’s IP address is physically located. This value is not localized.",
              "readOnly" : true
            },
            "PostalCode" : {
              "type" : "string",
              "description" : "The postal code where the user’s IP address is physically located. This value is not localized.",
              "readOnly" : true
            },
            "Subdivision" : {
              "type" : "string",
              "description" : "The name of the subdivision where the user’s IP address is physically located. In the U.S., this value is usually the state name (for example, Pennsylvania). This value is not localized.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LoginHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the login history for all successful and failed login attempts for organizations and enabled portals.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the user logging in. Label is User ID.",
              "readOnly" : true
            },
            "LoginTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Time zone is based on GMT. Label is Login Time.",
              "readOnly" : true
            },
            "LoginType" : {
              "type" : "string",
              "description" : "The type of login used to access the session. AppExchange Application (username and password login) Certificate (certificate-based authentication) ChatterCommunityPortalUnPwd (username and password login to Chatter site) ChatterCommunityThirdPartySso (single sign-on to Chatter site) EmployeeLoginToCommunity (employee username and password login to Experience Cloud site) LightningLogin NetworksPortalApiOnly (API login to Experience Cloud site) Oauth, Remote Access Client (OAuth 1.0 authorization) Oauth2, Remote Access 2.0 (OAuth 2.0 authorization) Partner (username and password login to partner portal) PasswordlessLogin (customer or partner passwordless login) Portal (username and password login to portal) PrmPortalThirdPartySso (single sign-on to Partner Relationship Management (PRM) portal) PortalThirdPartySso (single sign-on to portal) PrmPortal (username and password login to PRM portal) Saml (SAML 1.1 login) SamlChatterNetworks (SAML login to Experience Cloud site) SamlCspPortal (SAML login to Customer Service Portal (CSP)) SamlPrmPortal (SAML login to PRM portal) SamlSite (SAML login to site) Saml2 (SAML 2.0 login) SelfService (username and password login to Self-Service portal) ThirdPartySso (authentication provider login) Label is Login Type.",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "description" : "IP address of the machine from which the login request is coming. The address can be an IPv4 or IPv6 address in API version 23.0 or later. In API version 22.0 or earlier, the address is an IPv4 address, and IPv6 addresses are null. Label is Source IP.",
              "readOnly" : true
            },
            "LoginUrl" : {
              "type" : "string",
              "description" : "URL from which the login request is coming. Label is Login URL.",
              "readOnly" : true
            },
            "AuthenticationServiceId" : {
              "type" : "string",
              "description" : "The 18-character ID for an authentication service for a login event. For example, you can use this field to identify the SAML or authentication provider configuration with which the user logged in. This field is available in API version 34.0 and later. Label is Authentication Service Id.",
              "readOnly" : true
            },
            "LoginGeoId" : {
              "type" : "string",
              "description" : "The 18-character ID for the record of the geographic location of the user for a successful or unsuccessful login event. The accuracy of geolocation fields like country, city, or postal code can vary because of the nature of the technology. This field is available in API version 34.0 and later.",
              "readOnly" : true
            },
            "TlsProtocol" : {
              "type" : "string",
              "description" : "The TLS protocol used for the login. Possible values are: TLS 1.0 TLS 1.1 TLS 1.2 TLS 1.3 Unknown This field is available in API version 37.0 and later.",
              "readOnly" : true
            },
            "CipherSuite" : {
              "type" : "string",
              "description" : "The TLS cipher suite used for the login. Values are OpenSSL-style cipher suite names, with hyphen delimiters. For more information, see OpenSSL Cryptography and SSL/TLS Toolkit. This field is available in API version 37.0 and later.",
              "readOnly" : true
            },
            "OptionsIsGet" : {
              "type" : "boolean",
              "description" : "The HTTP method used for the session login is a GET request.",
              "readOnly" : true
            },
            "OptionsIsPost" : {
              "type" : "boolean",
              "description" : "The HTTP method used for the session login is a POST request.",
              "readOnly" : true
            },
            "Browser" : {
              "type" : "string",
              "description" : "The current browser version. Label is Browser.",
              "readOnly" : true
            },
            "Platform" : {
              "type" : "string",
              "description" : "Operating system on the login machine. Label is Platform.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "Displays the status of the attempted login. Status is either success or a reason for failure. Label is Status.",
              "readOnly" : true
            },
            "Application" : {
              "type" : "string",
              "description" : "The application used to access the organization. Label is Application.",
              "readOnly" : true
            },
            "ClientVersion" : {
              "type" : "string",
              "description" : "Version of the API client. Label is Client Version.",
              "readOnly" : true
            },
            "ApiType" : {
              "type" : "string",
              "description" : "Indicates the API type, for example Soap Enterprise. Label is API Type.",
              "readOnly" : true
            },
            "ApiVersion" : {
              "type" : "string",
              "description" : "Displays the API version used by the client. Label is API Version.",
              "readOnly" : true
            },
            "CountryIso" : {
              "type" : "string",
              "description" : "The ISO 3166 code for the country where the user’s IP address is physically located. For more information, see Country Codes - ISO 3166. This field is available in API version 37.0 and later.",
              "readOnly" : true
            },
            "AuthMethodReference" : {
              "type" : "string",
              "description" : "The authentication method used by a third-party identification provider for an OpenID Connect single sign-on protocol. This field is available in API version 51.0 and later. Label is Authentication Method Reference.",
              "readOnly" : true
            },
            "LoginSubType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ForwardedForIp" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LoginIp" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a validated IP address.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UsersId" : {
              "type" : "string",
              "description" : "The ID of the user associated with this item.",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "description" : "The IP address the user logged in from.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsAuthenticated" : {
              "type" : "boolean",
              "description" : "If true, the user has already been authenticated.",
              "readOnly" : true
            },
            "ChallengeSentDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time that the user was authenticated.",
              "readOnly" : true
            },
            "ChallengeMethod" : {
              "type" : "string",
              "description" : "The challenge method used to confirm the user’s identity. Possible values include the following. Email SMS TOTP_CHOICE: The user chooses multi-factor authentication. TOTP_ONLY: The user is required to use multi-factor authentication.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LogoutEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LogoutEventStream" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "The documentation has moved to LogoutEventStream in the Platform Events Developer Guide.",
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "LookedUpFromActivity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "This read-only object is displayed as a related list on an activity record (an event or a task); the list contains records that have custom lookup relationships from the activity to another object. This object is not queryable.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "description" : "Indicates the ID of the related account, which is determined as follows: The account associated with the WhatId, if it exists; or The account associated with the WhoId, if it exists; otherwise null",
              "readOnly" : true
            },
            "WhoId" : {
              "type" : "string",
              "description" : "The WhoId represents a human such as a lead or a contact. WhoIds are polymorphic. Polymorphic means a WhoId is equivalent to a contact’s ID or a lead’s ID. The label is Name ID.",
              "readOnly" : true
            },
            "WhatId" : {
              "type" : "string",
              "description" : "The WhatId represents nonhuman objects such as accounts, opportunities, campaigns, cases, or custom objects. WhatIds are polymorphic. Polymorphic means a WhatId is equivalent to the ID of a related object. The label is Related To ID.",
              "readOnly" : true
            },
            "Subject" : {
              "type" : "string",
              "description" : "Contains the subject of the task or event.",
              "readOnly" : true
            },
            "IsTask" : {
              "type" : "boolean",
              "description" : "If the value of this field is set to true, then the activity is a task; if the value is set to false, then the activity is an event. Label is Task.",
              "readOnly" : true
            },
            "ActivityDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Indicates one of the following: The due date of a task The date of an event if IsAllDayEvent is set to true",
              "readOnly" : true
            },
            "ActivityDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Contains the event’s due date if the IsAllDayEvent flag is set to false. The time portion of this field is always transferred in the Coordinated Universal Time (UTC) time zone. Translate the time portion to or from a local time zone for the user or the application, as appropriate. Label is Due Date Time.The value for this field and StartDateTime must match, or one of them must be null.",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "Indicates the ID of the user or group who owns the activity.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "Indicates the current status of a task, such as in progress or complete. Each predefined status field sets a value for IsClosed.",
              "readOnly" : true
            },
            "Priority" : {
              "type" : "string",
              "description" : "Indicates the priority of a task, such as high, normal, or low.",
              "readOnly" : true
            },
            "IsHighPriority" : {
              "type" : "boolean",
              "description" : "Indicates a high-priority task. This field is derived from the Priority field.",
              "readOnly" : true
            },
            "ActivityType" : {
              "type" : "string",
              "description" : "Represents one of the following values: Call, Email, Meeting, or Other. Label is Type. These are default values, and can be changed.",
              "readOnly" : true
            },
            "IsClosed" : {
              "type" : "boolean",
              "description" : "Indicates whether a task is closed; value is always false. This field is set indirectly by setting Status on the task—each picklist value has a corresponding IsClosed value. Label is Closed.",
              "readOnly" : true
            },
            "IsAllDayEvent" : {
              "type" : "boolean",
              "description" : "If the value of this field is set to true, then the activity is an event spanning a full day, and the ActivityDate defines the date of the event. If the value of this field is set to false, then the activity may be an event spanning less than a full day, or it may be a task. Label is All-Day Event.",
              "readOnly" : true
            },
            "IsVisibleInSelfService" : {
              "type" : "boolean",
              "description" : "If the value of this field is set to true, then the activity can be viewed in the self-service portal. Label is Visible in Self-Service.",
              "readOnly" : true
            },
            "DurationInMinutes" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the duration of the event or task.",
              "readOnly" : true
            },
            "Location" : {
              "type" : "string",
              "description" : "If the activity is an event, then this field represents the location of the event. If the activity is a task, then the value is null.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Contains a description of the event or task. Limit is 32 KB.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CallDurationInSeconds" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Duration of the call in seconds.",
              "readOnly" : true
            },
            "CallType" : {
              "type" : "string",
              "description" : "The type of call being answered: Inbound, Internal, or Outbound.",
              "readOnly" : true
            },
            "CallDisposition" : {
              "type" : "string",
              "description" : "Represents the result of a given call; for example, “we’ll call back,” or “call unsuccessful.” Limit is 255 characters.",
              "readOnly" : true
            },
            "CallObject" : {
              "type" : "string",
              "description" : "Name of a call center. Limit is 255 characters.",
              "readOnly" : true
            },
            "ReminderDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Represents the time at which a reminder is scheduled to fire if IsReminderSet is set to true. If IsReminderSet is set to false, then either the user has deselected the reminder checkbox in the user interface or the reminder has already fired at the time indicated by the value.",
              "readOnly" : true
            },
            "IsReminderSet" : {
              "type" : "boolean",
              "description" : "Indicates whether a reminder is set for an activity (true) or not (false).",
              "readOnly" : true
            },
            "EndDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Indicates the end date and time of the event or task. Available in versions 27.0 and later. This field is optional, depending on the following: If IsAllDayEvent is true, you can supply a value for either DurationInMinutes or EndDateTime. Supplying values in both fields is allowed if the values add up to the same amount of time. If both fields are null, the duration defaults to one day. If IsAllDayEvent is false, a value must be supplied for either DurationInMinutes or EndDateTime. Supplying values in both fields is allowed if the values add up to the same amount of time.",
              "readOnly" : true
            },
            "StartDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Indicates the start date and time of the event. Available in versions 13.0 and later.",
              "readOnly" : true
            },
            "ActivitySubtype" : {
              "type" : "string",
              "readOnly" : true
            },
            "CompletedDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "MLEngagementEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string"
            },
            "Org" : {
              "type" : "string"
            },
            "UserId" : {
              "type" : "string"
            },
            "EventName" : {
              "type" : "string"
            },
            "Type" : {
              "type" : "string"
            },
            "Feature" : {
              "type" : "string"
            },
            "Score" : {
              "type" : "integer",
              "format" : "int32"
            },
            "Cloud" : {
              "type" : "string"
            },
            "CustomFields" : {
              "type" : "string"
            },
            "Entity" : {
              "type" : "string"
            },
            "EntityType" : {
              "type" : "string"
            },
            "PageUrl" : {
              "type" : "string"
            },
            "PageContext" : {
              "type" : "string"
            },
            "LoggerName" : {
              "type" : "string"
            },
            "LoggerAppName" : {
              "type" : "string"
            },
            "LoggedAt" : {
              "type" : "string"
            },
            "ClientSession" : {
              "type" : "string"
            },
            "Value" : {
              "type" : "number"
            },
            "ContextId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "Macro" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a macro, which is a set of instructions that tells the system to perform one or more tasks.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the owner of the session record."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the macro."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time that the macro record was last viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time that the macro record was last referenced.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of what this macro does."
            },
            "IsAlohaSupported" : {
              "type" : "boolean",
              "description" : "Specifies whether the macro is supported in Salesforce Classic.",
              "readOnly" : true
            },
            "IsLightningSupported" : {
              "type" : "boolean",
              "description" : "Specifies whether the macro is supported in Lightning Experience.",
              "readOnly" : true
            },
            "StartingContext" : {
              "type" : "string",
              "description" : "The object the macro performs actions on. In Salesforce Classic, macros are supported on objects with both feed-based layouts and quick actions. In Lightning Experience, macros are supported on standard and custom objects that allow quick actions and have a customizable page layout."
            }
          }
        } ]
      },
      "MacroChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsAlohaSupported" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsLightningSupported" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "StartingContext" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "MacroHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MacroId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "MacroInstruction" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an instruction in a macro. An instruction can specify the object that the macro interacts with, the context or publisher that the macro works within, the operation or action that the macro performs, and the target of the macro’s actions.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the instruction.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "MacroId" : {
              "type" : "string",
              "description" : "ID of the macro that contains this instruction."
            },
            "Operation" : {
              "type" : "string",
              "description" : "The action that the macro instruction performs. Valid values are: Select Set Insert Submit Close"
            },
            "Target" : {
              "type" : "string",
              "description" : "The object that’s the target of the operation. For example, the target for the active case tab (Tab.Case) or a quick action, like the Send Email action on the case object (QuickAction.Case.SendEmail)."
            },
            "Value" : {
              "type" : "string",
              "description" : "Value of a field. If the operation is Select, then the value is null, because the operation selects the object on which the macro performs an action. An instruction can contain both a Value field and a ValueRecord field, but only one of these fields can have a value. The other field value must be null."
            },
            "ValueRecord" : {
              "type" : "string",
              "description" : "ID of the value or record. The ValueRecord can be either a value or a record, but not both. An instruction can contain both a Value field and a ValueRecord field, but only one of these fields can have a value. The other field value must be null."
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Order of this instruction in the macro."
            }
          }
        } ]
      },
      "MacroInstructionChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "MacroId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "Target" : {
              "type" : "string",
              "readOnly" : true
            },
            "Value" : {
              "type" : "string",
              "readOnly" : true
            },
            "ValueRecord" : {
              "type" : "string",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "MacroShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "MacroUsage" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents macro usage on a record, including which macro was used, who used it, and how they used it.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the group or user that owns the macro.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the macro.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "MacroId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContextRecord" : {
              "type" : "string",
              "description" : "ID of the record on which the macro was run.",
              "readOnly" : true
            },
            "ExecutedInstructionCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of macro instructions that ran successfully. If the macro completed successfully, this value is the same as InstructionCount.",
              "readOnly" : true
            },
            "InstructionCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of instructions in the macro at the start of execution.",
              "readOnly" : true
            },
            "ExecutionEndTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The time at which macro execution completed.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the user that ran the macro.",
              "readOnly" : true
            },
            "IsFromBulk" : {
              "type" : "boolean",
              "description" : "If true, the macro was run as a bulk macro. When a bulk macro is run on multiple records, usage is recorded per record.",
              "readOnly" : true
            },
            "AppContext" : {
              "type" : "string",
              "description" : "Context in which the macro was run. Possible values are: Aloha—Salesforce Classic Lightning—Lightning Experience Unknown",
              "readOnly" : true
            },
            "ConditionCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of conditional instructions contained in the macro at execution.",
              "readOnly" : true
            },
            "ExecutionState" : {
              "type" : "string",
              "description" : "The end state of macro execution. Possible values are SUCCESS FAILURE CANCELED",
              "readOnly" : true
            },
            "DurationInMs" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The execution time, in milliseconds, for the macro.",
              "readOnly" : true
            },
            "FailureReason" : {
              "type" : "string",
              "description" : "If ExecutionState is failure, this field stores the reason for the failure. Possible values are: ACCESS GENERIC TIMEOUT UNSUPPORTED",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "MacroUsageShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "MailmergeTemplate" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a mail merge template (a Microsoft Word document) used for performing mail merges for your organization.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of this mail merge template."
            },
            "Description" : {
              "type" : "string",
              "description" : "Required. Text description of this mail merge template. Limit: 255 characters."
            },
            "Filename" : {
              "type" : "string",
              "description" : "Required. File name of the Microsoft Word document that was uploaded as a mail merge template. Limit: 255 characters in length."
            },
            "BodyLength" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Length of the Microsoft Word document.",
              "readOnly" : true
            },
            "Body" : {
              "type" : "object",
              "description" : "Required. Microsoft Word document to use as a mail merge template. Due to limitations with Microsoft Word mail merge templates, your client application can specify the Body field when creating these records, but not when updating them. Limit: 5 MB."
            },
            "LastUsedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Date and time when this MailmergeTemplate was last used.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SecurityOptionsAttachmentScannedForXSS" : {
              "type" : "boolean",
              "description" : "Required. True if the attachment has been scanned for a cross site scripting threat."
            },
            "SecurityOptionsAttachmentHasXSSThreat" : {
              "type" : "boolean",
              "description" : "Required. True if a cross site scripting threat was detected in the attachment."
            },
            "SecurityOptionsAttachmentScannedforFlash" : {
              "type" : "boolean",
              "description" : "Required. True if the attachment has been scanned for Flash Injection."
            },
            "SecurityOptionsAttachmentHasFlash" : {
              "type" : "boolean",
              "description" : "Required. True if Flash Injection was detected in the attachment."
            }
          }
        } ]
      },
      "ManagedContent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PrimaryLanguage" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuthoredManagedContentSpaceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentTypeFullyQualifiedName" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ManagedContentChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "PrimaryLanguage" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "AuthoredManagedContentSpaceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentTypeFullyQualifiedName" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ManagedContentChannel" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "OptionsIsSearchable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsIsCacheControlPublic" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsIsDomainLocked" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Domain" : {
              "type" : "string",
              "readOnly" : true
            },
            "DomainHostName" : {
              "type" : "string",
              "readOnly" : true
            },
            "CacheControlMaxAge" : {
              "type" : "number",
              "readOnly" : true
            },
            "MediaCacheControlMaxAge" : {
              "type" : "number",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ManagedContentSpace" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "DefaultLanguage" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ManagedContentVariant" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "VariantType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "UrlName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ManagedContentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsReady" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ManagedContentKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentTypeFullyQualifiedName" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsPublished" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ManagedContentVariantStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "HasLocks" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsPrimary" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ManagedContentVariantChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "VariantType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "UrlName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ManagedContentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsReady" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ManagedContentKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContentTypeFullyQualifiedName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ManagedContentVariantStatus" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "MatchingInformation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EmailAddress" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string",
              "readOnly" : true
            },
            "SFDCIdId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsPickedAsPreferred" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreferenceUsed" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "MatchingRule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a matching rule that is used to identify duplicate records.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SobjectType" : {
              "type" : "string",
              "description" : "The object for the matching rule.",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The developer name for the matching rule.",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "description" : "The language selected for your organization.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The name of the matching rule.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The namespace prefix for matching rules for your organization.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "MatchEngine" : {
              "type" : "string",
              "description" : "The match engine used by the matching rule.",
              "readOnly" : true
            },
            "BooleanFilter" : {
              "type" : "string",
              "description" : "Specifies filter logic conditions.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "The description of the matching rule.",
              "readOnly" : true
            },
            "RuleStatus" : {
              "type" : "string",
              "description" : "Required. The activation status of the matching rule. Values are: Inactive Deactivating DeactivationFailed Active Activating ActivationFailed The only valid values you can declare when deploying a package are Active and Inactive.",
              "readOnly" : true
            },
            "SobjectSubtype" : {
              "type" : "string",
              "description" : "Read-only. Indicates if the matching rule is defined for the Person subtype of Account. Valid values are: PersonAccount None",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "MatchingRuleItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents criteria used by a matching rule to identify duplicate records.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "MatchingRuleId" : {
              "type" : "string",
              "description" : "The ID for the matching rule.",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The order of the matching rule items for a matching rule.",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "description" : "Indicates which field to compare when determining if a record is similar enough to an existing record to be considered a match.",
              "readOnly" : true
            },
            "MatchingMethod" : {
              "type" : "string",
              "description" : "Defines how the fields are compared. Choose between the exact matching method and various fuzzy matching methods. Valid values are: Exact FirstName LastName CompanyName Phone City Street Zip Title For details on each matching method, see “Matching Methods Used with Matching Rules” in the Salesforce Help.",
              "readOnly" : true
            },
            "BlankValueBehavior" : {
              "type" : "string",
              "description" : "Specifies how blank fields affect whether the fields being compared are considered matches. Valid values are: MatchBlanks NullNotAllowed (default)",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Merchandise__ChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Price__c" : {
              "type" : "number",
              "readOnly" : true
            },
            "Quantity__c" : {
              "type" : "number",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Merchandise__Feed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Merchandise__Share" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "Merchandise__c" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the assigned owner of the custom object record. If the custom object becomes the detail side of a master-detail relationship, this field is removed, as ownership of the data is controlled by the master object, or by the primary master object for a custom object with two master-detail relationships.Custom objects on the detail side of a master-detail relationship can't have sharing rules, manual sharing, or queues, as these require the Owner field."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Identifier for the custom object record. This name appears in page layouts, related lists, lookup dialogs, search results, and key lists on tab home pages. By default, this field is added to the custom object page layout as a required field."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "description" : "ID of the user who created the record.",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "description" : "ID of the user who most recently changed the record.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastActivityDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Price__c" : {
              "type" : "number"
            },
            "Quantity__c" : {
              "type" : "number"
            }
          }
        } ]
      },
      "MlFeatureValueMetric" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Feature" : {
              "type" : "string"
            },
            "Date" : {
              "type" : "string",
              "format" : "date"
            },
            "MetricKey" : {
              "type" : "string"
            },
            "MetricValue" : {
              "type" : "number"
            }
          }
        } ]
      },
      "MobileApplicationDetail" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string"
            },
            "Language" : {
              "type" : "string"
            },
            "MasterLabel" : {
              "type" : "string"
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Version" : {
              "type" : "string"
            },
            "DevicePlatform" : {
              "type" : "string"
            },
            "MinimumOsVersion" : {
              "type" : "string"
            },
            "DeviceType" : {
              "type" : "string"
            },
            "ApplicationFileLength" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ApplicationIcon" : {
              "type" : "string"
            },
            "IsEnterpriseApp" : {
              "type" : "boolean"
            },
            "AppInstallUrl" : {
              "type" : "string"
            },
            "ApplicationBundleIdentifier" : {
              "type" : "string"
            },
            "ApplicationBinaryFileName" : {
              "type" : "string"
            },
            "ApplicationIconFileName" : {
              "type" : "string"
            },
            "ApplicationBinary" : {
              "type" : "object"
            }
          }
        } ]
      },
      "MutingPermissionSet" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a set of disabled permissions and is used in conjunction with PermissionSetGroup .",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization. When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance can slow while Salesforce generates one for each record."
            },
            "Language" : {
              "type" : "string",
              "description" : "The language of the muting permission set."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The muting permission set label for the aggregated, disabled permissions."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PermissionsEmailSingle" : {
              "type" : "boolean"
            },
            "PermissionsEmailMass" : {
              "type" : "boolean"
            },
            "PermissionsEditTask" : {
              "type" : "boolean"
            },
            "PermissionsEditEvent" : {
              "type" : "boolean"
            },
            "PermissionsExportReport" : {
              "type" : "boolean"
            },
            "PermissionsImportPersonal" : {
              "type" : "boolean"
            },
            "PermissionsDataExport" : {
              "type" : "boolean"
            },
            "PermissionsManageUsers" : {
              "type" : "boolean"
            },
            "PermissionsEditPublicFilters" : {
              "type" : "boolean"
            },
            "PermissionsEditPublicTemplates" : {
              "type" : "boolean"
            },
            "PermissionsModifyAllData" : {
              "type" : "boolean"
            },
            "PermissionsEditBillingInfo" : {
              "type" : "boolean"
            },
            "PermissionsManageCases" : {
              "type" : "boolean"
            },
            "PermissionsMassInlineEdit" : {
              "type" : "boolean"
            },
            "PermissionsEditKnowledge" : {
              "type" : "boolean"
            },
            "PermissionsManageKnowledge" : {
              "type" : "boolean"
            },
            "PermissionsManageSolutions" : {
              "type" : "boolean"
            },
            "PermissionsCustomizeApplication" : {
              "type" : "boolean"
            },
            "PermissionsEditReadonlyFields" : {
              "type" : "boolean"
            },
            "PermissionsRunReports" : {
              "type" : "boolean"
            },
            "PermissionsViewSetup" : {
              "type" : "boolean"
            },
            "PermissionsTransferAnyEntity" : {
              "type" : "boolean"
            },
            "PermissionsNewReportBuilder" : {
              "type" : "boolean"
            },
            "PermissionsActivateContract" : {
              "type" : "boolean"
            },
            "PermissionsImportLeads" : {
              "type" : "boolean"
            },
            "PermissionsManageLeads" : {
              "type" : "boolean"
            },
            "PermissionsTransferAnyLead" : {
              "type" : "boolean"
            },
            "PermissionsViewAllData" : {
              "type" : "boolean"
            },
            "PermissionsEditPublicDocuments" : {
              "type" : "boolean"
            },
            "PermissionsViewEncryptedData" : {
              "type" : "boolean"
            },
            "PermissionsEditBrandTemplates" : {
              "type" : "boolean"
            },
            "PermissionsEditHtmlTemplates" : {
              "type" : "boolean"
            },
            "PermissionsChatterInternalUser" : {
              "type" : "boolean"
            },
            "PermissionsDeleteActivatedContract" : {
              "type" : "boolean"
            },
            "PermissionsChatterInviteExternalUsers" : {
              "type" : "boolean"
            },
            "PermissionsSendSitRequests" : {
              "type" : "boolean"
            },
            "PermissionsManageRemoteAccess" : {
              "type" : "boolean"
            },
            "PermissionsCanUseNewDashboardBuilder" : {
              "type" : "boolean"
            },
            "PermissionsManageCategories" : {
              "type" : "boolean"
            },
            "PermissionsConvertLeads" : {
              "type" : "boolean"
            },
            "PermissionsPasswordNeverExpires" : {
              "type" : "boolean"
            },
            "PermissionsUseTeamReassignWizards" : {
              "type" : "boolean"
            },
            "PermissionsInstallPackaging" : {
              "type" : "boolean"
            },
            "PermissionsPublishPackaging" : {
              "type" : "boolean"
            },
            "PermissionsChatterOwnGroups" : {
              "type" : "boolean"
            },
            "PermissionsEditOppLineItemUnitPrice" : {
              "type" : "boolean"
            },
            "PermissionsCreatePackaging" : {
              "type" : "boolean"
            },
            "PermissionsBulkApiHardDelete" : {
              "type" : "boolean"
            },
            "PermissionsSolutionImport" : {
              "type" : "boolean"
            },
            "PermissionsManageCallCenters" : {
              "type" : "boolean"
            },
            "PermissionsManageSynonyms" : {
              "type" : "boolean"
            },
            "PermissionsViewContent" : {
              "type" : "boolean"
            },
            "PermissionsManageEmailClientConfig" : {
              "type" : "boolean"
            },
            "PermissionsEnableNotifications" : {
              "type" : "boolean"
            },
            "PermissionsManageDataIntegrations" : {
              "type" : "boolean"
            },
            "PermissionsDistributeFromPersWksp" : {
              "type" : "boolean"
            },
            "PermissionsViewDataCategories" : {
              "type" : "boolean"
            },
            "PermissionsManageDataCategories" : {
              "type" : "boolean"
            },
            "PermissionsAuthorApex" : {
              "type" : "boolean"
            },
            "PermissionsManageMobile" : {
              "type" : "boolean"
            },
            "PermissionsApiEnabled" : {
              "type" : "boolean"
            },
            "PermissionsManageCustomReportTypes" : {
              "type" : "boolean"
            },
            "PermissionsEditCaseComments" : {
              "type" : "boolean"
            },
            "PermissionsTransferAnyCase" : {
              "type" : "boolean"
            },
            "PermissionsContentAdministrator" : {
              "type" : "boolean"
            },
            "PermissionsCreateWorkspaces" : {
              "type" : "boolean"
            },
            "PermissionsManageContentPermissions" : {
              "type" : "boolean"
            },
            "PermissionsManageContentProperties" : {
              "type" : "boolean"
            },
            "PermissionsManageContentTypes" : {
              "type" : "boolean"
            },
            "PermissionsManageExchangeConfig" : {
              "type" : "boolean"
            },
            "PermissionsManageAnalyticSnapshots" : {
              "type" : "boolean"
            },
            "PermissionsScheduleReports" : {
              "type" : "boolean"
            },
            "PermissionsManageBusinessHourHolidays" : {
              "type" : "boolean"
            },
            "PermissionsManageDynamicDashboards" : {
              "type" : "boolean"
            },
            "PermissionsCustomSidebarOnAllPages" : {
              "type" : "boolean"
            },
            "PermissionsManageInteraction" : {
              "type" : "boolean"
            },
            "PermissionsViewMyTeamsDashboards" : {
              "type" : "boolean"
            },
            "PermissionsModerateChatter" : {
              "type" : "boolean"
            },
            "PermissionsResetPasswords" : {
              "type" : "boolean"
            },
            "PermissionsFlowUFLRequired" : {
              "type" : "boolean"
            },
            "PermissionsCanInsertFeedSystemFields" : {
              "type" : "boolean"
            },
            "PermissionsActivitiesAccess" : {
              "type" : "boolean"
            },
            "PermissionsManageKnowledgeImportExport" : {
              "type" : "boolean"
            },
            "PermissionsEmailTemplateManagement" : {
              "type" : "boolean"
            },
            "PermissionsEmailAdministration" : {
              "type" : "boolean"
            },
            "PermissionsManageChatterMessages" : {
              "type" : "boolean"
            },
            "PermissionsChatterFileLink" : {
              "type" : "boolean"
            },
            "PermissionsForceTwoFactor" : {
              "type" : "boolean"
            },
            "PermissionsViewEventLogFiles" : {
              "type" : "boolean"
            },
            "PermissionsManageNetworks" : {
              "type" : "boolean"
            },
            "PermissionsManageAuthProviders" : {
              "type" : "boolean"
            },
            "PermissionsRunFlow" : {
              "type" : "boolean"
            },
            "PermissionsCreateCustomizeDashboards" : {
              "type" : "boolean"
            },
            "PermissionsCreateDashboardFolders" : {
              "type" : "boolean"
            },
            "PermissionsViewPublicDashboards" : {
              "type" : "boolean"
            },
            "PermissionsManageDashbdsInPubFolders" : {
              "type" : "boolean"
            },
            "PermissionsCreateCustomizeReports" : {
              "type" : "boolean"
            },
            "PermissionsCreateReportFolders" : {
              "type" : "boolean"
            },
            "PermissionsViewPublicReports" : {
              "type" : "boolean"
            },
            "PermissionsManageReportsInPubFolders" : {
              "type" : "boolean"
            },
            "PermissionsEditMyDashboards" : {
              "type" : "boolean"
            },
            "PermissionsEditMyReports" : {
              "type" : "boolean"
            },
            "PermissionsViewAllUsers" : {
              "type" : "boolean"
            },
            "PermissionsAllowUniversalSearch" : {
              "type" : "boolean"
            },
            "PermissionsConnectOrgToEnvironmentHub" : {
              "type" : "boolean"
            },
            "PermissionsCreateCustomizeFilters" : {
              "type" : "boolean"
            },
            "PermissionsContentHubUser" : {
              "type" : "boolean"
            },
            "PermissionsGovernNetworks" : {
              "type" : "boolean"
            },
            "PermissionsSalesConsole" : {
              "type" : "boolean"
            },
            "PermissionsTwoFactorApi" : {
              "type" : "boolean"
            },
            "PermissionsDeleteTopics" : {
              "type" : "boolean"
            },
            "PermissionsEditTopics" : {
              "type" : "boolean"
            },
            "PermissionsCreateTopics" : {
              "type" : "boolean"
            },
            "PermissionsAssignTopics" : {
              "type" : "boolean"
            },
            "PermissionsIdentityEnabled" : {
              "type" : "boolean"
            },
            "PermissionsIdentityConnect" : {
              "type" : "boolean"
            },
            "PermissionsAllowViewKnowledge" : {
              "type" : "boolean"
            },
            "PermissionsContentWorkspaces" : {
              "type" : "boolean"
            },
            "PermissionsManageSearchPromotionRules" : {
              "type" : "boolean"
            },
            "PermissionsCustomMobileAppsAccess" : {
              "type" : "boolean"
            },
            "PermissionsViewHelpLink" : {
              "type" : "boolean"
            },
            "PermissionsManageProfilesPermissionsets" : {
              "type" : "boolean"
            },
            "PermissionsAssignPermissionSets" : {
              "type" : "boolean"
            },
            "PermissionsManageRoles" : {
              "type" : "boolean"
            },
            "PermissionsManageIpAddresses" : {
              "type" : "boolean"
            },
            "PermissionsManageSharing" : {
              "type" : "boolean"
            },
            "PermissionsManageInternalUsers" : {
              "type" : "boolean"
            },
            "PermissionsManagePasswordPolicies" : {
              "type" : "boolean"
            },
            "PermissionsManageLoginAccessPolicies" : {
              "type" : "boolean"
            },
            "PermissionsViewPlatformEvents" : {
              "type" : "boolean"
            },
            "PermissionsManageCustomPermissions" : {
              "type" : "boolean"
            },
            "PermissionsCanVerifyComment" : {
              "type" : "boolean"
            },
            "PermissionsManageUnlistedGroups" : {
              "type" : "boolean"
            },
            "PermissionsFreezeUsers" : {
              "type" : "boolean"
            },
            "PermissionsManageTwoFactor" : {
              "type" : "boolean"
            },
            "PermissionsLightningExperienceUser" : {
              "type" : "boolean"
            },
            "PermissionsViewDataLeakageEvents" : {
              "type" : "boolean"
            },
            "PermissionsConfigCustomRecs" : {
              "type" : "boolean"
            },
            "PermissionsSubmitMacrosAllowed" : {
              "type" : "boolean"
            },
            "PermissionsBulkMacrosAllowed" : {
              "type" : "boolean"
            },
            "PermissionsShareInternalArticles" : {
              "type" : "boolean"
            },
            "PermissionsManageSessionPermissionSets" : {
              "type" : "boolean"
            },
            "PermissionsSendAnnouncementEmails" : {
              "type" : "boolean"
            },
            "PermissionsChatterEditOwnPost" : {
              "type" : "boolean"
            },
            "PermissionsChatterEditOwnRecordPost" : {
              "type" : "boolean"
            },
            "PermissionsImportCustomObjects" : {
              "type" : "boolean"
            },
            "PermissionsDelegatedTwoFactor" : {
              "type" : "boolean"
            },
            "PermissionsChatterComposeUiCodesnippet" : {
              "type" : "boolean"
            },
            "PermissionsSelectFilesFromSalesforce" : {
              "type" : "boolean"
            },
            "PermissionsModerateNetworkUsers" : {
              "type" : "boolean"
            },
            "PermissionsMergeTopics" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeToLightningReports" : {
              "type" : "boolean"
            },
            "PermissionsManagePvtRptsAndDashbds" : {
              "type" : "boolean"
            },
            "PermissionsAllowLightningLogin" : {
              "type" : "boolean"
            },
            "PermissionsCampaignInfluence2" : {
              "type" : "boolean"
            },
            "PermissionsViewDataAssessment" : {
              "type" : "boolean"
            },
            "PermissionsRemoveDirectMessageMembers" : {
              "type" : "boolean"
            },
            "PermissionsCanApproveFeedPost" : {
              "type" : "boolean"
            },
            "PermissionsAddDirectMessageMembers" : {
              "type" : "boolean"
            },
            "PermissionsAllowViewEditConvertedLeads" : {
              "type" : "boolean"
            },
            "PermissionsShowCompanyNameAsUserBadge" : {
              "type" : "boolean"
            },
            "PermissionsAccessCMC" : {
              "type" : "boolean"
            },
            "PermissionsViewHealthCheck" : {
              "type" : "boolean"
            },
            "PermissionsManageHealthCheck" : {
              "type" : "boolean"
            },
            "PermissionsPackaging2" : {
              "type" : "boolean"
            },
            "PermissionsManageCertificates" : {
              "type" : "boolean"
            },
            "PermissionsCreateReportInLightning" : {
              "type" : "boolean"
            },
            "PermissionsPreventClassicExperience" : {
              "type" : "boolean"
            },
            "PermissionsHideReadByList" : {
              "type" : "boolean"
            },
            "PermissionsListEmailSend" : {
              "type" : "boolean"
            },
            "PermissionsFeedPinning" : {
              "type" : "boolean"
            },
            "PermissionsChangeDashboardColors" : {
              "type" : "boolean"
            },
            "PermissionsIotUser" : {
              "type" : "boolean"
            },
            "PermissionsManageRecommendationStrategies" : {
              "type" : "boolean"
            },
            "PermissionsManagePropositions" : {
              "type" : "boolean"
            },
            "PermissionsCloseConversations" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeReportRolesGrps" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeDashboardRolesGrps" : {
              "type" : "boolean"
            },
            "PermissionsUseWebLink" : {
              "type" : "boolean"
            },
            "PermissionsHasUnlimitedNBAExecutions" : {
              "type" : "boolean"
            },
            "PermissionsViewAllActivities" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeReportToOtherUsers" : {
              "type" : "boolean"
            },
            "PermissionsLightningConsoleAllowedForUser" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeReportsRunAsUser" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeToLightningDashboards" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeDashboardToOtherUsers" : {
              "type" : "boolean"
            },
            "PermissionsCreateLtngTempInPub" : {
              "type" : "boolean"
            },
            "PermissionsTransactionalEmailSend" : {
              "type" : "boolean"
            },
            "PermissionsViewPrivateStaticResources" : {
              "type" : "boolean"
            },
            "PermissionsCreateLtngTempFolder" : {
              "type" : "boolean"
            },
            "PermissionsApexRestServices" : {
              "type" : "boolean"
            },
            "PermissionsEnableCommunityAppLauncher" : {
              "type" : "boolean"
            },
            "PermissionsGiveRecognitionBadge" : {
              "type" : "boolean"
            },
            "PermissionsUseMySearch" : {
              "type" : "boolean"
            },
            "PermissionsLtngPromoReserved01UserPerm" : {
              "type" : "boolean"
            },
            "PermissionsManageSubscriptions" : {
              "type" : "boolean"
            },
            "PermissionsManageSurveys" : {
              "type" : "boolean"
            },
            "PermissionsUseAssistantDialog" : {
              "type" : "boolean"
            },
            "PermissionsViewRoles" : {
              "type" : "boolean"
            },
            "PermissionsCustomTabBarOnMobile" : {
              "type" : "boolean"
            },
            "PermissionsLMOutboundMessagingUserPerm" : {
              "type" : "boolean"
            },
            "PermissionsModifyDataClassification" : {
              "type" : "boolean"
            },
            "PermissionsPrivacyDataAccess" : {
              "type" : "boolean"
            },
            "PermissionsQueryAllFiles" : {
              "type" : "boolean"
            },
            "PermissionsModifyMetadata" : {
              "type" : "boolean"
            },
            "PermissionsManageCMS" : {
              "type" : "boolean"
            },
            "PermissionsSandboxTestingInCommunityApp" : {
              "type" : "boolean"
            },
            "PermissionsCanEditPrompts" : {
              "type" : "boolean"
            },
            "PermissionsViewUserPII" : {
              "type" : "boolean"
            },
            "PermissionsManageHubConnections" : {
              "type" : "boolean"
            },
            "PermissionsB2BMarketingAnalyticsUser" : {
              "type" : "boolean"
            },
            "PermissionsTraceXdsQueries" : {
              "type" : "boolean"
            },
            "PermissionsViewAllCustomSettings" : {
              "type" : "boolean"
            },
            "PermissionsViewAllForeignKeyNames" : {
              "type" : "boolean"
            },
            "PermissionsHeadlessCMSAccess" : {
              "type" : "boolean"
            },
            "PermissionsLMEndMessagingSessionUserPerm" : {
              "type" : "boolean"
            },
            "PermissionsConsentApiUpdate" : {
              "type" : "boolean"
            },
            "PermissionsAccountSwitcherUser" : {
              "type" : "boolean"
            },
            "PermissionsViewAnomalyEvents" : {
              "type" : "boolean"
            },
            "PermissionsManageC360AConnections" : {
              "type" : "boolean"
            },
            "PermissionsManageReleaseUpdates" : {
              "type" : "boolean"
            },
            "PermissionsSkipIdentityConfirmation" : {
              "type" : "boolean"
            },
            "PermissionsLearningManager" : {
              "type" : "boolean"
            },
            "PermissionsSendCustomNotifications" : {
              "type" : "boolean"
            },
            "PermissionsPackaging2Delete" : {
              "type" : "boolean"
            },
            "PermissionsViewRestrictionAndScopingRules" : {
              "type" : "boolean"
            },
            "PermissionsBotManageBots" : {
              "type" : "boolean"
            },
            "PermissionsBotManageBotsTrainingData" : {
              "type" : "boolean"
            },
            "PermissionsManageLearningReporting" : {
              "type" : "boolean"
            },
            "PermissionsQuipMetricsAccess" : {
              "type" : "boolean"
            },
            "PermissionsQuipUserEngagementMetrics" : {
              "type" : "boolean"
            },
            "PermissionsTransactionSecurityExempt" : {
              "type" : "boolean"
            },
            "PermissionsManageExternalConnections" : {
              "type" : "boolean"
            },
            "PermissionsNativeWebviewScrolling" : {
              "type" : "boolean"
            },
            "PermissionsViewDeveloperName" : {
              "type" : "boolean"
            },
            "PermissionsBypassMFAForUiLogins" : {
              "type" : "boolean"
            },
            "PermissionsClientSecretRotation" : {
              "type" : "boolean"
            },
            "PermissionsAccessToServiceProcess" : {
              "type" : "boolean"
            },
            "PermissionsManageOrchInstsAndWorkItems" : {
              "type" : "boolean"
            },
            "PermissionsCMSECEAuthoringAccess" : {
              "type" : "boolean"
            },
            "PermissionsManageDataspaceScope" : {
              "type" : "boolean"
            },
            "PermissionsConfigureDataspaceScope" : {
              "type" : "boolean"
            },
            "PermissionsViewClientSecret" : {
              "type" : "boolean"
            },
            "PermissionsCdcReportingCreateReports" : {
              "type" : "boolean"
            },
            "PermissionsCdcReportingViewReports" : {
              "type" : "boolean"
            },
            "PermissionsCdcReportingManageFolders" : {
              "type" : "boolean"
            },
            "PermissionsExternalClientAppDeveloper" : {
              "type" : "boolean"
            },
            "PermissionsExternalClientAppAdmin" : {
              "type" : "boolean"
            },
            "PermissionsExternalClientAppViewer" : {
              "type" : "boolean"
            },
            "PermissionsDeleteCrMemoAndInvoice" : {
              "type" : "boolean"
            },
            "PermissionsManageNamedCredentials" : {
              "type" : "boolean"
            },
            "PermissionsCanUpdateEmailMessage" : {
              "type" : "boolean"
            },
            "PermissionsDownloadPackageVersionZips" : {
              "type" : "boolean"
            },
            "PermissionsViewContentTaxonomy" : {
              "type" : "boolean"
            },
            "PermissionsManageContentTaxonomy" : {
              "type" : "boolean"
            },
            "PermissionsReassignOrchestrationWorkItems" : {
              "type" : "boolean"
            },
            "PermissionsManageOrchestrationRuns" : {
              "type" : "boolean"
            },
            "PermissionsDigitalLendingUser" : {
              "type" : "boolean"
            },
            "PermissionsManageCertificatesExpiration" : {
              "type" : "boolean"
            },
            "PermissionsEnableIPFSUpload" : {
              "type" : "boolean"
            },
            "PermissionsEnableBCTransactionPolling" : {
              "type" : "boolean"
            },
            "PermissionsLobbyManagementUserAccess" : {
              "type" : "boolean"
            },
            "PermissionsMonitorLoginHistory" : {
              "type" : "boolean"
            },
            "PermissionsEnhancedSalesMobileExp" : {
              "type" : "boolean"
            },
            "PermissionsSimpleCsvDataImportUser" : {
              "type" : "boolean"
            },
            "PermissionsAdvancedCsvDataImportUser" : {
              "type" : "boolean"
            },
            "PermissionsAccessToComplaintMgmt" : {
              "type" : "boolean"
            },
            "PermissionsAccessToDisputeManagement" : {
              "type" : "boolean"
            },
            "PermissionsPersonalizedFinanceUserAccess" : {
              "type" : "boolean"
            },
            "PermissionsCustomAppsOnFSMobile" : {
              "type" : "boolean"
            },
            "PermissionsStageManagementDesignUser" : {
              "type" : "boolean"
            },
            "PermissionsSegmentIntelligenceUser" : {
              "type" : "boolean"
            },
            "PermissionsFSCArcGraphCommunityUser" : {
              "type" : "boolean"
            },
            "PermissionsManageCdpMlModels" : {
              "type" : "boolean"
            },
            "PermissionsDigitalLendingAdminUser" : {
              "type" : "boolean"
            },
            "PermissionsActivateSystemModeFlows" : {
              "type" : "boolean"
            },
            "PermissionsPersonalizationPlatform" : {
              "type" : "boolean"
            },
            "PermissionsManageIntegrationConnections" : {
              "type" : "boolean"
            },
            "PermissionsManageFilesAndAttachments" : {
              "type" : "boolean"
            },
            "PermissionsManageCustomDomains" : {
              "type" : "boolean"
            },
            "PermissionsEngagementConfigUser" : {
              "type" : "boolean"
            },
            "PermissionsPersonalizationIntelUser" : {
              "type" : "boolean"
            },
            "PermissionsAttributionModelUser" : {
              "type" : "boolean"
            },
            "PermissionsAccessDisputePrompts" : {
              "type" : "boolean"
            },
            "PermissionsQueryNonVetoedFiles" : {
              "type" : "boolean"
            },
            "PermissionsMetadataStudioUser" : {
              "type" : "boolean"
            },
            "PermissionsDigitalLendingWorkbench" : {
              "type" : "boolean"
            },
            "PermissionsDigitalLendingEditReadOnly" : {
              "type" : "boolean"
            },
            "PermissionsPrmExtIntPrtnrAdminUser" : {
              "type" : "boolean"
            },
            "PermissionsManagePersonalOrg" : {
              "type" : "boolean"
            },
            "PermissionsViewPersonalOrg" : {
              "type" : "boolean"
            },
            "PermissionsUseServicePartReturn" : {
              "type" : "boolean"
            },
            "PermissionsHeadlessPublishNudges" : {
              "type" : "boolean"
            },
            "PermissionsApprovalAdmin" : {
              "type" : "boolean"
            },
            "PermissionsApprovalDesigner" : {
              "type" : "boolean"
            },
            "PermissionsAccessServiceEinstein" : {
              "type" : "boolean"
            },
            "PermissionsViewRecommendations" : {
              "type" : "boolean"
            },
            "PermissionsPrismPlaygroundUser" : {
              "type" : "boolean"
            },
            "PermissionsModifyAllPolicyCenterPolicies" : {
              "type" : "boolean"
            },
            "PermissionsViewAllPolicyCenterPolicies" : {
              "type" : "boolean"
            },
            "PermissionsAccessSfDrive" : {
              "type" : "boolean"
            },
            "PermissionsAppFrameworkManageApp" : {
              "type" : "boolean"
            },
            "PermissionsAppFrameworkViewApp" : {
              "type" : "boolean"
            },
            "PermissionsAgentforceServiceAgentUser" : {
              "type" : "boolean"
            },
            "PermissionsManageAgentforceServiceAgent" : {
              "type" : "boolean"
            },
            "PermissionsPersonalizationDecisioningUser" : {
              "type" : "boolean"
            },
            "PermissionsCanDoActAsUser" : {
              "type" : "boolean"
            },
            "PermissionsViewAllFieldsGlobal" : {
              "type" : "boolean"
            },
            "PermissionsSchedulerAIAgentUserAccess" : {
              "type" : "boolean"
            },
            "PermissionsAppFrameworkManageTemplate" : {
              "type" : "boolean"
            },
            "PermissionsModifyAccessDenyPolicies" : {
              "type" : "boolean"
            },
            "PermissionsManageAccessPolicies" : {
              "type" : "boolean"
            },
            "PermissionsViewAccessPolicies" : {
              "type" : "boolean"
            },
            "PermissionsModifyAccessAllowPolicies" : {
              "type" : "boolean"
            },
            "PermissionsViewOrchestrationsInAutomApp" : {
              "type" : "boolean"
            },
            "PermissionsTerritoryOperations" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "MyDomainDiscoverableLogin" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents configuration settings when the My Domain login page type is Discovery. Login Discovery provides an identity-first login experience, where the login page contains the identifier field only. Based on the identifier entered, a handler determines how to authenticate the user.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization."
            },
            "Language" : {
              "type" : "string",
              "description" : "The language of the MasterLabel."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The name of the action link group template."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ApexHandlerId" : {
              "type" : "string",
              "description" : "The ID of the Apex handler that contains the Discovery authentication logic."
            },
            "ExecuteApexHandlerAsId" : {
              "type" : "string",
              "description" : "The ID of the user who is executing the handler. Requires Manage User permission."
            },
            "UsernameLabel" : {
              "type" : "string",
              "description" : "Login prompt on login page when the My Domain login page type is Discovery. It supports localization with custom labels."
            }
          }
        } ]
      },
      "Name" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Non-queryable object that provides information about foreign key traversals when the foreign key has more than one parent.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the parent of the object queried. If the parent is a user, contact, or lead, the value is a concatenation of the FirstName, MiddleName, LastName, and Suffix fields of the related record.",
              "readOnly" : true
            },
            "LastName" : {
              "type" : "string",
              "description" : "The last name of the user, contact, or lead.",
              "readOnly" : true
            },
            "FirstName" : {
              "type" : "string",
              "description" : "The first name of the user, contact, or lead.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "A list of the types of sObjects that can be an owner of this object. You can use this field to filter on a type of owner, for example, return only the leads owned by a user.",
              "readOnly" : true
            },
            "Alias" : {
              "type" : "string",
              "description" : "The user alias. This field contains a value only if the related record is a user.",
              "readOnly" : true
            },
            "UserRoleId" : {
              "type" : "string",
              "description" : "The ID of the user role associated with this object.",
              "readOnly" : true
            },
            "RecordTypeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the related record is an active user (true) or not (false). This field contains a value only if the related record is a user.",
              "readOnly" : true
            },
            "ProfileId" : {
              "type" : "string",
              "description" : "ID of the user’s Profile. Only populated if the related record is a user.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "The title of the user, for example CFO or CEO.",
              "readOnly" : true
            },
            "Email" : {
              "type" : "string",
              "description" : "The email address of the user or group (queue).",
              "readOnly" : true
            },
            "Phone" : {
              "type" : "string",
              "description" : "The phone number of the user. This field contains a value only if the related record is a user.",
              "readOnly" : true
            },
            "NameOrAlias" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "description" : "Contains the name that a user enters to log into the API or the user interface. The value for this field is in the form of an email address, and is only populated if the related record is a user.",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "NamedCredential" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a named credential, which specifies the URL of a callout endpoint and its required authentication parameters in one definition. A named credential can be specified as an endpoint to simplify the setup of authenticated callouts.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization.",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "description" : "The language of the MasterLabel.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The master label for the named credential. This display value is the internal label that doesn’t get translated.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The namespace prefix that is associated with this object. Each Developer Edition org that creates a managed package has a unique namespace prefix. Limit: 15 characters. You can refer to a component in a managed package by using the namespacePrefix__componentName notation.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Endpoint" : {
              "type" : "string",
              "description" : "The root URL of the endpoint.",
              "readOnly" : true
            },
            "PrincipalType" : {
              "type" : "string",
              "description" : "Tracks users who are accessing the external system. Anonymous implies that a user identity isn’t specified for external system access. Named Principal uses one user identity for all users to access the external system.",
              "readOnly" : true
            },
            "CalloutOptionsGenerateAuthorizationHeader" : {
              "type" : "boolean",
              "description" : "Indicates whether Salesforce automatically generates a standard authorization header for each callout to the named credential–defined endpoint. This field is available in API version 35.0 and later.",
              "readOnly" : true
            },
            "CalloutOptionsAllowMergeFieldsInHeader" : {
              "type" : "boolean",
              "description" : "For Apex callouts, indicates whether the code can use merge fields to populate HTTP headers with org data. This field is available in API version 35.0 and later.",
              "readOnly" : true
            },
            "CalloutOptionsAllowMergeFieldsInBody" : {
              "type" : "boolean",
              "description" : "For Apex callouts, indicates whether the code can use merge fields to populate HTTP request bodies with org data. This field is available in API version 35.0 and later.",
              "readOnly" : true
            },
            "AuthProviderId" : {
              "type" : "string",
              "description" : "Salesforce ID of the authentication provider, which defines the service that provides the login process and approves access to the external system. Only users with the “Customize Application” and “Manage AuthProviders” permissions can view this field. This field is available in API version 39.0 and later.",
              "readOnly" : true
            },
            "JwtIssuer" : {
              "type" : "string",
              "description" : "Specify who issued the JSON Web Token using a case-sensitive string. This field is available in API version 46.0 and later.",
              "readOnly" : true
            },
            "JwtFormulaSubject" : {
              "type" : "string",
              "description" : "Formula string calculating the JSON Web Token’s subject. API names and constant strings, in single quotes, can be included. Allows a dynamic Subject unique per user requesting the token. For example, 'User='+$User.Id. Use this field when PrincipalType is set to PerUser. Corresponds to Per User Subject in the user interface. This field is available in API version 46.0 and later.",
              "readOnly" : true
            },
            "JwtTextSubject" : {
              "type" : "string",
              "description" : "Static text, without quotes, that specifies the JSON Web Token subject. Use this field when PrincipalType is set to NamedUser. Corresponds to Named Principal Subject in the user interface. This field is available in API version 46.0 and later.",
              "readOnly" : true
            },
            "JwtValidityPeriodSeconds" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of seconds that the JSON Web Token is valid. This field is available in API version 46.0 and later.",
              "readOnly" : true
            },
            "JwtAudience" : {
              "type" : "string",
              "description" : "External service or other allowed recipients for the JSON Web Token. Written as JSON, with a quoted string for a single audience and an array of quoted strings for multiple audiences. Single audience example: “aud1”. Multiple audiences example: [”aud1”, “aud2”, “aud3”]. This field is available in API version46.0 and later.",
              "readOnly" : true
            },
            "AuthTokenEndpointUrl" : {
              "type" : "string",
              "description" : "The URL where SON Web Tokens (JWTs) are exchanged for access tokens. This field is available in API version 46.0 and later.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Note" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a note, which is text associated with a custom object or a standard object, such as a Contact, Contract, or Opportunity.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "Required. ID of the object associated with the note."
            },
            "Title" : {
              "type" : "string",
              "description" : "Title of the note."
            },
            "IsPrivate" : {
              "type" : "boolean",
              "description" : "If true, only the note owner or a user with the “Modify All Data” permission can view the note or query it via the API. Note that if a user who does not have the “Modify All Data” permission sets this field to true on a note that they do not own, then they can no longer query, delete, or update the note. Label is Private."
            },
            "Body" : {
              "type" : "string",
              "description" : "Body of the note. Limited to 32 KB."
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the user who owns the note."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "NoteAndAttachment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "This read-only object contains all notes and attachments associated with an object.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "IsNote" : {
              "type" : "boolean",
              "description" : "Indicates whether the object contains a note (true) or an attachment (false).",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the parent object.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "Title of the note.",
              "readOnly" : true
            },
            "IsPrivate" : {
              "type" : "boolean",
              "description" : "If true, only the note owner or a user with the “Modify All Data” permission can view the note or query it via the API. Note that if a regular user who does not have “Modify All Data” permission sets this field to true on a note that they do not own, then they can no longer query, delete, or update that note. Label is Private.",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the user who owns the note and attachment.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "OauthCustomScope" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a permission defining the protected data that a connected app can access from an external entity when Salesforce is the OAuth authorization provider.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "Use when referring to the OAuth custom scope from a program. This label must be unique, and can include only alphanumeric characters and underscores."
            },
            "Language" : {
              "type" : "string",
              "description" : "Indicates the default language defined for the developing org."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The master label for the custom scope record. This label must be unique, and can include only alphanumeric characters and underscores."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "The description of the permission provided to the connected app by the scope. The custom scope’s description must be unique, can only include alphanumeric characters, and can be up to 60 characters long."
            },
            "IsPublic" : {
              "type" : "boolean",
              "description" : "Indicates whether the object is included in the connected app’s OpenID Connect discovery endpoint. For more information, see OpenID Connect Discovery Endpoint."
            }
          }
        } ]
      },
      "OauthCustomScopeApp" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the name of the connected app to which the custom scope is assigned.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OauthConsumerId" : {
              "type" : "string"
            },
            "OauthCustomScopeId" : {
              "type" : "string",
              "description" : "The name of the connected app to which the custom scope is assigned. If the connected app is part of a package, include the package’s namespace prefix with the connected app’s name. Use the following format: <namespace_prefix>__<connected_app>. Use two underscores (_) between the namespace prefix and connected app’s name."
            },
            "ApplicationId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "OauthToken" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an OAuth access token for connected app authentication. Use this object to create a user interface for token management.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "description" : "Reserved for future use. Currently, the value is always null.",
              "readOnly" : true
            },
            "AccessToken" : {
              "type" : "string",
              "description" : "The refresh token for authorization.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "The owner of the token.",
              "readOnly" : true
            },
            "RequestToken" : {
              "type" : "string",
              "description" : "The authorization code that was used to request the corresponding AccessToken. With this authorization code, you can revoke the corresponding AccessToken by passing the DeleteToken.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AppName" : {
              "type" : "string",
              "description" : "The label for the connected app that’s associated with this OAuth token.",
              "readOnly" : true
            },
            "LastUsedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The most recent date when the OAuth token was used.",
              "readOnly" : true
            },
            "UseCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "How often the token has been used.",
              "readOnly" : true
            },
            "DeleteToken" : {
              "type" : "string",
              "description" : "A token that can be used at the revoke OAuth token endpoint to remove this token.",
              "readOnly" : true
            },
            "AppMenuItemId" : {
              "type" : "string",
              "description" : "The unique ID for the App Picker menu item that’s associated with this OAuth token.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "OauthTokenExchHandlerApp" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OauthTokenExchangeHandlerId" : {
              "type" : "string"
            },
            "OauthConsumerId" : {
              "type" : "string"
            },
            "ExternalClientApplicationId" : {
              "type" : "string"
            },
            "ApplicationId" : {
              "type" : "string"
            },
            "IsDefault" : {
              "type" : "boolean"
            },
            "ApexExecutionUserId" : {
              "type" : "string"
            },
            "ConnectedApplicationId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "OauthTokenExchangeHandler" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string"
            },
            "Language" : {
              "type" : "string"
            },
            "MasterLabel" : {
              "type" : "string"
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string"
            },
            "IsEnabled" : {
              "type" : "boolean"
            },
            "SupportedTokenTypesAccessToken" : {
              "type" : "boolean"
            },
            "SupportedTokenTypesRefreshToken" : {
              "type" : "boolean"
            },
            "SupportedTokenTypesIdToken" : {
              "type" : "boolean"
            },
            "SupportedTokenTypesSaml2" : {
              "type" : "boolean"
            },
            "SupportedTokenTypesJwt" : {
              "type" : "boolean"
            },
            "IsUserCreationAllowed" : {
              "type" : "boolean"
            },
            "TokenHandlerApexId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ObjectPermissions" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the enabled object permissions for the parent PermissionSet.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The Id of this object’s parent PermissionSet."
            },
            "SobjectType" : {
              "type" : "string",
              "description" : "The object’s API name. For example, Merchandise__c."
            },
            "PermissionsCreate" : {
              "type" : "boolean",
              "description" : "If true, users assigned to the parent PermissionSet can create records for this object. Requires PermissionsRead for the same object to be true."
            },
            "PermissionsRead" : {
              "type" : "boolean",
              "description" : "If true, users assigned to the parent PermissionSet can view records for this object."
            },
            "PermissionsEdit" : {
              "type" : "boolean",
              "description" : "If true, users assigned to the parent PermissionSet can edit records for this object. Requires PermissionsRead for the same object to be true."
            },
            "PermissionsDelete" : {
              "type" : "boolean",
              "description" : "If true, users assigned to the parent PermissionSet can delete records for this object. Requires PermissionsRead and PermissionsEdit for the same object to be true."
            },
            "PermissionsViewAllRecords" : {
              "type" : "boolean",
              "description" : "If true, users assigned to the parent PermissionSet can view all records for this object, regardless of sharing settings. Requires PermissionsRead for the same object to be true."
            },
            "PermissionsModifyAllRecords" : {
              "type" : "boolean",
              "description" : "If true, users assigned to the parent PermissionSet can edit all records for this object, regardless of sharing settings. Requires PermissionsRead, PermissionsDelete, PermissionsEdit, and PermissionsViewAllRecords for the same object to be true."
            },
            "PermissionsViewAllFields" : {
              "type" : "boolean"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "OnboardingMetrics" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string"
            },
            "SeenCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "ExperienceName" : {
              "type" : "string"
            }
          }
        } ]
      },
      "OpenActivity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "This read-only object is displayed in a related list of open activities—future events and open tasks—related to an object. It includes activities for all contacts related to the object. OpenActivity fields for phone calls are only available if your organization uses Salesforce CRM Call Center.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "description" : "Indicates the ID of the related account, which is determined as follows: The account associated with the WhatId, if it exists; or The account associated with the WhoId, if it exists; otherwise null",
              "readOnly" : true
            },
            "WhoId" : {
              "type" : "string",
              "description" : "The WhoId represents a human such as a lead or a contact. WhoIds are polymorphic. Polymorphic means a WhoId is equivalent to a contact’s ID or a lead’s ID. The label is Name ID. If Shared Activities is enabled, the value of this field is the ID of the related lead or primary contact. If you add, update, or remove the WhoId field, you might encounter problems with triggers, workflows, and data validation rules that are associated with the record. The label is Name ID.",
              "readOnly" : true
            },
            "WhatId" : {
              "type" : "string",
              "description" : "The WhatId represents nonhuman objects such as accounts, opportunities, campaigns, cases, or custom objects. WhatIds are polymorphic. Polymorphic means a WhatId is equivalent to the ID of a related object. The label is Related To ID.",
              "readOnly" : true
            },
            "Subject" : {
              "type" : "string",
              "description" : "Contains the subject of the task or event.",
              "readOnly" : true
            },
            "IsTask" : {
              "type" : "boolean",
              "description" : "If the value of this field is set to true, then the activity is a task; if the value is set to false, then the activity is an event. Label is Task.",
              "readOnly" : true
            },
            "ActivityDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Indicates one of the following: The due date of a task The date of an event if IsAllDayEvent is set to true This field has a time stamp that is always set to midnight in the Universal Time Coordinated (UTC) time zone. The time stamp doesn’t represent the time of the activity; don’t attempt to alter it to accommodate time zone differences. Label is Date.",
              "readOnly" : true
            },
            "ActivityDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Contains the event’s due date if the IsAllDayEvent flag is set to false. The time portion of this field is always transferred in the Coordinated Universal Time (UTC) time zone. Translate the time portion to or from a local time zone for the user or the application, as appropriate. Label is Due Date Time.The value for this field and StartDateTime must match, or one of them must be null.",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "Indicates the ID of the user or group who owns the activity.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "Indicates the current status of a task, such as in progress or complete. Each predefined status field sets a value for IsClosed. To obtain picklist values, query TaskStatus.",
              "readOnly" : true
            },
            "Priority" : {
              "type" : "string",
              "description" : "Indicates the priority of a task, such as high, normal, or low.",
              "readOnly" : true
            },
            "IsHighPriority" : {
              "type" : "boolean",
              "description" : "Indicates a high-priority task. This field is derived from the Priority field.",
              "readOnly" : true
            },
            "ActivityType" : {
              "type" : "string",
              "description" : "Represents one of the following values: Call, Email, Meeting, or Other. Label is Type. These are default values, and can be changed.",
              "readOnly" : true
            },
            "IsClosed" : {
              "type" : "boolean",
              "description" : "Indicates whether a task is closed; value is always false). This field is set indirectly by setting Status on the task—each picklist value has a corresponding IsClosed value. Label is Closed.",
              "readOnly" : true
            },
            "IsAllDayEvent" : {
              "type" : "boolean",
              "description" : "If the value of this field is set to true, then the activity is an event spanning a full day, and the ActivityDate defines the date of the event. If the value of this field is set to false, then the activity may be an event spanning less than a full day, or it may be a task. Label is All-Day Event.",
              "readOnly" : true
            },
            "IsVisibleInSelfService" : {
              "type" : "boolean",
              "description" : "If the value of this field is set to true, then the activity can be viewed in the self-service portal. Label is Visible in Self-Service.",
              "readOnly" : true
            },
            "DurationInMinutes" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the duration of the event or task.",
              "readOnly" : true
            },
            "Location" : {
              "type" : "string",
              "description" : "If the activity is an event, then this field represents the location of the event. If the activity is a task, then the value is null.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Contains a description of the event or task. Limit is 32 KB.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the activity has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CallDurationInSeconds" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Duration of the call in seconds.",
              "readOnly" : true
            },
            "CallType" : {
              "type" : "string",
              "description" : "The type of call being answered: Inbound, Internal, or Outbound.",
              "readOnly" : true
            },
            "CallDisposition" : {
              "type" : "string",
              "description" : "Represents the result of a given call, for example, “we'll call back,” or “call unsuccessful.” Limit is 255 characters.",
              "readOnly" : true
            },
            "CallObject" : {
              "type" : "string",
              "description" : "Name of a call center. Limit is 255 characters.",
              "readOnly" : true
            },
            "ReminderDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Represents the time at which a reminder is scheduled to fire if IsReminderSet is set to true. If IsReminderSet is set to false, then either the user has deselected the reminder checkbox in the user interface or the reminder has already fired at the time indicated by the value.",
              "readOnly" : true
            },
            "IsReminderSet" : {
              "type" : "boolean",
              "description" : "Indicates whether a reminder is set for an activity (true) or not (false).",
              "readOnly" : true
            },
            "EndDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Indicates the end date and time of the event or task. Available in versions 27.0 and later. This field is optional, depending on the following: If IsAllDayEvent is true, you can supply a value for either DurationInMinutes or EndDateTime. Supplying values in both fields is allowed if the values add up to the same amount of time. If both fields are null, the duration defaults to one day. If IsAllDayEvent is false, a value must be supplied for either DurationInMinutes or EndDateTime. Supplying values in both fields is allowed if the values add up to the same amount of time.",
              "readOnly" : true
            },
            "StartDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ActivitySubtype" : {
              "type" : "string",
              "readOnly" : true
            },
            "AlternateDetailId" : {
              "type" : "string",
              "description" : "The ID of a record the activity is related to which contains more details about the activity. For example, an activity can be related to an EmailMessage record.",
              "readOnly" : true
            },
            "CompletedDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Opportunity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an opportunity, which is a sale or pending deal.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "description" : "ID of the account associated with this opportunity."
            },
            "IsPrivate" : {
              "type" : "boolean"
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. A name for this opportunity. Limit: 120 characters."
            },
            "Description" : {
              "type" : "string",
              "description" : "Text description of the opportunity. Limit: 32,000 characters."
            },
            "StageName" : {
              "type" : "string",
              "description" : "Required. Current stage of this record. The StageName field controls several other fields on an opportunity. Each of the fields can be directly set or implied by changing the StageName field. In addition, the StageName field is a picklist, so it has additional members in the returned describeSObjectResult to indicate how it affects the other fields. To obtain the stage name values in the picklist, query the OpportunityStage object. If the StageName is updated, then the ForecastCategoryName, IsClosed, IsWon, and Probability are automatically updated based on the stage-category mapping."
            },
            "Amount" : {
              "type" : "number",
              "description" : "Estimated total sale amount. For opportunities with products, the amount is the sum of the related products. Any attempt to update this field, if the record has products, will be ignored. The update call will not be rejected, and other fields will be updated as specified, but the Amount will be unchanged."
            },
            "Probability" : {
              "type" : "number",
              "description" : "Percentage of estimated confidence in closing the opportunity. It is implied, but not directly controlled, by the StageName field. You can override this field to a different value than what is implied by the StageName. If you're changing the Probability field through the API using a partner WSDL call, or an Apex before trigger, and the value may have several decimal places, we recommend rounding the value to a whole number. For example, the following Apex in a before trigger uses the round method to change the field value: o.probability = o.probability.round();"
            },
            "ExpectedRevenue" : {
              "type" : "number",
              "description" : "Read-only field that is equal to the product of the opportunity Amount field and the Probability. You can’t directly set this field, but you can indirectly set it by setting the Amount or Probability fields.",
              "readOnly" : true
            },
            "TotalOpportunityQuantity" : {
              "type" : "number",
              "description" : "Number of items included in this opportunity. Used in quantity-based forecasting."
            },
            "CloseDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Required. Date when the opportunity is expected to close."
            },
            "Type" : {
              "type" : "string",
              "description" : "Type of opportunity. For example, Existing Business or New Business. Label is Opportunity Type."
            },
            "NextStep" : {
              "type" : "string",
              "description" : "Description of next task in closing opportunity. Limit: 255 characters."
            },
            "LeadSource" : {
              "type" : "string",
              "description" : "Source of this opportunity, such as Advertisement or Trade Show."
            },
            "IsClosed" : {
              "type" : "boolean",
              "description" : "Directly controlled by StageName. You can query and filter on this field, but you can’t directly set it in a create, upsert, or update request. It can only be set via StageName. Label is Closed.",
              "readOnly" : true
            },
            "IsWon" : {
              "type" : "boolean",
              "description" : "Directly controlled by StageName. You can query and filter on this field, but you can’t directly set the value. It can only be set via StageName. Label is Won.",
              "readOnly" : true
            },
            "ForecastCategory" : {
              "type" : "string",
              "description" : "Restricted picklist field. It is implied, but not directly controlled, by the StageName field. You can override this field to a different value than is implied by the StageName value. The values of this field are fixed enumerated values. The field labels are localized to the language of the user performing the operation, if localized versions of those labels are available for that language in the user interface. In API version 12.0 and later, the value of this field is automatically set based on the value of the ForecastCategoryName and can’t be updated any other way. The field properties Create, Defaulted on create, Nillable, and Update are not available in version 12.0.",
              "readOnly" : true
            },
            "ForecastCategoryName" : {
              "type" : "string",
              "description" : "Available in API version 12.0 and later. The name of the forecast category. It is implied, but not directly controlled, by the StageName field. You can override this field to a different value than is implied by the StageName value."
            },
            "CampaignId" : {
              "type" : "string",
              "description" : "ID of a related Campaign. This field is defined only for those organizations that have the campaign feature Campaigns enabled. The User must have read access rights to the cross-referenced Campaign object in order to create or update that campaign into this field on the opportunity."
            },
            "HasOpportunityLineItem" : {
              "type" : "boolean",
              "description" : "Read-only field that indicates whether the opportunity has associated line items. A value of true means that Opportunity line items have been created for the opportunity. An opportunity can have opportunity line items only if the opportunity has a price book. The opportunity line items must correspond to PricebookEntry objects that are listed in the opportunity Pricebook2. However, you can insert opportunity line items on an opportunity that does not have an associated Pricebook2. For the first opportunity line item that you insert on an opportunity without a Pricebook2, the API automatically sets the Pricebook2Id field, if the opportunity line item corresponds to a PricebookEntry in an active Pricebook2 that has a CurrencyIsoCode field that matches the CurrencyIsoCode field of the opportunity. If the Pricebook2 is not active or the CurrencyIsoCode fields do not match, then the API returns an error. You can’t update the Pricebook2Id or PricebookId fields if opportunity line items exist on the Opportunity. You must delete the line items before attempting to update the PricebookId field.",
              "readOnly" : true
            },
            "Pricebook2Id" : {
              "type" : "string",
              "description" : "ID of a related Pricebook2 object. The Pricebook2Id field indicates which Pricebook2 applies to this opportunity. The Pricebook2Id field is defined only for those organizations that have products enabled as a feature. You can specify values for only one field (Pricebook2Id or PricebookId)—not both fields. For this reason, both fields are declared nillable."
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the User who has been assigned to work this opportunity. If you update this field, the previous owner's access becomes Read Only or the access specified in your organization-wide default for opportunities, whichever is greater. If you have set up opportunity teams in your organization, updating this field has different consequences depending on your version of the API: For API version 12.0 and later, sharing records are kept, as they are for all objects. For API version before 12.0, sharing records are deleted. For API version 16.0 and later, users must have the “Transfer Record” permission in order to update (transfer) account ownership using this field."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastActivityDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Value is one of the following, whichever is the most recent: Due date of the most recent event logged against the record. Due date of the most recently closed task associated with the record.",
              "readOnly" : true
            },
            "PushCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LastStageChangeDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FiscalQuarter" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Represents the fiscal quarter. Valid values are 1, 2, 3, or 4.",
              "readOnly" : true
            },
            "FiscalYear" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Represents the fiscal year, for example, 2006.",
              "readOnly" : true
            },
            "Fiscal" : {
              "type" : "string",
              "description" : "If fiscal years are not enabled, the name of the fiscal quarter or period in which the opportunity CloseDate falls. Value should be in YYY Q format, for example, '2006 1' for first quarter of 2006.",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "description" : "ID of the contact associated with this opportunity, set as the primary contact. Read-only field that is derived from the opportunity contact role, which is created at the same time the opportunity is created. This field can only be populated when it’s created, and can’t be updated. To update the value in this field, change the IsPrimary flag on the OpportunityContactRole associated with this opportunity. Available in API version 46.0 and later."
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            },
            "HasOpenActivity" : {
              "type" : "boolean",
              "description" : "Indicates whether an opportunity has an open event or task (true) or not (false). Available in API version 35.0 and later.",
              "readOnly" : true
            },
            "HasOverdueTask" : {
              "type" : "boolean",
              "description" : "Indicates whether an opportunity has an overdue task (true) or not (false). Available in API version 35.0 and later.",
              "readOnly" : true
            },
            "LastAmountChangedHistoryId" : {
              "type" : "string",
              "description" : "ID of the OpportunityHistory record that contains information about when the opportunity Amount field was last updated in Winter ’21 or later. Information includes the date and time of the change and the user who made the change. Available in API version 50.0 and later.",
              "readOnly" : true
            },
            "LastCloseDateChangedHistoryId" : {
              "type" : "string",
              "description" : "ID of the OpportunityHistory record that contains information about when the opportunity Close Date field was last updated in Winter ’21 or later. Information includes the date and time of the change and the user who made the change. Available in API version 50.0 and later.",
              "readOnly" : true
            },
            "DeliveryInstallationStatus__c" : {
              "type" : "string"
            },
            "TrackingNumber__c" : {
              "type" : "string"
            },
            "OrderNumber__c" : {
              "type" : "string"
            },
            "CurrentGenerators__c" : {
              "type" : "string"
            },
            "MainCompetitors__c" : {
              "type" : "string"
            }
          }
        } ]
      },
      "OpportunityChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsPrivate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "StageName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Amount" : {
              "type" : "number",
              "readOnly" : true
            },
            "Probability" : {
              "type" : "number",
              "readOnly" : true
            },
            "ExpectedRevenue" : {
              "type" : "number",
              "readOnly" : true
            },
            "TotalOpportunityQuantity" : {
              "type" : "number",
              "readOnly" : true
            },
            "CloseDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "NextStep" : {
              "type" : "string",
              "readOnly" : true
            },
            "LeadSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsClosed" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsWon" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ForecastCategory" : {
              "type" : "string",
              "readOnly" : true
            },
            "ForecastCategoryName" : {
              "type" : "string",
              "readOnly" : true
            },
            "CampaignId" : {
              "type" : "string",
              "readOnly" : true
            },
            "HasOpportunityLineItem" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Pricebook2Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastStageChangeDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastAmountChangedHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastCloseDateChangedHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeliveryInstallationStatus__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "TrackingNumber__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "OrderNumber__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "CurrentGenerators__c" : {
              "type" : "string",
              "readOnly" : true
            },
            "MainCompetitors__c" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "OpportunityCompetitor" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a competitor on an Opportunity.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OpportunityId" : {
              "type" : "string",
              "description" : "Required. ID of the associated Opportunity."
            },
            "CompetitorName" : {
              "type" : "string",
              "description" : "Name of the competitor."
            },
            "Strengths" : {
              "type" : "string",
              "description" : "Description of the competitor’s strengths. Limit: 1,000 characters."
            },
            "Weaknesses" : {
              "type" : "string",
              "description" : "Description of the competitor’s weaknesses. Limit: 1,000 characters."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            }
          }
        } ]
      },
      "OpportunityContactRole" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the role that a Contact plays on an Opportunity.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OpportunityId" : {
              "type" : "string",
              "description" : "Required. ID of an associated Opportunity. This field is non-nullable, and it cannot be updated. You must provide a value for this field when creating new records. You can’t change it after it has been created."
            },
            "ContactId" : {
              "type" : "string",
              "description" : "ID of an associated Contact. The API applies user access rights to the associated Opportunity for this object, but not to the associated Contact. The API may return rows from a query on this object that include this field’s values for contacts to which the user does not have sufficient access rights. It may also return values for this field for contacts that have been deleted. In either case, the client must perform a query on the contact table for this field’s value to determine whether the Contact is accessible to the user and has not been deleted."
            },
            "Role" : {
              "type" : "string",
              "description" : "Name of the role played by the associated Contact on the Opportunity, such as Business User or Decision Maker."
            },
            "IsPrimary" : {
              "type" : "boolean",
              "description" : "Indicates whether the associated Contact plays the primary role on the Opportunity (true) or not (false). Each Opportunity has only one primary contact. Label is Primary."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the record has been moved to the Recycle Bin (true) or not (false). The IsDeleted flag is usable only when the parent record is deleted to the recycle bin, and not when the OpportunityContactRole record is deleted directly. Label is Deleted.",
              "readOnly" : true
            }
          }
        } ]
      },
      "OpportunityContactRoleChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OpportunityId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Role" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "OpportunityFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "OpportunityFieldHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the history of changes to the values in the fields of an opportunity.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "OpportunityId" : {
              "type" : "string",
              "description" : "ID of the Opportunity. Label is Opportunity ID.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "description" : "The name of the field that was changed.",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "description" : "The latest value of the field before it was changed.",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "description" : "The new value of the field that was changed.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "OpportunityHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the stage history of an Opportunity.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OpportunityId" : {
              "type" : "string",
              "description" : "ID of the associated Opportunity.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "StageName" : {
              "type" : "string",
              "description" : "Name of the current stage of the opportunity (for example, Prospect or Proposal).",
              "readOnly" : true
            },
            "Amount" : {
              "type" : "number",
              "description" : "Estimated total sale amount.",
              "readOnly" : true
            },
            "ExpectedRevenue" : {
              "type" : "number",
              "description" : "Calculated revenue based on the Amount and Probability fields.",
              "readOnly" : true
            },
            "CloseDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date when the opportunity is expected to close.",
              "readOnly" : true
            },
            "Probability" : {
              "type" : "number",
              "description" : "Percentage of estimated confidence in closing the opportunity.",
              "readOnly" : true
            },
            "ForecastCategory" : {
              "type" : "string",
              "description" : "Category that determines the column in which an opportunity is totaled in a forecast. Label is To ForecastCategory.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "PrevAmount" : {
              "type" : "number",
              "description" : "The value in the opportunity’s Amount field before the update of the opportunity.In OpportunityHistory records created before Winter ’21, the value is null.Available in API version 50.0 and later.",
              "readOnly" : true
            },
            "PrevCloseDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The value in the opportunity’s Close Date field before the update of the opportunity.In OpportunityHistory records created before Winter ’21, the value is null.Available in API version 50.0 and later.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "OpportunityLineItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an opportunity line item, which is a member of the list of Product2 products associated with an Opportunity.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OpportunityId" : {
              "type" : "string",
              "description" : "Required. ID of the associated Opportunity."
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number indicating the sort order selected by the user. Client applications can use this to match the sort order in Salesforce."
            },
            "PricebookEntryId" : {
              "type" : "string",
              "description" : "Required. ID of the associated PricebookEntry. Exists only for those organizations that have Products enabled as a feature. In API versions 1.0 and 2.0, you can specify values for either this field or ProductId, but not both. For this reason, both fields are declared nillable. In API version 3.0 and later, you must specify values for this field instead of ProductId."
            },
            "Product2Id" : {
              "type" : "string",
              "description" : "The ID of the related Product2 record. This is a read-only field available in API version 30.0 and later. Use the PricebookEntryId field instead, specifying the ID of the PricebookEntry record."
            },
            "ProductCode" : {
              "type" : "string",
              "description" : "This read-only field is available in API version 30.0 and later. It references the value in the ProductCode field of the related Product2 record.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The opportunity line item name (known as “Opportunity Product” in the user interface). This read-only field is available in API version 30.0 and later.",
              "readOnly" : true
            },
            "Quantity" : {
              "type" : "number",
              "description" : "Read-only if this record has a quantity schedule, a revenue schedule, or both a quantity and a revenue schedule. When updating these records: If you specify Quantity without specifying the UnitPrice, the UnitPrice value will be adjusted to accommodate the new Quantity value, and the TotalPrice will be held constant. If you specify both Discount and Quantity, you must also specify either TotalPrice or UnitPrice so the system can determine which one to automatically adjust."
            },
            "TotalPrice" : {
              "type" : "number",
              "description" : "This field is available only for backward compatibility. It represents the total price of the OpportunityLineItem. If you do not specify UnitPrice, this field is required. If you specify Discount and Quantity, this field or UnitPrice is required. When updating these records, you can change either this value or the UnitPrice, but not both at the same time. This field is nillable, but you can’t set both TotalPrice and UnitPrice to null in the same update request. To insert the TotalPrice via the API (given only a unit price and the quantity), calculate this field as the unit price multiplied by the quantity. This field is read-only if the opportunity line item has a revenue schedule. If the opportunity line item does not have a schedule or only has quantity schedule, this field can be updated."
            },
            "UnitPrice" : {
              "type" : "number",
              "description" : "The unit price for the opportunity line item. In the Salesforce user interface, this field’s value is calculated by dividing the total price of the opportunity line item by the quantity listed for that line item. Label is Sales Price. This field or TotalPrice is required. You can’t specify both. If you specify Discount and Quantity, this field or TotalPrice is required."
            },
            "ListPrice" : {
              "type" : "number",
              "description" : "Corresponds to the UnitPrice on the PricebookEntry that is associated with this line item, which can be in the standard price book or a custom price book. A client application can use this information to show whether the unit price (or sales price) of the line item differs from the price book entry list price.",
              "readOnly" : true
            },
            "ServiceDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Date when the product revenue will be recognized and the product quantity will be shipped. Opportunity Close Date—ServiceDate is ignored. Product Date—ServiceDate is used if not null. Schedule Date—ServiceDate is used if not null and there are no revenue schedules present for this line item, that is, there are no OpportunityLineItemSchedule records with a field Type value of Revenue that are children of this record."
            },
            "Description" : {
              "type" : "string",
              "description" : "Text description of the opportunity line item. Limit: 80 characters."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, this record might only have been referenced (LastReferencedDate) and not viewed. Available in API version 50.0 and later.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record. Available in API version 50.0 and later.",
              "readOnly" : true
            }
          }
        } ]
      },
      "OpportunityLineItemChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OpportunityId" : {
              "type" : "string",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "PricebookEntryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Product2Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProductCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "Quantity" : {
              "type" : "number",
              "readOnly" : true
            },
            "TotalPrice" : {
              "type" : "number",
              "readOnly" : true
            },
            "UnitPrice" : {
              "type" : "number",
              "readOnly" : true
            },
            "ListPrice" : {
              "type" : "number",
              "readOnly" : true
            },
            "ServiceDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "OpportunityPartner" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "This object represents a partner relationship between an Account and an Opportunity. An OpportunityPartner record is created automatically when a Partner record is created for a partner relationship between an account and an opportunity.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OpportunityId" : {
              "type" : "string",
              "description" : "ID of the Opportunity that is in the partner relationship."
            },
            "AccountToId" : {
              "type" : "string",
              "description" : "ID of the partner Account in the partner relationship."
            },
            "Role" : {
              "type" : "string",
              "description" : "The UserRole that the Account has on the Opportunity. For example, Reseller or Manufacturer."
            },
            "IsPrimary" : {
              "type" : "boolean",
              "description" : "Indicates whether the account is the opportunity’s primary partner (true) or not (false). Label is Primary."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ReversePartnerId" : {
              "type" : "string",
              "description" : "ID of the account in a partner relationship.",
              "readOnly" : true
            }
          }
        } ]
      },
      "OpportunityRelatedDeleteLog" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeleteLog" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OpportunityId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Parent" : {
              "type" : "string",
              "readOnly" : true
            },
            "FieldName" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "SobjectType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Value" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "OpportunityShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a sharing entry on an Opportunity.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OpportunityId" : {
              "type" : "string",
              "description" : "ID of the opportunity associated with this sharing entry. This field can’t be updated."
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "ID of the user or group that has been given access to the opportunity. This field can’t be updated."
            },
            "OpportunityAccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the user or group has to the opportunity. The possible values are: Read Edit All—This value is not valid when creating, updating, or deleting records. This field must be set to an access level that’s higher than the org’s default access level for opportunities."
            },
            "RowCause" : {
              "type" : "string",
              "description" : "Reason that this sharing entry exists. You can write to this field when its value is either omitted or set to Manual (default). You can create a value for this field in API versions 32.0 and later with the correct organization-wide sharing settings."
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            }
          }
        } ]
      },
      "OpportunityStage" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the stage of an Opportunity in the sales pipeline, such as New Lead, Negotiating, Pending, Closed, and so on.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Master label for this opportunity stage value. This display value is the internal label that does not get translated. Limit: 255 characters.",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "description" : "Uniquely identifies a picklist value so it can be retrieved without using an id or master label.",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether this opportunity stage value is active (true) or not (false). Inactive opportunity stage values are not available in the picklist and are retained for historical purposes only.",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number used to sort this value in the opportunity stage picklist. These numbers are not guaranteed to be sequential, as some previous opportunity stage values might have been deleted.",
              "readOnly" : true
            },
            "IsClosed" : {
              "type" : "boolean",
              "description" : "Indicates whether this opportunity stage value represents a closed opportunity (true) or not (false). Multiple opportunity stage values can represent a closed opportunity. Label is Closed.",
              "readOnly" : true
            },
            "IsWon" : {
              "type" : "boolean",
              "description" : "Indicates whether this opportunity stage value represents a won opportunity (true) or not (false). Multiple opportunity stage values can represent a won opportunity. Label is Won.",
              "readOnly" : true
            },
            "ForecastCategory" : {
              "type" : "string",
              "description" : "The default forecast category for this opportunity stage value. The forecast category automatically determines how opportunities are tracked and totaled in a forecast.",
              "readOnly" : true
            },
            "ForecastCategoryName" : {
              "type" : "string",
              "description" : "Available in API version 12.0 and later. The default forecast category value for this opportunity stage value.",
              "readOnly" : true
            },
            "DefaultProbability" : {
              "type" : "number",
              "description" : "The default percentage estimate of the confidence in closing a specific opportunity for this opportunity stage value. Label is Probability (%).",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of this opportunity stage value. Limit: 255 characters.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "OrgDeleteRequest" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a request to delete a developer edition (DE) org.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the user who initiated the org delete request."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The auto-generated ID of this OrgDeleteRequest object.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RequestType" : {
              "type" : "string",
              "description" : "Specifies whether you want to deactivate or reactivate the org. When you deactivate an org, you have 30 days to change your mind and reactivate it. After 30 days, the org is locked, and you must contact Salesforce Customer Support to reactivate it. After 60 days, the org is permanently deleted from Salesforce servers. Valid values: Deactivate Reactivate"
            }
          }
        } ]
      },
      "OrgDeleteRequestShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "OrgEmailAddressSecurity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "OrgWideEmailAddressId" : {
              "type" : "string"
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "OrgLifecycleNotification" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "LifecycleRequestType" : {
              "type" : "string",
              "readOnly" : true
            },
            "LifecycleRequestId" : {
              "type" : "string",
              "readOnly" : true
            },
            "OrgId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "StatusCode" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "OrgMetric" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LatestOrgMetricScanSummaryId" : {
              "type" : "string"
            },
            "FeatureType" : {
              "type" : "string"
            },
            "Category" : {
              "type" : "string"
            }
          }
        } ]
      },
      "OrgMetricScanResult" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OrgMetricScanSummaryId" : {
              "type" : "string"
            },
            "Url" : {
              "type" : "string"
            },
            "Object" : {
              "type" : "string"
            },
            "Date" : {
              "type" : "string",
              "format" : "date-time"
            },
            "Type" : {
              "type" : "string"
            },
            "Profile" : {
              "type" : "integer",
              "format" : "int32"
            },
            "User" : {
              "type" : "string"
            },
            "Quantity" : {
              "type" : "integer",
              "format" : "int32"
            },
            "ItemStatus" : {
              "type" : "string"
            },
            "Flags" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        } ]
      },
      "OrgMetricScanSummary" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OrgMetricId" : {
              "type" : "string"
            },
            "Status" : {
              "type" : "string"
            },
            "ImplementationEffort" : {
              "type" : "string"
            },
            "ErrorMessage" : {
              "type" : "string"
            },
            "ItemCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "FeatureLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "Unit" : {
              "type" : "string"
            },
            "PercentUsage" : {
              "type" : "number"
            },
            "ScanDate" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        } ]
      },
      "OrgWideEmailAddress" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an organization-wide email address for user profiles.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsVerified" : {
              "type" : "boolean"
            },
            "Address" : {
              "type" : "string",
              "description" : "The organization-wide email address."
            },
            "DisplayName" : {
              "type" : "string",
              "description" : "The name that is used to identify the sender of the email."
            },
            "IsAllowAllProfiles" : {
              "type" : "boolean",
              "description" : "If true, any user profile in your organization can use this object. If false, only specified user profiles can use this object when sending email. If you do not have the appropriate user profile, you can’t use this object."
            },
            "Purpose" : {
              "type" : "string"
            }
          }
        } ]
      },
      "Organization" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents key configuration information for an organization.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the organization."
            },
            "Division" : {
              "type" : "string",
              "description" : "The name of the division for this organization. This field is not related to the Division object."
            },
            "Street" : {
              "type" : "string",
              "description" : "Street address for the organization. Limit: 255 characters."
            },
            "City" : {
              "type" : "string",
              "description" : "Name of the city for the organization's address."
            },
            "State" : {
              "type" : "string",
              "description" : "State of the address of the organization. Limit: 80 characters."
            },
            "PostalCode" : {
              "type" : "string",
              "description" : "Postal code for the address of the organization. Limit: 20 characters."
            },
            "Country" : {
              "type" : "string",
              "description" : "Name of the country for the organization's address. Limit: 80 characters.",
              "readOnly" : true
            },
            "Latitude" : {
              "type" : "number",
              "description" : "Used with Longitude to specify the precise geolocation of an address. Acceptable values are numbers between –90 and 90 up to 15 decimal places. For details on geolocation compound fields, see ."
            },
            "Longitude" : {
              "type" : "number",
              "description" : "Used with Latitude to specify the precise geolocation of an address. Acceptable values are numbers between –180 and 180 up to 15 decimal places. For details on geolocation compound fields, see ."
            },
            "GeocodeAccuracy" : {
              "type" : "string"
            },
            "Address" : {
              "type" : "object",
              "readOnly" : true
            },
            "Phone" : {
              "type" : "string",
              "description" : "Phone number for the organization."
            },
            "Fax" : {
              "type" : "string",
              "description" : "Fax number. Limit: 40 characters."
            },
            "PrimaryContact" : {
              "type" : "string",
              "description" : "Name of the primary contact for the organization. Limit: 80 characters."
            },
            "DefaultLocaleSidKey" : {
              "type" : "string",
              "description" : "Default locale SID key."
            },
            "TimeZoneSidKey" : {
              "type" : "string",
              "description" : "Identifies the default time zone of the organization."
            },
            "LanguageLocaleKey" : {
              "type" : "string",
              "description" : "The same as Language, the two-to-five character code which represents the language and locale ISO code. This controls the language for labels displayed in an application."
            },
            "ReceivesInfoEmails" : {
              "type" : "boolean",
              "description" : "Indicates whether the organization receives informational email from Salesforce (true) or not (false)."
            },
            "ReceivesAdminInfoEmails" : {
              "type" : "boolean",
              "description" : "Indicates whether the organization receives administrator emails (true) or not (false)."
            },
            "PreferencesRequireOpportunityProducts" : {
              "type" : "boolean",
              "description" : "Indicates whether opportunities require products (true) or not (false)."
            },
            "PreferencesEmailSenderIdCompliance" : {
              "type" : "boolean"
            },
            "PreferencesTransactionSecurityPolicy" : {
              "type" : "boolean",
              "description" : "Indicates whether the Transaction Security feature has been enabled. This field is available in API version 35.0 or later.As of API version 50.0, this field is removed."
            },
            "PreferencesConsentManagementEnabled" : {
              "type" : "boolean"
            },
            "PreferencesAutoSelectIndividualOnMerge" : {
              "type" : "boolean"
            },
            "PreferencesLightningLoginEnabled" : {
              "type" : "boolean"
            },
            "PreferencesOnlyLLPermUserAllowed" : {
              "type" : "boolean"
            },
            "FiscalYearStartMonth" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number that corresponds to the month that this organization's fiscal year starts.",
              "readOnly" : true
            },
            "UsesStartDateAsFiscalYearName" : {
              "type" : "boolean",
              "description" : "Indicates whether the calendar year when the fiscal year begins is referred to as the year of the company's fiscal year (true) or not (false). For example, if the fiscal year begins in February 2006, a true value means the fiscal year is FY2006, and a false value means the fiscal year is FY2007.",
              "readOnly" : true
            },
            "DefaultAccountAccess" : {
              "type" : "string",
              "description" : "In API version 10.0 and later, represents the default access level for accounts, contracts, and assets. The possible values are: None Read Edit ControlledByLeadOrContact ControlledByCampaign In versions before 10.0, DefaultAccountAndContactAccess represented this value.",
              "readOnly" : true
            },
            "DefaultContactAccess" : {
              "type" : "string",
              "description" : "Default access level for contacts. The possible values are: None Read Edit ControlledByParent In versions before 10.0, DefaultAccountAndContactAccess represented this value.When DefaultContactAccess is set to “Controlled by Parent,” you can’t update the ContactAccessLevel field.",
              "readOnly" : true
            },
            "DefaultOpportunityAccess" : {
              "type" : "string",
              "description" : "Default access level for opportunities. The possible values are: None Read Edit ControlledByLeadOrContact ControlledByCampaign",
              "readOnly" : true
            },
            "DefaultLeadAccess" : {
              "type" : "string",
              "description" : "Default access level for leads. The possible values are: NoneRead Edit ReadEditTransfer",
              "readOnly" : true
            },
            "DefaultCaseAccess" : {
              "type" : "string",
              "description" : "Default access level for cases. The possible values are: None Read Edit ReadEditTransfer",
              "readOnly" : true
            },
            "DefaultCalendarAccess" : {
              "type" : "string",
              "description" : "Default access level for calendars. The possible values are listed, followed by the user interface labels in parentheses: HideDetails (Hide Details) HideDetailsInsert (Hide Details and Add Events) ShowDetails (Show Details) ShowDetailsInsert (Show Details and Add Events) AllowEdits (Full Access)",
              "readOnly" : true
            },
            "DefaultPricebookAccess" : {
              "type" : "string",
              "description" : "Default access level for price books. The possible values are listed, followed by the user interface labels in parentheses: None (No access) Read (Read only) ReadSelect (Use)",
              "readOnly" : true
            },
            "DefaultCampaignAccess" : {
              "type" : "string",
              "description" : "Default access level for campaigns. The possible values are: None Read Edit All",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ComplianceBccEmail" : {
              "type" : "string",
              "description" : "Email address for compliance blind carbon copies. Limit: 80 characters.",
              "readOnly" : true
            },
            "UiSkin" : {
              "type" : "string",
              "description" : "The user interface theme selected for the organization."
            },
            "SignupCountryIsoCode" : {
              "type" : "string",
              "description" : "The ISO country code specified by the user for a sign-up request.",
              "readOnly" : true
            },
            "TrialExpirationDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date that this organization's trial license expires.",
              "readOnly" : true
            },
            "NumKnowledgeService" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "OrganizationType" : {
              "type" : "string",
              "description" : "Edition of the organization, for example Enterprise Edition or Unlimited Edition.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "InstanceName" : {
              "type" : "string",
              "description" : "Read-only. The name of the instance. Available in API version 31.0 or later.",
              "readOnly" : true
            },
            "IsSandbox" : {
              "type" : "boolean",
              "description" : "Read-only. Indicates whether the current organization is a sandbox (true) or production (false) instance. Available in API version 31.0 or later.",
              "readOnly" : true
            },
            "WebToCaseDefaultOrigin" : {
              "type" : "string",
              "description" : "The default value for the Case Origin field on cases submitted via Web-to-Case. Limit: 40 characters."
            },
            "MonthlyPageViewsUsed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of page views used in the current calendar month for the sites in your organization. To access this field, Salesforce Sites must be enabled for your organization. This field is generally available in API versions 18.0 and later.",
              "readOnly" : true
            },
            "MonthlyPageViewsEntitlement" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of page views allowed for the current calendar month for the sites in your organization. To access this field, Salesforce Sites must be enabled for your organization. This field is generally available in API versions 18.0 and later.",
              "readOnly" : true
            },
            "IsReadOnly" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "OutgoingEmail" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "For internal use only.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string"
            },
            "ValidatedFromAddress" : {
              "type" : "string"
            },
            "ToAddress" : {
              "type" : "string"
            },
            "CcAddress" : {
              "type" : "string"
            },
            "BccAddress" : {
              "type" : "string"
            },
            "Subject" : {
              "type" : "string"
            },
            "TextBody" : {
              "type" : "string"
            },
            "HtmlBody" : {
              "type" : "string"
            },
            "RelatedToId" : {
              "type" : "string"
            },
            "WhoId" : {
              "type" : "string"
            },
            "EmailTemplateId" : {
              "type" : "string"
            },
            "InReplyTo" : {
              "type" : "string"
            },
            "References" : {
              "type" : "string"
            },
            "MessageId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "OutgoingEmailRelation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "For internal use only.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string"
            },
            "OutgoingEmailId" : {
              "type" : "string"
            },
            "RelationId" : {
              "type" : "string"
            },
            "RelationAddress" : {
              "type" : "string"
            }
          }
        } ]
      },
      "OwnedContentDocument" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a file owned by a user.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the owner of the document.",
              "readOnly" : true
            },
            "ContentDocumentId" : {
              "type" : "string",
              "description" : "ID of the document.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "Title of the document.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "FileType" : {
              "type" : "string",
              "description" : "Type of document, determined by the file extension.",
              "readOnly" : true
            },
            "ContentSize" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Size of the document in bytes.",
              "readOnly" : true
            },
            "FileExtension" : {
              "type" : "string",
              "description" : "File extension of the document. This field is available in API version 31.0 and later.",
              "readOnly" : true
            },
            "ContentUrl" : {
              "type" : "string",
              "description" : "URL for links and Google Docs. This field is set only for links and Google Docs, and is one of the fields that determine the FileType. This field is available in API version 31.0 and later.",
              "readOnly" : true
            },
            "ExternalDataSourceName" : {
              "type" : "string",
              "description" : "Name of the external data source in which the document is stored. This field is set only for external documents that are connected to Salesforce. This field is available in API version 32.0 and later.",
              "readOnly" : true
            },
            "ExternalDataSourceType" : {
              "type" : "string",
              "description" : "Type of external data source in which the document is stored. This field is set only for external documents that are connected to Salesforce. This field is available in API version 35.0 and later.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "OwnerChangeOptionInfo" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents default and optional actions that can be performed when a record’s owner is changed.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "EntityDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsEditable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DefaultValue" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PackageLicense" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a license for an installed managed package.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the license. Possible values are: Active, Expired, Free, and Trial.",
              "readOnly" : true
            },
            "IsProvisioned" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "AllowedLicenses" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of users allowed to use the package.",
              "readOnly" : true
            },
            "UsedLicenses" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of users who have a license to the package.",
              "readOnly" : true
            },
            "IsAvailableForIntegrations" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ExpirationDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the package license expires.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The namespace prefix associated with the package.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Partner" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a partner relationship between two Account records or between an Opportunity record and an Account record.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OpportunityId" : {
              "type" : "string",
              "description" : "Required if AccountFromId is null. ID of the opportunity in a partner relationship between an account and an opportunity. Specifying this field when creating a record creates an OpportunityPartner record. If you specify the AccountFromId field, you can’t also specify this field."
            },
            "AccountFromId" : {
              "type" : "string",
              "description" : "Required if OpportunityId is null. ID of the main account in a partner relationship between two accounts. Specifying this field when creating a Partner record creates two AccountPartner records, one for each direction of the relationship. If you specify the OpportunityId field, you can’t specify this field as well."
            },
            "AccountToId" : {
              "type" : "string",
              "description" : "Required. ID of the Partner Account related to either an opportunity or an account. You must specify this field when creating an Opportunity Partner or an Account Partner record."
            },
            "Role" : {
              "type" : "string",
              "description" : "UserRole that the account has toward the related opportunity or account, such as consultant or distributor."
            },
            "IsPrimary" : {
              "type" : "boolean",
              "description" : "Valid for Opportunity Partners only. Indicates that the account is the primary partner for the opportunity. Only one account can be marked as primary for an opportunity. If you set this field to 1 (true) upon insert of a new opportunity partner, this field is automatically set to 0 (false) for any other primary partners for that opportunity. Label is Primary."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ReversePartnerId" : {
              "type" : "string",
              "description" : "ID of the account in a partner relationship.",
              "readOnly" : true
            }
          }
        } ]
      },
      "PartnerRole" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a role for an account Partner, such as consultant, supplier, and so on.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Master label for this partner role value. This display value is the internal label that does not get translated. Limit: 255 characters.",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "description" : "Uniquely identifies a picklist value so it can be retrieved without using an id or master label.",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number used to sort this value in the partner role picklist. These numbers are not guaranteed to be sequential, as some previous partner role values might have been deleted.",
              "readOnly" : true
            },
            "ReverseRole" : {
              "type" : "string",
              "description" : "Name of the reverse role that corresponds to this partner role. For example, if the role is “subcontractor,” then the reverse role might be “general contractor.” In the user interface, assigning a partner role to an account creates a reverse partner relationship so that both accounts list the other as a partner.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PartyConsent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents consent preferences for an individual.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the account owner associated with this customer."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the party consent record."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "PartyId" : {
              "type" : "string",
              "description" : "Required. Represents the record based on the Individual object you want to associate consent with."
            },
            "Action" : {
              "type" : "string",
              "description" : "The action that the Individual is consenting to."
            },
            "PrivacyConsentStatus" : {
              "type" : "string",
              "description" : "Required. Identifies whether the individual associated with this record agrees to this form of contact."
            },
            "CaptureDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Required. Date when consent was captured."
            },
            "CaptureContactPointType" : {
              "type" : "string",
              "description" : "Required. Indicates how you captured consent."
            },
            "CaptureSource" : {
              "type" : "string",
              "description" : "Required. Indicates how you captured consent. For example, a website or online form."
            },
            "PartyRoleId" : {
              "type" : "string"
            },
            "BusinessBrandId" : {
              "type" : "string"
            },
            "DataUsePurposeId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "PartyConsentChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "PartyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Action" : {
              "type" : "string",
              "readOnly" : true
            },
            "PrivacyConsentStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "CaptureDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CaptureContactPointType" : {
              "type" : "string",
              "readOnly" : true
            },
            "CaptureSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "PartyRoleId" : {
              "type" : "string",
              "readOnly" : true
            },
            "BusinessBrandId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataUsePurposeId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PartyConsentFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PartyConsentHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PartyConsentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PartyConsentShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "Period" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a fiscal period defined in FiscalYearSettings.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "FiscalYearSettingsId" : {
              "type" : "string",
              "description" : "The parent record for this period.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "Indicates whether the period is of type Month, Quarter, Week, or Year. Label is the field value.",
              "readOnly" : true
            },
            "StartDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The first date of the fiscal period.",
              "readOnly" : true
            },
            "EndDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The last date of the fiscal period.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsForecastPeriod" : {
              "type" : "boolean",
              "description" : "Indicates whether the period is associated with Collaborative Forecasts (true) or not (false).",
              "readOnly" : true
            },
            "QuarterLabel" : {
              "type" : "string",
              "description" : "If the quarters in your fiscal year use custom names, then this field contains the appropriate name for rows of type Quarter.",
              "readOnly" : true
            },
            "PeriodLabel" : {
              "type" : "string",
              "description" : "If the months in your fiscal year use custom names, then this field contains the appropriate name for rows of type Month.",
              "readOnly" : true
            },
            "Number" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "If the labeling scheme of your fiscal year's quarters or months is numbered, this field indicates the relative number of the row.",
              "readOnly" : true
            },
            "FullyQualifiedLabel" : {
              "type" : "string",
              "description" : "Represents the period’s complete name in the UI. For example, “September FY 2016”.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PermissionSet" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a set of permissions that’s used to grant more access to one or more users without changing their profile or reassigning profiles.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "Name" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your organization. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. Corresponds to API Name in the user interface. Limit: 80 characters."
            },
            "Label" : {
              "type" : "string",
              "description" : "The permission set label, which corresponds to Label in the user interface. Limit: 80 characters."
            },
            "LicenseId" : {
              "type" : "string",
              "description" : "The ID of either the related PermissionSetLicense or UserLicense associated with this permission set. Available in API version 38.0 and later. Use this field instead of UserLicenseId, which is deprecated and only available up to API Version 37.0."
            },
            "ProfileId" : {
              "type" : "string",
              "description" : "If the permission set is owned by a profile, this field returns the ID of the Profile. If the permission set isn’t owned by a profile, this field returns a null value. Available in API version 25.0 and later.",
              "readOnly" : true
            },
            "IsOwnedByProfile" : {
              "type" : "boolean",
              "description" : "If true, the permission set is owned by a profile. Available in API version 25.0 and later.",
              "readOnly" : true
            },
            "IsCustom" : {
              "type" : "boolean",
              "description" : "If true, the permission set is custom (created by an admin); if false, the permission set is standard and related to a specific permission set license.",
              "readOnly" : true
            },
            "PermissionsEmailSingle" : {
              "type" : "boolean"
            },
            "PermissionsEmailMass" : {
              "type" : "boolean"
            },
            "PermissionsEditTask" : {
              "type" : "boolean"
            },
            "PermissionsEditEvent" : {
              "type" : "boolean"
            },
            "PermissionsExportReport" : {
              "type" : "boolean"
            },
            "PermissionsImportPersonal" : {
              "type" : "boolean"
            },
            "PermissionsDataExport" : {
              "type" : "boolean"
            },
            "PermissionsManageUsers" : {
              "type" : "boolean"
            },
            "PermissionsEditPublicFilters" : {
              "type" : "boolean"
            },
            "PermissionsEditPublicTemplates" : {
              "type" : "boolean"
            },
            "PermissionsModifyAllData" : {
              "type" : "boolean"
            },
            "PermissionsEditBillingInfo" : {
              "type" : "boolean"
            },
            "PermissionsManageCases" : {
              "type" : "boolean"
            },
            "PermissionsMassInlineEdit" : {
              "type" : "boolean"
            },
            "PermissionsEditKnowledge" : {
              "type" : "boolean"
            },
            "PermissionsManageKnowledge" : {
              "type" : "boolean"
            },
            "PermissionsManageSolutions" : {
              "type" : "boolean"
            },
            "PermissionsCustomizeApplication" : {
              "type" : "boolean"
            },
            "PermissionsEditReadonlyFields" : {
              "type" : "boolean"
            },
            "PermissionsRunReports" : {
              "type" : "boolean"
            },
            "PermissionsViewSetup" : {
              "type" : "boolean"
            },
            "PermissionsTransferAnyEntity" : {
              "type" : "boolean"
            },
            "PermissionsNewReportBuilder" : {
              "type" : "boolean"
            },
            "PermissionsActivateContract" : {
              "type" : "boolean"
            },
            "PermissionsImportLeads" : {
              "type" : "boolean"
            },
            "PermissionsManageLeads" : {
              "type" : "boolean"
            },
            "PermissionsTransferAnyLead" : {
              "type" : "boolean"
            },
            "PermissionsViewAllData" : {
              "type" : "boolean"
            },
            "PermissionsEditPublicDocuments" : {
              "type" : "boolean"
            },
            "PermissionsViewEncryptedData" : {
              "type" : "boolean"
            },
            "PermissionsEditBrandTemplates" : {
              "type" : "boolean"
            },
            "PermissionsEditHtmlTemplates" : {
              "type" : "boolean"
            },
            "PermissionsChatterInternalUser" : {
              "type" : "boolean"
            },
            "PermissionsDeleteActivatedContract" : {
              "type" : "boolean"
            },
            "PermissionsChatterInviteExternalUsers" : {
              "type" : "boolean"
            },
            "PermissionsSendSitRequests" : {
              "type" : "boolean"
            },
            "PermissionsManageRemoteAccess" : {
              "type" : "boolean"
            },
            "PermissionsCanUseNewDashboardBuilder" : {
              "type" : "boolean"
            },
            "PermissionsManageCategories" : {
              "type" : "boolean"
            },
            "PermissionsConvertLeads" : {
              "type" : "boolean"
            },
            "PermissionsPasswordNeverExpires" : {
              "type" : "boolean"
            },
            "PermissionsUseTeamReassignWizards" : {
              "type" : "boolean"
            },
            "PermissionsInstallPackaging" : {
              "type" : "boolean"
            },
            "PermissionsPublishPackaging" : {
              "type" : "boolean"
            },
            "PermissionsChatterOwnGroups" : {
              "type" : "boolean"
            },
            "PermissionsEditOppLineItemUnitPrice" : {
              "type" : "boolean"
            },
            "PermissionsCreatePackaging" : {
              "type" : "boolean"
            },
            "PermissionsBulkApiHardDelete" : {
              "type" : "boolean"
            },
            "PermissionsSolutionImport" : {
              "type" : "boolean"
            },
            "PermissionsManageCallCenters" : {
              "type" : "boolean"
            },
            "PermissionsManageSynonyms" : {
              "type" : "boolean"
            },
            "PermissionsViewContent" : {
              "type" : "boolean"
            },
            "PermissionsManageEmailClientConfig" : {
              "type" : "boolean"
            },
            "PermissionsEnableNotifications" : {
              "type" : "boolean"
            },
            "PermissionsManageDataIntegrations" : {
              "type" : "boolean"
            },
            "PermissionsDistributeFromPersWksp" : {
              "type" : "boolean"
            },
            "PermissionsViewDataCategories" : {
              "type" : "boolean"
            },
            "PermissionsManageDataCategories" : {
              "type" : "boolean"
            },
            "PermissionsAuthorApex" : {
              "type" : "boolean"
            },
            "PermissionsManageMobile" : {
              "type" : "boolean"
            },
            "PermissionsApiEnabled" : {
              "type" : "boolean"
            },
            "PermissionsManageCustomReportTypes" : {
              "type" : "boolean"
            },
            "PermissionsEditCaseComments" : {
              "type" : "boolean"
            },
            "PermissionsTransferAnyCase" : {
              "type" : "boolean"
            },
            "PermissionsContentAdministrator" : {
              "type" : "boolean"
            },
            "PermissionsCreateWorkspaces" : {
              "type" : "boolean"
            },
            "PermissionsManageContentPermissions" : {
              "type" : "boolean"
            },
            "PermissionsManageContentProperties" : {
              "type" : "boolean"
            },
            "PermissionsManageContentTypes" : {
              "type" : "boolean"
            },
            "PermissionsManageExchangeConfig" : {
              "type" : "boolean"
            },
            "PermissionsManageAnalyticSnapshots" : {
              "type" : "boolean"
            },
            "PermissionsScheduleReports" : {
              "type" : "boolean"
            },
            "PermissionsManageBusinessHourHolidays" : {
              "type" : "boolean"
            },
            "PermissionsManageDynamicDashboards" : {
              "type" : "boolean"
            },
            "PermissionsCustomSidebarOnAllPages" : {
              "type" : "boolean"
            },
            "PermissionsManageInteraction" : {
              "type" : "boolean"
            },
            "PermissionsViewMyTeamsDashboards" : {
              "type" : "boolean"
            },
            "PermissionsModerateChatter" : {
              "type" : "boolean"
            },
            "PermissionsResetPasswords" : {
              "type" : "boolean"
            },
            "PermissionsFlowUFLRequired" : {
              "type" : "boolean"
            },
            "PermissionsCanInsertFeedSystemFields" : {
              "type" : "boolean"
            },
            "PermissionsActivitiesAccess" : {
              "type" : "boolean"
            },
            "PermissionsManageKnowledgeImportExport" : {
              "type" : "boolean"
            },
            "PermissionsEmailTemplateManagement" : {
              "type" : "boolean"
            },
            "PermissionsEmailAdministration" : {
              "type" : "boolean"
            },
            "PermissionsManageChatterMessages" : {
              "type" : "boolean"
            },
            "PermissionsChatterFileLink" : {
              "type" : "boolean"
            },
            "PermissionsForceTwoFactor" : {
              "type" : "boolean"
            },
            "PermissionsViewEventLogFiles" : {
              "type" : "boolean"
            },
            "PermissionsManageNetworks" : {
              "type" : "boolean"
            },
            "PermissionsManageAuthProviders" : {
              "type" : "boolean"
            },
            "PermissionsRunFlow" : {
              "type" : "boolean"
            },
            "PermissionsCreateCustomizeDashboards" : {
              "type" : "boolean"
            },
            "PermissionsCreateDashboardFolders" : {
              "type" : "boolean"
            },
            "PermissionsViewPublicDashboards" : {
              "type" : "boolean"
            },
            "PermissionsManageDashbdsInPubFolders" : {
              "type" : "boolean"
            },
            "PermissionsCreateCustomizeReports" : {
              "type" : "boolean"
            },
            "PermissionsCreateReportFolders" : {
              "type" : "boolean"
            },
            "PermissionsViewPublicReports" : {
              "type" : "boolean"
            },
            "PermissionsManageReportsInPubFolders" : {
              "type" : "boolean"
            },
            "PermissionsEditMyDashboards" : {
              "type" : "boolean"
            },
            "PermissionsEditMyReports" : {
              "type" : "boolean"
            },
            "PermissionsViewAllUsers" : {
              "type" : "boolean"
            },
            "PermissionsAllowUniversalSearch" : {
              "type" : "boolean"
            },
            "PermissionsConnectOrgToEnvironmentHub" : {
              "type" : "boolean"
            },
            "PermissionsCreateCustomizeFilters" : {
              "type" : "boolean"
            },
            "PermissionsContentHubUser" : {
              "type" : "boolean"
            },
            "PermissionsGovernNetworks" : {
              "type" : "boolean"
            },
            "PermissionsSalesConsole" : {
              "type" : "boolean"
            },
            "PermissionsTwoFactorApi" : {
              "type" : "boolean"
            },
            "PermissionsDeleteTopics" : {
              "type" : "boolean"
            },
            "PermissionsEditTopics" : {
              "type" : "boolean"
            },
            "PermissionsCreateTopics" : {
              "type" : "boolean"
            },
            "PermissionsAssignTopics" : {
              "type" : "boolean"
            },
            "PermissionsIdentityEnabled" : {
              "type" : "boolean"
            },
            "PermissionsIdentityConnect" : {
              "type" : "boolean"
            },
            "PermissionsAllowViewKnowledge" : {
              "type" : "boolean"
            },
            "PermissionsContentWorkspaces" : {
              "type" : "boolean"
            },
            "PermissionsManageSearchPromotionRules" : {
              "type" : "boolean"
            },
            "PermissionsCustomMobileAppsAccess" : {
              "type" : "boolean"
            },
            "PermissionsViewHelpLink" : {
              "type" : "boolean"
            },
            "PermissionsManageProfilesPermissionsets" : {
              "type" : "boolean"
            },
            "PermissionsAssignPermissionSets" : {
              "type" : "boolean"
            },
            "PermissionsManageRoles" : {
              "type" : "boolean"
            },
            "PermissionsManageIpAddresses" : {
              "type" : "boolean"
            },
            "PermissionsManageSharing" : {
              "type" : "boolean"
            },
            "PermissionsManageInternalUsers" : {
              "type" : "boolean"
            },
            "PermissionsManagePasswordPolicies" : {
              "type" : "boolean"
            },
            "PermissionsManageLoginAccessPolicies" : {
              "type" : "boolean"
            },
            "PermissionsViewPlatformEvents" : {
              "type" : "boolean"
            },
            "PermissionsManageCustomPermissions" : {
              "type" : "boolean"
            },
            "PermissionsCanVerifyComment" : {
              "type" : "boolean"
            },
            "PermissionsManageUnlistedGroups" : {
              "type" : "boolean"
            },
            "PermissionsFreezeUsers" : {
              "type" : "boolean"
            },
            "PermissionsManageTwoFactor" : {
              "type" : "boolean"
            },
            "PermissionsLightningExperienceUser" : {
              "type" : "boolean"
            },
            "PermissionsViewDataLeakageEvents" : {
              "type" : "boolean"
            },
            "PermissionsConfigCustomRecs" : {
              "type" : "boolean"
            },
            "PermissionsSubmitMacrosAllowed" : {
              "type" : "boolean"
            },
            "PermissionsBulkMacrosAllowed" : {
              "type" : "boolean"
            },
            "PermissionsShareInternalArticles" : {
              "type" : "boolean"
            },
            "PermissionsManageSessionPermissionSets" : {
              "type" : "boolean"
            },
            "PermissionsSendAnnouncementEmails" : {
              "type" : "boolean"
            },
            "PermissionsChatterEditOwnPost" : {
              "type" : "boolean"
            },
            "PermissionsChatterEditOwnRecordPost" : {
              "type" : "boolean"
            },
            "PermissionsImportCustomObjects" : {
              "type" : "boolean"
            },
            "PermissionsDelegatedTwoFactor" : {
              "type" : "boolean"
            },
            "PermissionsChatterComposeUiCodesnippet" : {
              "type" : "boolean"
            },
            "PermissionsSelectFilesFromSalesforce" : {
              "type" : "boolean"
            },
            "PermissionsModerateNetworkUsers" : {
              "type" : "boolean"
            },
            "PermissionsMergeTopics" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeToLightningReports" : {
              "type" : "boolean"
            },
            "PermissionsManagePvtRptsAndDashbds" : {
              "type" : "boolean"
            },
            "PermissionsAllowLightningLogin" : {
              "type" : "boolean"
            },
            "PermissionsCampaignInfluence2" : {
              "type" : "boolean"
            },
            "PermissionsViewDataAssessment" : {
              "type" : "boolean"
            },
            "PermissionsRemoveDirectMessageMembers" : {
              "type" : "boolean"
            },
            "PermissionsCanApproveFeedPost" : {
              "type" : "boolean"
            },
            "PermissionsAddDirectMessageMembers" : {
              "type" : "boolean"
            },
            "PermissionsAllowViewEditConvertedLeads" : {
              "type" : "boolean"
            },
            "PermissionsShowCompanyNameAsUserBadge" : {
              "type" : "boolean"
            },
            "PermissionsAccessCMC" : {
              "type" : "boolean"
            },
            "PermissionsViewHealthCheck" : {
              "type" : "boolean"
            },
            "PermissionsManageHealthCheck" : {
              "type" : "boolean"
            },
            "PermissionsPackaging2" : {
              "type" : "boolean"
            },
            "PermissionsManageCertificates" : {
              "type" : "boolean"
            },
            "PermissionsCreateReportInLightning" : {
              "type" : "boolean"
            },
            "PermissionsPreventClassicExperience" : {
              "type" : "boolean"
            },
            "PermissionsHideReadByList" : {
              "type" : "boolean"
            },
            "PermissionsListEmailSend" : {
              "type" : "boolean"
            },
            "PermissionsFeedPinning" : {
              "type" : "boolean"
            },
            "PermissionsChangeDashboardColors" : {
              "type" : "boolean"
            },
            "PermissionsIotUser" : {
              "type" : "boolean"
            },
            "PermissionsManageRecommendationStrategies" : {
              "type" : "boolean"
            },
            "PermissionsManagePropositions" : {
              "type" : "boolean"
            },
            "PermissionsCloseConversations" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeReportRolesGrps" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeDashboardRolesGrps" : {
              "type" : "boolean"
            },
            "PermissionsUseWebLink" : {
              "type" : "boolean"
            },
            "PermissionsHasUnlimitedNBAExecutions" : {
              "type" : "boolean"
            },
            "PermissionsViewAllActivities" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeReportToOtherUsers" : {
              "type" : "boolean"
            },
            "PermissionsLightningConsoleAllowedForUser" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeReportsRunAsUser" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeToLightningDashboards" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeDashboardToOtherUsers" : {
              "type" : "boolean"
            },
            "PermissionsCreateLtngTempInPub" : {
              "type" : "boolean"
            },
            "PermissionsTransactionalEmailSend" : {
              "type" : "boolean"
            },
            "PermissionsViewPrivateStaticResources" : {
              "type" : "boolean"
            },
            "PermissionsCreateLtngTempFolder" : {
              "type" : "boolean"
            },
            "PermissionsApexRestServices" : {
              "type" : "boolean"
            },
            "PermissionsEnableCommunityAppLauncher" : {
              "type" : "boolean"
            },
            "PermissionsGiveRecognitionBadge" : {
              "type" : "boolean"
            },
            "PermissionsUseMySearch" : {
              "type" : "boolean"
            },
            "PermissionsLtngPromoReserved01UserPerm" : {
              "type" : "boolean"
            },
            "PermissionsManageSubscriptions" : {
              "type" : "boolean"
            },
            "PermissionsManageSurveys" : {
              "type" : "boolean"
            },
            "PermissionsUseAssistantDialog" : {
              "type" : "boolean"
            },
            "PermissionsViewRoles" : {
              "type" : "boolean"
            },
            "PermissionsCustomTabBarOnMobile" : {
              "type" : "boolean"
            },
            "PermissionsLMOutboundMessagingUserPerm" : {
              "type" : "boolean"
            },
            "PermissionsModifyDataClassification" : {
              "type" : "boolean"
            },
            "PermissionsPrivacyDataAccess" : {
              "type" : "boolean"
            },
            "PermissionsQueryAllFiles" : {
              "type" : "boolean"
            },
            "PermissionsModifyMetadata" : {
              "type" : "boolean"
            },
            "PermissionsManageCMS" : {
              "type" : "boolean"
            },
            "PermissionsSandboxTestingInCommunityApp" : {
              "type" : "boolean"
            },
            "PermissionsCanEditPrompts" : {
              "type" : "boolean"
            },
            "PermissionsViewUserPII" : {
              "type" : "boolean"
            },
            "PermissionsManageHubConnections" : {
              "type" : "boolean"
            },
            "PermissionsB2BMarketingAnalyticsUser" : {
              "type" : "boolean"
            },
            "PermissionsTraceXdsQueries" : {
              "type" : "boolean"
            },
            "PermissionsViewAllCustomSettings" : {
              "type" : "boolean"
            },
            "PermissionsViewAllForeignKeyNames" : {
              "type" : "boolean"
            },
            "PermissionsHeadlessCMSAccess" : {
              "type" : "boolean"
            },
            "PermissionsLMEndMessagingSessionUserPerm" : {
              "type" : "boolean"
            },
            "PermissionsConsentApiUpdate" : {
              "type" : "boolean"
            },
            "PermissionsAccountSwitcherUser" : {
              "type" : "boolean"
            },
            "PermissionsViewAnomalyEvents" : {
              "type" : "boolean"
            },
            "PermissionsManageC360AConnections" : {
              "type" : "boolean"
            },
            "PermissionsManageReleaseUpdates" : {
              "type" : "boolean"
            },
            "PermissionsSkipIdentityConfirmation" : {
              "type" : "boolean"
            },
            "PermissionsLearningManager" : {
              "type" : "boolean"
            },
            "PermissionsSendCustomNotifications" : {
              "type" : "boolean"
            },
            "PermissionsPackaging2Delete" : {
              "type" : "boolean"
            },
            "PermissionsViewRestrictionAndScopingRules" : {
              "type" : "boolean"
            },
            "PermissionsBotManageBots" : {
              "type" : "boolean"
            },
            "PermissionsBotManageBotsTrainingData" : {
              "type" : "boolean"
            },
            "PermissionsManageLearningReporting" : {
              "type" : "boolean"
            },
            "PermissionsQuipMetricsAccess" : {
              "type" : "boolean"
            },
            "PermissionsQuipUserEngagementMetrics" : {
              "type" : "boolean"
            },
            "PermissionsTransactionSecurityExempt" : {
              "type" : "boolean"
            },
            "PermissionsManageExternalConnections" : {
              "type" : "boolean"
            },
            "PermissionsNativeWebviewScrolling" : {
              "type" : "boolean"
            },
            "PermissionsViewDeveloperName" : {
              "type" : "boolean"
            },
            "PermissionsBypassMFAForUiLogins" : {
              "type" : "boolean"
            },
            "PermissionsClientSecretRotation" : {
              "type" : "boolean"
            },
            "PermissionsAccessToServiceProcess" : {
              "type" : "boolean"
            },
            "PermissionsManageOrchInstsAndWorkItems" : {
              "type" : "boolean"
            },
            "PermissionsCMSECEAuthoringAccess" : {
              "type" : "boolean"
            },
            "PermissionsManageDataspaceScope" : {
              "type" : "boolean"
            },
            "PermissionsConfigureDataspaceScope" : {
              "type" : "boolean"
            },
            "PermissionsViewClientSecret" : {
              "type" : "boolean"
            },
            "PermissionsCdcReportingCreateReports" : {
              "type" : "boolean"
            },
            "PermissionsCdcReportingViewReports" : {
              "type" : "boolean"
            },
            "PermissionsCdcReportingManageFolders" : {
              "type" : "boolean"
            },
            "PermissionsExternalClientAppDeveloper" : {
              "type" : "boolean"
            },
            "PermissionsExternalClientAppAdmin" : {
              "type" : "boolean"
            },
            "PermissionsExternalClientAppViewer" : {
              "type" : "boolean"
            },
            "PermissionsDeleteCrMemoAndInvoice" : {
              "type" : "boolean"
            },
            "PermissionsManageNamedCredentials" : {
              "type" : "boolean"
            },
            "PermissionsCanUpdateEmailMessage" : {
              "type" : "boolean"
            },
            "PermissionsDownloadPackageVersionZips" : {
              "type" : "boolean"
            },
            "PermissionsViewContentTaxonomy" : {
              "type" : "boolean"
            },
            "PermissionsManageContentTaxonomy" : {
              "type" : "boolean"
            },
            "PermissionsReassignOrchestrationWorkItems" : {
              "type" : "boolean"
            },
            "PermissionsManageOrchestrationRuns" : {
              "type" : "boolean"
            },
            "PermissionsDigitalLendingUser" : {
              "type" : "boolean"
            },
            "PermissionsManageCertificatesExpiration" : {
              "type" : "boolean"
            },
            "PermissionsEnableIPFSUpload" : {
              "type" : "boolean"
            },
            "PermissionsEnableBCTransactionPolling" : {
              "type" : "boolean"
            },
            "PermissionsLobbyManagementUserAccess" : {
              "type" : "boolean"
            },
            "PermissionsMonitorLoginHistory" : {
              "type" : "boolean"
            },
            "PermissionsEnhancedSalesMobileExp" : {
              "type" : "boolean"
            },
            "PermissionsSimpleCsvDataImportUser" : {
              "type" : "boolean"
            },
            "PermissionsAdvancedCsvDataImportUser" : {
              "type" : "boolean"
            },
            "PermissionsAccessToComplaintMgmt" : {
              "type" : "boolean"
            },
            "PermissionsAccessToDisputeManagement" : {
              "type" : "boolean"
            },
            "PermissionsPersonalizedFinanceUserAccess" : {
              "type" : "boolean"
            },
            "PermissionsCustomAppsOnFSMobile" : {
              "type" : "boolean"
            },
            "PermissionsStageManagementDesignUser" : {
              "type" : "boolean"
            },
            "PermissionsSegmentIntelligenceUser" : {
              "type" : "boolean"
            },
            "PermissionsFSCArcGraphCommunityUser" : {
              "type" : "boolean"
            },
            "PermissionsManageCdpMlModels" : {
              "type" : "boolean"
            },
            "PermissionsDigitalLendingAdminUser" : {
              "type" : "boolean"
            },
            "PermissionsActivateSystemModeFlows" : {
              "type" : "boolean"
            },
            "PermissionsPersonalizationPlatform" : {
              "type" : "boolean"
            },
            "PermissionsManageIntegrationConnections" : {
              "type" : "boolean"
            },
            "PermissionsManageFilesAndAttachments" : {
              "type" : "boolean"
            },
            "PermissionsManageCustomDomains" : {
              "type" : "boolean"
            },
            "PermissionsEngagementConfigUser" : {
              "type" : "boolean"
            },
            "PermissionsPersonalizationIntelUser" : {
              "type" : "boolean"
            },
            "PermissionsAttributionModelUser" : {
              "type" : "boolean"
            },
            "PermissionsAccessDisputePrompts" : {
              "type" : "boolean"
            },
            "PermissionsQueryNonVetoedFiles" : {
              "type" : "boolean"
            },
            "PermissionsMetadataStudioUser" : {
              "type" : "boolean"
            },
            "PermissionsDigitalLendingWorkbench" : {
              "type" : "boolean"
            },
            "PermissionsDigitalLendingEditReadOnly" : {
              "type" : "boolean"
            },
            "PermissionsPrmExtIntPrtnrAdminUser" : {
              "type" : "boolean"
            },
            "PermissionsManagePersonalOrg" : {
              "type" : "boolean"
            },
            "PermissionsViewPersonalOrg" : {
              "type" : "boolean"
            },
            "PermissionsUseServicePartReturn" : {
              "type" : "boolean"
            },
            "PermissionsHeadlessPublishNudges" : {
              "type" : "boolean"
            },
            "PermissionsApprovalAdmin" : {
              "type" : "boolean"
            },
            "PermissionsApprovalDesigner" : {
              "type" : "boolean"
            },
            "PermissionsAccessServiceEinstein" : {
              "type" : "boolean"
            },
            "PermissionsViewRecommendations" : {
              "type" : "boolean"
            },
            "PermissionsPrismPlaygroundUser" : {
              "type" : "boolean"
            },
            "PermissionsModifyAllPolicyCenterPolicies" : {
              "type" : "boolean"
            },
            "PermissionsViewAllPolicyCenterPolicies" : {
              "type" : "boolean"
            },
            "PermissionsAccessSfDrive" : {
              "type" : "boolean"
            },
            "PermissionsAppFrameworkManageApp" : {
              "type" : "boolean"
            },
            "PermissionsAppFrameworkViewApp" : {
              "type" : "boolean"
            },
            "PermissionsAgentforceServiceAgentUser" : {
              "type" : "boolean"
            },
            "PermissionsManageAgentforceServiceAgent" : {
              "type" : "boolean"
            },
            "PermissionsPersonalizationDecisioningUser" : {
              "type" : "boolean"
            },
            "PermissionsCanDoActAsUser" : {
              "type" : "boolean"
            },
            "PermissionsViewAllFieldsGlobal" : {
              "type" : "boolean"
            },
            "PermissionsSchedulerAIAgentUserAccess" : {
              "type" : "boolean"
            },
            "PermissionsAppFrameworkManageTemplate" : {
              "type" : "boolean"
            },
            "PermissionsModifyAccessDenyPolicies" : {
              "type" : "boolean"
            },
            "PermissionsManageAccessPolicies" : {
              "type" : "boolean"
            },
            "PermissionsViewAccessPolicies" : {
              "type" : "boolean"
            },
            "PermissionsModifyAccessAllowPolicies" : {
              "type" : "boolean"
            },
            "PermissionsViewOrchestrationsInAutomApp" : {
              "type" : "boolean"
            },
            "PermissionsTerritoryOperations" : {
              "type" : "boolean"
            },
            "Description" : {
              "type" : "string",
              "description" : "A description of the permission set. Limit: 255 characters."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The namespace prefix for a permission set that's been installed as part of a managed package. If the permission set isn't packaged or is part of an unmanaged package, this value is empty. Available in API version 23.0 and later.",
              "readOnly" : true
            },
            "HasActivationRequired" : {
              "type" : "boolean",
              "description" : "Indicates whether the permission set requires an associated active session (true) or not (false)."
            },
            "PermissionSetGroupId" : {
              "type" : "string",
              "description" : "If the permission set is owned by a permission set group, this field returns the ID of the permission set group. If the permission set isn’t owned by a permission set group, this field returns a null value. Available in API version 45.0 and later.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "Available in API version 46.0 and later.",
              "readOnly" : true
            },
            "PsgCount" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        } ]
      },
      "PermissionSetAssignment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the association between a User and a PermissionSet.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "PermissionSetId" : {
              "type" : "string",
              "description" : "ID of the PermissionSet to assign to the user specified in AssigneeId."
            },
            "PermissionSetGroupId" : {
              "type" : "string",
              "description" : "If associated with a permission set group, this is the ID of that group. This field is available in API version 45.0 and later as part of a pilot. Refer to PermissionSetGroup for more information."
            },
            "AssigneeId" : {
              "type" : "string",
              "description" : "ID of the User to assign the permission set specified in PermissionSetId."
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExpirationDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "IsActive" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "PermissionSetEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentIdList" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentNameList" : {
              "type" : "string",
              "readOnly" : true
            },
            "PermissionType" : {
              "type" : "string",
              "readOnly" : true
            },
            "PermissionList" : {
              "type" : "string",
              "readOnly" : true
            },
            "PermissionExpiration" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PermissionExpirationList" : {
              "type" : "string",
              "readOnly" : true
            },
            "HasExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ImpactedUserIds" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserCount" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PermissionSetEventStore" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentIdList" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentNameList" : {
              "type" : "string",
              "readOnly" : true
            },
            "PermissionType" : {
              "type" : "string",
              "readOnly" : true
            },
            "PermissionList" : {
              "type" : "string",
              "readOnly" : true
            },
            "HasExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ImpactedUserIds" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserCount" : {
              "type" : "string",
              "readOnly" : true
            },
            "PermissionExpiration" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PermissionExpirationList" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PermissionSetGroup" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a group of permission sets and the permissions within them. Use permission set groups to organize permissions based on job functions or tasks. Then, you can package the groups as needed.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The permission set group name used in the API."
            },
            "Language" : {
              "type" : "string",
              "description" : "The Permission Set Group language."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The permission set group label for the aggregated permissions."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "The Permission Set Group description."
            },
            "Status" : {
              "type" : "string",
              "description" : "Indicates permission set group recalculation status. Updated. The group is current. Outdated. The group requires recalculation. Updating. The group is in recalculation mode. Failed. The group recalculation failed.",
              "readOnly" : true
            },
            "HasActivationRequired" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "PermissionSetGroupComponent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "A junction object that relates the PermissionSetGroup and PermissionSet objects via their respective IDs; enables permission set group recalculation to determine the aggregated permissions for the group.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PermissionSetGroupId" : {
              "type" : "string",
              "description" : "The unique permission set group ID."
            },
            "PermissionSetId" : {
              "type" : "string",
              "description" : "The unique permission set ID of a permission set in a permission set group."
            }
          }
        } ]
      },
      "PermissionSetLicense" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a license that’s used to enable one or more users to receive a specified permission without changing their profile or reassigning profiles. You can use permission set licenses to grant access, but not to deny access.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record.",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "description" : "The language of the permission set license.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The label of the permission set license. Label is Permission Set License Label.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PermissionSetLicenseKey" : {
              "type" : "string",
              "description" : "A string that uniquely identifies a particular permission set license.",
              "readOnly" : true
            },
            "TotalLicenses" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total number of this permission set license that are available to your organization.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of a permission set license. If Active, the permission set license is available. If Disabled, the permission set license has expired.",
              "readOnly" : true
            },
            "ExpirationDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The date at which the permission set license expires.",
              "readOnly" : true
            },
            "MaximumPermissionsEmailSingle" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEmailMass" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditTask" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditEvent" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsExportReport" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsImportPersonal" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsDataExport" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditPublicFilters" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditPublicTemplates" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsModifyAllData" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditBillingInfo" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageCases" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsMassInlineEdit" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditKnowledge" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageKnowledge" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageSolutions" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCustomizeApplication" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditReadonlyFields" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsRunReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewSetup" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsTransferAnyEntity" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsNewReportBuilder" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsActivateContract" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsImportLeads" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageLeads" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsTransferAnyLead" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewAllData" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditPublicDocuments" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewEncryptedData" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditBrandTemplates" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditHtmlTemplates" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsChatterInternalUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsDeleteActivatedContract" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsChatterInviteExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSendSitRequests" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageRemoteAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCanUseNewDashboardBuilder" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageCategories" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsConvertLeads" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsPasswordNeverExpires" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsUseTeamReassignWizards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsInstallPackaging" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsPublishPackaging" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsChatterOwnGroups" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditOppLineItemUnitPrice" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCreatePackaging" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsBulkApiHardDelete" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSolutionImport" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageCallCenters" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageSynonyms" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewContent" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageEmailClientConfig" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEnableNotifications" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageDataIntegrations" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsDistributeFromPersWksp" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewDataCategories" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageDataCategories" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAuthorApex" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageMobile" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsApiEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageCustomReportTypes" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditCaseComments" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsTransferAnyCase" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsContentAdministrator" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCreateWorkspaces" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageContentPermissions" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageContentProperties" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageContentTypes" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageExchangeConfig" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageAnalyticSnapshots" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsScheduleReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageBusinessHourHolidays" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageDynamicDashboards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCustomSidebarOnAllPages" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageInteraction" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewMyTeamsDashboards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsModerateChatter" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsResetPasswords" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsFlowUFLRequired" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCanInsertFeedSystemFields" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsActivitiesAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageKnowledgeImportExport" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEmailTemplateManagement" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEmailAdministration" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageChatterMessages" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsChatterFileLink" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsForceTwoFactor" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewEventLogFiles" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageNetworks" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageAuthProviders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsRunFlow" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCreateCustomizeDashboards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCreateDashboardFolders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewPublicDashboards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageDashbdsInPubFolders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCreateCustomizeReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCreateReportFolders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewPublicReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageReportsInPubFolders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditMyDashboards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditMyReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewAllUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAllowUniversalSearch" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsConnectOrgToEnvironmentHub" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCreateCustomizeFilters" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsContentHubUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsGovernNetworks" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSalesConsole" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsTwoFactorApi" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsDeleteTopics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEditTopics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCreateTopics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAssignTopics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsIdentityEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsIdentityConnect" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAllowViewKnowledge" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsContentWorkspaces" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageSearchPromotionRules" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCustomMobileAppsAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewHelpLink" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageProfilesPermissionsets" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAssignPermissionSets" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageRoles" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageIpAddresses" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageSharing" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageInternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManagePasswordPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageLoginAccessPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewPlatformEvents" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageCustomPermissions" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCanVerifyComment" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageUnlistedGroups" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsFreezeUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageTwoFactor" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsLightningExperienceUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewDataLeakageEvents" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsConfigCustomRecs" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSubmitMacrosAllowed" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsBulkMacrosAllowed" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsShareInternalArticles" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageSessionPermissionSets" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSendAnnouncementEmails" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsChatterEditOwnPost" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsChatterEditOwnRecordPost" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsImportCustomObjects" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsDelegatedTwoFactor" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsChatterComposeUiCodesnippet" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSelectFilesFromSalesforce" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsModerateNetworkUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsMergeTopics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSubscribeToLightningReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManagePvtRptsAndDashbds" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAllowLightningLogin" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCampaignInfluence2" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewDataAssessment" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsRemoveDirectMessageMembers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCanApproveFeedPost" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAddDirectMessageMembers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAllowViewEditConvertedLeads" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsShowCompanyNameAsUserBadge" : {
              "type" : "boolean",
              "description" : "When on, a user’s company name, if available, will be displayed in place of the community role.",
              "readOnly" : true
            },
            "MaximumPermissionsAccessCMC" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewHealthCheck" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageHealthCheck" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsPackaging2" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageCertificates" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCreateReportInLightning" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsPreventClassicExperience" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsHideReadByList" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsListEmailSend" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsFeedPinning" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsChangeDashboardColors" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsIotUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageRecommendationStrategies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManagePropositions" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCloseConversations" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSubscribeReportRolesGrps" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSubscribeDashboardRolesGrps" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsUseWebLink" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsHasUnlimitedNBAExecutions" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewAllActivities" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSubscribeReportToOtherUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsLightningConsoleAllowedForUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSubscribeReportsRunAsUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSubscribeToLightningDashboards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSubscribeDashboardToOtherUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCreateLtngTempInPub" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsTransactionalEmailSend" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewPrivateStaticResources" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCreateLtngTempFolder" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsApexRestServices" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEnableCommunityAppLauncher" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsGiveRecognitionBadge" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsUseMySearch" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsLtngPromoReserved01UserPerm" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageSubscriptions" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageSurveys" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsUseAssistantDialog" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewRoles" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCustomTabBarOnMobile" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsLMOutboundMessagingUserPerm" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsModifyDataClassification" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsPrivacyDataAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsQueryAllFiles" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsModifyMetadata" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageCMS" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSandboxTestingInCommunityApp" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCanEditPrompts" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewUserPII" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageHubConnections" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsB2BMarketingAnalyticsUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsTraceXdsQueries" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewAllCustomSettings" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewAllForeignKeyNames" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsHeadlessCMSAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsLMEndMessagingSessionUserPerm" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsConsentApiUpdate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAccountSwitcherUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewAnomalyEvents" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageC360AConnections" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageReleaseUpdates" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSkipIdentityConfirmation" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsLearningManager" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSendCustomNotifications" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsPackaging2Delete" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewRestrictionAndScopingRules" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsBotManageBots" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsBotManageBotsTrainingData" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageLearningReporting" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsQuipMetricsAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsQuipUserEngagementMetrics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsTransactionSecurityExempt" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageExternalConnections" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsNativeWebviewScrolling" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewDeveloperName" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsBypassMFAForUiLogins" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsClientSecretRotation" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAccessToServiceProcess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageOrchInstsAndWorkItems" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCMSECEAuthoringAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageDataspaceScope" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsConfigureDataspaceScope" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewClientSecret" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCdcReportingCreateReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCdcReportingViewReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCdcReportingManageFolders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsExternalClientAppDeveloper" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsExternalClientAppAdmin" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsExternalClientAppViewer" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsDeleteCrMemoAndInvoice" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageNamedCredentials" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCanUpdateEmailMessage" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsDownloadPackageVersionZips" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewContentTaxonomy" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageContentTaxonomy" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsReassignOrchestrationWorkItems" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageOrchestrationRuns" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsDigitalLendingUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageCertificatesExpiration" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEnableIPFSUpload" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEnableBCTransactionPolling" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsLobbyManagementUserAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsMonitorLoginHistory" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEnhancedSalesMobileExp" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSimpleCsvDataImportUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAdvancedCsvDataImportUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAccessToComplaintMgmt" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAccessToDisputeManagement" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsPersonalizedFinanceUserAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCustomAppsOnFSMobile" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsStageManagementDesignUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSegmentIntelligenceUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsFSCArcGraphCommunityUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageCdpMlModels" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsDigitalLendingAdminUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsActivateSystemModeFlows" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsPersonalizationPlatform" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageIntegrationConnections" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageFilesAndAttachments" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageCustomDomains" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsEngagementConfigUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsPersonalizationIntelUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAttributionModelUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAccessDisputePrompts" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsQueryNonVetoedFiles" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsMetadataStudioUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsDigitalLendingWorkbench" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsDigitalLendingEditReadOnly" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsPrmExtIntPrtnrAdminUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManagePersonalOrg" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewPersonalOrg" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsUseServicePartReturn" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsHeadlessPublishNudges" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsApprovalAdmin" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsApprovalDesigner" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAccessServiceEinstein" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewRecommendations" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsPrismPlaygroundUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsModifyAllPolicyCenterPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewAllPolicyCenterPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAccessSfDrive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAppFrameworkManageApp" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAppFrameworkViewApp" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAgentforceServiceAgentUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageAgentforceServiceAgent" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsPersonalizationDecisioningUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsCanDoActAsUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewAllFieldsGlobal" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsSchedulerAIAgentUserAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsAppFrameworkManageTemplate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsModifyAccessDenyPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsManageAccessPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewAccessPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsModifyAccessAllowPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsViewOrchestrationsInAutomApp" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MaximumPermissionsTerritoryOperations" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UsedLicenses" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of this permission set license that are currently assigned to users.",
              "readOnly" : true
            },
            "MigratableLicenses" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "IsAvailableForIntegrations" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LicenseExpirationPolicy" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsSupplementLicense" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PermissionSetLicenseAssign" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the association between a User and a PermissionSetLicense.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PermissionSetLicenseId" : {
              "type" : "string",
              "description" : "The ID of the permission set license the user is assigned to."
            },
            "AssigneeId" : {
              "type" : "string",
              "description" : "ID of the User to assign the permission set license specified in PermissionSetLicenseId."
            }
          }
        } ]
      },
      "PermissionSetTabSetting" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a permission set tab setting. Requires the View Setup permission. Use this object to query all tab settings of the permission set.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The permission set Id."
            },
            "Visibility" : {
              "type" : "string",
              "description" : "Indicates whether the tab is visible by default. Possible values are: DefaultOff DefaultOn"
            },
            "Name" : {
              "type" : "string",
              "description" : "The tab name."
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "PicklistValueInfo" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Value" : {
              "type" : "string",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDefaultValue" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ValidFor" : {
              "type" : "string",
              "readOnly" : true
            },
            "EntityParticleId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PlatformAction" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "PlatformAction is a virtual read-only object. It enables you to query for actions displayed in the UI, given a user, a context, device format, and a record ID. Examples include standard and custom buttons, quick actions, and productivity actions.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string",
              "description" : "The unique ID for the PlatformAction. If the action doesn’t have an ID, its API name is used.",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "description" : "The label to display for this action.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "The type of the action. Valid values are: ActionLink—An indicator on a feed element that targets an API, a web page, or a file, represented by a button in the Salesforce Chatter feed UI. CustomButton—When clicked, opens a URL or a Visualforce page in a window or executes JavaScript. InvocableAction ProductivityAction—Productivity actions are predefined and attached to a limited set of objects. Productivity actions include Send Email, Call, Map, View Website, and Read News. Except for the Call action, you can’t edit productivity actions. QuickAction—A global or object-specific action. StandardButton—A predefined Salesforce button such as New, Edit, and Delete.",
              "readOnly" : true
            },
            "Subtype" : {
              "type" : "string",
              "description" : "The subtype of the action. For quick actions, the subtype is QuickActionType. For custom buttons, the subtype is WebLinkTypeEnum. For action links, subtypes are Api, ApiAsync, Download, and Ui. Standard buttons and productivity actions have no subtype.",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActionTarget" : {
              "type" : "string",
              "description" : "The URL to invoke or describe the action when the action is invoked. If the action is a standard button overridden by a Visualforce page, the ActionTarget returns the URL of the Visualforce page, such as /apex/pagename.",
              "readOnly" : true
            },
            "ActionTargetType" : {
              "type" : "string",
              "description" : "The type of the target when this action is triggered. Valid values are: Describe—applies to actions with a user interface, such as quick actions Invoke—applies to actions with no user interface, such as action links or invocable actions Visualforce—applies to standard buttons overridden by a Visualforce page",
              "readOnly" : true
            },
            "ConfirmationMessage" : {
              "type" : "string",
              "description" : "Applies only to action links. The message to display before the action is invoked. Field is null if no confirmation is required before invoking the action.",
              "readOnly" : true
            },
            "GroupId" : {
              "type" : "string",
              "description" : "The unique ID of a group of action links.",
              "readOnly" : true
            },
            "IsGroupDefault" : {
              "type" : "boolean",
              "description" : "Denotes whether this action is the default in an action link group. False for other action types. Applies to action links only.",
              "readOnly" : true
            },
            "Category" : {
              "type" : "string",
              "description" : "Applies only to action links. Denotes whether the action link shows up in the feed item list of actions or the overflow list of actions. Valid values are: Primary Overflow",
              "readOnly" : true
            },
            "InvocationStatus" : {
              "type" : "string",
              "description" : "The status of the action within the feed item. Applies to action links only. Valid values are: Failed New Pending Successful",
              "readOnly" : true
            },
            "InvokedByUserId" : {
              "type" : "string",
              "description" : "The ID of the user who most recently invoked this action within the current feed item. Applies to action links only.",
              "readOnly" : true
            },
            "SourceEntity" : {
              "type" : "string",
              "description" : "Required. The object or record with which this action is associated.",
              "readOnly" : true
            },
            "ActionListContext" : {
              "type" : "string",
              "description" : "Required. The list context this action applies to. Valid values are: ActionDefinition Assistant BannerPhoto Chatter Dockable FeedElement Flexipage Global ListView ListViewDefinition ListViewRecord Lookup MruList MruRow ObjectHomeChart Photo Record RecordEdit RelatedList RelatedListRecord",
              "readOnly" : true
            },
            "DeviceFormat" : {
              "type" : "string",
              "description" : "Specifies which action icon the PlatformAction query returns. If this field isn’t specified, it defaults to Phone. Valid values are: Aloha Desktop Phone Tablet",
              "readOnly" : true
            },
            "RetrievalMode" : {
              "type" : "string",
              "readOnly" : true
            },
            "IconContentType" : {
              "type" : "string",
              "description" : "The content type—such as .jpg, .gif, or .png—of the icon for this action. Applies to both custom and standard icons assigned to actions.",
              "readOnly" : true
            },
            "IconHeight" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The height of the icon for this action. Applies only to standard icons.",
              "readOnly" : true
            },
            "IconWidth" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The width of the icon for this action. Applies only to standard icons.",
              "readOnly" : true
            },
            "IconUrl" : {
              "type" : "string",
              "description" : "The URL of the icon for this action.",
              "readOnly" : true
            },
            "IsMassAction" : {
              "type" : "boolean",
              "description" : "Indicates whether the action can be performed on multiple records. This field is available in API version 38.0 and later.",
              "readOnly" : true
            },
            "PrimaryColor" : {
              "type" : "string",
              "description" : "The primary color of the icon for this action.",
              "readOnly" : true
            },
            "RelatedSourceEntity" : {
              "type" : "string",
              "description" : "When the ActionListContext is RelatedList or RelatedListRecord, this field represents the API name of the related list to which the action belongs.",
              "readOnly" : true
            },
            "Section" : {
              "type" : "string",
              "description" : "The section of the user interface the action resides in. Applicable only to Lightning Experience. Valid values are: ActivityComposer CollaborateComposer NotesComposer Page SingleActionLinks This field is available in API version 35.0 and later.",
              "readOnly" : true
            },
            "RelatedListRecordId" : {
              "type" : "string",
              "description" : "Represents the ID of a record in an object’s related list. This field is available in API version 38.0 and later.",
              "readOnly" : true
            },
            "TargetUrl" : {
              "type" : "string",
              "description" : "The URL that a custom button or link points to. This field is available in API version 41.0 and later.",
              "readOnly" : true
            },
            "TargetObject" : {
              "type" : "string",
              "description" : "The type of object record the action creates, such as a contact or opportunity. This field is available in API version 41.0 and later.",
              "readOnly" : true
            },
            "OpenType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PlatformCachePartition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string"
            },
            "Language" : {
              "type" : "string"
            },
            "MasterLabel" : {
              "type" : "string"
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string"
            },
            "IsDefaultPartition" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "PlatformCachePartitionType" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PlatformCachePartitionId" : {
              "type" : "string"
            },
            "CacheType" : {
              "type" : "string"
            },
            "AllocatedCapacity" : {
              "type" : "integer",
              "format" : "int32"
            },
            "AllocatedPurchasedCapacity" : {
              "type" : "integer",
              "format" : "int32"
            },
            "AllocatedTrialCapacity" : {
              "type" : "integer",
              "format" : "int32"
            },
            "AllocatedPartnerCapacity" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        } ]
      },
      "PlatformEventUsageMetric" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Contains usage data for event publishing and CometD-client delivery. Usage data is available for the last 24 hours, ending at the last hour, and for historical daily usage. PlatformEventUsageMetric contains separate usage metrics for platform events and change data capture events.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string",
              "description" : "This field is not in use.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the metric to get usage for.",
              "readOnly" : true
            },
            "StartDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The start date and time in UTC used for querying usage metrics. The date granularity is hourly.",
              "readOnly" : true
            },
            "EndDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The end date and time in UTC used for querying usage metrics. The date granularity is hourly.",
              "readOnly" : true
            },
            "Value" : {
              "type" : "number",
              "description" : "The usage value for the specified metric and date range.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PlatformStatusAlertEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "The documentation has moved to PlatformStatusAlertEvent in the Platform Events Developer Guide.",
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "RequestId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ServiceName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ServiceJobId" : {
              "type" : "string",
              "readOnly" : true
            },
            "StatusType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ComponentName" : {
              "type" : "string",
              "readOnly" : true
            },
            "SubComponentName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Subject" : {
              "type" : "string",
              "readOnly" : true
            },
            "ApiErrorCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExtendedErrorCode" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Pricebook2" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a price book that contains the list of products that your org sells.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the price book has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of this object. This field is read-only for the standard price book. Label is Price Book Name."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the price book is active (true) or not (false). Inactive price books are hidden in many areas in the user interface. You can change this field’s value as often as necessary. Label is Active."
            },
            "IsArchived" : {
              "type" : "boolean",
              "description" : "Indicates whether the price book has been archived (true) or not (false). This field is read only.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Text description of the price book."
            },
            "IsStandard" : {
              "type" : "boolean",
              "description" : "Indicates whether the price book is the standard price book for the org (true) or not (false). Every org has one standard price book—all other price books are custom price books.",
              "readOnly" : true
            }
          }
        } ]
      },
      "Pricebook2ChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsArchived" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsStandard" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Pricebook2History" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents historical information about changes that have been made to the standard fields of the associated Pricebook2, or to any custom fields with history tracking enabled.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). This is a standard system field. Label is Deleted.",
              "readOnly" : true
            },
            "Pricebook2Id" : {
              "type" : "string",
              "description" : "ID of the Pricebook2 associated with this record.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "description" : "Name of the price book field that was modified, or a special value to indicate some other modification to the price book.",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "description" : "Previous value of the modified price book field. Maximum of 255 characters.",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "description" : "New value of the modified price book field. Maximum of 255 characters.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PricebookEntry" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a product entry (an association between a Pricebook2 and Product2) in a price book.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of this PricebookEntry record. This read-only field references the value in the Name field of the Product2 record. Label is Product Name.",
              "readOnly" : true
            },
            "Pricebook2Id" : {
              "type" : "string",
              "description" : "Required. ID of the Pricebook2 record with which this record is associated. This field must be specified when creating Pricebook2 records. It can’t be changed in an update."
            },
            "Product2Id" : {
              "type" : "string",
              "description" : "Required. ID of the Product2 record with which this record is associated. This field must be specified when creating Product2 records. It can’t be changed in an update."
            },
            "UnitPrice" : {
              "type" : "number",
              "description" : "Required. Unit price for this price book entry. You can specify a value only if UseStandardPrice is set to false. Label is List Price."
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether this price book entry is active (true) or not (false). Although you can never delete PricebookEntry records, your client application can set this flag to false. Inactive PricebookEntry records are hidden in many areas in the user interface. You can change this flag on a PricebookEntry record as often as necessary."
            },
            "UseStandardPrice" : {
              "type" : "boolean",
              "description" : "Indicates whether this price book entry uses the standard price defined in the standard Pricebook2 record (true) or not (false). If set to true, then the UnitPrice field is read-only, and the value will be the same as the UnitPrice value in the corresponding PricebookEntry in the standard price book (that is, the PricebookEntry record whose Pricebook2Id refers to the standard price book and whose Product2Id and CurrencyIsoCode are the same as this record). For PricebookEntry records associated with the standard Pricebook2 record, this field must be set to true."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ProductCode" : {
              "type" : "string",
              "description" : "Product code for this record. This read-only field references the value in the ProductCode field of the associated Product2 record.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsArchived" : {
              "type" : "boolean",
              "description" : "Indicates whether the PricebookEntry has been archived (true) or not (false). This is set to true when the Product2 record it’s associated with is archived, or when the Pricebook2 record is archived. This field is read only. Available in API version 45.0 and later. Label is Archived.",
              "readOnly" : true
            }
          }
        } ]
      },
      "PricebookEntryChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Pricebook2Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Product2Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UnitPrice" : {
              "type" : "number",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UseStandardPrice" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsArchived" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PricebookEntryHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PricebookEntryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ProcessDefinition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the definition of a single approval process.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The unique process name, used internally.",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The external name of the process; the name seen by users.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "The type of this process. Approval Process—Used to control the action taken for a record. State-based Process—Used internally to track various control processes, such as for developing Salesforce Knowledge articles.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "A description of this process, with a maximum of 3,000 characters.",
              "readOnly" : true
            },
            "TableEnumOrId" : {
              "type" : "string",
              "description" : "Specifies the object associated with the approval process, such as Account or Contact.",
              "readOnly" : true
            },
            "LockType" : {
              "type" : "string",
              "description" : "The type of lock applied to the record being approved. When a record is in the approval process, it’s always locked, and only an administrator can edit it. However, the currently assigned approver can also be allowed to edit the record. Total Admin Owner Workitem Node none",
              "readOnly" : true
            },
            "State" : {
              "type" : "string",
              "description" : "The current state of this process. Active Inactive Obsolete",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ProcessFlowMigration" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ProcessVersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DestinationFlowVersionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DestinationFlowDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "MigratedCriteriaLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "MigratedCriteriaName" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ProcessInstance" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an instance of a single, end-to-end approval process. Use this and the node, step, and workitem process instance objects to create approval history reports.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProcessDefinitionId" : {
              "type" : "string",
              "description" : "The ID of this approval process instance.",
              "readOnly" : true
            },
            "TargetObjectId" : {
              "type" : "string",
              "description" : "ID of the object affected by this approval process instance.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of this approval process instance, for example Started, Pending, or Approved.",
              "readOnly" : true
            },
            "CompletedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The completion date and time of the approval process. The ElapsedTimeDay, ElapsedTimeHours, and ElapsedTimeMinutes field values are calculated using CompletedDate.",
              "readOnly" : true
            },
            "LastActorId" : {
              "type" : "string",
              "description" : "The last actor that approved, rejected, or recalled the process.",
              "readOnly" : true
            },
            "ElapsedTimeInDays" : {
              "type" : "number",
              "description" : "The total elapsed time in days between when the approval process instance was started and now.",
              "readOnly" : true
            },
            "ElapsedTimeInHours" : {
              "type" : "number",
              "description" : "The total elapsed time in hours between when the approval process instance was started and now.",
              "readOnly" : true
            },
            "ElapsedTimeInMinutes" : {
              "type" : "number",
              "description" : "The total elapsed time in minutes between when the approval process instance was started and now.",
              "readOnly" : true
            },
            "SubmittedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ProcessInstanceChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "ProcessDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "TargetObjectId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "CompletedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastActorId" : {
              "type" : "string",
              "readOnly" : true
            },
            "SubmittedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ProcessInstanceHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "This read-only object shows all steps and pending approval requests associated with an approval process (ProcessInstance).",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsPending" : {
              "type" : "boolean",
              "description" : "Indicates whether the ProcessInstance is pending (true) or not (false).",
              "readOnly" : true
            },
            "ProcessInstanceId" : {
              "type" : "string",
              "description" : "ID of the ProcessInstance.",
              "readOnly" : true
            },
            "TargetObjectId" : {
              "type" : "string",
              "description" : "ID of the object being approved.",
              "readOnly" : true
            },
            "StepStatus" : {
              "type" : "string",
              "description" : "Indicates the current status of the ProcessInstanceStep.",
              "readOnly" : true
            },
            "ProcessNodeId" : {
              "type" : "string",
              "description" : "ID of this step.",
              "readOnly" : true
            },
            "OriginalActorId" : {
              "type" : "string",
              "description" : "ID of the user who was originally assigned this ProcessInstance.",
              "readOnly" : true
            },
            "ActorId" : {
              "type" : "string",
              "description" : "ID of the user who is currently assigned to this ProcessInstance.",
              "readOnly" : true
            },
            "RemindersSent" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of reminders that have been sent. Default is 0 (zero).",
              "readOnly" : true
            },
            "ElapsedTimeInDays" : {
              "type" : "number",
              "description" : "The total time in days between when the approval process instance was started and when it was completed.",
              "readOnly" : true
            },
            "ElapsedTimeInHours" : {
              "type" : "number",
              "description" : "The total time in hours between when the approval process instance was started and when it was completed.",
              "readOnly" : true
            },
            "ElapsedTimeInMinutes" : {
              "type" : "number",
              "description" : "The total time in minutes between when the approval process instance was started and when it was completed.",
              "readOnly" : true
            },
            "Comments" : {
              "type" : "string",
              "description" : "Comments for a ProcessInstanceStep. This field doesn't apply to ProcessInstanceWorkitem records.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ProcessInstanceNode" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a step in an instance of an approval process. Compare to ProcessNode, which describes the step in a process definition. Use this object to retrieve approval history.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ProcessInstanceId" : {
              "type" : "string",
              "description" : "The approval process this step is part of.",
              "readOnly" : true
            },
            "ProcessNodeId" : {
              "type" : "string",
              "description" : "The identifier for this step.",
              "readOnly" : true
            },
            "NodeStatus" : {
              "type" : "string",
              "description" : "The status of this approval instance, for example Started, Pending, or Approved.",
              "readOnly" : true
            },
            "CompletedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The completion date and time of this step in the approval process. The ElapsedTimeDay, ElapsedTimeHours, and ElapsedTimeMinutes field values are calculated using CompletedDate.",
              "readOnly" : true
            },
            "LastActorId" : {
              "type" : "string",
              "description" : "The last actor that approved or rejected this step.",
              "readOnly" : true
            },
            "ProcessNodeName" : {
              "type" : "string",
              "description" : "The name of this step.",
              "readOnly" : true
            },
            "ElapsedTimeInDays" : {
              "type" : "number",
              "description" : "The total time in days since this step was started.",
              "readOnly" : true
            },
            "ElapsedTimeInHours" : {
              "type" : "number",
              "description" : "The total time in hours since this step was started.",
              "readOnly" : true
            },
            "ElapsedTimeInMinutes" : {
              "type" : "number",
              "description" : "The total time in minutes since this step was started.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ProcessInstanceStep" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents one work item in an approval process (ProcessInstance).",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProcessInstanceId" : {
              "type" : "string",
              "description" : "ID of the ProcessInstance that this approval step belongs to.",
              "readOnly" : true
            },
            "StepStatus" : {
              "type" : "string",
              "description" : "The current status of this approval step. Approved Fault Held NoResponse Pending Reassigned Rejected Removed Started If the approval step requires unanimous approval and one approver rejects the request, the value of this field for the other approvers changes to NoResponse. Likewise, if approval is based on the first response and an approver responds, the value of this field for the other approvers changes to NoResponse.",
              "readOnly" : true
            },
            "OriginalActorId" : {
              "type" : "string",
              "description" : "ID of the user who was originally assigned to this approval step.",
              "readOnly" : true
            },
            "ActorId" : {
              "type" : "string",
              "description" : "ID of the user who is currently assigned to this approval step.",
              "readOnly" : true
            },
            "Comments" : {
              "type" : "string",
              "description" : "Limit: 4,000 bytes.",
              "readOnly" : true
            },
            "StepNodeId" : {
              "type" : "string",
              "description" : "ID of the node currently assigned to this approval step.",
              "readOnly" : true
            },
            "ElapsedTimeInDays" : {
              "type" : "number",
              "description" : "The total time in days since this step was started.",
              "readOnly" : true
            },
            "ElapsedTimeInHours" : {
              "type" : "number",
              "description" : "The total time in hours since this step was started.",
              "readOnly" : true
            },
            "ElapsedTimeInMinutes" : {
              "type" : "number",
              "description" : "The total time in minutes since this step was started.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ProcessInstanceStepChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "ProcessInstanceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "StepStatus" : {
              "type" : "string",
              "readOnly" : true
            },
            "OriginalActorId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActorId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Comments" : {
              "type" : "string",
              "readOnly" : true
            },
            "StepNodeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ElapsedTimeInDays" : {
              "type" : "number",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ProcessInstanceWorkitem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a user’s pending approval request.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProcessInstanceId" : {
              "type" : "string",
              "description" : "ID of the ProcessInstance associated with this approval request."
            },
            "OriginalActorId" : {
              "type" : "string",
              "description" : "ID of the user who was originally assigned this approval request."
            },
            "ActorId" : {
              "type" : "string",
              "description" : "ID of the user who is currently responsible for approving an approval request."
            },
            "ElapsedTimeInDays" : {
              "type" : "number",
              "description" : "The total time in days since this approval request was started.",
              "readOnly" : true
            },
            "ElapsedTimeInHours" : {
              "type" : "number",
              "description" : "The total time in hours since this approval request was started.",
              "readOnly" : true
            },
            "ElapsedTimeInMinutes" : {
              "type" : "number",
              "description" : "The total time in minutes since this approval request was started.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "ProcessNode" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Describes a step in a process definition. Compare to ProcessInstanceNode, which describes the step in a running process.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The unique node name.",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The external name of the node; the name seen by users.",
              "readOnly" : true
            },
            "ProcessDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "A description of this node, no longer than 3,000 bytes.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Product2" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a product that your org sells.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Default name of this record. Label is Product Name."
            },
            "ProductCode" : {
              "type" : "string",
              "description" : "Default product code for this record. Your org defines the product code naming pattern."
            },
            "Description" : {
              "type" : "string",
              "description" : "A text description of this record. Label is Product Description."
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether this record is active (true) or not (false). Inactive Product2 records are hidden in many areas in the user interface. You can change the IsActive flag on a Product2 object as often as necessary. Label is Active."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Family" : {
              "type" : "string",
              "description" : "Name of the product family associated with this record. Product families are configured as picklists in the user interface. To obtain a list of valid values, call describeSObjects() and process the DescribeSObjectResult for the values associated with the Family field. Label is Product Family."
            },
            "ExternalDataSourceId" : {
              "type" : "string",
              "description" : "ID of the related external data source."
            },
            "ExternalId" : {
              "type" : "string",
              "description" : "The unique identifier of a record in the linked external data source. For example, ID #123."
            },
            "DisplayUrl" : {
              "type" : "string",
              "description" : "URL leading to a specific version of a record in the linked external data source."
            },
            "QuantityUnitOfMeasure" : {
              "type" : "string",
              "description" : "Unit of the product; for example, kilograms, liters, or cases. This field comes with only one value, Each, so consider creating your own. The QuantityUnitOfMeasure field on ProductItem inherits this field’s values."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "IsArchived" : {
              "type" : "boolean",
              "description" : "Describes whether the product is archived. The default value is false.",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            },
            "StockKeepingUnit" : {
              "type" : "string",
              "description" : "The SKU for the product. Use in tandem with or instead of the ProductCode field. For example, you can track the manufacturer’s identifying code in the Product Code field and assign the product a SKU when you resell it."
            }
          }
        } ]
      },
      "Product2ChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProductCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Family" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalDataSourceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DisplayUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "QuantityUnitOfMeasure" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsArchived" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "StockKeepingUnit" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Product2Feed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Product2History" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Product2Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ProductConsumptionSchedule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ProductId" : {
              "type" : "string"
            },
            "ConsumptionScheduleId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "Profile" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a profile, which defines a set of permissions to perform different operations, such as querying, adding, updating, or deleting information.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the profile."
            },
            "PermissionsEmailSingle" : {
              "type" : "boolean"
            },
            "PermissionsEmailMass" : {
              "type" : "boolean"
            },
            "PermissionsEditTask" : {
              "type" : "boolean"
            },
            "PermissionsEditEvent" : {
              "type" : "boolean"
            },
            "PermissionsExportReport" : {
              "type" : "boolean"
            },
            "PermissionsImportPersonal" : {
              "type" : "boolean"
            },
            "PermissionsDataExport" : {
              "type" : "boolean"
            },
            "PermissionsManageUsers" : {
              "type" : "boolean"
            },
            "PermissionsEditPublicFilters" : {
              "type" : "boolean"
            },
            "PermissionsEditPublicTemplates" : {
              "type" : "boolean"
            },
            "PermissionsModifyAllData" : {
              "type" : "boolean"
            },
            "PermissionsEditBillingInfo" : {
              "type" : "boolean"
            },
            "PermissionsManageCases" : {
              "type" : "boolean"
            },
            "PermissionsMassInlineEdit" : {
              "type" : "boolean"
            },
            "PermissionsEditKnowledge" : {
              "type" : "boolean"
            },
            "PermissionsManageKnowledge" : {
              "type" : "boolean"
            },
            "PermissionsManageSolutions" : {
              "type" : "boolean"
            },
            "PermissionsCustomizeApplication" : {
              "type" : "boolean"
            },
            "PermissionsEditReadonlyFields" : {
              "type" : "boolean"
            },
            "PermissionsRunReports" : {
              "type" : "boolean"
            },
            "PermissionsViewSetup" : {
              "type" : "boolean"
            },
            "PermissionsTransferAnyEntity" : {
              "type" : "boolean"
            },
            "PermissionsNewReportBuilder" : {
              "type" : "boolean"
            },
            "PermissionsActivateContract" : {
              "type" : "boolean"
            },
            "PermissionsImportLeads" : {
              "type" : "boolean"
            },
            "PermissionsManageLeads" : {
              "type" : "boolean"
            },
            "PermissionsTransferAnyLead" : {
              "type" : "boolean"
            },
            "PermissionsViewAllData" : {
              "type" : "boolean"
            },
            "PermissionsEditPublicDocuments" : {
              "type" : "boolean"
            },
            "PermissionsViewEncryptedData" : {
              "type" : "boolean"
            },
            "PermissionsEditBrandTemplates" : {
              "type" : "boolean"
            },
            "PermissionsEditHtmlTemplates" : {
              "type" : "boolean"
            },
            "PermissionsChatterInternalUser" : {
              "type" : "boolean"
            },
            "PermissionsDeleteActivatedContract" : {
              "type" : "boolean"
            },
            "PermissionsChatterInviteExternalUsers" : {
              "type" : "boolean"
            },
            "PermissionsSendSitRequests" : {
              "type" : "boolean"
            },
            "PermissionsManageRemoteAccess" : {
              "type" : "boolean"
            },
            "PermissionsCanUseNewDashboardBuilder" : {
              "type" : "boolean"
            },
            "PermissionsManageCategories" : {
              "type" : "boolean"
            },
            "PermissionsConvertLeads" : {
              "type" : "boolean"
            },
            "PermissionsPasswordNeverExpires" : {
              "type" : "boolean"
            },
            "PermissionsUseTeamReassignWizards" : {
              "type" : "boolean"
            },
            "PermissionsInstallMultiforce" : {
              "type" : "boolean"
            },
            "PermissionsPublishMultiforce" : {
              "type" : "boolean"
            },
            "PermissionsChatterOwnGroups" : {
              "type" : "boolean"
            },
            "PermissionsEditOppLineItemUnitPrice" : {
              "type" : "boolean"
            },
            "PermissionsCreateMultiforce" : {
              "type" : "boolean"
            },
            "PermissionsBulkApiHardDelete" : {
              "type" : "boolean"
            },
            "PermissionsSolutionImport" : {
              "type" : "boolean"
            },
            "PermissionsManageCallCenters" : {
              "type" : "boolean"
            },
            "PermissionsManageSynonyms" : {
              "type" : "boolean"
            },
            "PermissionsViewContent" : {
              "type" : "boolean"
            },
            "PermissionsManageEmailClientConfig" : {
              "type" : "boolean"
            },
            "PermissionsEnableNotifications" : {
              "type" : "boolean"
            },
            "PermissionsManageDataIntegrations" : {
              "type" : "boolean"
            },
            "PermissionsDistributeFromPersWksp" : {
              "type" : "boolean"
            },
            "PermissionsViewDataCategories" : {
              "type" : "boolean"
            },
            "PermissionsManageDataCategories" : {
              "type" : "boolean"
            },
            "PermissionsAuthorApex" : {
              "type" : "boolean"
            },
            "PermissionsManageMobile" : {
              "type" : "boolean"
            },
            "PermissionsApiEnabled" : {
              "type" : "boolean"
            },
            "PermissionsManageCustomReportTypes" : {
              "type" : "boolean"
            },
            "PermissionsEditCaseComments" : {
              "type" : "boolean"
            },
            "PermissionsTransferAnyCase" : {
              "type" : "boolean"
            },
            "PermissionsContentAdministrator" : {
              "type" : "boolean"
            },
            "PermissionsCreateWorkspaces" : {
              "type" : "boolean"
            },
            "PermissionsManageContentPermissions" : {
              "type" : "boolean"
            },
            "PermissionsManageContentProperties" : {
              "type" : "boolean"
            },
            "PermissionsManageContentTypes" : {
              "type" : "boolean"
            },
            "PermissionsManageExchangeConfig" : {
              "type" : "boolean"
            },
            "PermissionsManageAnalyticSnapshots" : {
              "type" : "boolean"
            },
            "PermissionsScheduleReports" : {
              "type" : "boolean"
            },
            "PermissionsManageBusinessHourHolidays" : {
              "type" : "boolean"
            },
            "PermissionsManageDynamicDashboards" : {
              "type" : "boolean"
            },
            "PermissionsCustomSidebarOnAllPages" : {
              "type" : "boolean"
            },
            "PermissionsManageInteraction" : {
              "type" : "boolean"
            },
            "PermissionsViewMyTeamsDashboards" : {
              "type" : "boolean"
            },
            "PermissionsModerateChatter" : {
              "type" : "boolean"
            },
            "PermissionsResetPasswords" : {
              "type" : "boolean"
            },
            "PermissionsFlowUFLRequired" : {
              "type" : "boolean"
            },
            "PermissionsCanInsertFeedSystemFields" : {
              "type" : "boolean"
            },
            "PermissionsActivitiesAccess" : {
              "type" : "boolean"
            },
            "PermissionsManageKnowledgeImportExport" : {
              "type" : "boolean"
            },
            "PermissionsEmailTemplateManagement" : {
              "type" : "boolean"
            },
            "PermissionsEmailAdministration" : {
              "type" : "boolean"
            },
            "PermissionsManageChatterMessages" : {
              "type" : "boolean"
            },
            "PermissionsChatterFileLink" : {
              "type" : "boolean"
            },
            "PermissionsForceTwoFactor" : {
              "type" : "boolean"
            },
            "PermissionsViewEventLogFiles" : {
              "type" : "boolean"
            },
            "PermissionsManageNetworks" : {
              "type" : "boolean"
            },
            "PermissionsManageAuthProviders" : {
              "type" : "boolean"
            },
            "PermissionsRunFlow" : {
              "type" : "boolean"
            },
            "PermissionsCreateCustomizeDashboards" : {
              "type" : "boolean"
            },
            "PermissionsCreateDashboardFolders" : {
              "type" : "boolean"
            },
            "PermissionsViewPublicDashboards" : {
              "type" : "boolean"
            },
            "PermissionsManageDashbdsInPubFolders" : {
              "type" : "boolean"
            },
            "PermissionsCreateCustomizeReports" : {
              "type" : "boolean"
            },
            "PermissionsCreateReportFolders" : {
              "type" : "boolean"
            },
            "PermissionsViewPublicReports" : {
              "type" : "boolean"
            },
            "PermissionsManageReportsInPubFolders" : {
              "type" : "boolean"
            },
            "PermissionsEditMyDashboards" : {
              "type" : "boolean"
            },
            "PermissionsEditMyReports" : {
              "type" : "boolean"
            },
            "PermissionsViewAllUsers" : {
              "type" : "boolean"
            },
            "PermissionsAllowUniversalSearch" : {
              "type" : "boolean"
            },
            "PermissionsConnectOrgToEnvironmentHub" : {
              "type" : "boolean"
            },
            "PermissionsCreateCustomizeFilters" : {
              "type" : "boolean"
            },
            "PermissionsContentHubUser" : {
              "type" : "boolean"
            },
            "PermissionsGovernNetworks" : {
              "type" : "boolean"
            },
            "PermissionsSalesConsole" : {
              "type" : "boolean"
            },
            "PermissionsTwoFactorApi" : {
              "type" : "boolean"
            },
            "PermissionsDeleteTopics" : {
              "type" : "boolean"
            },
            "PermissionsEditTopics" : {
              "type" : "boolean"
            },
            "PermissionsCreateTopics" : {
              "type" : "boolean"
            },
            "PermissionsAssignTopics" : {
              "type" : "boolean"
            },
            "PermissionsIdentityEnabled" : {
              "type" : "boolean"
            },
            "PermissionsIdentityConnect" : {
              "type" : "boolean"
            },
            "PermissionsAllowViewKnowledge" : {
              "type" : "boolean"
            },
            "PermissionsContentWorkspaces" : {
              "type" : "boolean"
            },
            "PermissionsManageSearchPromotionRules" : {
              "type" : "boolean"
            },
            "PermissionsCustomMobileAppsAccess" : {
              "type" : "boolean"
            },
            "PermissionsViewHelpLink" : {
              "type" : "boolean"
            },
            "PermissionsManageProfilesPermissionsets" : {
              "type" : "boolean"
            },
            "PermissionsAssignPermissionSets" : {
              "type" : "boolean"
            },
            "PermissionsManageRoles" : {
              "type" : "boolean"
            },
            "PermissionsManageIpAddresses" : {
              "type" : "boolean"
            },
            "PermissionsManageSharing" : {
              "type" : "boolean"
            },
            "PermissionsManageInternalUsers" : {
              "type" : "boolean"
            },
            "PermissionsManagePasswordPolicies" : {
              "type" : "boolean"
            },
            "PermissionsManageLoginAccessPolicies" : {
              "type" : "boolean"
            },
            "PermissionsViewPlatformEvents" : {
              "type" : "boolean"
            },
            "PermissionsManageCustomPermissions" : {
              "type" : "boolean"
            },
            "PermissionsCanVerifyComment" : {
              "type" : "boolean"
            },
            "PermissionsManageUnlistedGroups" : {
              "type" : "boolean"
            },
            "PermissionsFreezeUsers" : {
              "type" : "boolean"
            },
            "PermissionsManageTwoFactor" : {
              "type" : "boolean"
            },
            "PermissionsLightningExperienceUser" : {
              "type" : "boolean"
            },
            "PermissionsViewDataLeakageEvents" : {
              "type" : "boolean"
            },
            "PermissionsConfigCustomRecs" : {
              "type" : "boolean"
            },
            "PermissionsSubmitMacrosAllowed" : {
              "type" : "boolean"
            },
            "PermissionsBulkMacrosAllowed" : {
              "type" : "boolean"
            },
            "PermissionsShareInternalArticles" : {
              "type" : "boolean"
            },
            "PermissionsManageSessionPermissionSets" : {
              "type" : "boolean"
            },
            "PermissionsSendAnnouncementEmails" : {
              "type" : "boolean"
            },
            "PermissionsChatterEditOwnPost" : {
              "type" : "boolean"
            },
            "PermissionsChatterEditOwnRecordPost" : {
              "type" : "boolean"
            },
            "PermissionsImportCustomObjects" : {
              "type" : "boolean"
            },
            "PermissionsDelegatedTwoFactor" : {
              "type" : "boolean"
            },
            "PermissionsChatterComposeUiCodesnippet" : {
              "type" : "boolean"
            },
            "PermissionsSelectFilesFromSalesforce" : {
              "type" : "boolean"
            },
            "PermissionsModerateNetworkUsers" : {
              "type" : "boolean"
            },
            "PermissionsMergeTopics" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeToLightningReports" : {
              "type" : "boolean"
            },
            "PermissionsManagePvtRptsAndDashbds" : {
              "type" : "boolean"
            },
            "PermissionsAllowLightningLogin" : {
              "type" : "boolean"
            },
            "PermissionsCampaignInfluence2" : {
              "type" : "boolean"
            },
            "PermissionsViewDataAssessment" : {
              "type" : "boolean"
            },
            "PermissionsRemoveDirectMessageMembers" : {
              "type" : "boolean"
            },
            "PermissionsCanApproveFeedPost" : {
              "type" : "boolean"
            },
            "PermissionsAddDirectMessageMembers" : {
              "type" : "boolean"
            },
            "PermissionsAllowViewEditConvertedLeads" : {
              "type" : "boolean"
            },
            "PermissionsShowCompanyNameAsUserBadge" : {
              "type" : "boolean",
              "description" : "When on, a user’s company name, if available, is displayed in place of the Experience Cloud site role."
            },
            "PermissionsAccessCMC" : {
              "type" : "boolean"
            },
            "PermissionsViewHealthCheck" : {
              "type" : "boolean"
            },
            "PermissionsManageHealthCheck" : {
              "type" : "boolean"
            },
            "PermissionsPackaging2" : {
              "type" : "boolean"
            },
            "PermissionsManageCertificates" : {
              "type" : "boolean"
            },
            "PermissionsCreateReportInLightning" : {
              "type" : "boolean"
            },
            "PermissionsPreventClassicExperience" : {
              "type" : "boolean"
            },
            "PermissionsHideReadByList" : {
              "type" : "boolean"
            },
            "PermissionsListEmailSend" : {
              "type" : "boolean"
            },
            "PermissionsFeedPinning" : {
              "type" : "boolean"
            },
            "PermissionsChangeDashboardColors" : {
              "type" : "boolean"
            },
            "PermissionsIotUser" : {
              "type" : "boolean"
            },
            "PermissionsManageRecommendationStrategies" : {
              "type" : "boolean"
            },
            "PermissionsManagePropositions" : {
              "type" : "boolean"
            },
            "PermissionsCloseConversations" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeReportRolesGrps" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeDashboardRolesGrps" : {
              "type" : "boolean"
            },
            "PermissionsUseWebLink" : {
              "type" : "boolean"
            },
            "PermissionsHasUnlimitedNBAExecutions" : {
              "type" : "boolean"
            },
            "PermissionsViewAllActivities" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeReportToOtherUsers" : {
              "type" : "boolean"
            },
            "PermissionsLightningConsoleAllowedForUser" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeReportsRunAsUser" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeToLightningDashboards" : {
              "type" : "boolean"
            },
            "PermissionsSubscribeDashboardToOtherUsers" : {
              "type" : "boolean"
            },
            "PermissionsCreateLtngTempInPub" : {
              "type" : "boolean"
            },
            "PermissionsTransactionalEmailSend" : {
              "type" : "boolean"
            },
            "PermissionsViewPrivateStaticResources" : {
              "type" : "boolean"
            },
            "PermissionsCreateLtngTempFolder" : {
              "type" : "boolean"
            },
            "PermissionsApexRestServices" : {
              "type" : "boolean"
            },
            "PermissionsEnableCommunityAppLauncher" : {
              "type" : "boolean"
            },
            "PermissionsGiveRecognitionBadge" : {
              "type" : "boolean"
            },
            "PermissionsUseMySearch" : {
              "type" : "boolean"
            },
            "PermissionsLtngPromoReserved01UserPerm" : {
              "type" : "boolean"
            },
            "PermissionsManageSubscriptions" : {
              "type" : "boolean"
            },
            "PermissionsManageSurveys" : {
              "type" : "boolean"
            },
            "PermissionsUseAssistantDialog" : {
              "type" : "boolean"
            },
            "PermissionsViewRoles" : {
              "type" : "boolean"
            },
            "PermissionsCustomTabBarOnMobile" : {
              "type" : "boolean"
            },
            "PermissionsLMOutboundMessagingUserPerm" : {
              "type" : "boolean"
            },
            "PermissionsModifyDataClassification" : {
              "type" : "boolean"
            },
            "PermissionsPrivacyDataAccess" : {
              "type" : "boolean"
            },
            "PermissionsQueryAllFiles" : {
              "type" : "boolean"
            },
            "PermissionsModifyMetadata" : {
              "type" : "boolean"
            },
            "PermissionsManageCMS" : {
              "type" : "boolean"
            },
            "PermissionsSandboxTestingInCommunityApp" : {
              "type" : "boolean"
            },
            "PermissionsCanEditPrompts" : {
              "type" : "boolean"
            },
            "PermissionsViewUserPII" : {
              "type" : "boolean"
            },
            "PermissionsManageHubConnections" : {
              "type" : "boolean"
            },
            "PermissionsB2BMarketingAnalyticsUser" : {
              "type" : "boolean"
            },
            "PermissionsTraceXdsQueries" : {
              "type" : "boolean"
            },
            "PermissionsViewAllCustomSettings" : {
              "type" : "boolean"
            },
            "PermissionsViewAllForeignKeyNames" : {
              "type" : "boolean"
            },
            "PermissionsHeadlessCMSAccess" : {
              "type" : "boolean"
            },
            "PermissionsLMEndMessagingSessionUserPerm" : {
              "type" : "boolean"
            },
            "PermissionsConsentApiUpdate" : {
              "type" : "boolean"
            },
            "PermissionsAccountSwitcherUser" : {
              "type" : "boolean"
            },
            "PermissionsViewAnomalyEvents" : {
              "type" : "boolean"
            },
            "PermissionsManageC360AConnections" : {
              "type" : "boolean"
            },
            "PermissionsManageReleaseUpdates" : {
              "type" : "boolean"
            },
            "PermissionsSkipIdentityConfirmation" : {
              "type" : "boolean"
            },
            "PermissionsLearningManager" : {
              "type" : "boolean"
            },
            "PermissionsSendCustomNotifications" : {
              "type" : "boolean"
            },
            "PermissionsPackaging2Delete" : {
              "type" : "boolean"
            },
            "PermissionsViewRestrictionAndScopingRules" : {
              "type" : "boolean"
            },
            "PermissionsBotManageBots" : {
              "type" : "boolean"
            },
            "PermissionsBotManageBotsTrainingData" : {
              "type" : "boolean"
            },
            "PermissionsManageLearningReporting" : {
              "type" : "boolean"
            },
            "PermissionsQuipMetricsAccess" : {
              "type" : "boolean"
            },
            "PermissionsQuipUserEngagementMetrics" : {
              "type" : "boolean"
            },
            "PermissionsTransactionSecurityExempt" : {
              "type" : "boolean"
            },
            "PermissionsManageExternalConnections" : {
              "type" : "boolean"
            },
            "PermissionsNativeWebviewScrolling" : {
              "type" : "boolean"
            },
            "PermissionsViewDeveloperName" : {
              "type" : "boolean"
            },
            "PermissionsBypassMFAForUiLogins" : {
              "type" : "boolean"
            },
            "PermissionsClientSecretRotation" : {
              "type" : "boolean"
            },
            "PermissionsAccessToServiceProcess" : {
              "type" : "boolean"
            },
            "PermissionsManageOrchInstsAndWorkItems" : {
              "type" : "boolean"
            },
            "PermissionsCMSECEAuthoringAccess" : {
              "type" : "boolean"
            },
            "PermissionsManageDataspaceScope" : {
              "type" : "boolean"
            },
            "PermissionsConfigureDataspaceScope" : {
              "type" : "boolean"
            },
            "PermissionsViewClientSecret" : {
              "type" : "boolean"
            },
            "PermissionsCdcReportingCreateReports" : {
              "type" : "boolean"
            },
            "PermissionsCdcReportingViewReports" : {
              "type" : "boolean"
            },
            "PermissionsCdcReportingManageFolders" : {
              "type" : "boolean"
            },
            "PermissionsExternalClientAppDeveloper" : {
              "type" : "boolean"
            },
            "PermissionsExternalClientAppAdmin" : {
              "type" : "boolean"
            },
            "PermissionsExternalClientAppViewer" : {
              "type" : "boolean"
            },
            "PermissionsDeleteCrMemoAndInvoice" : {
              "type" : "boolean"
            },
            "PermissionsManageNamedCredentials" : {
              "type" : "boolean"
            },
            "PermissionsCanUpdateEmailMessage" : {
              "type" : "boolean"
            },
            "PermissionsDownloadPackageVersionZips" : {
              "type" : "boolean"
            },
            "PermissionsViewContentTaxonomy" : {
              "type" : "boolean"
            },
            "PermissionsManageContentTaxonomy" : {
              "type" : "boolean"
            },
            "PermissionsReassignOrchestrationWorkItems" : {
              "type" : "boolean"
            },
            "PermissionsManageOrchestrationRuns" : {
              "type" : "boolean"
            },
            "PermissionsDigitalLendingUser" : {
              "type" : "boolean"
            },
            "PermissionsManageCertificatesExpiration" : {
              "type" : "boolean"
            },
            "PermissionsEnableIPFSUpload" : {
              "type" : "boolean"
            },
            "PermissionsEnableBCTransactionPolling" : {
              "type" : "boolean"
            },
            "PermissionsLobbyManagementUserAccess" : {
              "type" : "boolean"
            },
            "PermissionsMonitorLoginHistory" : {
              "type" : "boolean"
            },
            "PermissionsEnhancedSalesMobileExp" : {
              "type" : "boolean"
            },
            "PermissionsSimpleCsvDataImportUser" : {
              "type" : "boolean"
            },
            "PermissionsAdvancedCsvDataImportUser" : {
              "type" : "boolean"
            },
            "PermissionsAccessToComplaintMgmt" : {
              "type" : "boolean"
            },
            "PermissionsAccessToDisputeManagement" : {
              "type" : "boolean"
            },
            "PermissionsPersonalizedFinanceUserAccess" : {
              "type" : "boolean"
            },
            "PermissionsCustomAppsOnFSMobile" : {
              "type" : "boolean"
            },
            "PermissionsStageManagementDesignUser" : {
              "type" : "boolean"
            },
            "PermissionsSegmentIntelligenceUser" : {
              "type" : "boolean"
            },
            "PermissionsFSCArcGraphCommunityUser" : {
              "type" : "boolean"
            },
            "PermissionsManageCdpMlModels" : {
              "type" : "boolean"
            },
            "PermissionsDigitalLendingAdminUser" : {
              "type" : "boolean"
            },
            "PermissionsActivateSystemModeFlows" : {
              "type" : "boolean"
            },
            "PermissionsPersonalizationPlatform" : {
              "type" : "boolean"
            },
            "PermissionsManageIntegrationConnections" : {
              "type" : "boolean"
            },
            "PermissionsManageFilesAndAttachments" : {
              "type" : "boolean"
            },
            "PermissionsManageCustomDomains" : {
              "type" : "boolean"
            },
            "PermissionsEngagementConfigUser" : {
              "type" : "boolean"
            },
            "PermissionsPersonalizationIntelUser" : {
              "type" : "boolean"
            },
            "PermissionsAttributionModelUser" : {
              "type" : "boolean"
            },
            "PermissionsAccessDisputePrompts" : {
              "type" : "boolean"
            },
            "PermissionsQueryNonVetoedFiles" : {
              "type" : "boolean"
            },
            "PermissionsMetadataStudioUser" : {
              "type" : "boolean"
            },
            "PermissionsDigitalLendingWorkbench" : {
              "type" : "boolean"
            },
            "PermissionsDigitalLendingEditReadOnly" : {
              "type" : "boolean"
            },
            "PermissionsPrmExtIntPrtnrAdminUser" : {
              "type" : "boolean"
            },
            "PermissionsManagePersonalOrg" : {
              "type" : "boolean"
            },
            "PermissionsViewPersonalOrg" : {
              "type" : "boolean"
            },
            "PermissionsUseServicePartReturn" : {
              "type" : "boolean"
            },
            "PermissionsHeadlessPublishNudges" : {
              "type" : "boolean"
            },
            "PermissionsApprovalAdmin" : {
              "type" : "boolean"
            },
            "PermissionsApprovalDesigner" : {
              "type" : "boolean"
            },
            "PermissionsAccessServiceEinstein" : {
              "type" : "boolean"
            },
            "PermissionsViewRecommendations" : {
              "type" : "boolean"
            },
            "PermissionsPrismPlaygroundUser" : {
              "type" : "boolean"
            },
            "PermissionsModifyAllPolicyCenterPolicies" : {
              "type" : "boolean"
            },
            "PermissionsViewAllPolicyCenterPolicies" : {
              "type" : "boolean"
            },
            "PermissionsAccessSfDrive" : {
              "type" : "boolean"
            },
            "PermissionsAppFrameworkManageApp" : {
              "type" : "boolean"
            },
            "PermissionsAppFrameworkViewApp" : {
              "type" : "boolean"
            },
            "PermissionsAgentforceServiceAgentUser" : {
              "type" : "boolean"
            },
            "PermissionsManageAgentforceServiceAgent" : {
              "type" : "boolean"
            },
            "PermissionsPersonalizationDecisioningUser" : {
              "type" : "boolean"
            },
            "PermissionsCanDoActAsUser" : {
              "type" : "boolean"
            },
            "PermissionsViewAllFieldsGlobal" : {
              "type" : "boolean"
            },
            "PermissionsSchedulerAIAgentUserAccess" : {
              "type" : "boolean"
            },
            "PermissionsAppFrameworkManageTemplate" : {
              "type" : "boolean"
            },
            "PermissionsModifyAccessDenyPolicies" : {
              "type" : "boolean"
            },
            "PermissionsManageAccessPolicies" : {
              "type" : "boolean"
            },
            "PermissionsViewAccessPolicies" : {
              "type" : "boolean"
            },
            "PermissionsModifyAccessAllowPolicies" : {
              "type" : "boolean"
            },
            "PermissionsViewOrchestrationsInAutomApp" : {
              "type" : "boolean"
            },
            "PermissionsTerritoryOperations" : {
              "type" : "boolean"
            },
            "UserLicenseId" : {
              "type" : "string",
              "description" : "ID of the UserLicense associated with this profile."
            },
            "UserType" : {
              "type" : "string",
              "description" : "The category of user license. Each UserType is associated with one or more UserLicense records. Each UserLicense is associated with one or more profiles. In API version 10.0 and later, valid values include: Standard: user license. This user type also includes Salesforce Platform and Salesforce Platform One user licenses. Label is Standard. PowerPartner: User whose access is limited because he or she is a partner and typically accesses the application through a partner portal or Experience Cloud site. Label is Partner. CSPLitePortal: user whose access is limited because he or she is an org's customer and accesses the application through a Customer Portal or Experience Cloud site. Label is High Volume Portal. CustomerSuccess: user whose access is limited because he or she is an org's customer and accesses the application through a Customer Portal. Label is Customer Portal User. PowerCustomerSuccess: user whose access is limited because he or she is an org's customer and accesses the application through a Customer Portal. Label is Customer Portal Manager. Users with this license type can view and edit data they directly own or data owned by or shared with users below them in the Customer Portal role hierarchy. CsnOnly: user whose access to the application is limited to Chatter. This user type includes Chatter Free and Chatter moderator users. Label is Chatter Free. UserType replaces LicenseType, which is unavailable as of API version 10.0. In API versions 8.0 and 9.0 LicenseType is still available with the following valid values: AUL: Lightning Platform user license. Label is Apex Platform. AUL1: Lightning Platform user license with only one user. Label is Apex Platform One. Salesforce: Salesforce user license. Label is Salesforce. PackageManager: user who can create and work with managed packages for Salesforce AppExchange. Label is Package Manager. PRM: user whose access is limited because he or she is a partner and typically accesses the application through a partner portal. Label is Partner. CustomerUser: user whose access is limited because he or she is an org's customer and accesses the application through a Customer Portal. Label is Customer Portal User. CustomerManager: user whose access is limited because he or she is an org's customer and accesses the application through a Customer Portal. Label is Customer Portal Manager. Users with this license type can view and edit data they directly own or data owned by or shared with users below them in the Customer Portal role hierarchy.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the profile."
            },
            "DefaultApplicationId" : {
              "type" : "string"
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this profile. Available in API version 29.0 and later.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this profile. Available in API version 29.0 and later.",
              "readOnly" : true
            }
          }
        } ]
      },
      "Prompt" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents record details about an in-app guidance prompt or walkthrough.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "Language" : {
              "type" : "string",
              "description" : "Indicates the language used in the org where the in-app guidance was created."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The master label.. Maximum of 80 characters."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "PromptAction" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents how the user interacted with the in-app guidance prompt or walkthrough.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the owner."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the in-app guidance."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PromptVersionId" : {
              "type" : "string",
              "description" : "ID of the PromptVersion object."
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the user."
            },
            "TimesDisplayed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of times that the in-app guidance was displayed to the user."
            },
            "TimesActionTaken" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of times that the user took action on the in-app guidance."
            },
            "TimesDismissed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of times that the user dismissed the in-app guidance."
            },
            "LastDisplayDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Indicates the date the in-app guidance was last displayed to the user."
            },
            "LastResult" : {
              "type" : "string",
              "description" : "Indicates the last user interaction. Valid values are: CustomAction Dismiss Error Finish—(walkthroughs only) NoAction NotSeen Snooze"
            },
            "LastResultDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Indicates the date the in-app guidance was last interacted with."
            },
            "StepNumber" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the number of the last step the user viewed or interacted with in a walkthrough. Maximum value is 10. Available in API version 49.0 and later."
            },
            "StepCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the total number of steps in the walkthrough. Available in API version 49.0 and later."
            },
            "SnoozeUntil" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the user’s snooze request expires. The user won’t see the prompt again until the next scheduled time when they navigate to the page after the snooze time expires."
            },
            "TimesSnoozed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total number of times the user snoozes the prompt."
            }
          }
        } ]
      },
      "PromptActionShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a sharing entry on a prompt action record.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the parent."
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "The ID of the User or Group."
            },
            "AccessLevel" : {
              "type" : "string",
              "description" : "Indicates the access level of users for in-app guidance. Valid values are Read, Edit, and All."
            },
            "RowCause" : {
              "type" : "string",
              "description" : "Reason that this sharing entry exists. You can only write to this field when its value is either omitted or set to Manual (default). There are many possible values, including: Rule—The User or Group has access via a sharing rule. GuestRule—The User or Group has access via a guest user sharing rule. Manual—The User or Group has access because a User with “All” access manually shared the prompt action with them. Owner—The User is the owner of the prompt action."
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "PromptError" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PromptActionId" : {
              "type" : "string"
            },
            "Type" : {
              "type" : "string"
            },
            "StepNumber" : {
              "type" : "integer",
              "format" : "int32"
            },
            "IsError" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "PromptErrorShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "PromptVersion" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an in-app guidance prompt or walkthrough.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the in-app guidance."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The master label. Maximum of 80 characters."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the in-app guidance. Maximum of 255 characters."
            },
            "DisplayType" : {
              "type" : "string",
              "description" : "Indicates the type of prompt. Valid values are: DockedComposer—the docked prompt FloatingPanel—the floating prompt"
            },
            "DisplayPosition" : {
              "type" : "string",
              "description" : "Indicates the position of the floating prompt on the page. Valid values are: TopLeft TopCenter TopRight MiddleLeft MiddleCenter MiddleRight BottomLeft BottomCenter BottomRight"
            },
            "TimesToDisplay" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Maximum number of times to display the in-app guidance (that is, the number of occurrences). Salesforce detects if the user interacts with (or ignores) the in-app guidance to determine if we should show the in-app guidance again or cancel scheduled recurrences. This may run counter to the number of occurrences scheduled. Maximum value of 30. For walkthroughs, this field can only be specified on the first step."
            },
            "DelayDays" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of days between occurrences. For walkthroughs, this field can only be specified on the first step."
            },
            "StartDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Indicates the date to start showing. For walkthroughs, this field can only be specified on the first step."
            },
            "EndDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Indicates the date to stop showing the in-app guidance. For walkthroughs, this field can only be specified on the first step."
            },
            "UserAccess" : {
              "type" : "string",
              "description" : "Indicates which permissions can see the in-app guidance. Valid values are: Everyone—there are no restrictions on who can see SpecificPermissions—only users with all the specific user permissions specified can see the in-app guidance"
            },
            "IsPublished" : {
              "type" : "boolean",
              "description" : "Indicates if the in-app guidance is active yes or not no."
            },
            "PublishedDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Indicates the date the in-app guidance was activated. If the in-app guidance is part of a package, this is the date when the package was installed. For walkthroughs, this field can only be specified on the first step."
            },
            "PublishedByUserId" : {
              "type" : "string",
              "description" : "The ID of the user who activated the in-app guidance. If the in-app guidance is part of a package, this is the user who installed the package."
            },
            "Header" : {
              "type" : "string",
              "description" : "Label for the header of the docked prompt. This is the label contained in the window’s browser bar. Maximum of 36 characters."
            },
            "DismissButtonLabel" : {
              "type" : "string",
              "description" : "Label for the dismiss button of a floating prompt. Maximum of 15 characters."
            },
            "ShouldDisplayActionButton" : {
              "type" : "boolean",
              "description" : "Indicates if an action button or link is included in the in-app guidance yes or not no."
            },
            "ActionButtonLabel" : {
              "type" : "string",
              "description" : "Label for the action button. Maximum of 25 characters. For walkthroughs, this field can only be specified on the last step."
            },
            "ActionButtonLink" : {
              "type" : "string",
              "description" : "URL for the action button. Maximum of 1,000 characters. You can’t use the GROUP BY option in a SOQL query for this field. For walkthroughs, this field can only be specified on the last step."
            },
            "Title" : {
              "type" : "string",
              "description" : "The label for the title of the in-app guidance. Maximum of 36 characters."
            },
            "VersionNumber" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number remains 1 since multiple versions aren’t saved in the org."
            },
            "TargetPageType" : {
              "type" : "string",
              "description" : "The type of page where the in-app guidance appears."
            },
            "TargetPageKey1" : {
              "type" : "string",
              "description" : "Used by Salesforce to identify the page location along with targetPageKey2, targetPageKey3, and targetPageType."
            },
            "TargetPageKey2" : {
              "type" : "string",
              "description" : "Used by Salesforce to identify the prompt’s page location along with targetPageKey1, targetPageKey3, and targetPageType."
            },
            "TargetAppNamespacePrefix" : {
              "type" : "string",
              "description" : "The app’s namespace prefix where the in-app guidance appears. Must match the target app’s NamespacePrefix in the org that the package is being installed into. Maximum of 15 characters. Deprecated in API version of 51.0."
            },
            "TargetAppDeveloperName" : {
              "type" : "string",
              "description" : "The app’s developer name where the in-app guidance appears. Deprecated in API version 51.0."
            },
            "Body" : {
              "type" : "string",
              "description" : "Body content. For floating prompts, there’s a maximum of 240 characters. For docked prompts, there’s a maximum of 4000 characters. However, docked prompts use a rich text editor, so the maximum refers to the HTML markup, not the readable text."
            },
            "CustomApplicationId" : {
              "type" : "string"
            },
            "ShouldIgnoreGlobalDelay" : {
              "type" : "boolean",
              "description" : "Indicates if the prompt ignores the global time delay between in-app guidance and instead shows on page load yes or not no. The default is no."
            },
            "UserProfileAccess" : {
              "type" : "string",
              "description" : "Indicates which profiles can see the in-app guidance. Valid values are: Everyone—there are no permission restrictions on who can see SpecificProfiles—users with any of the specific user profiles specified can see the in-app guidance"
            },
            "VideoLink" : {
              "type" : "string",
              "description" : "URL for the video in a docked prompt. Maximum of 1,000 characters. You can only specify this field or the ImageId field, not both. To find the embed code for a video, follow the instructions from the video host website. Usually the steps can be found by searching for the name of the website and “embed video.” For example, here’s what the embed code looks like for YouTube: <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Ko-gcObzTVo\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> Then, you would enter the URL found in the src attribute. For the example used, enter https://www.youtube.com/embed/Ko-gcObzTVo."
            },
            "StepNumber" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Indicates the number of the last step the user viewed or interacted with in a walkthrough. Maximum value is 10."
            },
            "ThemeColor" : {
              "type" : "string",
              "description" : "Indicates which custom theme color is applied to in-app guidance. Required if themeSaturation is specified. Specify on the first step of the walkthrough to apply to the entire walkthrough. Valid values are: Theme1—derived from the current brand color Theme2—derived from the current page background color Theme3—derived from the current global header color Theme4—derived from the current app theme color"
            },
            "ThemeSaturation" : {
              "type" : "string",
              "description" : "Indicates which color value, or saturation, is applied to in-app guidance that has a custom theme color applied. Required if themeColor is specified. Specify on the first step of the walkthrough to apply to the entire walkthrough. Valid values are: Dark Light"
            },
            "TargetPageKey1Ref" : {
              "type" : "string",
              "description" : "Used by Salesforce to identify the prompt’s page location along with targetPageKey2, targetPageKey3, and targetPageType."
            },
            "ImageAltText" : {
              "type" : "string",
              "description" : "Indicates the alt text of an image. Required if ImageLocation or ImageID is specified."
            },
            "ImageId" : {
              "type" : "string",
              "description" : "The ID of the ContentAsset that holds the image. Required if ImageLocation or ImageAltText is specified."
            },
            "ImageLink" : {
              "type" : "string"
            },
            "ImageLocation" : {
              "type" : "string",
              "description" : "Indicates the location of the image in relation to the body text. Required if ImageID or ImageAltText is specified. Valid values are: Top Bottom Right—for floating prompts only Left—for floating prompts only"
            },
            "TargetPageKey3" : {
              "type" : "string",
              "description" : "Used by Salesforce to identify the prompt’s page location along with targetPageKey1, targetPageKey2, and targetPageType."
            },
            "ElementRelativePosition" : {
              "type" : "string"
            },
            "ReferenceElementContext" : {
              "type" : "string"
            },
            "IndexWithIsPublished" : {
              "type" : "string",
              "description" : "Used by Salesforce for efficient querying.",
              "readOnly" : true
            },
            "IndexWithoutIsPublished" : {
              "type" : "string",
              "description" : "Used by Salesforce for efficient querying.",
              "readOnly" : true
            },
            "TargetPageKey4" : {
              "type" : "string"
            },
            "TargetRecordTypeId" : {
              "type" : "string"
            },
            "ExperienceContextId" : {
              "type" : "string"
            },
            "Experience" : {
              "type" : "string"
            }
          }
        } ]
      },
      "Publisher" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsSalesforce" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "MajorVersion" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "MinorVersion" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "PushTopic" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a query that is the basis for notifying Streaming API clients of changes to records in an org.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Descriptive name of the PushTopic, such as MyNewCases or TeamUpdatedContacts. Limit: 25 characters. This value identifies the channel and must be unique."
            },
            "Query" : {
              "type" : "string",
              "description" : "Required. The SOQL query statement that determines which record changes trigger events to be sent to the channel. Limit: 1,300 characters"
            },
            "ApiVersion" : {
              "type" : "number",
              "description" : "Required. API version to use for executing the query specified in Query. It must be an API version greater than 20.0. If your query applies to a custom object from a package, this value must match the package's ApiVersion. Example value:"
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the record currently counts towards the organization's allocation."
            },
            "NotifyForFields" : {
              "type" : "string",
              "description" : "Specifies which fields are evaluated to generate a notification."
            },
            "NotifyForOperations" : {
              "type" : "string",
              "description" : "Specifies which record events may generate a notification. In API version 29.0 and later, this field is read-only, and doesn’t contain information about delete and undelete events. Use NotifyForOperationCreate, NotifyForOperationDelete, NotifyForOperationUndelete and NotifyForOperationUpdate to specify which record events should generate a notification. Possible values are: All (default) Create Extended Update A value of Extended means that neither create or update operations are set to generate events.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the PushTopic. Limit: 400 characters"
            },
            "NotifyForOperationCreate" : {
              "type" : "boolean",
              "description" : "true if a create operation should generate a notification, otherwise, false. Defaults to true. This field is available in API version 29.0 and later."
            },
            "NotifyForOperationUpdate" : {
              "type" : "boolean",
              "description" : "true if an update operation should generate a notification, otherwise, false. Defaults to true. This field is available in API version 29.0 and later."
            },
            "NotifyForOperationDelete" : {
              "type" : "boolean",
              "description" : "true if a delete operation should generate a notification, otherwise, false. Defaults to true. Clients must connect using the cometd/29.0 (or later) Streaming API endpoint to receive delete and undelete event notifications. This field is available in API version 29.0 and later."
            },
            "NotifyForOperationUndelete" : {
              "type" : "boolean",
              "description" : "true if an undelete operation should generate a notification, otherwise, false. Defaults to true. Clients must connect using the cometd/29.0 (or later) Streaming API endpoint to receive delete and undelete event notifications. This field is available in API version 29.0 and later."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "QueueSobject" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the mapping between a queue Group and the sObject types associated with the queue, including custom objects.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueueId" : {
              "type" : "string",
              "description" : "The ID of a queue."
            },
            "SobjectType" : {
              "type" : "string",
              "description" : "A list of object types that can be associated with the queue specified by the QueueId."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "QuickText" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "This object stores a snippet of text that allows users to send a quick response to a customer. Use quick text to create greetings, answers to common questions, short notes, and more.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the User or Queue that owns the quick text record"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "A descriptive label for the quick text record"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            },
            "Message" : {
              "type" : "string",
              "description" : "The content of the quick text record"
            },
            "Category" : {
              "type" : "string",
              "description" : "A customizable picklist that can be used to group multiple related quick text records together"
            },
            "Channel" : {
              "type" : "string",
              "description" : "A multi-select picklist that can be used to specify where specific quick text messages are available, such as in Chat or in the Email publisher in Case Feed."
            },
            "IsInsertable" : {
              "type" : "boolean",
              "description" : "If true, the quick text is available in the channels selected in the Channel field. If false, the quick text is not available. The label in the UI is Include in selected channels. By default: This field is set to true on quick text records created from the Quick Text page or via the API. This field is set to false on quick text records created during the Einstein Reply Recommendations reply publishing process."
            },
            "SourceType" : {
              "type" : "string",
              "description" : "(Used with Einstein Reply Recommendations.) Indicates how the text was composed. This field is not available in the UI."
            }
          }
        } ]
      },
      "QuickTextChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Message" : {
              "type" : "string",
              "readOnly" : true
            },
            "Category" : {
              "type" : "string",
              "readOnly" : true
            },
            "Channel" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsInsertable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SourceType" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "QuickTextHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "QuickTextId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "QuickTextShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "QuickTextUsage" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the usage of quick text on a record, including which quick text was used, who used it, and how they used it.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the group or user that owns the quick text.",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the quick text.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "QuickTextId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Channel" : {
              "type" : "string",
              "description" : "The channel in which the quick text was used. Possible values are: Email Event Generic Internal Knowledge Live Agent Messaging Phone Portal Social Task",
              "readOnly" : true
            },
            "LaunchSource" : {
              "type" : "string",
              "description" : "How the user started the quick text. Possible values are: Floater Keyboard shortcut Macro Toolbar",
              "readOnly" : true
            },
            "LoggedTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The time when the quick text was used.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the user that used the quick text.",
              "readOnly" : true
            },
            "AppContext" : {
              "type" : "string",
              "description" : "Context in which the quick text was used. Possible values are: Aloha—Salesforce Classic Lightning—Lightning Experience Unknown",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "QuickTextUsageChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "QuickTextId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Channel" : {
              "type" : "string",
              "readOnly" : true
            },
            "LaunchSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoggedTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AppContext" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "QuickTextUsageShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "RecentlyViewed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents records or list views that the current user has recently viewed or referenced (by viewing a related record). List views are available in API version 29.0 and later.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "description" : "The ID of the recently viewed record or list view.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name on the recently viewed record or list view. If the recently viewed record is a user, contact, or lead, the value is a concatenation of the firstname and lastname field values.",
              "readOnly" : true
            },
            "LastName" : {
              "type" : "string",
              "description" : "The last name on the record.",
              "readOnly" : true
            },
            "FirstName" : {
              "type" : "string",
              "description" : "The first name on the record. If the recently viewed record is a user, the value is the user’s first name.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "The object type for this recently viewed record or list view. Valid values include any standard or custom objects that RecentlyViewed supports.",
              "readOnly" : true
            },
            "Alias" : {
              "type" : "string",
              "description" : "The alias on the record.",
              "readOnly" : true
            },
            "UserRoleId" : {
              "type" : "string",
              "description" : "The ID of the user role associated with this object.",
              "readOnly" : true
            },
            "RecordTypeId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the recently viewed record is an active user (true) or not (false). This field contains a value only if the recently viewed record is a user.",
              "readOnly" : true
            },
            "ProfileId" : {
              "type" : "string",
              "description" : "If the recently viewed record is a user, this value is the user’s profile ID.",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "description" : "If the recently viewed record is a user, this value is the title of the user; for example CFO or CEO.",
              "readOnly" : true
            },
            "Email" : {
              "type" : "string",
              "description" : "The email address on the record.",
              "readOnly" : true
            },
            "Phone" : {
              "type" : "string",
              "description" : "The phone number on the record.",
              "readOnly" : true
            },
            "NameOrAlias" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it."
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view."
            },
            "Language" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "Recommendation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the recommendations surfaced as offers and actions for Einstein Next Best Action.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name of the recommendation. Maximum size is 80 characters."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the recommendation was last viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the recommendation was last referenced.",
              "readOnly" : true
            },
            "ActionReference" : {
              "type" : "string",
              "description" : "Flow referenced for this recommendation. Label is Action."
            },
            "Description" : {
              "type" : "string",
              "description" : "Text description of the recommendation. Maximum size is 255 characters."
            },
            "ImageId" : {
              "type" : "string",
              "description" : "Image referenced by this recommendation. Label is Image."
            },
            "AcceptanceLabel" : {
              "type" : "string",
              "description" : "Label that appears as the accept option on the surfaced recommendation. Maximum size is 80 characters."
            },
            "RejectionLabel" : {
              "type" : "string",
              "description" : "Label that appears as the reject option on the surfaced recommendation. Maximum size is 80 characters."
            },
            "IsActionActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the flow referenced in the Action field is active (true) or not (false). Read only.",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string"
            },
            "RecommendationKey" : {
              "type" : "string"
            }
          }
        } ]
      },
      "RecommendationChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "ImageId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AcceptanceLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "RejectionLabel" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExternalId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecommendationKey" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "RecommendationResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OnBehalfOf" : {
              "type" : "string"
            },
            "OnBehalfOfType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OnBehalfOfName" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecommendationKey" : {
              "type" : "string"
            },
            "RecommendationType" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecommendationName" : {
              "type" : "string"
            },
            "ActionReference" : {
              "type" : "string"
            },
            "Response" : {
              "type" : "string"
            },
            "StrategyReference" : {
              "type" : "string"
            },
            "StrategyVersion" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContextRecord" : {
              "type" : "string"
            },
            "ContextRecordType" : {
              "type" : "string",
              "readOnly" : true
            },
            "ContextRecordName" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "RecordAction" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a relationship between a record and an action, such as a flow. Create a RecordAction for every action that you want to associate with a particular record.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RecordId" : {
              "type" : "string",
              "description" : "Required. Record associated with the action. In version 46.0 and above, we support most object types. To learn about supported objects, see the Lightning Flow for Service Developer’s Guide."
            },
            "FlowDefinition" : {
              "type" : "string",
              "description" : "Optional in Lightning Flow for Service implementations using version 42.0 or 43.0 of the API. An upgrade to Winter '19 or later, which uses API version 44.0 or later, copies FlowDefinition to ActionDefinition. For versions 42.0 and 43.0, this field is the API name of the flow that’s associated with the record."
            },
            "FlowInterviewId" : {
              "type" : "string",
              "description" : "Optional. The flow interview ID of the paused or completed flow. This field can’t be set in Process Builder."
            },
            "Order" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Required. The order of the action among all actions associated with this record."
            },
            "Status" : {
              "type" : "string",
              "description" : "Required. The current state of the action. Possible values are: New (default) Paused Complete Started Unlinked—The action was unlinked because the flow was paused and the current record for the flow interview changed. Paused and unlinked statuses do not apply to quick actions. This field can’t be set in Process Builder."
            },
            "Pinned" : {
              "type" : "string",
              "description" : "Required. Specifies whether the action is pinned to the top or bottom of the component. If an action is pinned, users see the Remove option in the UI unless IsUiRemoveHidden is set to true. Possible values are: None (default) Top Bottom"
            },
            "ActionType" : {
              "type" : "string",
              "description" : "Required in Lightning Flow for Service implementations that use version 46.0 or later of the API. The type of action. Possible values are: Flow (default) QuickAction For versions of the API prior to version 46.0, this field is set to Flow."
            },
            "ActionDefinition" : {
              "type" : "string",
              "description" : "Required in Lightning Flow for Service implementations that use version 44.0 or later of the API. The API name of the action to associate with the record; for example, the API name of a flow. Use this field rather than FlowDefinition. To distinguish a quick action from a flow with the same API name, we prepend \"QuickAction\" to the API name of every quick action."
            },
            "IsMandatory" : {
              "type" : "boolean",
              "description" : "Optional. Specifies whether the action is mandatory. The default value is false. At runtime, we show a reminder when the user closes a mandatory flow without completing it. We don't show the reminder for quick actions."
            },
            "IsUiRemoveHidden" : {
              "type" : "boolean",
              "description" : "Optional. Specifies whether the ability to remove the action is hidden in the UI. The default value is false. If true, the UI hides the ability to remove the action. However, actions can still be deleted using the API."
            }
          }
        } ]
      },
      "RecordActionHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the lifecycle of a RecordAction as it goes through different states.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ParentRecordId" : {
              "type" : "string",
              "description" : "Required. The parent record for the associated action.",
              "readOnly" : true
            },
            "ActionDefinitionApiName" : {
              "type" : "string",
              "description" : "Required. The API name of the action associated with the record. To distinguish a quick action from a flow with the same API name, we prepend \"QuickAction\" to the API name of every quick action.",
              "readOnly" : true
            },
            "ActionDefinitionLabel" : {
              "type" : "string",
              "description" : "Required. The label of the action that took place.",
              "readOnly" : true
            },
            "ActionType" : {
              "type" : "string",
              "description" : "Required. The type of action associated with the record. Possible values are: Flow (default) QuickAction",
              "readOnly" : true
            },
            "State" : {
              "type" : "string",
              "description" : "Required. The state of the action. A state change triggers the logging of a history event. Possible values are: New (default) Paused Complete Started Unlinked—The action was unlinked because the flow was paused and the current record for the flow interview changed.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "Required. The user that conducted the action.",
              "readOnly" : true
            },
            "RecordActionId" : {
              "type" : "string",
              "description" : "Required. The ID of the RecordAction.",
              "readOnly" : true
            },
            "LoggedTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Required. The timestamp when the state change occurred.",
              "readOnly" : true
            },
            "Pinned" : {
              "type" : "string",
              "description" : "Optional. Specifies whether the action is pinned to the top or bottom, or unpinned. Possible values are: None Top Bottom",
              "readOnly" : true
            },
            "IsMandatory" : {
              "type" : "boolean",
              "description" : "Optional. Specifies whether the action is mandatory. The default value is false.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "RecordType" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a record type.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Label of the record type in the user interface. Limit: 80 characters. Label is Record Type Label."
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "Required. The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization. Label is Record Type Name.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "A description of this record. Limit: 255 characters."
            },
            "BusinessProcessId" : {
              "type" : "string",
              "description" : "Required for Opportunity and Lead record types in API version 17.0 and later. ID of an associated BusinessProcess."
            },
            "SobjectType" : {
              "type" : "string",
              "description" : "Object to which this record type applies, including custom objects."
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether this record is active (true) or not (false). Only active record types can be applied to records. Label is Active."
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "RedirectWhitelistUrl" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a trusted URL that users can navigate to without being shown a warning message.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the custom help section in the API. This name can contain only underscores and alphanumeric characters and must be unique in your organization. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. The label corresponds to section title in the user interface. Limit: 80 characters.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "Language" : {
              "type" : "string",
              "description" : "Language of the label."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The label of the trusted URL."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Url" : {
              "type" : "string",
              "description" : "The trusted URL."
            }
          }
        } ]
      },
      "RelatedListColumnDefinition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelatedListDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FieldDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "readOnly" : true
            },
            "ColumnSoql" : {
              "type" : "string",
              "readOnly" : true
            },
            "Alias" : {
              "type" : "string",
              "readOnly" : true
            },
            "LookupId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDescribable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsDefault" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "RelatedListDefinition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "EntityDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentEntityDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelatedListId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelatedListName" : {
              "type" : "string",
              "readOnly" : true
            },
            "DefaultSort" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsLayoutable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsDescribable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsCustomizable" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "RelationshipDomain" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentSobjectId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChildSobjectId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FieldId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelationshipInfoId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelationshipName" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsCascadeDelete" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsDeprecatedAndHidden" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsRestrictedDelete" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "JunctionIdListNames" : {
              "type" : "object",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "RelationshipInfo" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChildSobjectId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FieldId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsCascadeDelete" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsDeprecatedAndHidden" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsRestrictedDelete" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "JunctionIdListNames" : {
              "type" : "object",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ReplyEmailSettings" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string"
            },
            "Language" : {
              "type" : "string"
            },
            "MasterLabel" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "DomainName" : {
              "type" : "string"
            },
            "FwdEmailAddress" : {
              "type" : "string"
            },
            "IsEmailForwardingEnabled" : {
              "type" : "boolean"
            },
            "IsAutoReplyEnabled" : {
              "type" : "boolean"
            },
            "AutoReplyMessage" : {
              "type" : "string"
            },
            "IsUnsubscribeManualRequestsEnabled" : {
              "type" : "boolean"
            },
            "UnsubscribeTerms" : {
              "type" : "string"
            },
            "IsDeleteAutoRepliesEnabled" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "Report" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a report, a set of data that meets certain criteria, displayed in an organized way. Access is read-only.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the folder that contains the report. There are 2 special folders: Private, where the ID is the user ID Public, where the ID is the org ID",
              "readOnly" : true
            },
            "FolderName" : {
              "type" : "string",
              "description" : "Name of the folder that contains the report. Available in API version 35.0 and later.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. The report label used in the user interface.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "The description of the report. Limit: 255 characters.",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "Required. The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization. Label is Report Unique Name.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastRunDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Returns the date the report was last run. Label is Last Run.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Format" : {
              "type" : "string",
              "description" : "Required. Indicates the format of the report. This field is available in API version 29.0 and later. Can have one of these values: Tabular for reports in that format. In the application, the label is Tabular. Summary for reports in that format. In the application, the label is Summary. Matrix for reports in that format. In the application, the label is Matrix. Multiblock for reports in joined format. In the application, the label is Joined.",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ReportAnomalyEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "Report" : {
              "type" : "string",
              "readOnly" : true
            },
            "SecurityEventData" : {
              "type" : "string",
              "readOnly" : true
            },
            "Summary" : {
              "type" : "string",
              "readOnly" : true
            },
            "Score" : {
              "type" : "number",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ReportAnomalyEventStore" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReportAnomalyEventNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "Report" : {
              "type" : "string",
              "readOnly" : true
            },
            "Score" : {
              "type" : "number",
              "readOnly" : true
            },
            "Summary" : {
              "type" : "string",
              "readOnly" : true
            },
            "SecurityEventData" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ReportAnomalyEventStoreFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ReportEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RowsProcessed" : {
              "type" : "number",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueriedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "DashboardId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DashboardName" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExecutionIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExportFileFormat" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsScheduled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "NumberOfColumns" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ColumnHeaders" : {
              "type" : "string",
              "readOnly" : true
            },
            "GroupedColumnHeaders" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "Format" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReportId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Records" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Scope" : {
              "type" : "string",
              "readOnly" : true
            },
            "Sequence" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DisplayedFieldEntities" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ReportEventStream" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RowsProcessed" : {
              "type" : "number",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueriedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "DashboardId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DashboardName" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventSource" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExecutionIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "ExportFileFormat" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsScheduled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "NumberOfColumns" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "ColumnHeaders" : {
              "type" : "string",
              "readOnly" : true
            },
            "GroupedColumnHeaders" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "Format" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReportId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Records" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Scope" : {
              "type" : "string",
              "readOnly" : true
            },
            "Sequence" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "DisplayedFieldEntities" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ReportFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "RestApiError" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "SObject" : {
        "discriminator" : {
          "propertyName" : "apiSObjectType"
        },
        "properties" : {
          "Id" : {
            "type" : "string",
            "readOnly" : true
          },
          "apiSObjectType" : {
            "type" : "string",
            "description" : "The type of the current sObject, used as a discriminator for OAS tooling."
          },
          "attributes" : {
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string"
              },
              "url" : {
                "type" : "string"
              }
            },
            "readOnly" : true
          }
        }
      },
      "SObjectRootInfo" : {
        "type" : "object",
        "properties" : {
          "objectDescribe" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string"
              },
              "label" : {
                "type" : "string"
              },
              "labelPlural" : {
                "type" : "string"
              },
              "keyPrefix" : {
                "type" : "string"
              },
              "custom" : {
                "type" : "boolean"
              },
              "customSetting" : {
                "type" : "boolean"
              },
              "activateable" : {
                "type" : "boolean"
              },
              "createable" : {
                "type" : "boolean"
              },
              "updateable" : {
                "type" : "boolean"
              },
              "deletable" : {
                "type" : "boolean"
              },
              "undeletable" : {
                "type" : "boolean"
              },
              "mergeable" : {
                "type" : "boolean"
              },
              "replicateable" : {
                "type" : "boolean"
              },
              "triggerable" : {
                "type" : "boolean"
              },
              "queryable" : {
                "type" : "boolean"
              },
              "retrieveable" : {
                "type" : "boolean"
              },
              "searchable" : {
                "type" : "boolean"
              },
              "layoutable" : {
                "type" : "boolean"
              },
              "feedEnabled" : {
                "type" : "boolean"
              },
              "mruEnabled" : {
                "type" : "boolean"
              },
              "hasSubtypes" : {
                "type" : "boolean"
              },
              "isSubtype" : {
                "type" : "boolean"
              },
              "dataTranslationEnabled" : {
                "type" : "boolean"
              },
              "isInterface" : {
                "type" : "boolean"
              },
              "deepCloneable" : {
                "type" : "boolean"
              },
              "associateEntityType" : {
                "type" : "string"
              },
              "associateParentEntity" : {
                "type" : "string"
              },
              "urls" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                }
              },
              "deprecatedAndHidden" : {
                "type" : "boolean"
              }
            }
          },
          "recentItems" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      },
      "SObjectType" : {
        "type" : "string",
        "enum" : [ "AcceptedEventRelation", "Account", "AccountChangeEvent", "AccountContactRole", "AccountContactRoleChangeEvent", "AccountFeed", "AccountHistory", "AccountPartner", "AccountShare", "ActionLinkGroupTemplate", "ActionLinkTemplate", "ActiveFeatureLicenseMetric", "ActivePermSetLicenseMetric", "ActiveProfileMetric", "ActivityFieldHistory", "ActivityHistory", "AdditionalNumber", "AggregateResult", "AnalyticsTaskStatusEvent", "AnalyticsUserAttrFuncTkn", "AnalyticsUserAttrFuncTknShare", "Announcement", "ApexClass", "ApexComponent", "ApexEmailNotification", "ApexLog", "ApexPage", "ApexPageInfo", "ApexTestQueueItem", "ApexTestResult", "ApexTestResultLimits", "ApexTestRunResult", "ApexTestSuite", "ApexTrigger", "ApexTypeImplementor", "ApiAnomalyEvent", "ApiAnomalyEventStore", "ApiAnomalyEventStoreFeed", "ApiEvent", "ApiEventStream", "AppAnalyticsQueryRequest", "AppDefinition", "AppMenuItem", "AppTabMember", "Approval", "ApprovalSubmission", "ApprovalSubmissionDetail", "ApprovalSubmissionShare", "ApprovalWorkItem", "Asset", "AssetChangeEvent", "AssetFeed", "AssetHistory", "AssetRelationship", "AssetRelationshipChangeEvent", "AssetRelationshipFeed", "AssetRelationshipHistory", "AssetTokenEvent", "AssignmentRule", "AsyncApexJob", "AsyncOperationEvent", "AsyncOperationStatus", "AttachedContentDocument", "Attachment", "AuraDefinition", "AuraDefinitionBundle", "AuraDefinitionBundleInfo", "AuraDefinitionInfo", "AuthConfig", "AuthConfigProviders", "AuthProvParamFwdAllowlist", "AuthProvider", "AuthSession", "AuthorizationForm", "AuthorizationFormChangeEvent", "AuthorizationFormConsent", "AuthorizationFormConsentChangeEvent", "AuthorizationFormConsentHistory", "AuthorizationFormConsentShare", "AuthorizationFormDataUse", "AuthorizationFormDataUseChangeEvent", "AuthorizationFormDataUseHistory", "AuthorizationFormDataUseShare", "AuthorizationFormHistory", "AuthorizationFormShare", "AuthorizationFormText", "AuthorizationFormTextChangeEvent", "AuthorizationFormTextFeed", "AuthorizationFormTextHistory", "BackgroundOperation", "BatchApexErrorEvent", "BrandTemplate", "BrandingSet", "BrandingSetProperty", "BriefcaseAssignment", "BriefcaseAssignmentChangeEvent", "BriefcaseDefinition", "BriefcaseDefinitionChangeEvent", "BriefcaseRule", "BriefcaseRuleFilter", "BrowserPolicyViolation", "BulkApiResultEvent", "BulkApiResultEventStore", "BusinessBrand", "BusinessBrandChangeEvent", "BusinessBrandShare", "BusinessHours", "BusinessProcess", "Calendar", "CalendarView", "CalendarViewChangeEvent", "CalendarViewShare", "CallCenter", "CallCoachingMediaProvider", "Campaign", "CampaignChangeEvent", "CampaignFeed", "CampaignHistory", "CampaignMember", "CampaignMemberChangeEvent", "CampaignMemberStatus", "CampaignMemberStatusChangeEvent", "CampaignShare", "Case", "CaseChangeEvent", "CaseComment", "CaseContactRole", "CaseFeed", "CaseHistory", "CaseHistory2", "CaseHistory2ChangeEvent", "CaseShare", "CaseSolution", "CaseStatus", "CaseTeamMember", "CaseTeamRole", "CaseTeamTemplate", "CaseTeamTemplateMember", "CaseTeamTemplateRecord", "CategoryData", "CategoryNode", "ChatRetirementRdyMetrics", "ChatterActivity", "ChatterExtension", "ChatterExtensionConfig", "ClientBrowser", "CollaborationGroup", "CollaborationGroupFeed", "CollaborationGroupMember", "CollaborationGroupMemberRequest", "CollaborationGroupRecord", "CollaborationGroupRecordChangeEvent", "CollaborationInvitation", "ColorDefinition", "CombinedAttachment", "CommSubscription", "CommSubscriptionChangeEvent", "CommSubscriptionChannelType", "CommSubscriptionChannelTypeChangeEvent", "CommSubscriptionChannelTypeFeed", "CommSubscriptionChannelTypeHistory", "CommSubscriptionChannelTypeShare", "CommSubscriptionFeed", "CommSubscriptionHistory", "CommSubscriptionShare", "Community", "ConcurLongRunApexErrEvent", "ConferenceNumber", "ConferenceNumberChangeEvent", "ConnectedApplication", "ConsumptionRate", "ConsumptionRateHistory", "ConsumptionSchedule", "ConsumptionScheduleFeed", "ConsumptionScheduleHistory", "ConsumptionScheduleShare", "Contact", "ContactChangeEvent", "ContactFeed", "ContactHistory", "ContactPointTypeConsent", "ContactPointTypeConsentChangeEvent", "ContactPointTypeConsentHistory", "ContactPointTypeConsentShare", "ContactRequest", "ContactRequestShare", "ContactShare", "ContentAsset", "ContentBody", "ContentDistribution", "ContentDistributionView", "ContentDocument", "ContentDocumentChangeEvent", "ContentDocumentFeed", "ContentDocumentHistory", "ContentDocumentLink", "ContentDocumentLinkChangeEvent", "ContentDocumentSubscription", "ContentFolder", "ContentFolderChangeEvent", "ContentFolderItem", "ContentFolderLink", "ContentFolderMember", "ContentNotification", "ContentTagSubscription", "ContentUserSubscription", "ContentVersion", "ContentVersionChangeEvent", "ContentVersionComment", "ContentVersionHistory", "ContentVersionRating", "ContentWorkspace", "ContentWorkspaceDoc", "ContentWorkspaceMember", "ContentWorkspacePermission", "ContentWorkspaceSubscription", "Contract", "ContractChangeEvent", "ContractContactRole", "ContractFeed", "ContractHistory", "ContractStatus", "CorsWhitelistEntry", "CredentialStuffingEvent", "CredentialStuffingEventStore", "CredentialStuffingEventStoreFeed", "CronJobDetail", "CronTrigger", "CspTrustedSite", "CustomBrand", "CustomBrandAsset", "CustomHelpMenuItem", "CustomHelpMenuSection", "CustomHttpHeader", "CustomNotificationType", "CustomPermission", "CustomPermissionDependency", "Customer", "CustomerShare", "Dashboard", "DashboardComponent", "DashboardComponentFeed", "DashboardFeed", "DataAssessmentFieldMetric", "DataAssessmentMetric", "DataAssessmentValueMetric", "DataObjectDataChgEvent", "DataStatistics", "DataType", "DataUseLegalBasis", "DataUseLegalBasisChangeEvent", "DataUseLegalBasisHistory", "DataUseLegalBasisShare", "DataUsePurpose", "DataUsePurposeChangeEvent", "DataUsePurposeHistory", "DataUsePurposeShare", "DataWeaveResource", "DatacloudAddress", "DeclinedEventRelation", "DeleteEvent", "Document", "DocumentAttachmentMap", "Domain", "DomainSite", "DuplicateRecordItem", "DuplicateRecordSet", "DuplicateRule", "EmailBounceEvent", "EmailCapture", "EmailDomainFilter", "EmailDomainKey", "EmailMessage", "EmailMessageChangeEvent", "EmailMessageRelation", "EmailRelay", "EmailServicesAddress", "EmailServicesFunction", "EmailStatus", "EmailTemplate", "EmailTemplateChangeEvent", "EmbeddedServiceDetail", "EmbeddedServiceLabel", "EngagementChannelType", "EngagementChannelTypeChangeEvent", "EngagementChannelTypeFeed", "EngagementChannelTypeHistory", "EngagementChannelTypeShare", "EngmtChannelTypeSettings", "EntityDefinition", "EntityParticle", "EntitySubscription", "Event", "EventBusSubscriber", "EventChangeEvent", "EventFeed", "EventLogFile", "EventRelation", "EventRelationChangeEvent", "EventRelayConfig", "EventRelayConfigChangeEvent", "EventRelayFeedback", "EvfPipelineSubTaskDetails", "ExpressionFilter", "ExpressionFilterCriteria", "ExpressionSetView", "ExternalClientApplication", "ExternalDataSource", "ExternalDataSrcDescriptor", "ExternalDataUserAuth", "ExternalEvent", "ExternalEventChangeEvent", "ExternalEventMapping", "ExternalEventMappingShare", "ExtlClntAppOauthConsumer", "ExtlClntAppOauthIpRange", "ExtlClntAppOauthPlcyAttr", "ExtlClntAppOauthPlcyCnfg", "ExtlClntAppOauthPlcyCustmScp", "ExtlClntAppOauthSetAttr", "ExtlClntAppOauthSetCustmScp", "ExtlClntAppOauthSettings", "ExtlClntAppPlcyCnfg", "ExtlClntAppSamplePlcyCnfg", "ExtlClntAppSampleSettings", "FeedAttachment", "FeedComment", "FeedItem", "FeedLike", "FeedPollChoice", "FeedPollVote", "FeedRevision", "FeedSignal", "FeedTrackedChange", "FieldDefinition", "FieldPermissions", "FieldSecurityClassification", "FileEvent", "FileEventStore", "FileSearchActivity", "FiscalYearSettings", "FlexQueueItem", "FlowDefinitionView", "FlowExecutionErrorEvent", "FlowInterview", "FlowInterviewLog", "FlowInterviewLogEntry", "FlowInterviewLogShare", "FlowInterviewShare", "FlowOrchestration", "FlowOrchestrationChangeEvent", "FlowOrchestrationEvent", "FlowOrchestrationInstance", "FlowOrchestrationInstanceShare", "FlowOrchestrationLog", "FlowOrchestrationStageInstance", "FlowOrchestrationStageInstanceShare", "FlowOrchestrationStepInstance", "FlowOrchestrationStepInstanceShare", "FlowOrchestrationVersion", "FlowOrchestrationVersionChangeEvent", "FlowOrchestrationWorkItem", "FlowOrchestrationWorkItemShare", "FlowRecord", "FlowRecordChangeEvent", "FlowRecordElement", "FlowRecordElementChangeEvent", "FlowRecordRelation", "FlowRecordShare", "FlowRecordVersion", "FlowRecordVersionChangeEvent", "FlowRecordVersionOccurrence", "FlowStageRelation", "FlowTestResult", "FlowTestResultShare", "FlowTestView", "FlowVariableView", "FlowVersionView", "Folder", "FolderedContentDocument", "FormulaFunction", "FormulaFunctionAllowedType", "FormulaFunctionCategory", "GrantedByLicense", "Group", "GroupMember", "GuestUserAnomalyEvent", "GuestUserAnomalyEventStore", "GuestUserAnomalyEventStoreFeed", "Holiday", "IPAddressRange", "IconDefinition", "Idea", "IdeaComment", "IdentityProviderEventStore", "IdentityVerificationEvent", "IdpEventLog", "IframeWhiteListUrl", "Image", "ImageFeed", "ImageHistory", "ImageShare", "Individual", "IndividualChangeEvent", "IndividualHistory", "IndividualShare", "InstalledMobileApp", "Invoice__ChangeEvent", "Invoice__Feed", "Invoice__Share", "Invoice__c", "KnowledgeableUser", "Lead", "LeadChangeEvent", "LeadFeed", "LeadHistory", "LeadShare", "LeadStatus", "LightningExitByPageMetrics", "LightningExperienceTheme", "LightningOnboardingConfig", "LightningToggleMetrics", "LightningUriEvent", "LightningUriEventStream", "LightningUsageByAppTypeMetrics", "LightningUsageByBrowserMetrics", "LightningUsageByFlexiPageMetrics", "LightningUsageByPageMetrics", "Line_Item__ChangeEvent", "Line_Item__c", "ListEmail", "ListEmailChangeEvent", "ListEmailIndividualRecipient", "ListEmailRecipientSource", "ListEmailShare", "ListView", "ListViewChart", "ListViewChartInstance", "ListViewEvent", "ListViewEventStream", "LoginAsEvent", "LoginAsEventStream", "LoginEvent", "LoginEventStream", "LoginGeo", "LoginHistory", "LoginIp", "LogoutEvent", "LogoutEventStream", "LookedUpFromActivity", "MLEngagementEvent", "Macro", "MacroChangeEvent", "MacroHistory", "MacroInstruction", "MacroInstructionChangeEvent", "MacroShare", "MacroUsage", "MacroUsageShare", "MailmergeTemplate", "ManagedContent", "ManagedContentChangeEvent", "ManagedContentChannel", "ManagedContentSpace", "ManagedContentVariant", "ManagedContentVariantChangeEvent", "MatchingInformation", "MatchingRule", "MatchingRuleItem", "Merchandise__ChangeEvent", "Merchandise__Feed", "Merchandise__Share", "Merchandise__c", "MlFeatureValueMetric", "MobileApplicationDetail", "MutingPermissionSet", "MyDomainDiscoverableLogin", "Name", "NamedCredential", "Note", "NoteAndAttachment", "OauthCustomScope", "OauthCustomScopeApp", "OauthToken", "OauthTokenExchHandlerApp", "OauthTokenExchangeHandler", "ObjectPermissions", "OnboardingMetrics", "OpenActivity", "Opportunity", "OpportunityChangeEvent", "OpportunityCompetitor", "OpportunityContactRole", "OpportunityContactRoleChangeEvent", "OpportunityFeed", "OpportunityFieldHistory", "OpportunityHistory", "OpportunityLineItem", "OpportunityLineItemChangeEvent", "OpportunityPartner", "OpportunityRelatedDeleteLog", "OpportunityShare", "OpportunityStage", "OrgDeleteRequest", "OrgDeleteRequestShare", "OrgEmailAddressSecurity", "OrgLifecycleNotification", "OrgMetric", "OrgMetricScanResult", "OrgMetricScanSummary", "OrgWideEmailAddress", "Organization", "OutgoingEmail", "OutgoingEmailRelation", "OwnedContentDocument", "OwnerChangeOptionInfo", "PackageLicense", "Partner", "PartnerRole", "PartyConsent", "PartyConsentChangeEvent", "PartyConsentFeed", "PartyConsentHistory", "PartyConsentShare", "Period", "PermissionSet", "PermissionSetAssignment", "PermissionSetEvent", "PermissionSetEventStore", "PermissionSetGroup", "PermissionSetGroupComponent", "PermissionSetLicense", "PermissionSetLicenseAssign", "PermissionSetTabSetting", "PicklistValueInfo", "PlatformAction", "PlatformCachePartition", "PlatformCachePartitionType", "PlatformEventUsageMetric", "PlatformStatusAlertEvent", "Pricebook2", "Pricebook2ChangeEvent", "Pricebook2History", "PricebookEntry", "PricebookEntryChangeEvent", "PricebookEntryHistory", "ProcessDefinition", "ProcessFlowMigration", "ProcessInstance", "ProcessInstanceChangeEvent", "ProcessInstanceHistory", "ProcessInstanceNode", "ProcessInstanceStep", "ProcessInstanceStepChangeEvent", "ProcessInstanceWorkitem", "ProcessNode", "Product2", "Product2ChangeEvent", "Product2Feed", "Product2History", "ProductConsumptionSchedule", "Profile", "Prompt", "PromptAction", "PromptActionShare", "PromptError", "PromptErrorShare", "PromptVersion", "Publisher", "PushTopic", "QueueSobject", "QuickText", "QuickTextChangeEvent", "QuickTextHistory", "QuickTextShare", "QuickTextUsage", "QuickTextUsageChangeEvent", "QuickTextUsageShare", "RecentlyViewed", "Recommendation", "RecommendationChangeEvent", "RecommendationResponse", "RecordAction", "RecordActionHistory", "RecordType", "RedirectWhitelistUrl", "RelatedListColumnDefinition", "RelatedListDefinition", "RelationshipDomain", "RelationshipInfo", "ReplyEmailSettings", "Report", "ReportAnomalyEvent", "ReportAnomalyEventStore", "ReportAnomalyEventStoreFeed", "ReportEvent", "ReportEventStream", "ReportFeed", "SamlSsoConfig", "Scontrol", "Scorecard", "ScorecardAssociation", "ScorecardMetric", "ScorecardShare", "SearchLayout", "SearchPromotionRule", "SecurityCustomBaseline", "Seller", "SellerHistory", "SellerShare", "ServiceSetupProvisioning", "SessionHijackingEvent", "SessionHijackingEventStore", "SessionHijackingEventStoreFeed", "SessionPermSetActivation", "SetupAssistantStep", "SetupAuditTrail", "SetupEntityAccess", "Site", "SiteDetail", "SiteFeed", "SiteHistory", "SiteIframeWhiteListUrl", "SiteRedirectMapping", "Solution", "SolutionFeed", "SolutionHistory", "SolutionStatus", "Stamp", "StampAssignment", "StaticResource", "StreamingChannel", "StreamingChannelShare", "TabDefinition", "TableauHostMapping", "TableauHostMappingShare", "Task", "TaskChangeEvent", "TaskFeed", "TaskPriority", "TaskStatus", "TenantSecret", "TenantUsageEntitlement", "TestSuiteMembership", "ThirdPartyAccountLink", "ThreatDetectionFeedback", "ThreatDetectionFeedbackFeed", "TodayGoal", "TodayGoalChangeEvent", "TodayGoalShare", "Topic", "TopicAssignment", "TopicFeed", "TopicUserEvent", "TransactionSecurityPolicy", "Translation", "UiFormulaCriterion", "UiFormulaRule", "UndecidedEventRelation", "UriEvent", "UriEventStream", "User", "UserAppInfo", "UserAppInfoChangeEvent", "UserAppMenuCustomization", "UserAppMenuCustomizationShare", "UserAppMenuItem", "UserChangeEvent", "UserEmailPreferredPerson", "UserEmailPreferredPersonChangeEvent", "UserEmailPreferredPersonShare", "UserEntityAccess", "UserFeed", "UserFieldAccess", "UserLicense", "UserListView", "UserListViewCriterion", "UserLocalWebServerIdentity", "UserLocalWebServerIdentityShare", "UserLogin", "UserPackageLicense", "UserPermissionAccess", "UserPreference", "UserProvAccount", "UserProvAccountStaging", "UserProvMockTarget", "UserProvisioningConfig", "UserProvisioningLog", "UserProvisioningRequest", "UserProvisioningRequestShare", "UserRecordAccess", "UserRole", "UserSetupEntityAccess", "UserShare", "UserSharedFeature", "VerificationHistory", "VisualforceAccessMetrics", "Vote", "WebLink" ]
      },
      "SamlSsoConfig" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a SAML Single Sign-On configuration.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package, and the changes are reflected in a subscriber’s organization.",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "description" : "The language for the organization.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The text that’s used to identify the Visualforce page in the Setup area of Salesforce.",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Version" : {
              "type" : "string",
              "description" : "The SAML version. Valid values are: SAML1_1 SAML2_2",
              "readOnly" : true
            },
            "Issuer" : {
              "type" : "string",
              "description" : "Also called the “Entity ID.” The value is a URL that uniquely identifies the SAML identity provider.",
              "readOnly" : true
            },
            "OptionsSpInitBinding" : {
              "type" : "boolean",
              "description" : "The service provider initiated request binding, either HTTP Redirect (true) or HTTP POST (false).",
              "readOnly" : true
            },
            "OptionsUserProvisioning" : {
              "type" : "boolean",
              "description" : "If true, Just-in-Time user provisioning is enabled, which creates users on the fly the first time that they try to log in. Specify Federation ID for the identityMapping value to use this feature.",
              "readOnly" : true
            },
            "OptionsUseConfigRequestMethod" : {
              "type" : "boolean",
              "description" : "If true, applies the selected Request Signature Method (RSM) during single logout. If false, the default RSM (RSA-SHA1) is applied.",
              "readOnly" : true
            },
            "OptionsUseSameDigestAlgoForSigning" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsRequireMfaSaml" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "AttributeFormat" : {
              "type" : "string",
              "description" : "For SAML 2.0 only and when identityLocation is set to Attribute. Possible values include unspecified, emailAddress, or persistent. All legal values can be found in the “Name Identifier Format Identifiers” section of the Assertions and Protocols SAML 2.0 specification.",
              "readOnly" : true
            },
            "AttributeName" : {
              "type" : "string",
              "description" : "The name of the identity provider’s application. Get this name value from your identity provider.",
              "readOnly" : true
            },
            "Audience" : {
              "type" : "string",
              "description" : "The Issuer, also called the “Entity ID.” The value is a URL that uniquely identifies the SAML identity provider.",
              "readOnly" : true
            },
            "IdentityMapping" : {
              "type" : "string",
              "description" : "The identifier that the service provider uses for the user during Just-in-Time user provisioning. Valid values are: Username—The user’s Salesforce username. FederationId—The federation ID from the user object; the identifier that’s used by the service provider for the user. UserId—The user ID from the user’s Salesforce organization.",
              "readOnly" : true
            },
            "IdentityLocation" : {
              "type" : "string",
              "description" : "The location in the assertion where a user is identified. Valid values are: SubjectNameId—The identity is in the <Subject> statement of the assertion. Attribute—The identity is specified in an <AttributeValue>, located in the <Attribute> of the assertion.",
              "readOnly" : true
            },
            "SamlJitHandlerId" : {
              "type" : "string",
              "description" : "The name of an existing Apex class that implements the Auth.SamlJitHandler interface.",
              "readOnly" : true
            },
            "ExecutionUserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginUrl" : {
              "type" : "string",
              "description" : "For SAML 2.0 only: The URL where Salesforce sends a SAML request to start the login sequence.",
              "readOnly" : true
            },
            "LogoutUrl" : {
              "type" : "string",
              "description" : "For SAML 2.0 only: The URL to direct users to where they click the Logout link. The default is http://www.salesforce.com.",
              "readOnly" : true
            },
            "ErrorUrl" : {
              "type" : "string",
              "description" : "When there's an error during login, specify the URL of the page where users are directed. It must be publicly accessible, such as a public site Visualforce page. The URL can be absolute or relative.",
              "readOnly" : true
            },
            "ValidationCert" : {
              "type" : "string",
              "description" : "The certificate that’s used to validate the request. Get this certificate value from your identity provider.",
              "readOnly" : true
            },
            "SignedCertId" : {
              "type" : "string",
              "readOnly" : true
            },
            "DecryptionCertificateId" : {
              "type" : "string",
              "readOnly" : true
            },
            "RequestSignatureMethod" : {
              "type" : "string",
              "description" : "The method that’s used to sign the SAML request. Valid values are: RSA-SHA1 RSA-SHA256",
              "readOnly" : true
            },
            "SingleLogoutUrl" : {
              "type" : "string",
              "description" : "The SAML single logout endpoint. This URL is the endpoint where Salesforce sends LogoutRequests (when Salesforce initiates a logout), or LogoutResponses (when the identity provider initiates a logout).",
              "readOnly" : true
            },
            "SingleLogoutBinding" : {
              "type" : "string",
              "description" : "Determines where to put the LogoutRequest or LogoutResponse in the SAML request during single logout (SLO). The value is base64 encoded. Valid values are: RedirectBinding — Sent in the query string, deflated. PostBinding — Sent in the POST body, not deflated.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SaveResult" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "string"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "message" : {
                  "type" : "string"
                },
                "fields" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "statusCode" : {
                  "type" : "string"
                },
                "extendedErrorDetails" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "extendedErrorCode" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "message" : {
                  "type" : "string"
                },
                "statusCode" : {
                  "type" : "string"
                },
                "extendedDetails" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "extendedErrorCode" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "infos" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "message" : {
                  "type" : "string"
                },
                "statusCode" : {
                  "type" : "string"
                },
                "extendedDetails" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "extendedErrorCode" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Scontrol" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "A custom s-control, which is custom content that is hosted by the system but executed by the client application.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of this custom s-control. Label is Label."
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization. Label is S-Control Name.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the custom s-control."
            },
            "EncodingKey" : {
              "type" : "string",
              "description" : "Picklist of character set encodings, including ISO-08859-1, UTF-8, EUC, JIS, Shift-JIS, Korean (ks_c_5601-1987), Simplified Chinese (GB2312), and Traditional Chinese (Big5)."
            },
            "HtmlWrapper" : {
              "type" : "string",
              "description" : "Required. HTML page that will be delivered when the user views this custom s-control. This HTML page can be the entire content of the custom s-control, or it can reference the binary. Limit: 1,048,576 characters. Label is HTML Body."
            },
            "Filename" : {
              "type" : "string",
              "description" : "An uploaded object to display when the custom s-control is added to a custom link. Can be a Java applet, an ActiveX control, or any other type of desired content."
            },
            "BodyLength" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The length of the custom s-control. Label is Binary Length.",
              "readOnly" : true
            },
            "Binary" : {
              "type" : "object",
              "description" : "Binary content of this custom s-control, such as an ActiveX control or a Java archive. Can be specified when created, but not when updated. Limit: 5 MB."
            },
            "ContentSource" : {
              "type" : "string",
              "description" : "Specifies the source of the s-control content, either custom HTML, a snippet (s-controls that are included in other s-controls), or a URL."
            },
            "SupportsCaching" : {
              "type" : "boolean",
              "description" : "Indicates whether the s-control supports caching (true) or not (false)."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "Scorecard" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string"
            },
            "TargetEntity" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ScorecardAssociation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ScorecardId" : {
              "type" : "string"
            },
            "TargetEntityId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ScorecardMetric" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ScorecardId" : {
              "type" : "string"
            },
            "Description" : {
              "type" : "string"
            },
            "Category" : {
              "type" : "string"
            },
            "ReportId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ScorecardShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "SearchLayout" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "readOnly" : true
            },
            "LayoutType" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "EntityDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FieldsDisplayed" : {
              "type" : "object",
              "readOnly" : true
            },
            "ButtonsDisplayed" : {
              "type" : "object",
              "readOnly" : true
            },
            "Profile" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProfileName" : {
              "type" : "string",
              "readOnly" : true
            },
            "ListLayout" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SearchPromotionRule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a promoted search term, which is one or more keywords that you associate with a Salesforce Knowledge article. When a user’s search query includes these keywords, the associated article is returned first in search results.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Query" : {
              "type" : "string",
              "description" : "The text of the promoted search term. Maximum length: 100 characters. You can associate the same promoted search term with multiple articles. If the user’s search matches the promoted term, all associated articles are promoted in search results, ordered by relevancy. For best results, create promoted search terms selectively and limit the number of articles that are promoted per term."
            }
          }
        } ]
      },
      "SecurityCustomBaseline" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Provides the ability to read, create, and delete user-defined custom security baselines, which define an org’s security standards.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores.When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "Language" : {
              "type" : "string",
              "description" : "The language of the presence status."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Label for the category node."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "description" : "The namespace prefix associated with the package.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Baseline" : {
              "type" : "string",
              "description" : "The definition of an org’s security settings standards."
            },
            "IsDefault" : {
              "type" : "boolean",
              "description" : "Sets the baseline as the default in Security Health Check."
            }
          }
        } ]
      },
      "Seller" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PartyId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "SellerHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SellerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SellerShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "ServiceSetupProvisioning" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "JobName" : {
              "type" : "string",
              "readOnly" : true
            },
            "TaskName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "TaskContext" : {
              "type" : "string",
              "readOnly" : true
            },
            "AttemptOrdinal" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "TaskAction" : {
              "type" : "string",
              "readOnly" : true
            },
            "TaskActionContext" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SessionHijackingEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "Score" : {
              "type" : "number",
              "readOnly" : true
            },
            "Summary" : {
              "type" : "string",
              "readOnly" : true
            },
            "CurrentIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "CurrentPlatform" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousPlatform" : {
              "type" : "string",
              "readOnly" : true
            },
            "CurrentScreen" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousScreen" : {
              "type" : "string",
              "readOnly" : true
            },
            "CurrentUserAgent" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousUserAgent" : {
              "type" : "string",
              "readOnly" : true
            },
            "CurrentWindow" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousWindow" : {
              "type" : "string",
              "readOnly" : true
            },
            "SecurityEventData" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SessionHijackingEventStore" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionHijackingEventNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyId" : {
              "type" : "string",
              "readOnly" : true
            },
            "PolicyOutcome" : {
              "type" : "string",
              "readOnly" : true
            },
            "EvaluationTime" : {
              "type" : "number",
              "readOnly" : true
            },
            "Score" : {
              "type" : "number",
              "readOnly" : true
            },
            "CurrentIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "CurrentPlatform" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousPlatform" : {
              "type" : "string",
              "readOnly" : true
            },
            "CurrentScreen" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousScreen" : {
              "type" : "string",
              "readOnly" : true
            },
            "CurrentWindow" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousWindow" : {
              "type" : "string",
              "readOnly" : true
            },
            "CurrentUserAgent" : {
              "type" : "string",
              "readOnly" : true
            },
            "PreviousUserAgent" : {
              "type" : "string",
              "readOnly" : true
            },
            "SecurityEventData" : {
              "type" : "string",
              "readOnly" : true
            },
            "Summary" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SessionHijackingEventStoreFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SessionPermSetActivation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "The SessionPermSetActivation object represents a permission set assignment activated during an individual user session. When a SessionPermSetActivation object is inserted into a permission set, an activation event fires, allowing the permission settings to apply to the user’s specific session.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AuthSessionId" : {
              "type" : "string",
              "description" : "The session ID related to this permission set assignment for its duration.",
              "readOnly" : true
            },
            "PermissionSetId" : {
              "type" : "string",
              "description" : "The permission set ID related to this permission set assignment and user for its duration.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "The user ID of the user to whom this permission set assignment applies for its duration.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "The session details, such as device used and browser.",
              "readOnly" : true
            },
            "PermissionSetGroupId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SetupAssistantStep" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AssistantType" : {
              "type" : "string"
            },
            "IsComplete" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "SetupAuditTrail" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents changes you or other admins made in your org’s Setup area for at least the last 180 days.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Action" : {
              "type" : "string",
              "description" : "The category of the change made in Setup. For example, a value of PermSetCreate indicates that an administrator created a permission set. The Display field contains more specific information.",
              "readOnly" : true
            },
            "Section" : {
              "type" : "string",
              "description" : "The section in the Setup menu where the action occurred. For example, Manage Users or Company Profile.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Display" : {
              "type" : "string",
              "description" : "The full description of changes made in Setup. For example, if the Action field has a value of PermSetCreate, the Display field has a value like “Created permission set MAD: with user license Salesforce.”",
              "readOnly" : true
            },
            "DelegateUser" : {
              "type" : "string",
              "description" : "The Login-As user who executed the action in Setup. If a Login-As user didn’t perform the action, this field is blank. This field is available in API version 35.0 and later.",
              "readOnly" : true
            },
            "ResponsibleNamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedByContext" : {
              "type" : "string",
              "description" : "The context under which the Setup change was made. For example, if Einstein uses cloud-to-cloud services to make a change in Setup, the value of this field is Einstein. This field is available in API version 48.0 and later.",
              "readOnly" : true
            },
            "CreatedByIssuer" : {
              "type" : "string",
              "description" : "Reserved for future use.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SetupEntityAccess" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the enabled setup entity access settings (such as for Apex classes) for the parent PermissionSet.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The ID of the entity’s parent PermissionSet."
            },
            "SetupEntityId" : {
              "type" : "string",
              "description" : "The ID of the entity for which access is enabled, such as an Apex class or Visualforce page."
            },
            "SetupEntityType" : {
              "type" : "string",
              "description" : "The type of setup entity for which access is enabled. Valid values are: ApexClass for Apex classes ApexPage for Visualforce pages In API version 28.0 and later, ConnectedApplication for OAuth connected apps In API version 31.0 and later, CustomPermission for custom permissions In API version 28.0 and later, ServiceProvider for service providers In API version 28.0 and later, TabSet for apps In API version 48.0 and later, CustomEntityDefinition for Custom Settings and Custom Metadata Types",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "Site" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a public website that is integrated with an org.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The name used when referencing the site in the API.",
              "readOnly" : true
            },
            "Subdomain" : {
              "type" : "string",
              "description" : "The Salesforce domain that you registered for your site. For example, if your domain is SitesSubdomainName.secure.force.com, then SitesSubdomainName is the subdomain.",
              "readOnly" : true
            },
            "UrlPathPrefix" : {
              "type" : "string",
              "description" : "The unique Salesforce URL that the public uses to access this site.",
              "readOnly" : true
            },
            "GuestUserId" : {
              "type" : "string",
              "description" : "The site or Experience Cloud sites specific user that anonymous, unauthenticated users run as when interacting with the site.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "The status for the site. For example, Active or In Maintenance.",
              "readOnly" : true
            },
            "AdminId" : {
              "type" : "string",
              "description" : "The site administrator designated as the contact for the site. This user receives site-related communications from site visitors and from Salesforce.",
              "readOnly" : true
            },
            "OptionsEnableFeeds" : {
              "type" : "boolean",
              "description" : "The option that displays the Syndication Feeds related list, where you can create and manage syndication feeds for users on your public sites. This field is visible only if you have the feature enabled for your organization.",
              "readOnly" : true
            },
            "OptionsIsSiteGAIntegrationMigrated" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsRedirectToCustomDomain" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsAllowGuestPaymentsApi" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsHasStoredPathPrefix" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsCookieConsent" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsCachePublicVfPagesInProxies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsIsSiteDataCloudIntegrationEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsIsSiteGAIntegrationEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsAllowHomePage" : {
              "type" : "boolean",
              "description" : "The option to enable the standard page associated with the Home tab (/home/home.jsp).",
              "readOnly" : true
            },
            "OptionsAllowStandardIdeasPages" : {
              "type" : "boolean",
              "description" : "The option to enable standard pages associated with an Ideas Experience Cloud site. If you want to use default Ideas pages (such as IdeasHome), enable these pages.",
              "readOnly" : true
            },
            "OptionsAllowStandardSearch" : {
              "type" : "boolean",
              "description" : "The option to enable the standard search pages. To allow public users to perform standard searches, enable these pages.",
              "readOnly" : true
            },
            "OptionsAllowStandardLookups" : {
              "type" : "boolean",
              "description" : "The option to enable the standard lookup pages. These are the popup windows associated with lookup fields on Visualforce pages.",
              "readOnly" : true
            },
            "OptionsAllowStandardAnswersPages" : {
              "type" : "boolean",
              "description" : "The option to enable standard pages associated with an answers Experience Cloud site. If you want to use default Answers pages (such as AnswersHome), enable these pages.",
              "readOnly" : true
            },
            "OptionsAllowGuestSupportApi" : {
              "type" : "boolean",
              "description" : "The option to enable unauthenticated users to access the Support API.",
              "readOnly" : true
            },
            "OptionsAllowStandardPortalPages" : {
              "type" : "boolean",
              "description" : "The option to enable authenticated users to access the standard Salesforce pages.",
              "readOnly" : true
            },
            "OptionsContentSniffingProtection" : {
              "type" : "boolean",
              "description" : "The option to enable content-sniffing protection.",
              "readOnly" : true
            },
            "OptionsBrowserXssProtection" : {
              "type" : "boolean",
              "description" : "The option to enable the browser's cross-site scripting protection.",
              "readOnly" : true
            },
            "OptionsReferrerPolicyOriginWhenCrossOrigin" : {
              "type" : "boolean",
              "description" : "The option to enable referrer policy (origin-when-cross-origin).",
              "readOnly" : true
            },
            "OptionsUseGuestUserLanguage" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsIsSiteGRecaptchaIntegrationEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsIsSiteConsentBannerIntegrationEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsIsSiteGAIntegrationMigratedV2" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsIsSiteDataCloudIntegrationMigrated" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsIsSiteConsentBannerIntegrationMigrated" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OptionsIsSlashSRemovedSite" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "An optional description of the site.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The name of the site as it appears in the user interface.",
              "readOnly" : true
            },
            "AnalyticsTrackingCode" : {
              "type" : "string",
              "description" : "The tracking code associated with your site. This code can be used by services like Google Analytics to track page request data for your site.",
              "readOnly" : true
            },
            "SiteType" : {
              "type" : "string",
              "description" : "Identifies whether the site is a Visualforce (Salesforce Sites) or a Site.com site. SiteType is available in API version 21.0 and later. In API version 26.0 and later, if Experience Cloud sites are enabled for your Salesforce org, the site could also be a Network Visualforce or Network Site.com site.",
              "readOnly" : true
            },
            "ClickjackProtectionLevel" : {
              "type" : "string",
              "description" : "Sets the clickjack protection level. The options are: AllowAllFraming—Allow framing by any page (no protection) SameOriginOnly—Allow framing by the same origin only (recommended) NoFraming—Don’t allow framing by any page (most protection)",
              "readOnly" : true
            },
            "DailyBandwidthLimit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The rolling 24-hour daily bandwidth limit for the sites in your organization.",
              "readOnly" : true
            },
            "DailyBandwidthUsed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The current rolling 24-hour daily bandwidth usage for the sites in your organization.",
              "readOnly" : true
            },
            "DailyRequestTimeLimit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The rolling 24-hour daily service request time limit for the sites in your organization. Service request time is calculated as the total server time in minutes required to generate pages for the site.",
              "readOnly" : true
            },
            "DailyRequestTimeUsed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The current rolling 24-hour daily service request time for the sites in your organization.",
              "readOnly" : true
            },
            "MonthlyPageViewsEntitlement" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of page views allowed for the current calendar month for the sites in your organization.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "GuestRecordDefaultOwnerId" : {
              "type" : "string",
              "description" : "A user in the Salesforce org that is the default owner of records created by unauthenticated (guest) users.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SiteDetail" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the details of a Salesforce site or Experience Cloud site.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "The ID of the Site object.",
              "readOnly" : true
            },
            "IsRegistrationEnabled" : {
              "type" : "boolean",
              "description" : "Indicates whether the site allows users to sign up.",
              "readOnly" : true
            },
            "SecureUrl" : {
              "type" : "string",
              "description" : "The URL of the website.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SiteFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SiteHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the history of changes to the values in the fields of a site.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SiteId" : {
              "type" : "string",
              "description" : "The ID of the associated Site.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "description" : "The name of the field that was changed.",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "description" : "The last value of the field before it was changed.",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "description" : "The new value of the field that was changed.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SiteIframeWhiteListUrl" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SiteId" : {
              "type" : "string"
            },
            "Url" : {
              "type" : "string"
            }
          }
        } ]
      },
      "SiteRedirectMapping" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "SiteId" : {
              "type" : "string"
            },
            "IsActive" : {
              "type" : "boolean"
            },
            "Source" : {
              "type" : "string"
            },
            "Target" : {
              "type" : "string"
            },
            "Action" : {
              "type" : "string"
            },
            "IsDynamic" : {
              "type" : "boolean"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "Solution" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a detailed description of a customer issue and the resolution of that issue.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "SolutionNumber" : {
              "type" : "string",
              "description" : "An identifying number that is assigned automatically when a solution is created. It can’t be set directly, and it can’t be modified.",
              "readOnly" : true
            },
            "SolutionName" : {
              "type" : "string",
              "description" : "Required. If a client application creates a new Solution and a value for this field is unspecified, a hyphen (-), the default value for this field, is used. Limit: 255 characters. Label is Title."
            },
            "IsPublished" : {
              "type" : "boolean",
              "description" : "Indicates whether the Solution has been published (true) or not (false). A solution’s published state does not affect how it can be used, or whether you can query, update, or delete it. Label is Public.Prior to Spring ‘14, the label was Visible in Self-Service Portal."
            },
            "IsPublishedInPublicKb" : {
              "type" : "boolean",
              "description" : "Indicates whether the Solution has been published as a Public Solution (true) or not (false). Label is Visible in Public Knowledge Base. This field only applies to solutions, not articles in the public knowledge base."
            },
            "Status" : {
              "type" : "string",
              "description" : "Required. The status of the solution. Directly controls the IsReviewed value. To obtain the status values in the picklist, a client application can query the SolutionStatus."
            },
            "IsReviewed" : {
              "type" : "boolean",
              "description" : "Indicates whether the Solution has been reviewed (true) or not (false). This flag can only be set indirectly via the Status picklist. Each predefined Status value implies an IsReviewed value. Label is Reviewed.",
              "readOnly" : true
            },
            "SolutionNote" : {
              "type" : "string",
              "description" : "The details of the Solution record. Limit: 32,000 characters. Label is Solution Details.If you have HTML Solutions enabled, any HTML tags used in this field are verified before the object is created or updated. If invalid HTML is entered, an error is thrown. Any JavaScript used in this field is removed before the object is created or updated."
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the User who owns the Solution."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "TimesUsed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of times this solution has been used. Label is Num Related Case.",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            },
            "IsHtml" : {
              "type" : "boolean",
              "description" : "Indicates whether the Solution is an HTML solution (true) or not (false).",
              "readOnly" : true
            }
          }
        } ]
      },
      "SolutionFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SolutionHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SolutionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Field" : {
              "type" : "string",
              "readOnly" : true
            },
            "DataType" : {
              "type" : "string",
              "readOnly" : true
            },
            "OldValue" : {
              "type" : "string",
              "readOnly" : true
            },
            "NewValue" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "SolutionStatus" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the status of a Solution, such as Draft, Reviewed, and so on.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Master label for this solution status value. This display value is the internal label that does not get translated.",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "description" : "Uniquely identifies a picklist value so it can be retrieved without using an id or master label.",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number used to sort this value in the solution status picklist. These numbers are not guaranteed to be sequential, as some previous solution status values might have been deleted.",
              "readOnly" : true
            },
            "IsDefault" : {
              "type" : "boolean",
              "description" : "Indicates whether this is the default solution status value (true) or not (false) in the picklist. Only one value can be the default value.",
              "readOnly" : true
            },
            "IsReviewed" : {
              "type" : "boolean",
              "description" : "Indicates whether this solution status value represents a reviewed Solution (true) or not (false). Multiple solution status values can represent a reviewed Solution.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Stamp" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a User Specialty.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "The id of the org or network.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The User Specialty label that appears under the user’s profile picture. You can create any label you want as long as it’s within the 50 character maximum, including spaces and underscores.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Use this field to describe what the user specialty means and how it applies to a user. You have a 255 character maximum including spaces and underscores.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "StampAssignment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents assignment of a User Specialty to a user.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "StampId" : {
              "type" : "string",
              "description" : "The unique id generated when creating a user specialty.",
              "readOnly" : true
            },
            "SubjectId" : {
              "type" : "string",
              "description" : "The id for the user getting the User Specialty label.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "StaticResource" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a static resource that can be used in Visualforce markup.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of the static resource."
            },
            "ContentType" : {
              "type" : "string",
              "description" : "Type of content. Label is Mime Type. Limit: 120 characters."
            },
            "BodyLength" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Size of the file (in bytes).",
              "readOnly" : true
            },
            "Body" : {
              "type" : "object",
              "description" : "Required. Encoded file data."
            },
            "Description" : {
              "type" : "string",
              "description" : "Text description of the static resource. Limit: 255 characters."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CacheControl" : {
              "type" : "string",
              "description" : "The sharing policy for the static resource when cached. The cache control can have one of the following values: Private specifies that the static resource data cached on the Salesforce server shouldn’t be shared with other users. The static resource is only stored in cache for the current user’s session. Public specifies that the static resource data cached on the Salesforce server be shared with other users in your organization for faster load times."
            }
          }
        } ]
      },
      "StreamingChannel" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a channel that is the basis for notifying listeners of generic Streaming API events.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the owner of the streaming channel. Label: Owner Name"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Descriptive name of the streaming channel. Limit: 80 characters, alphanumeric and “_”, “/” characters only. Must start with “/u/”. This value identifies the channel and must be unique. Label: Streaming Channel Name"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last viewed this record or list view. If this value is null, the user might have only accessed this record or list view (LastReferencedDate) but not viewed it.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp when the current user last accessed this record, a record related to this record, or a list view.",
              "readOnly" : true
            },
            "IsDynamic" : {
              "type" : "boolean",
              "description" : "true if the channel gets dynamically created on subscribe if necessary, false otherwise.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the StreamingChannel. Limit: 255 characters. Label: Description"
            }
          }
        } ]
      },
      "StreamingChannelShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "TabDefinition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a custom tab. Returns only the tabs that the current user has access to.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "description" : "Unique identifier for the tab. Always retrieve this value before using it, because the value isn’t guaranteed to stay the same from one release to the next. Simplify queries by using this field instead of making multiple queries.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The developer name of the tab.",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "description" : "The localized label corresponding to the MasterLabel field in the Tooling API object.",
              "readOnly" : true
            },
            "IsCustom" : {
              "type" : "boolean",
              "description" : "Indicates whether the tab is a custom tab created by admins in the org.",
              "readOnly" : true
            },
            "SobjectName" : {
              "type" : "string",
              "description" : "The name of the sObject corresponding to the tab.",
              "readOnly" : true
            },
            "Url" : {
              "type" : "string",
              "description" : "The URL that can be used to launch this tab on desktop.",
              "readOnly" : true
            },
            "IsAvailableInAloha" : {
              "type" : "boolean",
              "description" : "Indicates whether the tab is available in Salesforce Classic.",
              "readOnly" : true
            },
            "IsAvailableInLightning" : {
              "type" : "boolean",
              "description" : "Indicates whether the tab is available in Lightning Experience.",
              "readOnly" : true
            },
            "IsAvailableInMobile" : {
              "type" : "boolean",
              "description" : "Indicates whether the tab is available in the Salesforce mobile app.",
              "readOnly" : true
            },
            "IsAvailableInDesktop" : {
              "type" : "boolean",
              "description" : "Indicates whether the tab is available on desktop.",
              "readOnly" : true
            },
            "MobileUrl" : {
              "type" : "string",
              "description" : "The URL that can be used to launch this tab in the Salesforce mobile app.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "TableauHostMapping" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SiteLuid" : {
              "type" : "string"
            },
            "UrlMatch" : {
              "type" : "string"
            },
            "HostType" : {
              "type" : "string"
            }
          }
        } ]
      },
      "TableauHostMappingShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "Task" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a business activity such as making a phone call or other to-do items. In the user interface, Task and Event records are collectively referred to as activities.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "WhoId" : {
              "type" : "string",
              "description" : "The WhoId represents a human such as a lead or a contact. WhoIds are polymorphic. Polymorphic means a WhoId is equivalent to a contact’s ID or a lead’s ID. The label is Name ID. If Shared Activities is enabled, the value of this field is the ID of the related lead or primary contact. If you add, update, or remove the WhoId field, you might encounter problems with triggers, workflows, and data validation rules that are associated with the record. The label is Name ID. Beginning in API version 37.0, if the contact or lead ID in the WhoId field is not in the TaskWhoIds list, no error occurs and the ID is added to the TaskWhoIds as the primary WhoId. If WhoId is set to null, an arbitrary ID from the existing TaskWhoIds list is promoted to the primary position."
            },
            "WhatId" : {
              "type" : "string",
              "description" : "The WhatId represents nonhuman objects such as accounts, opportunities, campaigns, cases, or custom objects. WhatIds are polymorphic. Polymorphic means a WhatId is equivalent to the ID of a related object. The label is Related To ID."
            },
            "Subject" : {
              "type" : "string",
              "description" : "The subject line of the task, such as “Call” or “Send Quote.” Limit: 255 characters."
            },
            "ActivityDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "Represents the due date of the task. This field has a timestamp that is always set to midnight in the Coordinated Universal Time (UTC) time zone. The timestamp is not relevant; do not attempt to alter it to accommodate time zone differences. Label is Due Date.This field can’t be set or updated for a recurring task (IsRecurrence is true)."
            },
            "Status" : {
              "type" : "string",
              "description" : "Required. The status of the task, such as In Progress or Completed. Each predefined Status field implies a value for the IsClosed flag. To obtain picklist values, query the TaskStatus object.This field can’t be updated for recurring tasks (IsRecurrence is true)."
            },
            "Priority" : {
              "type" : "string",
              "description" : "Required. Indicates the importance or urgency of a task, such as high or low."
            },
            "IsHighPriority" : {
              "type" : "boolean",
              "description" : "Indicates a high-priority task. This field is derived from the Priority field.",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "ID of the User or Group who owns the record. Label is Assigned To ID. This field accepts Groups of type Queue only. In the user interface, Group IDs correspond with the queue’s list view names. To create or update tasks assigned to Group, use v48.0 or later."
            },
            "Description" : {
              "type" : "string",
              "description" : "Contains a text description of the task."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "description" : "Represents the ID of the related Account. The AccountId is determined as follows. If the value of WhatId is any of the following objects, then Salesforce uses that object’s AccountId. Account Opportunity Contract Custom object that is a child of Account If the value of the WhatIdfield is any other object, and the value of the WhoId field is a Contact object, then Salesforce uses that contact’s AccountId. (If your organization uses Shared Activities, then Salesforce uses the AccountId of the primary contact.) Otherwise, Salesforce sets the value of the AccountId field to null. For information on IDs, see ID Field Type.",
              "readOnly" : true
            },
            "IsClosed" : {
              "type" : "boolean",
              "description" : "Indicates whether the task has been completed (true) or not (false). Is only set indirectly via the Status picklist. Label is Closed.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsArchived" : {
              "type" : "boolean",
              "description" : "Indicates whether the event has been archived.",
              "readOnly" : true
            },
            "CallDurationInSeconds" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Duration of the call in seconds. Not subject to field-level security, available for any user in an organization with Salesforce CRM Call Center."
            },
            "CallType" : {
              "type" : "string",
              "description" : "The type of call being answered: Inbound, Internal, or Outbound."
            },
            "CallDisposition" : {
              "type" : "string",
              "description" : "Represents the result of a given call, for example, “we'll call back,” or “call unsuccessful.” Limit is 255 characters. Not subject to field-level security, available for any user in an organization with Salesforce CRM Call Center."
            },
            "CallObject" : {
              "type" : "string",
              "description" : "Name of a call center. Limit is 255 characters. Not subject to field-level security, available for any user in an organization with Salesforce CRM Call Center."
            },
            "ReminderDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Represents the time when the reminder is scheduled to fire, if IsReminderSet is set to true. If IsReminderSet is set to false, then the user may have deselected the reminder checkbox in the Salesforce user interface, or the reminder has already fired at the time indicated by the value."
            },
            "IsReminderSet" : {
              "type" : "boolean",
              "description" : "Indicates whether a popup reminder has been set for the task (true) or not (false)."
            },
            "RecurrenceActivityId" : {
              "type" : "string",
              "description" : "Read-only. Not required on create. ID of the main record of the recurring task. Subsequent occurrences have the same value in this field.",
              "readOnly" : true
            },
            "IsRecurrence" : {
              "type" : "boolean",
              "description" : "Indicates whether the task is scheduled to repeat itself (true) or only occurs once (false). This field is read-only on update, but not on create. If this field value is true, then RecurrenceStartDateOnly, RecurrenceEndDateOnly, RecurrenceType, and any recurrence fields associated with the given recurrence type must be populated. See Recurring Tasks."
            },
            "RecurrenceStartDateOnly" : {
              "type" : "string",
              "format" : "date",
              "description" : "The date when the recurring task begins. Must be a date and time before RecurrenceEndDateOnly."
            },
            "RecurrenceEndDateOnly" : {
              "type" : "string",
              "format" : "date",
              "description" : "The last date on which the task repeats. This field has a timestamp that is always set to midnight in the Coordinated Universal Time (UTC) time zone. The timestamp is not relevant; do not attempt to alter it to accommodate time zone differences."
            },
            "RecurrenceTimeZoneSidKey" : {
              "type" : "string",
              "description" : "The time zone associated with the recurring task. For example, “UTC-8:00” for Pacific Standard Time."
            },
            "RecurrenceType" : {
              "type" : "string",
              "description" : "Indicates how often the task repeats. For example, daily, weekly, or every nth month (where “nth” is defined in RecurrenceInstance)."
            },
            "RecurrenceInterval" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The interval between recurring tasks."
            },
            "RecurrenceDayOfWeekMask" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The day or days of the week on which the task repeats. This field contains a bitmask. The values are as follows: Sunday = 1 Monday = 2 Tuesday = 4 Wednesday = 8 Thursday = 16 Friday = 32 Saturday = 64 Multiple days are represented as the sum of their numerical values. For example, Tuesday and Thursday = 4 + 16 = 20."
            },
            "RecurrenceDayOfMonth" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The day of the month in which the task repeats."
            },
            "RecurrenceInstance" : {
              "type" : "string",
              "description" : "The frequency of the recurring task."
            },
            "RecurrenceMonthOfYear" : {
              "type" : "string",
              "description" : "The month of the year in which the task repeats."
            },
            "RecurrenceRegeneratedType" : {
              "type" : "string",
              "description" : "Represents what triggers a repeating task to repeat. Add this field to a page layout together with the RecurrenceInterval field, which determines the number of days between the triggering date (due date or close date) and the due date of the next repeating task in the series. Label is Repeat This Task. This field has the following picklist values: None: The task doesn’t repeat. After due date: The next repeating task will be due the specified number of days after the current task’s due date. After the task is closed: The next repeating task will be due the specified number of days after the current task is closed. (Task closed): This task, now closed, was opened as part of a repeating series. When tasks in a series are set to repeat after their due date, Salesforce doesn’t create recurrences that would have been due in the past. Instead, Salesforce keeps adding the interval until a repeated task has a due date in the future. For example, suppose that someone sets a task to repeat three days after it’s due. But, that person doesn’t complete the task (mark it Closed) until five days after it’s due. Instead of creating a task that’s already overdue, Salesforce gives the new task a due date of tomorrow. This due date is equivalent to 6 days after the due date; two intervals of three days each. If that person completes the repeating task (marks it Closed) before the due date, the next task is still due three days after the due date."
            },
            "TaskSubtype" : {
              "type" : "string",
              "description" : "Provides standard subtypes to facilitate creating and searching for specific task subtypes. This field isn’t updateable. TaskSubtype values: Task Email List Email Cadence Call The Cadence subtype is an internal value used by Sales Engagement, and can’t be set manually."
            },
            "CompletedDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time the task was saved with a Closed status. For insert, if the task is saved with a Closed status the field is set. If the task is saved with an Open status the field is set to NULL. For update, if the task is saved with a new Closed status, the field is reset. If the task is saved with a new non-closed status, the field is reset to NULL. If the task is saved with the same closed status (that is, unchanged) there is no change to the field. The status is a dynamic enum. If the Closed mapping is changed it won’t cause an update of existing tasks. Only new insert/update operations are affected.",
              "readOnly" : true
            }
          }
        } ]
      },
      "TaskChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "WhoId" : {
              "type" : "string",
              "readOnly" : true
            },
            "WhatId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Subject" : {
              "type" : "string",
              "readOnly" : true
            },
            "ActivityDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "readOnly" : true
            },
            "Priority" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsClosed" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CallDurationInSeconds" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "CallType" : {
              "type" : "string",
              "readOnly" : true
            },
            "CallDisposition" : {
              "type" : "string",
              "readOnly" : true
            },
            "CallObject" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReminderDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsReminderSet" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RecurrenceActivityId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRecurrence" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RecurrenceStartDateOnly" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "RecurrenceEndDateOnly" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "RecurrenceTimeZoneSidKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecurrenceType" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecurrenceInterval" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RecurrenceDayOfWeekMask" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RecurrenceDayOfMonth" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "RecurrenceInstance" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecurrenceMonthOfYear" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecurrenceRegeneratedType" : {
              "type" : "string",
              "readOnly" : true
            },
            "CompletedDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "TaskFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "TaskPriority" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the importance or urgency of a Task, such as High, Normal, or Low.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Master label for this task priority value. This display value is the internal label that does not get translated. Limit: 255 characters.",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "description" : "Uniquely identifies a picklist value so it can be retrieved without using an id or master label.",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number used to sort this value in the task priority picklist. These numbers are not guaranteed to be sequential, as some previous task priority values might have been deleted.",
              "readOnly" : true
            },
            "IsDefault" : {
              "type" : "boolean",
              "description" : "Indicates whether this is the default task priority value (true) or not (false) in the picklist. Only one value in the picklist can be the default value.",
              "readOnly" : true
            },
            "IsHighPriority" : {
              "type" : "boolean",
              "description" : "Indicates whether this task priority value represents a high priority Task (true) or not (false). Multiple task priority values can represent a high-priority Task.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "TaskStatus" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the status of a Task, such as Not Started, Completed, or Closed.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Master label for this task status value. This display value is the internal label that does not get translated. Limit: 255 characters.",
              "readOnly" : true
            },
            "ApiName" : {
              "type" : "string",
              "description" : "Uniquely identifies a picklist value so it can be retrieved without using an id or master label.",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number used to sort this value in the task status picklist. These numbers are not guaranteed to be sequential, as some previous task status values might have been deleted.",
              "readOnly" : true
            },
            "IsDefault" : {
              "type" : "boolean",
              "description" : "Indicates whether this is the default task status value (true) or not (false) in the picklist.",
              "readOnly" : true
            },
            "IsClosed" : {
              "type" : "boolean",
              "description" : "Indicates whether this task status value represents a closed Task (true) or not (false). Multiple task status values can represent a closed Task.",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "TenantSecret" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "This object stores an encrypted organization-specific key fragment that is used with the master secret to produce organization-specific data encryption keys.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SecretValueHash" : {
              "type" : "object",
              "description" : "The matching tenant secret hash for an uploaded customer-supplied tenant secret."
            },
            "Description" : {
              "type" : "string",
              "description" : "The description of the tenant secret."
            },
            "SecretValue" : {
              "type" : "object",
              "description" : "The encrypted 256-bit secret value encoded in base64."
            },
            "Version" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The version number of this secret. The version number is unique within your org.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the tenant secret. Values are: Active Can be used to encrypt and decrypt new or existing data. Archived Can’t encrypt new data. Can be used to decrypt data previously encrypted with this key when it was active. Destroyed Can’t encrypt or decrypt data. Data encrypted with this key when it was active can no longer be decrypted. Files and attachments encrypted with this key can no longer be downloaded."
            },
            "Type" : {
              "type" : "string",
              "description" : "The type of tenant secret. The Type field is available in API version 39.0 and later. The following values appear in the Type picklist: Data—data stored in the Salesforce database. Includes data in encrypted fields, files, and attachments but not search index files. Tenant secrets created in API version 34.0 and later default to the Data type. SearchIndex—search index files (available in API version 39.0 and later). Analytics—Tableau CRM data (available in API version 39.0 and later). DeterministicData—data stored in the Salesforce database. Includes data in encrypted fields, files, and attachments, but not search index files (available in API version 39.0 and later). EventBus—Change Data Capture event data (available in API version 43.0 and later). Change Data Capture is part of a pilot."
            },
            "Source" : {
              "type" : "string",
              "description" : "The source of the encryption key material. Values are: HSM A Salesforce-generated tenant secret. Uploaded A customer-supplied tenant secret or data encryption key. Remote A tenant secret or data encryption key fetched from a key service outside of Salesforce. Available in API version 44.0 and later.Tenant secrets with a Source value of Remote are listed as Fetched on the Key Management page in Setup. Available in API version 43.0 and later."
            },
            "SecretValueCertificate" : {
              "type" : "string",
              "description" : "The certificate needed to upload a customer-supplied tenant secret. Each certificate has a unique name."
            },
            "KeyDerivationMode" : {
              "type" : "string",
              "description" : "The key derivation mode applied to customer-supplied key material. Modes are: PBKDF2 The customer-supplied key material is used by the Shield KMS to create a derived data encryption key. NONE The customer-supplied key material is used by the Shield KMS as the final data encryption key to directly encrypt and decrypt data. Available in API version 43.0 and later."
            }
          }
        } ]
      },
      "TenantUsageEntitlement" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ResourceGroupKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "Setting" : {
              "type" : "string",
              "readOnly" : true
            },
            "StartDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "EndDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "CurrentAmountAllowed" : {
              "type" : "number",
              "readOnly" : true
            },
            "Frequency" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsPersistentResource" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "HasRollover" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OverageGrace" : {
              "type" : "number",
              "readOnly" : true
            },
            "AmountUsed" : {
              "type" : "number",
              "readOnly" : true
            },
            "UsageDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "TestSuiteMembership" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Associates an Apex class with an ApexTestSuite.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ApexTestSuiteId" : {
              "type" : "string",
              "description" : "The test suite to which the Apex class is assigned."
            },
            "ApexClassId" : {
              "type" : "string",
              "description" : "The Apex class whose tests are to be executed."
            }
          }
        } ]
      },
      "ThirdPartyAccountLink" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the list of external users who authenticated using an Auth. Provider.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ThirdPartyAccountLinkKey" : {
              "type" : "string",
              "description" : "A concatenated string including the organization ID, the SsoProviderId value, the SsoProvider value, and the RemoteIdentifier value.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "The Salesforce user associated with this third-party account link.",
              "readOnly" : true
            },
            "SsoProviderId" : {
              "type" : "string",
              "description" : "The ID associated with the SsoProvider value.",
              "readOnly" : true
            },
            "Handle" : {
              "type" : "string",
              "description" : "The username in the third-party system.",
              "readOnly" : true
            },
            "RemoteIdentifier" : {
              "type" : "string",
              "description" : "The unique ID for the user in the third-party system.",
              "readOnly" : true
            },
            "Provider" : {
              "type" : "string",
              "description" : "The third-party account provider name.",
              "readOnly" : true
            },
            "SsoProviderName" : {
              "type" : "string",
              "description" : "The name associated with the AuthProvider of the third-party system, in case the user has no access to the provider foreign key (the SsoProvider value).",
              "readOnly" : true
            },
            "IsNotSsoUsable" : {
              "type" : "boolean",
              "description" : "Support for single sign-on. If true, the link cannot be used for a single sign-on flow. It is only available OAuth access and refresh tokens.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "ThreatDetectionFeedback" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents feedback provided by a user about a Threat Detection event that occurred in your org. The feedback specifies whether the event was malicious, suspicious, not a threat, or unknown. Each ThreatDetectionFeedback object is associated with one of these Threat Detection storage events: CredentialStuffingEventStore, ReportAnomalyEventStore, or SessionHijackingEventStore.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ThreatDetectionFeedbackNumber" : {
              "type" : "string",
              "description" : "Auto-generated number used as the unique name for this object.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, it’s possible that this record was referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "The origin user’s unique ID. For example, 005000000000123."
            },
            "Username" : {
              "type" : "string",
              "description" : "The origin username in the format of user@company.com at the time the object was created."
            },
            "ThreatDetectionEventId" : {
              "type" : "string",
              "description" : "Reference to the unique ID of one of these associated Threat Detection storage events: CredentialStuffingEventStore ReportAnomalyEventStore SessionHijackingEventStore For example, 0fjRM000000005p."
            },
            "Response" : {
              "type" : "string",
              "description" : "Describes the severity of the threat."
            }
          }
        } ]
      },
      "ThreatDetectionFeedbackFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "TodayGoal" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Value" : {
              "type" : "number"
            },
            "UserId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "TodayGoalChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Value" : {
              "type" : "number",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "TodayGoalShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "Topic" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a topic on a Chatter post or record.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Name of the topic."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the topic."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "TalkingAbout" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of people talking about the topic over the last two months, based on factors such as topic additions and comments on posts with the topic.",
              "readOnly" : true
            },
            "ManagedTopicType" : {
              "type" : "string",
              "description" : "Type of managed topic. Values are: Content Featured Navigational This field is available in API version 44.0 and later.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "TopicAssignment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the assignment of a topic to a specific feed item, record, or file.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "TopicId" : {
              "type" : "string",
              "description" : "Identifier of the topic."
            },
            "EntityId" : {
              "type" : "string",
              "description" : "Identifier of the feed item, record, or file."
            },
            "EntityKeyPrefix" : {
              "type" : "string",
              "description" : "The first three digits of the EntityID field, which identify the object type (account, opportunity, etc). This read-only field is available in API version 32.0 and later. Interface label is “Record Key Prefix,” which appears only in reports.",
              "readOnly" : true
            },
            "EntityType" : {
              "type" : "string",
              "description" : "The standard name for the object type (account, opportunity, etc). This read-only field is available in API version 33.0 and later. Querying topic assignments for the ManagedContentVersion entity type isn’t supported. Interface label is “Object Type,” which appears only in reports.In most cases, you should use this field rather than EntityKeyPrefix, which exists primarily to support older reports.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "TopicFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "TopicUserEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an action (such as comment, post, like, or share) made by a user on a topic.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "Unique Salesforce user ID.",
              "readOnly" : true
            },
            "TopicId" : {
              "type" : "string",
              "description" : "Identifier of the topic.",
              "readOnly" : true
            },
            "ActionEnum" : {
              "type" : "string",
              "description" : "The action taken by a user on a topic. The possible values are: LIKE COMMENT POST ASSIGN SHARE FAVORITE UNFAVORITE AT_MENTION BANG_MENTION COMMENT_LIKE USER_ENDORSEMENT SKILL_PEER_ENDORSEMENT SKILL_SELF_ENDORSEMENT BEST_ANSWER",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "TransactionSecurityPolicy" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a transaction security policy definition.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The API, or program name, for this policy."
            },
            "Language" : {
              "type" : "string"
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The policy’s name."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "The type of validation that the policy uses. The valid values are: CustomApexPolicy— Created with Apex editor. CustomConditionBuilderPolicy— Created with Condition Builder ."
            },
            "State" : {
              "type" : "string",
              "description" : "Indicates whether the policy is active. Valid values are: Disabled Enabled"
            },
            "ActionConfig" : {
              "type" : "string",
              "description" : "Describes the action to take when the matching Transaction Security policy is triggered. Also indicates the type of notifications selected and the ID of the intended recipient. The recipient must be active and assigned the Modify All Data and View Setup user permissions. Multiple actions can be taken. The actions available depend on the Event Type field."
            },
            "ApexPolicyId" : {
              "type" : "string",
              "description" : "Represents the Apex TxnSecurity.PolicyCondition or TxnSecurity.EventCondition interface for this policy."
            },
            "EventType" : {
              "type" : "string",
              "description" : "Used in Legacy Transaction Security only. Indicates the type of event the policy monitors. Valid values are: AccessResource—Notifies you when the selected resource has been accessed. AuditTrail—Reserved for future use. DataExport—Notifies you when any API query is made, such as from the Data Loader API client, or when a Report export occurs. Entity—Notifies you on use of an object type such as an authentication provider or chatter post. Login—Notifies you when a user logs in."
            },
            "ResourceName" : {
              "type" : "string",
              "description" : "Used in Legacy Transaction Security only. A resource used to narrow down the conditions under which the policy triggers. For example, with a DataExport event, you can select a resource Lead to specifically monitor export activity occurring on your Lead entities. The resources available depend on the EventType field."
            },
            "ExecutionUserId" : {
              "type" : "string",
              "description" : "Used in Legacy Transaction Security only. The ID of an active user who is assigned the Modify All Data and View Setup user permissions."
            },
            "Description" : {
              "type" : "string",
              "description" : "The description entered for this policy."
            },
            "FlowId" : {
              "type" : "string"
            },
            "EventName" : {
              "type" : "string",
              "description" : "Used in Real-Time Event Monitoring only. Indicates the name of the event the policy monitors. Valid values are: ApiEvent—Tracks these user-initiated read-only API calls: query(), queryMore(), and count(). Captures API requests through SOAP API, REST API, and Bulk API for the Enterprise and Partner WSDLs. Tooling API calls and API calls originating from a Salesforce mobile app aren’t captured. ApiAnomalyEventStore—Tracks anomalies in how users make API calls. ApiAnomalyEventStore is an object that stores the event data of ApiAnomalyEvent. This object is available in API version 50.0 and later. BulkApiResultEventStore—Tracks when a user downloads the results of a Bulk API request. BulkApiResultEventStore is a big object that stores the event data of BulkApiResultEvent. This object is available in API version 50.0 and later. CredentialStuffingEventStore—Tracks when a user successfully logs into Salesforce during an identified credential stuffing attack. Credential stuffing refers to large-scale automated login requests using stolen user credentials.This value is available in API 49.0 and later. ListViewEvent—Tracks when users access data with list views using Lightning Experience, Salesforce Classic, or the API. It doesn’t track list views of Setup entities. LoginEvent—LoginEvent tracks the login activity of users who log in to Salesforce. ReportAnomalyEventStore—Tracks anomalies in how users run or export reports, including unsaved reports. This value is available in API 49.0 and later. ReportEvent—Tracks when reports are run in your org. SessionHijackingEventStore—Tracks when unauthorized users gain ownership of a Salesforce user’s session with a stolen session identifier. To detect such an event, Salesforce evaluates how significantly a user’s current browser fingerprint diverges from the previously known fingerprint using a probabilistically inferred significance of change. This value is available in API 49.0 and later."
            },
            "BlockMessage" : {
              "type" : "string",
              "description" : "The custom message sent to a user when a policy blocks their action. Used in Real-Time Event Monitoring only. Maximum of 1000 characters. This field is null when the default message option is selected in the UI. Available only when EventName is set to ApiEvent, ListViewEvent, BulkApiResultEventStore, or ReportEvent. Available in API version 49.0 and later. Include org- or policy-specific information in your custom message, such as the name of the responsible administrator or the business unit. Be careful about what you include. Too much information on how the policy was designed. can aid a malicious user. Two-factor authentication (2FA) isn’t supported in Lightning Experience, so events like ListView and ReportEvent are upgraded to Block in Lightning. Custom messages aren’t translatable."
            },
            "CustomEmailContent" : {
              "type" : "string"
            }
          }
        } ]
      },
      "Translation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "The Translation object represents the languages enabled for translation in your Salesforce org.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "description" : "The language code. See Supported Languages in Salesforce Help for a full list of languages and their codes.",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the translated values for this language display to users (true) or not (false).",
              "readOnly" : true
            },
            "CanManage" : {
              "type" : "boolean",
              "description" : "Indicates whether the language is available for translation (true) or not (false). Specify translators for each language through the Translation Language Setup page.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UiFormulaCriterion" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a filter that helps define component visibility on a Lightning page.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RuleId" : {
              "type" : "string",
              "description" : "Represents the formula rule ID.",
              "readOnly" : true
            },
            "LeftHandSide" : {
              "type" : "string",
              "description" : "Represents the field that the filter is based on. For example, AMOUNT.",
              "readOnly" : true
            },
            "OperatorId" : {
              "type" : "string",
              "description" : "Represents the filter operator. Valid values are: CONTAINS EQUAL GE—greater than or equal GT—greater than LE—less than or equal LT—less than NE—not equal",
              "readOnly" : true
            },
            "RightHandSide" : {
              "type" : "string",
              "description" : "Represents the value used to evaluate the component’s visibility. For example, 1000000.",
              "readOnly" : true
            },
            "ParentKeyPrefix" : {
              "type" : "string",
              "description" : "Represents the three-digit prefix of the parent ID.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UiFormulaRule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a set of one or more filters that define the conditions under which a component displays on a Lightning page.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "Represents the API name of the UiFormulaRule.",
              "readOnly" : true
            },
            "Language" : {
              "type" : "string",
              "description" : "Represents the language of the UiFormulaRule.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Required. Represents the label of the UiFormulaRule.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "AssociatedElementId" : {
              "type" : "string",
              "description" : "Represents a parent component that UiFormulaRule is associated with, such as PromptVersion.",
              "readOnly" : true
            },
            "BooleanFilter" : {
              "type" : "string",
              "description" : "Represents the filter logic applied to UiFormulaRule. References the UI formula rule stored by UiFormulaCriterion based on the sortIndex, such as ((1 && 3) || 2).",
              "readOnly" : true
            },
            "Formula" : {
              "type" : "string",
              "description" : "Represents the formula source string of UiFormulaRule.",
              "readOnly" : true
            },
            "ParentKeyPrefix" : {
              "type" : "string",
              "description" : "Represents the three-digit prefix for AssociatedElementId.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UndecidedEventRelation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents event participants (invitees or attendees) with the status Not Responded for a given event.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "RelationId" : {
              "type" : "string",
              "description" : "Indicates the ID of the invitee.",
              "readOnly" : true
            },
            "EventId" : {
              "type" : "string",
              "description" : "Indicates the ID of the event.",
              "readOnly" : true
            },
            "RespondedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "This field is always null.",
              "readOnly" : true
            },
            "Response" : {
              "type" : "string",
              "description" : "Indicates the content of the response field. Label is Comment.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "Indicates whether the invitee is a user, lead or contact, or resource.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UriEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueriedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Message" : {
              "type" : "string",
              "readOnly" : true
            },
            "OperationStatus" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UriEventStream" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "EventUuid" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "RelatedEventIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "LoginKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "SessionLevel" : {
              "type" : "string",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "readOnly" : true
            },
            "Operation" : {
              "type" : "string",
              "readOnly" : true
            },
            "QueriedEntities" : {
              "type" : "string",
              "readOnly" : true
            },
            "RecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserType" : {
              "type" : "string",
              "readOnly" : true
            },
            "Message" : {
              "type" : "string",
              "readOnly" : true
            },
            "OperationStatus" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "User" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a user in your organization.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "description" : "Required. Contains the name that a user enters to log in to the API or the user interface. The value for this field must be in the form of an email address, using all lowercase characters. It must also be unique across all organizations. If you try to create or update a User with a duplicate value for this field, the operation is rejected. Each inserted User also counts as a license. Every organization has a maximum number of licenses. If you attempt to exceed the maximum number of licenses by inserting User records, the create is rejected."
            },
            "LastName" : {
              "type" : "string",
              "description" : "Required. The user’s last name."
            },
            "FirstName" : {
              "type" : "string",
              "description" : "The user’s first name."
            },
            "Name" : {
              "type" : "string",
              "description" : "Concatenation of FirstName and LastName. Limited to 203 characters, including whitespaces.",
              "readOnly" : true
            },
            "CompanyName" : {
              "type" : "string",
              "description" : "The name of the user’s company."
            },
            "Division" : {
              "type" : "string",
              "description" : "The division associated with this user, similar to Department and unrelated to DefaultDivision."
            },
            "Department" : {
              "type" : "string",
              "description" : "The company department associated with the user."
            },
            "Title" : {
              "type" : "string",
              "description" : "The user’s business title, such as “Vice President.”"
            },
            "Street" : {
              "type" : "string",
              "description" : "The street address associated with the User."
            },
            "City" : {
              "type" : "string",
              "description" : "The city associated with the user. Up to 40 characters allowed."
            },
            "State" : {
              "type" : "string",
              "description" : "The state associated with the User. Up to 80 characters allowed."
            },
            "PostalCode" : {
              "type" : "string",
              "description" : "The user’s postal or ZIP code. Label is Zip/Postal Code."
            },
            "Country" : {
              "type" : "string",
              "description" : "The country associated with the user. Up to 80 characters allowed."
            },
            "Latitude" : {
              "type" : "number",
              "description" : "Used with Longitude to specify the precise geolocation of an address. Acceptable values are numbers between –90 and 90 up to 15 decimal places. For details on geolocation compound fields, see ."
            },
            "Longitude" : {
              "type" : "number",
              "description" : "Used with Latitude to specify the precise geolocation of an address. Acceptable values are numbers between –180 and 180 up to 15 decimal places. For details on geolocation compound fields, see ."
            },
            "GeocodeAccuracy" : {
              "type" : "string",
              "description" : "The level of accuracy of a location’s geographical coordinates compared with its physical address. A geocoding service typically provides this value based on the address’s latitude and longitude coordinates."
            },
            "Address" : {
              "type" : "object",
              "readOnly" : true
            },
            "Email" : {
              "type" : "string",
              "description" : "Required. The user’s email address."
            },
            "EmailPreferencesAutoBcc" : {
              "type" : "boolean",
              "description" : "Determines whether the user receives copies of sent emails. This option applies only if compliance BCC emails are not enabled."
            },
            "EmailPreferencesAutoBccStayInTouch" : {
              "type" : "boolean"
            },
            "EmailPreferencesStayInTouchReminder" : {
              "type" : "boolean"
            },
            "SenderEmail" : {
              "type" : "string",
              "description" : "The email address used as the From address when the user sends emails. This address is the same value shown in Setup on the My Email Settings page."
            },
            "SenderName" : {
              "type" : "string",
              "description" : "The name used as the email sender when the user sends emails. This name is the same value shown in Setup on the My Email Settings page."
            },
            "Signature" : {
              "type" : "string",
              "description" : "The signature text added to emails. This text is the same value shown in Setup on the My Email Settings page."
            },
            "StayInTouchSubject" : {
              "type" : "string"
            },
            "StayInTouchSignature" : {
              "type" : "string"
            },
            "StayInTouchNote" : {
              "type" : "string"
            },
            "Phone" : {
              "type" : "string",
              "description" : "The user’s phone number."
            },
            "Fax" : {
              "type" : "string",
              "description" : "The user’s fax number."
            },
            "MobilePhone" : {
              "type" : "string",
              "description" : "The user’s mobile or cellular phone number."
            },
            "Alias" : {
              "type" : "string",
              "description" : "Required. The user’s alias. For example, jsmith."
            },
            "CommunityNickname" : {
              "type" : "string",
              "description" : "Name used to identify this user in the Experience Cloud site."
            },
            "BadgeText" : {
              "type" : "string",
              "description" : "The Experience Cloud site role, displayed on the user profile page just below the user name.",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Indicates whether the user has access to log in (true) or not (false). You can modify a User's active status from the user interface or via the API."
            },
            "TimeZoneSidKey" : {
              "type" : "string",
              "description" : "Required. This field is a restricted picklist field. A User time zone affects the offset used when displaying or entering times in the user interface. However, the API does not use a User time zone when querying or setting values. Values for this field are named using region and key city, according to ISO standards. You can also manually set one User time zone in the user interface, and then use that value for creating or updating other User records via the API."
            },
            "UserRoleId" : {
              "type" : "string",
              "description" : "ID of the user’s UserRole. Label is Role ID."
            },
            "LocaleSidKey" : {
              "type" : "string",
              "description" : "Required. This field is a restricted picklist field. The value of the field affects formatting and parsing of values, especially numeric values, in the user interface. It does not affect the API. The field values are named according to the language, and country if necessary, using two-letter ISO codes. The set of names is based on the ISO standard. You can also manually set a user’s locale in the user interface, and then use that value for inserting or updating other users via the API."
            },
            "ReceivesInfoEmails" : {
              "type" : "boolean",
              "description" : "Indicates whether the user receives informational email from Salesforce (true) or not (false)."
            },
            "ReceivesAdminInfoEmails" : {
              "type" : "boolean",
              "description" : "Indicates whether the user receives email for administrators from Salesforce (true) or not (false)."
            },
            "EmailEncodingKey" : {
              "type" : "string",
              "description" : "Required. The email encoding for the user, such as ISO-8859-1 or UTF-8."
            },
            "ProfileId" : {
              "type" : "string",
              "description" : "Required. ID of the user’s Profile. Use this value to cache metadata based on profile. In earlier releases, this was RoleId."
            },
            "UserType" : {
              "type" : "string",
              "description" : "The category of user license. Each UserType is associated with one or more UserLicense records. Each UserLicense is associated with one or more profiles. In API version 10.0 and later, valid values include: Standard: user license. This user type also includes Salesforce Platform and Salesforce Platform One user licenses. Label is Standard. PowerPartner: User whose access is limited because he or she is a partner and typically accesses the application through a partner portal or Experience Cloud site. Label is Partner. CSPLitePortal: user whose access is limited because he or she is an org's customer and accesses the application through a Customer Portal or Experience Cloud site. Label is High Volume Portal. CustomerSuccess: user whose access is limited because he or she is an org's customer and accesses the application through a Customer Portal. Label is Customer Portal User. PowerCustomerSuccess: user whose access is limited because he or she is an org's customer and accesses the application through a Customer Portal. Label is Customer Portal Manager. Users with this license type can view and edit data they directly own or data owned by or shared with users below them in the Customer Portal role hierarchy. CsnOnly: user whose access to the application is limited to Chatter. This user type includes Chatter Free and Chatter moderator users. Label is Chatter Free.",
              "readOnly" : true
            },
            "StartDay" : {
              "type" : "string"
            },
            "EndDay" : {
              "type" : "string"
            },
            "LanguageLocaleKey" : {
              "type" : "string",
              "description" : "Required. The user’s language, such as “French” or “Chinese (Traditional).” Label is Language.In API version 47.0 and later, when using the DescribeSObjectResult API to return PicklistEntry values from this picklist, the active value indicates whether the language is in the user’s Displayed Languages (true) or the user’s Available Languages (false). All other languages aren’t in the returned active value array. In API version 46.0 and earlier, the PicklistEntry active values indicate whether the language is in either the user’s Displayed Languages or Available Languages lists (true) or not in either list (false)."
            },
            "EmployeeNumber" : {
              "type" : "string",
              "description" : "The user’s employee number."
            },
            "DelegatedApproverId" : {
              "type" : "string",
              "description" : "Id of the user who is a delegated approver for this user."
            },
            "ManagerId" : {
              "type" : "string",
              "description" : "The Id of the user who manages this user."
            },
            "LastLoginDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the user last successfully logged in. This value is updated if 60 seconds have elapsed since the user’s last login.",
              "readOnly" : true
            },
            "LastPasswordChangeDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "PasswordExpirationDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "NumberOfFailedLogins" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of failed login attempts for the user’s account. When the maximum number of failed login attempts is reached, the counter resets and the user’s account is locked. If there’s a successful login before the maximum number of failed login attempts is reached, the counter resets and the user’s account remains unlocked.",
              "readOnly" : true
            },
            "SuAccessExpirationDate" : {
              "type" : "string",
              "format" : "date",
              "readOnly" : true
            },
            "OfflineTrialExpirationDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the user’s Connect Offline trial expires.",
              "readOnly" : true
            },
            "OfflinePdaTrialExpirationDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UserPermissionsMarketingUser" : {
              "type" : "boolean",
              "description" : "Required. Indicates whether the user is enabled to manage campaigns in the user interface (true) or not (false). Label is Marketing User."
            },
            "UserPermissionsOfflineUser" : {
              "type" : "boolean",
              "description" : "Required. Indicates whether the user is enabled to use Offline Edition (true) or not (false). Label is Offline User."
            },
            "UserPermissionsCallCenterAutoLogin" : {
              "type" : "boolean",
              "description" : "Required if Salesforce CRM Call Center is enabled. Indicates whether the user is enabled to use the auto login feature of the call center (true) or not (false)."
            },
            "UserPermissionsSFContentUser" : {
              "type" : "boolean",
              "description" : "Indicates whether the user is allocated one Salesforce CRM Content User License (true) or not (false). Label is Salesforce CRM Content User. The Salesforce CRM Content User license grants the user access to the Salesforce CRM Content application."
            },
            "UserPermissionsKnowledgeUser" : {
              "type" : "boolean",
              "description" : "Indicates whether the user is enabled to use Salesforce Knowledge (true) or not (false). Label is Knowledge User."
            },
            "UserPermissionsInteractionUser" : {
              "type" : "boolean",
              "description" : "Indicates whether the user can run flows or not. Label is Flow User."
            },
            "UserPermissionsSupportUser" : {
              "type" : "boolean",
              "description" : "When true, the user can use the Salesforce console."
            },
            "UserPermissionsSiteforceContributorUser" : {
              "type" : "boolean",
              "description" : "Indicates whether the user is allocated one Site.com Contributor feature license (true) or not (false). Label is Site.com Contributor User. The Site.com Contributor feature license grants the user access to the Site.com application. Users with a Contributor license can use Site.com Studio to edit site content only."
            },
            "UserPermissionsSiteforcePublisherUser" : {
              "type" : "boolean",
              "description" : "Indicates whether the user is allocated one Site.com Publisher feature license (true) or not (false). Label is Site.com Publisher User. The Site.com Publisher feature license grants the user access to the Site.com application. Users with a Publisher license can build and style websites, control the layout and functionality of pages and page elements, and add and edit content."
            },
            "UserPermissionsChatterAnswersUser" : {
              "type" : "boolean",
              "description" : "Indicates whether the portal user is enabled to use the Chatter Answers feature (true) or not (false). This field defaults to false when a Customer Portal user is created from the API."
            },
            "ForecastEnabled" : {
              "type" : "boolean",
              "description" : "Indicates whether the user is enabled as a forecast manager (true) or not (false). Forecast managers see forecast rollups from users below them in the forecast hierarchy."
            },
            "UserPreferencesActivityRemindersPopup" : {
              "type" : "boolean",
              "description" : "When true, a reminder popup window automatically opens when an activity reminder is due. Corresponds to the Trigger alert when reminder comes due checkbox at the Reminders page in the personal settings in the user interface."
            },
            "UserPreferencesEventRemindersCheckboxDefault" : {
              "type" : "boolean",
              "description" : "When true, a reminder popup is automatically set on the user's events. Corresponds to the By default, set reminder on Events to... checkbox on the Reminders page in the user interface. This field is related to UserPreference and customizing activity reminders."
            },
            "UserPreferencesTaskRemindersCheckboxDefault" : {
              "type" : "boolean",
              "description" : "When true, a reminder popup is automatically set on the user's tasks. Corresponds to the By default, set reminder on Tasks to... checkbox on the Reminders page in the user interface. This field is related to UserPreference and customizing activity reminders."
            },
            "UserPreferencesReminderSoundOff" : {
              "type" : "boolean",
              "description" : "When true, a sound automatically plays when an activity reminder is due. Corresponds to the Play a reminder sound checkbox on the Reminders page in the user interface."
            },
            "UserPreferencesDisableAllFeedsEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email for all updates to Chatter feeds, based on the types of feed emails and digests the user has enabled. This field is available in API version 24.0 and later."
            },
            "UserPreferencesDisableFollowersEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email every time someone starts following the user in Chatter.This field is available in API version 24.0 and later."
            },
            "UserPreferencesDisableProfilePostEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email every time someone posts to the user’s profile. This field is available in API version 24.0 and later."
            },
            "UserPreferencesDisableChangeCommentEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email every time someone comments on a change the user has made, such as an update to their profile. This field is available in API version 24.0 and later."
            },
            "UserPreferencesDisableLaterCommentEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email every time someone comments on a feed item after the user has commented on the feed item. This field is available in API version 24.0 and later."
            },
            "UserPreferencesDisProfPostCommentEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email every time someone comments on posts on the user’s profile. This field is available in API version 24.0 and later."
            },
            "UserPreferencesContentNoEmail" : {
              "type" : "boolean",
              "description" : "When false, a user with Salesforce CRM Content subscriptions receives email notifications if activity occurs on the subscribed content, libraries, tags, or authors. To receive real-time email alerts, set this field to false and set the UserPreferencesContentEmailAsAndWhen field to true. The default value is false.This field is only visible when Salesforce CRM Content is enabled for your organization."
            },
            "UserPreferencesContentEmailAsAndWhen" : {
              "type" : "boolean",
              "description" : "When false, a user with Salesforce CRM Content subscriptions receives a once daily email summary if activity occurs on the subscribed content, libraries, tags, or authors. To receive email, the UserPreferencesContentNoEmail field must also be false. The default value is false.This field is only visible when Salesforce CRM Content is enabled for your organization."
            },
            "UserPreferencesApexPagesDeveloperMode" : {
              "type" : "boolean",
              "description" : "When true, indicates that the user has enabled developer mode for editing Visualforce pages and controllers."
            },
            "UserPreferencesReceiveNoNotificationsAsApprover" : {
              "type" : "boolean",
              "description" : "Controls email notifications from the approval process for approvers. If true, emails are disabled. If false, emails are enabled. The default value is false. The Receive Approval Request Emails setting in the UI controls this field and the UserPreferencesReceiveNotificationsAsDelegatedApprover field. Setting: If I am an approver or delegated approver Result: UserPreferencesReceiveNoNotificationsAsApprover = false UserPreferencesReceiveNotificationsAsDelegatedApprover = true Setting: Only if I am an approver Result: UserPreferencesReceiveNoNotificationsAsApprover = false UserPreferencesReceiveNotificationsAsDelegatedApprover = false Setting: Only if I am a delegated approver Result: UserPreferencesReceiveNoNotificationsAsApprover = true UserPreferencesReceiveNotificationsAsDelegatedApprover = true Setting: Never Result: UserPreferencesReceiveNoNotificationsAsApprover = true UserPreferencesReceiveNotificationsAsDelegatedApprover = false"
            },
            "UserPreferencesReceiveNotificationsAsDelegatedApprover" : {
              "type" : "boolean",
              "description" : "Controls email notifications from the approval process for delegated approvers. If true, emails are enabled. If false, emails are disabled. The default value is false.The Receive Approval Request Emails setting in the UI controls this field and the UserPreferencesReceiveNoNotificationsAsApprover field. Setting: If I am an approver or delegated approver Result: UserPreferencesReceiveNoNotificationsAsApprover = false UserPreferencesReceiveNotificationsAsDelegatedApprover = true Setting: Only if I am an approver Result: UserPreferencesReceiveNoNotificationsAsApprover = false UserPreferencesReceiveNotificationsAsDelegatedApprover = false Setting: Only if I am a delegated approver Result: UserPreferencesReceiveNoNotificationsAsApprover = true UserPreferencesReceiveNotificationsAsDelegatedApprover = true Setting: Never Result: UserPreferencesReceiveNoNotificationsAsApprover = true UserPreferencesReceiveNotificationsAsDelegatedApprover = false"
            },
            "UserPreferencesHideCSNGetChatterMobileTask" : {
              "type" : "boolean",
              "description" : "When true, the Chatter recommendations panel never displays the recommendation to install Chatter Mobile. This field is available in API version 26.0 and later."
            },
            "UserPreferencesDisableMentionsPostEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email every time the user is mentioned in posts. This field is available in API version 24.0 and later."
            },
            "UserPreferencesDisMentionsCommentEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email every time the user is mentioned in comments. This field is available in API version 24.0 and later."
            },
            "UserPreferencesHideCSNDesktopTask" : {
              "type" : "boolean",
              "description" : "When true, the Chatter recommendations panel never displays the recommendation to install Chatter Desktop. This field is available in API version 26.0 and later."
            },
            "UserPreferencesHideChatterOnboardingSplash" : {
              "type" : "boolean",
              "description" : "When true, the initial Chatter onboarding prompts do not appear."
            },
            "UserPreferencesHideSecondChatterOnboardingSplash" : {
              "type" : "boolean",
              "description" : "When true, the secondary Chatter onboarding prompts do not appear."
            },
            "UserPreferencesDisCommentAfterLikeEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email every time someone comments on a post the user has liked. This field is available in API version 24.0 and later."
            },
            "UserPreferencesDisableLikeEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email every time someone likes a post or comment the user has made. This field is available in API version 24.0 and later."
            },
            "UserPreferencesSortFeedByComment" : {
              "type" : "boolean",
              "description" : "Specifies the data value used in sorting a user’s feed. When true, the feed is sorted by most recent comment activity. When false, the feed is sorted by post date."
            },
            "UserPreferencesDisableMessageEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email for Chatter messages sent to the user. This field is available in API version 24.0 and later."
            },
            "UserPreferencesDisableBookmarkEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email every time someone comments on a Chatter feed item after the user has bookmarked it. This field is available in API version 24.0 and later."
            },
            "UserPreferencesDisableSharePostEmail" : {
              "type" : "boolean",
              "description" : "When false, the user automatically receives email every time the user’s post is shared. This field is available in API version 24.0 and later."
            },
            "UserPreferencesActionLauncherEinsteinGptConsent" : {
              "type" : "boolean"
            },
            "UserPreferencesAssistiveActionsEnabledInActionLauncher" : {
              "type" : "boolean"
            },
            "UserPreferencesEnableAutoSubForFeeds" : {
              "type" : "boolean",
              "description" : "When true, the user automatically subscribes to feeds for any objects that the user creates. This field is available in API version 25.0 and later."
            },
            "UserPreferencesDisableFileShareNotificationsForApi" : {
              "type" : "boolean",
              "description" : "When false, email notifications are sent from the person who has shared a file to the users with whom the file has been shared. This field is available in API version 25.0 and later."
            },
            "UserPreferencesShowTitleToExternalUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the business title field in the user’s contact information. Title is visible only to internal members of the user’s organization when: This field is false. When false, this field returns the value #N/A. Title is visible to external members in an Experience Cloud site when: This field is true, or This field is false but UserPreferencesShowTitleToGuestUsers is true, which overrides this field’s value. External users are users with Community, Customer Portal, or partner portal licenses. The default value is true. This field is available in API version 26.0 and later."
            },
            "UserPreferencesShowManagerToExternalUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the manager field in the user’s contact information. Manager is visible only to internal members of the user’s organization when this field is false. Manager is visible to external members in an Experience Cloud site when this field is true. External users are users with Community, Customer Portal, or partner portal licenses. When false, this field returns the value #N/A. The default value is false. This field is available in API version 26.0 and later."
            },
            "UserPreferencesShowEmailToExternalUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the email address field in the user’s contact information. Email address is visible only to internal members of the user’s organization when this field is false. Email address is visible to external members in an Experience Cloud site when this field is true. External users are users with Community, Customer Portal, or partner portal licenses. When false, this field returns the value #N/A. The default value is false. This field is available in API version 26.0 and later."
            },
            "UserPreferencesShowWorkPhoneToExternalUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the work phone number field in the user’s contact information. The number is visible only to internal members of the user’s organization when this field is false. The number is visible to external members in an Experience Cloud site when this field is true. External users are users with Community, Customer Portal, or partner portal licenses. When false, this field returns the value #N/A. The default value is false. This field is available in API version 26.0 and later."
            },
            "UserPreferencesShowMobilePhoneToExternalUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the mobile or cellular phone number field in the user’s contact information. The number is visible only to internal members of the user’s organization when this field is false. The number is visible to external members in an Experience Cloud site when this field is true. External users are users with Community, Customer Portal, or partner portal licenses. When false, this field returns the value #N/A. The default value is false. This field is available in API version 26.0 and later."
            },
            "UserPreferencesShowFaxToExternalUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the fax number field in the user’s contact information. Fax number is visible only to internal members of the user’s organization when this field is false. Fax number is visible to external members in an Experience Cloud site when this field is true. External users are users with Community, Customer Portal, or partner portal licenses. When false, this field returns the value #N/A. The default value is false. This field is available in API version 26.0 and later."
            },
            "UserPreferencesShowStreetAddressToExternalUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the street address field in the user’s contact information. The address is visible only to internal members of the user’s organization when this field is false. The address is visible to external members in an Experience Cloud site when this field is true. External users are users with Community, Customer Portal, or partner portal licenses. When false, this field returns the value #N/A. The default value is false. This field is available in API version 26.0 and later."
            },
            "UserPreferencesShowCityToExternalUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the city field in the user’s contact information. City is visible only to internal members of the user’s organization when: This field is false. When false, this field returns the value #N/A. City is visible to external members in an Experience Cloud site when: This field is true, or This field is false but UserPreferencesShowCityToGuestUsers is true, which overrides this field’s value. External users are users with Community, Customer Portal, or partner portal licenses. The default value is false. This field is available in API version 26.0 and later."
            },
            "UserPreferencesShowStateToExternalUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the state field in the user’s contact information. State is visible only to internal members of the user’s organization when: This field is false. When false, this field returns the value #N/A. State is visible to external members in an Experience Cloud site when: This field is true, or This field is false but UserPreferencesShowStateToGuestUsers is true, which overrides this field’s value. External users are users with Community, Customer Portal, or partner portal licenses. When false, this field returns the value #N/A. The default value is false. This field is available in API version 26.0 and later."
            },
            "UserPreferencesShowPostalCodeToExternalUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the postal or ZIP code field in the user’s contact information. Postal code is visible only to internal members of the user’s organization when: This field is false. When false, this field returns the value #N/A. Postal code is visible to external members in an Experience Cloud site when: This field is true, or This field is false but UserPreferencesShowPostalCodeToGuestUsers is true, which overrides this field’s value. External users are users with Community, Customer Portal, or partner portal licenses. The default value is false. This field is available in API version 26.0 and later."
            },
            "UserPreferencesShowCountryToExternalUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the country field in the user’s contact information. Country is visible only to internal members of the user’s organization when: This field is false. When false, this field returns the value #N/A. Country is visible to external members in an Experience Cloud site when: This field is true, or This field is false but UserPreferencesShowCountryToGuestUsers is true, which overrides this field’s value. External users are users with Community, Customer Portal, or partner portal licenses. The default value is false. This field is available in API version 26.0 and later."
            },
            "UserPreferencesShowProfilePicToGuestUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the user’s profile photo. When true, the photo is visible to guest users in an Experience Cloud site. Guest users can access public Site.com and Salesforce sites, and public pages in Experience Cloud sites, via the Guest User license associated with each site. When false, this field returns the stock photo. The default value is false. This field is available in API version 28.0 and later."
            },
            "UserPreferencesShowTitleToGuestUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the business title field in the user’s contact information. When true, title is visible to guest users. Guest users can access public Site.com and Salesforce sites, and public pages in Experience Cloud sites, via the Guest User license associated with each site. When false, this field returns the value #N/A. When true, this field overrides the value false in UserPreferencesShowTitleToExternalUsers, making the user’s title visible to external members. The default value is false. This field is available in API version 28.0 and later."
            },
            "UserPreferencesShowCityToGuestUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the city field in the user’s contact information. When true, city is visible to guest users. Guest users can access public Site.com and Salesforce sites, and public pages in Experience Cloud sites, via the Guest User license associated with each site. When false, this field returns the value #N/A. When true, this field overrides the value false in UserPreferencesShowCityToExternalUsers, making the user’s city visible to external members. The default value is false. This field is available in API version 28.0 and later."
            },
            "UserPreferencesShowStateToGuestUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the state field in the user’s contact information. When true, state is visible to guest users. Guest users can access public Site.com and Salesforce sites, and public pages in Experience Cloud sites, via the Guest User license associated with each site. When false, this field returns the value #N/A. When true, this field overrides the value false in UserPreferencesShowStateToExternalUsers, making the user’s state visible to external members. The default value is false. This field is available in API version 28.0 and later."
            },
            "UserPreferencesShowPostalCodeToGuestUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the postal or ZIP code field in the user’s contact information. When true, postal code is visible to guest users. Guest users can access public Site.com and Salesforce sites, and public pages in Experience Cloud sites, via the Guest User license associated with each site. When false, this field returns the value #N/A. When true, this field overrides the value false in UserPreferencesShowPostalCodeToExternalUsers, making the user’s postal code visible to external members. The default value is false. This field is available in API version 28.0 and later."
            },
            "UserPreferencesShowCountryToGuestUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the country field in the user’s contact information. When true, country is visible to guest users. Guest users can access public Site.com and Salesforce sites, and public pages in Experience Cloud sites, via the Guest User license associated with each site. When false, this field returns the value #N/A. When true, this field overrides the value false in UserPreferencesShowCountryToExternalUsers, making the user’s country visible to external members. The default value is false. This field is available in API version 28.0 and later."
            },
            "UserPreferencesShowForecastingChangeSignals" : {
              "type" : "boolean"
            },
            "UserPreferencesLiveAgentMiawSetupDeflection" : {
              "type" : "boolean"
            },
            "UserPreferencesHideS1BrowserUI" : {
              "type" : "boolean",
              "description" : "Controls the interface that the user sees when logging in to Salesforce from a supported mobile browser. If false, the user is automatically redirected to the Salesforce mobile web. If true, the user sees the full Salesforce site. The default value is false. Label is Salesforce User. This field is available in API version 29.0 or later."
            },
            "UserPreferencesDisableEndorsementEmail" : {
              "type" : "boolean",
              "description" : "When false, the member automatically receives email every time someone endorses them for a topic."
            },
            "UserPreferencesPathAssistantCollapsed" : {
              "type" : "boolean",
              "description" : "When true, Sales Path appears collapsed or hidden to the user. This field is available in API version 35.0 and later."
            },
            "UserPreferencesCacheDiagnostics" : {
              "type" : "boolean"
            },
            "UserPreferencesShowEmailToGuestUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the email address field in the user’s contact information. When true, the email address is visible to guest users. Guest users can access public Site.com and Salesforce sites, and public pages in Experience Cloud sites, via the Guest User license associated with each site. When true, this field overrides the value false in UserPreferencesShowEmailToExternalUsers, making the user’s email address visible to guests. When false, this field returns the value #N/A. The default value is false. This field is available in API version 34.0 and later."
            },
            "UserPreferencesShowManagerToGuestUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the manager field in the user’s contact information. When true, the manager field is visible to guest users. Guest users can access public Site.com and Salesforce sites, and public pages in Experience Cloud sites, via the Guest User license associated with each site. When true, this field overrides the value false in UserPreferencesShowManagerToExternalUsers, making the user’s manager visible to guests. When false, this field returns the value #N/A. The default value is false. This field is available in API version 34.0 and later."
            },
            "UserPreferencesShowWorkPhoneToGuestUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the work phone field in the user’s contact information. When true, the work phone field is visible to guest users. Guest users can access public Site.com and Salesforce sites, and public pages in Experience Cloud sites, via the Guest User license associated with each site. When true, this field overrides the value false in UserPreferencesShowWorkPhoneToExternalUsers, making the user’s work phone visible to guests. When false, this field returns the value #N/A. The default value is false. This field is available in API version 34.0 and later."
            },
            "UserPreferencesShowMobilePhoneToGuestUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the mobile phone field in the user’s contact information. When true, the mobile phone field is visible to guest users. Guest users can access public Site.com and Salesforce sites, and public pages in Experience Cloud sites, via the Guest User license associated with each site. When true, this field overrides the value false in UserPreferencesShowMobilePhoneToExternalUsers, making the user’s mobile phone visible to guests. When false, this field returns the value #N/A. The default value is false. This field is available in API version 34.0 and later."
            },
            "UserPreferencesShowFaxToGuestUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the fax number field in the user’s contact information. When true, the fax number field is visible to guest users. Guest users can access public Site.com and Salesforce sites, and public pages in Experience Cloud sites, via the Guest User license associated with each site. When true, this field overrides the value false in UserPreferencesShowFaxToExternalUsers, making the user’s fax number visible to guests. When false, this field returns the value #N/A. The default value is false. This field is available in API version 34.0 and later."
            },
            "UserPreferencesShowStreetAddressToGuestUsers" : {
              "type" : "boolean",
              "description" : "Indicates the visibility of the street address field in the user’s contact information. When true, the street address field is visible to guest users. Guest users can access public Site.com and Salesforce sites, and public pages in Experience Cloud sites, via the Guest User license associated with each site. When true, this field overrides the value false in UserPreferencesShowStreetAddressToExternalUsers, making the user’s street address visible to guests. When false, this field returns the value #N/A. The default value is false. This field is available in API version 34.0 and later."
            },
            "UserPreferencesLightningExperiencePreferred" : {
              "type" : "boolean",
              "description" : "When true, redirects the user to the Lightning Experience interface. Label is Switch to Lightning Experience. This field is available in API version 35.0 and later."
            },
            "UserPreferencesPreviewLightning" : {
              "type" : "boolean"
            },
            "UserPreferencesHideEndUserOnboardingAssistantModal" : {
              "type" : "boolean",
              "description" : "Reserved for future use."
            },
            "UserPreferencesHideLightningMigrationModal" : {
              "type" : "boolean",
              "description" : "Reserved for future use."
            },
            "UserPreferencesHideSfxWelcomeMat" : {
              "type" : "boolean",
              "description" : "Controls whether a user sees the Lightning Experience new user message. That message welcomes users to the new interface and provides step-by-step instructions that describe how to return to Salesforce Classic."
            },
            "UserPreferencesHideBiggerPhotoCallout" : {
              "type" : "boolean",
              "description" : "When true, users can choose to hide the callout text below the large profile photo."
            },
            "UserPreferencesGlobalNavBarWTShown" : {
              "type" : "boolean"
            },
            "UserPreferencesGlobalNavGridMenuWTShown" : {
              "type" : "boolean"
            },
            "UserPreferencesCreateLEXAppsWTShown" : {
              "type" : "boolean"
            },
            "UserPreferencesFavoritesWTShown" : {
              "type" : "boolean"
            },
            "UserPreferencesRecordHomeSectionCollapseWTShown" : {
              "type" : "boolean"
            },
            "UserPreferencesRecordHomeReservedWTShown" : {
              "type" : "boolean"
            },
            "UserPreferencesFavoritesShowTopFavorites" : {
              "type" : "boolean"
            },
            "UserPreferencesExcludeMailAppAttachments" : {
              "type" : "boolean"
            },
            "UserPreferencesSuppressTaskSFXReminders" : {
              "type" : "boolean",
              "description" : "When true, task reminders don’t appear. Corresponds to the Show task reminders in Lightning Experience. checkbox on the Activity Reminders page in the user interface. This field is related to UserPreference and customizing activity reminders."
            },
            "UserPreferencesSuppressEventSFXReminders" : {
              "type" : "boolean",
              "description" : "When true, event reminders don’t appear. Corresponds to the Show event reminders in Lightning Experience checkbox on the Activity Reminders page in the user interface. This field is related to UserPreference and customizing activity reminders."
            },
            "UserPreferencesPreviewCustomTheme" : {
              "type" : "boolean"
            },
            "UserPreferencesHasCelebrationBadge" : {
              "type" : "boolean"
            },
            "UserPreferencesUserDebugModePref" : {
              "type" : "boolean",
              "description" : "When true, the Lightning Component framework executes in debug mode for the user. Corresponds to the Debug Mode checkbox on the Advanced User Details page of personal settings in the user interface."
            },
            "UserPreferencesSRHOverrideActivities" : {
              "type" : "boolean"
            },
            "UserPreferencesNewLightningReportRunPageEnabled" : {
              "type" : "boolean"
            },
            "UserPreferencesReverseOpenActivitiesView" : {
              "type" : "boolean"
            },
            "UserPreferencesHasSentWarningEmail" : {
              "type" : "boolean"
            },
            "UserPreferencesHasSentWarningEmail238" : {
              "type" : "boolean"
            },
            "UserPreferencesHasSentWarningEmail240" : {
              "type" : "boolean"
            },
            "UserPreferencesNativeEmailClient" : {
              "type" : "boolean",
              "description" : "Use this field to set a default email preference for the user’s native email client. This field is available in API version 47.0 and later. The default value is false, corresponding to the Salesforce docked email composer."
            },
            "UserPreferencesShowForecastingRoundedAmounts" : {
              "type" : "boolean"
            },
            "HasUserVerifiedPhone" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "HasUserVerifiedEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "description" : "ID of the Contact associated with this account. The contact must have a value in the AccountId field or an error occurs."
            },
            "AccountId" : {
              "type" : "string",
              "description" : "ID of the Account associated with a Customer Portal user. This field is null for Salesforce users.",
              "readOnly" : true
            },
            "CallCenterId" : {
              "type" : "string",
              "description" : "If Salesforce CRM Call Center is enabled, represents the call center to which this user is assigned."
            },
            "Extension" : {
              "type" : "string",
              "description" : "The user’s phone extension number."
            },
            "FederationIdentifier" : {
              "type" : "string",
              "description" : "Indicates the value that must be listed in the Subject element of a Security Assertion Markup Language (SAML) IDP certificate to authenticate the user for a client application using single sign-on. This value must be specified if the SAML User ID Type is Assertion contains Federation ID from the User record. Otherwise, this field can’t be edited."
            },
            "AboutMe" : {
              "type" : "string",
              "description" : "Information about the user, such as areas of interest or skills. This field is available even if Chatter is disabled."
            },
            "FullPhotoUrl" : {
              "type" : "string",
              "description" : "The URL for the user's profile photo. This field is available even if Chatter is disabled. The URL is updated every time a photo is uploaded and reflects the most recent photo. If a newer photo has been uploaded, the URL returned for an older photo is not guaranteed to return a photo. Query this field for the URL of the most recent photo. This field is available in API version 20.0 and later.",
              "readOnly" : true
            },
            "SmallPhotoUrl" : {
              "type" : "string",
              "description" : "The URL for a thumbnail of the user's profile photo. This field is available even if Chatter is disabled. The URL is updated every time a photo is uploaded and reflects the most recent photo. If a newer photo has been uploaded, the URL returned for an older photo is not guaranteed to return a photo. Query this field for the URL of the most recent photo. This field is available in API version 20.0 and later.",
              "readOnly" : true
            },
            "IsExtIndicatorVisible" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "OutOfOfficeMessage" : {
              "type" : "string",
              "readOnly" : true
            },
            "MediumPhotoUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "DigestFrequency" : {
              "type" : "string",
              "description" : "Required. The frequency at which the system sends the user’s Chatter personal email digest. The valid values are: D = Daily W = Weekly N = Never The default value is D."
            },
            "DefaultGroupNotificationFrequency" : {
              "type" : "string",
              "description" : "Required. The default frequency for sending the user's Chatter group email notifications when the user joins groups. The valid values are: P—Email on every post D—Daily digests W—Weekly digests N—Never The default value is N. For Professional, Enterprise, Unlimited, and Developer Edition organizations that existed prior to API version 22.0, the default value remains D. This field is available in API version 21.0 and later."
            },
            "WorkspaceId" : {
              "type" : "string"
            },
            "LastViewedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed this record. If this value is null, this record might only have been referenced (LastReferencedDate) and not viewed.",
              "readOnly" : true
            },
            "LastReferencedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp for when the current user last viewed a record related to this record.",
              "readOnly" : true
            },
            "BannerPhotoUrl" : {
              "type" : "string",
              "description" : "The URL for the user's banner photo. This field is available in API version 36.0 and later.",
              "readOnly" : true
            },
            "SmallBannerPhotoUrl" : {
              "type" : "string",
              "description" : "The URL for the small user profile banner photo.",
              "readOnly" : true
            },
            "MediumBannerPhotoUrl" : {
              "type" : "string",
              "description" : "The URL for the medium-sized user profile banner photo.",
              "readOnly" : true
            },
            "IsProfilePhotoActive" : {
              "type" : "boolean",
              "description" : "Indicates whether a user has a profile photo (true) or not (false). This field is available in API version 36.0 and later.",
              "readOnly" : true
            },
            "IndividualId" : {
              "type" : "string",
              "description" : "ID of the data privacy record associated with this user. This field is available if Data Protection and Privacy is enabled."
            }
          }
        } ]
      },
      "UserAppInfo" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Stores the last Lightning app logged in to.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "The ID of the user that used this app."
            },
            "FormFactor" : {
              "type" : "string",
              "description" : "The relative size of the app as displayed. Values are: Small—suitable for a small device like a mobile phone Medium—suitable for a tablet Large—suitable for a large display device, like a monitor It’s possible to have three versions of the app as the one last logged in to, where each version has a different form factor."
            },
            "AppDefinitionId" : {
              "type" : "string",
              "description" : "The ID of the last Lightning app that the user logged in to. This field is available in API version 43.0 and later."
            }
          }
        } ]
      },
      "UserAppInfoChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FormFactor" : {
              "type" : "string",
              "readOnly" : true
            },
            "AppDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UserAppMenuCustomization" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an individual user’s settings for items in the app menu or App Launcher.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "The ID of the user for these specific settings."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ApplicationId" : {
              "type" : "string",
              "description" : "The 15-character ID for the application associated with the menu item."
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The index value that controls where this item appears in the menu. For example, a menu item with a sort order value of 5 will appear between items with sort order values of 3 and 9."
            }
          }
        } ]
      },
      "UserAppMenuCustomizationShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "UserAppMenuItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the organization-wide settings for items in the app menu or App Launcher that the requesting user has access to in Setup.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "AppMenuItemId" : {
              "type" : "string",
              "description" : "The 15-character ID for the menu item.",
              "readOnly" : true
            },
            "ApplicationId" : {
              "type" : "string",
              "description" : "The 15-character ID for the application associated with the menu item.",
              "readOnly" : true
            },
            "Label" : {
              "type" : "string",
              "description" : "The app’s name.",
              "readOnly" : true
            },
            "Description" : {
              "type" : "string",
              "description" : "A description of this menu item.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The API name of the item.",
              "readOnly" : true
            },
            "UserSortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The index value that represents where the user set this item in the menu (or App Launcher). For example, an item with a sort order value of 5 will appear between items with sort order values of 3 and 9. This value is separate from SortOrder so you can create logic incorporating both values. For example, if you want the user-sorted items to appear first, followed by the organization order for the rest, use: SELECT ApplicationId,SortOrder,UserSortOrder FROM AppMenuItem order by userSortOrder NULLS LAST, sortOrder NULLS LAST",
              "readOnly" : true
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The index value that controls where this item appears in the menu. For example, a menu item with a sort order value of 5 will appear between items with sort order values of 3 and 9.",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "description" : "The type of application represented by this item. The types are: ConnectedApplication Network ServiceProvider TabSet",
              "readOnly" : true
            },
            "LogoUrl" : {
              "type" : "string",
              "description" : "The logo for the menu item’s application. The default is the initials of the Label value.",
              "readOnly" : true
            },
            "IconUrl" : {
              "type" : "string",
              "description" : "The icon for the menu item’s application.",
              "readOnly" : true
            },
            "InfoUrl" : {
              "type" : "string",
              "description" : "The URL for more information about the application.",
              "readOnly" : true
            },
            "StartUrl" : {
              "type" : "string",
              "description" : "The location users are directed to after they’ve authenticated. For a connected app, this is the location specified by the StartUrl. Otherwise it’s the application’s default start page.",
              "readOnly" : true
            },
            "MobileStartUrl" : {
              "type" : "string",
              "description" : "The location mobile users are directed to after they’ve authenticated. This is only used with connected apps.",
              "readOnly" : true
            },
            "IsVisible" : {
              "type" : "boolean",
              "description" : "If true, the app is visible to the user.",
              "readOnly" : true
            },
            "IsUsingAdminAuthorization" : {
              "type" : "boolean",
              "description" : "If true, the app is pre-authorized for certain users by the administrator.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UserChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "Username" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastName" : {
              "type" : "string",
              "readOnly" : true
            },
            "FirstName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CompanyName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Division" : {
              "type" : "string",
              "readOnly" : true
            },
            "Department" : {
              "type" : "string",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Street" : {
              "type" : "string",
              "readOnly" : true
            },
            "City" : {
              "type" : "string",
              "readOnly" : true
            },
            "State" : {
              "type" : "string",
              "readOnly" : true
            },
            "PostalCode" : {
              "type" : "string",
              "readOnly" : true
            },
            "Country" : {
              "type" : "string",
              "readOnly" : true
            },
            "Latitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "Longitude" : {
              "type" : "number",
              "readOnly" : true
            },
            "GeocodeAccuracy" : {
              "type" : "string",
              "readOnly" : true
            },
            "Address" : {
              "type" : "object",
              "readOnly" : true
            },
            "Email" : {
              "type" : "string",
              "readOnly" : true
            },
            "EmailPreferencesAutoBcc" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "EmailPreferencesAutoBccStayInTouch" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "EmailPreferencesStayInTouchReminder" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SenderEmail" : {
              "type" : "string",
              "readOnly" : true
            },
            "SenderName" : {
              "type" : "string",
              "readOnly" : true
            },
            "Signature" : {
              "type" : "string",
              "readOnly" : true
            },
            "StayInTouchSubject" : {
              "type" : "string",
              "readOnly" : true
            },
            "StayInTouchSignature" : {
              "type" : "string",
              "readOnly" : true
            },
            "StayInTouchNote" : {
              "type" : "string",
              "readOnly" : true
            },
            "Phone" : {
              "type" : "string",
              "readOnly" : true
            },
            "Fax" : {
              "type" : "string",
              "readOnly" : true
            },
            "MobilePhone" : {
              "type" : "string",
              "readOnly" : true
            },
            "Alias" : {
              "type" : "string",
              "readOnly" : true
            },
            "CommunityNickname" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "TimeZoneSidKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserRoleId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LocaleSidKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReceivesInfoEmails" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ReceivesAdminInfoEmails" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "EmailEncodingKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "ProfileId" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserType" : {
              "type" : "string",
              "readOnly" : true
            },
            "LanguageLocaleKey" : {
              "type" : "string",
              "readOnly" : true
            },
            "EmployeeNumber" : {
              "type" : "string",
              "readOnly" : true
            },
            "DelegatedApproverId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ManagerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastLoginDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastPasswordChangeDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "NumberOfFailedLogins" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "OfflineTrialExpirationDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "OfflinePdaTrialExpirationDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UserPermissionsMarketingUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPermissionsOfflineUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPermissionsCallCenterAutoLogin" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPermissionsSFContentUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPermissionsKnowledgeUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPermissionsInteractionUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPermissionsSupportUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPermissionsSiteforceContributorUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPermissionsSiteforcePublisherUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPermissionsChatterAnswersUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ForecastEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesActivityRemindersPopup" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesEventRemindersCheckboxDefault" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesTaskRemindersCheckboxDefault" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesReminderSoundOff" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisableAllFeedsEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisableFollowersEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisableProfilePostEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisableChangeCommentEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisableLaterCommentEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisProfPostCommentEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesContentNoEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesContentEmailAsAndWhen" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesApexPagesDeveloperMode" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesReceiveNoNotificationsAsApprover" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesReceiveNotificationsAsDelegatedApprover" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHideCSNGetChatterMobileTask" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisableMentionsPostEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisMentionsCommentEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHideCSNDesktopTask" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHideChatterOnboardingSplash" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHideSecondChatterOnboardingSplash" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisCommentAfterLikeEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisableLikeEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesSortFeedByComment" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisableMessageEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisableBookmarkEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisableSharePostEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesActionLauncherEinsteinGptConsent" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesAssistiveActionsEnabledInActionLauncher" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesEnableAutoSubForFeeds" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisableFileShareNotificationsForApi" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowTitleToExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowManagerToExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowEmailToExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowWorkPhoneToExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowMobilePhoneToExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowFaxToExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowStreetAddressToExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowCityToExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowStateToExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowPostalCodeToExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowCountryToExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowProfilePicToGuestUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowTitleToGuestUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowCityToGuestUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowStateToGuestUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowPostalCodeToGuestUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowCountryToGuestUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowForecastingChangeSignals" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesLiveAgentMiawSetupDeflection" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHideS1BrowserUI" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesDisableEndorsementEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesPathAssistantCollapsed" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesCacheDiagnostics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowEmailToGuestUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowManagerToGuestUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowWorkPhoneToGuestUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowMobilePhoneToGuestUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowFaxToGuestUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowStreetAddressToGuestUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesLightningExperiencePreferred" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesPreviewLightning" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHideEndUserOnboardingAssistantModal" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHideLightningMigrationModal" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHideSfxWelcomeMat" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHideBiggerPhotoCallout" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesGlobalNavBarWTShown" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesGlobalNavGridMenuWTShown" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesCreateLEXAppsWTShown" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesFavoritesWTShown" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesRecordHomeSectionCollapseWTShown" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesRecordHomeReservedWTShown" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesFavoritesShowTopFavorites" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesExcludeMailAppAttachments" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesSuppressTaskSFXReminders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesSuppressEventSFXReminders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesPreviewCustomTheme" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHasCelebrationBadge" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesUserDebugModePref" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesSRHOverrideActivities" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesNewLightningReportRunPageEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesReverseOpenActivitiesView" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHasSentWarningEmail" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHasSentWarningEmail238" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesHasSentWarningEmail240" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesNativeEmailClient" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "UserPreferencesShowForecastingRoundedAmounts" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "ContactId" : {
              "type" : "string",
              "readOnly" : true
            },
            "AccountId" : {
              "type" : "string",
              "readOnly" : true
            },
            "CallCenterId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Extension" : {
              "type" : "string",
              "readOnly" : true
            },
            "FederationIdentifier" : {
              "type" : "string",
              "readOnly" : true
            },
            "AboutMe" : {
              "type" : "string",
              "readOnly" : true
            },
            "DigestFrequency" : {
              "type" : "string",
              "readOnly" : true
            },
            "DefaultGroupNotificationFrequency" : {
              "type" : "string",
              "readOnly" : true
            },
            "WorkspaceId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsProfilePhotoActive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IndividualId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UserEmailPreferredPerson" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a mapping for a user’s preferred record for an email address when multiple records match an email field.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "Required. The userId that owns the record. Each record is only accessible to the owner."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Read-only. Auto-generated field.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "Email" : {
              "type" : "string",
              "description" : "Required. The unique email the mapping applies to. This field is unique for each user."
            },
            "PersonRecordId" : {
              "type" : "string",
              "description" : "Required. The recordId of a contact, lead, or user that represents the preferred record for the email address. Use cascade delete for contact and lead, and delete if the personId is a deactivated user record."
            }
          }
        } ]
      },
      "UserEmailPreferredPersonChangeEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ReplayId" : {
              "type" : "string",
              "readOnly" : true
            },
            "ChangeEventHeader" : {
              "type" : "object",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "Email" : {
              "type" : "string",
              "readOnly" : true
            },
            "PersonRecordId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UserEmailPreferredPersonShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a sharing entry on a UserEmailPreferredPerson object. Sharing is not customizable for UserEmailPreferredPerson records.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "Id of the parent record, if any."
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "Required. ID of the user or group that has been given access to the UserEmailPreferredPerson record. The UserOrGroupID is polymorphic. The label is User/Group Id."
            },
            "AccessLevel" : {
              "type" : "string",
              "description" : "Required. The level of access allowed. Values can be: All Edit Read ."
            },
            "RowCause" : {
              "type" : "string",
              "description" : "Required. Reason that the sharing entry exists. Valid values can include: Manual—The User or Group has access because a user with All access manually shared the record with them. Owner—The User is the owner of the record or is in a role above the record owner in the role hierarchy."
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "UserEntityAccess" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsMergeable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsUpdatable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsActivateable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsReadable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsCreatable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsEditable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsDeletable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsUndeletable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsFlsUpdatable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "EntityDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UserFeed" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "readOnly" : true
            },
            "Type" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CommentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "LikeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "Title" : {
              "type" : "string",
              "readOnly" : true
            },
            "Body" : {
              "type" : "string",
              "readOnly" : true
            },
            "LinkUrl" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsRichText" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "RelatedRecordId" : {
              "type" : "string",
              "readOnly" : true
            },
            "InsertedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "BestCommentId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UserFieldAccess" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsUpdatable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsCreatable" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "IsAccessible" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "EntityDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FieldDefinitionId" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UserLicense" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a user license in your organization. A user license entitles a user to specific functionality and determines the profiles and permission sets available to the user.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "LicenseDefinitionKey" : {
              "type" : "string",
              "description" : "A string that uniquely identifies a particular user license. Label is License Def. ID. Values are: AUL: corresponds to the Salesforce Platform user license AUL1: corresponds to the Salesforce Platform One user license AUL_LIGHT corresponds to the Salesforce Platform Light user license FDC_ONE corresponds to the Lightning Platform - One App user license FDC_SUB corresponds to the Lightning Platform App Subscription user license Overage_Platform_Portal_User corresponds to the Overage Authenticated Website user license PID_STRATEGIC_PRM: corresponds to the Gold Partner user license PID_CHATTER corresponds to the Chatter Only user license PID_CONTENT corresponds to the Content Only user license PID_Customer_Portal_Basic: corresponds to the Customer Portal Manager Standard user license and the Customer Portal User license PID_Customer_Portal_Standard: corresponds to the Customer Portal Manager Custom user license PID_FDC_FREE corresponds to the Lightning Platform Free user license PID_IDEAS corresponds to the Ideas Only user license PID_Ideas_Only_Portal corresponds to the Ideas Only Portal user license PID_Ideas_Only_Site corresponds to the Ideas Only Site user license PID_KNOWLEDGE corresponds to the Knowledge Only user license PID_Customer_Community corresponds to the Customer Community license. PID_Customer_Community_Login corresponds to the Customer Community Login license. PID_Partner_Community corresponds to the Partner Community license. PID_Partner_Community_Login corresponds to the Partner Community Login license. PID_Limited_Customer_Portal_Basic: corresponds to the Limited Customer Portal Manager Standard user license PID_Limited_Customer_Portal_Standard: corresponds to the Limited Customer Portal Manager Custom user license PID_Overage_Customer_Portal_Basic: corresponds to the Overage Customer Portal Manager Standard user license PID_Overage_High Volume Customer Portal corresponds to the Overage High Volume Customer Portal user license Platform_Portal_User: corresponds to the Authenticated Website user license POWER_PRM: corresponds to the Partner user license POWER_SSP: corresponds to the Customer Portal Manager user license SFDC: corresponds to the Full CRM user license",
              "readOnly" : true
            },
            "TotalLicenses" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of user licenses in the organization.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "The current status of the user license. Valid values for this field are Active and Disabled.",
              "readOnly" : true
            },
            "UsedLicenses" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of user licenses that are assigned to active users in the organization.",
              "readOnly" : true
            },
            "UsedLicensesLastUpdated" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The timestamp of the query. If your license count exceeds your org’s allotted threshold, the count timestamp reflects the previous day, otherwise the timestamp reflects the current day and time.",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The internal name of the user license. Your organization may also include custom user licenses.",
              "readOnly" : true
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The user license label.",
              "readOnly" : true
            },
            "MonthlyLoginsUsed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of successful logins for all users associated with a customer or partner portal user license. This field has a non-null value if MonthlyLoginsEntitlement has a non-null value.",
              "readOnly" : true
            },
            "MonthlyLoginsEntitlement" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The maximum number of customer or partner portal logins allowed per month. A null value in this field means the user license is charged according to the number of users rather than the number of logins.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UserListView" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the customizations a user made to a list view.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "The ID of the user."
            },
            "ListViewId" : {
              "type" : "string",
              "description" : "The ID of the list view."
            },
            "SobjectType" : {
              "type" : "string",
              "description" : "The API name of the sObject for the user list view."
            },
            "LastViewedChart" : {
              "type" : "string",
              "description" : "The last chart a user viewed."
            }
          }
        } ]
      },
      "UserListViewCriterion" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the criterion for a user’s customized list view. The criterion consists of the filters or sort order a user added to a list view for the Salesforce Mobile app.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UserListViewId" : {
              "type" : "string",
              "description" : "The ID of the user list view."
            },
            "SortOrder" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The order in which the list view is evaluated compared to other UserListViewCriterion objects for the given UserListView."
            },
            "ColumnName" : {
              "type" : "string",
              "description" : "The name of the column in the user list view."
            },
            "Operation" : {
              "type" : "string",
              "description" : "The criteria to apply, such as “equals” or “starts with.”"
            },
            "Value" : {
              "type" : "string",
              "description" : "The field values used to filter the list view. For example, a value of 94105 if the Field is Billing Zip/Postal Code shows only rows that have a billing ZIP code of 94105."
            }
          }
        } ]
      },
      "UserLocalWebServerIdentity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LocalWebServerIdentityToken" : {
              "type" : "string"
            }
          }
        } ]
      },
      "UserLocalWebServerIdentityShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "UserLogin" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the settings that affect a user’s ability to log into an organization. To access this object, you need the UserPermissions.ManageUsers permission.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the associated user account. This field can’t be updated.",
              "readOnly" : true
            },
            "IsFrozen" : {
              "type" : "boolean"
            },
            "IsPasswordLocked" : {
              "type" : "boolean",
              "description" : "If true, the user account associated with this object is locked because of too many login failures. From the API, you can set this field to false, but not true"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        } ]
      },
      "UserPackageLicense" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a license for an installed managed package, assigned to a specific user.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "PackageLicenseId" : {
              "type" : "string",
              "description" : "The 18-character Globally Unique ID (GUID) that identifies the package license"
            },
            "UserId" : {
              "type" : "string",
              "description" : "The User ID of the user licensed to use this package"
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "UserPermissionAccess" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the permissions accessibility for a current user.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastCacheUpdate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The last modified date and time of either the user info or org info, whichever is later.",
              "readOnly" : true
            },
            "PermissionsEmailSingle" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEmailMass" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditTask" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditEvent" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsExportReport" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsImportPersonal" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsDataExport" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditPublicFilters" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditPublicTemplates" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsModifyAllData" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditBillingInfo" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageCases" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsMassInlineEdit" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditKnowledge" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageKnowledge" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageSolutions" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCustomizeApplication" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditReadonlyFields" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsRunReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewSetup" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsTransferAnyEntity" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsNewReportBuilder" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsActivateContract" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsImportLeads" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageLeads" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsTransferAnyLead" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewAllData" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditPublicDocuments" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewEncryptedData" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditBrandTemplates" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditHtmlTemplates" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsChatterInternalUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsDeleteActivatedContract" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsChatterInviteExternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSendSitRequests" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageRemoteAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCanUseNewDashboardBuilder" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageCategories" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsConvertLeads" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsPasswordNeverExpires" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsUseTeamReassignWizards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsInstallPackaging" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsPublishPackaging" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsChatterOwnGroups" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditOppLineItemUnitPrice" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCreatePackaging" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsBulkApiHardDelete" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSolutionImport" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageCallCenters" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageSynonyms" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewContent" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageEmailClientConfig" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEnableNotifications" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageDataIntegrations" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsDistributeFromPersWksp" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewDataCategories" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageDataCategories" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAuthorApex" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageMobile" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsApiEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageCustomReportTypes" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditCaseComments" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsTransferAnyCase" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsContentAdministrator" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCreateWorkspaces" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageContentPermissions" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageContentProperties" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageContentTypes" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageExchangeConfig" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageAnalyticSnapshots" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsScheduleReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageBusinessHourHolidays" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageDynamicDashboards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCustomSidebarOnAllPages" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageInteraction" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewMyTeamsDashboards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsModerateChatter" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsResetPasswords" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsFlowUFLRequired" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCanInsertFeedSystemFields" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsActivitiesAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageKnowledgeImportExport" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEmailTemplateManagement" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEmailAdministration" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageChatterMessages" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsChatterFileLink" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsForceTwoFactor" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewEventLogFiles" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageNetworks" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageAuthProviders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsRunFlow" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCreateCustomizeDashboards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCreateDashboardFolders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewPublicDashboards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageDashbdsInPubFolders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCreateCustomizeReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCreateReportFolders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewPublicReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageReportsInPubFolders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditMyDashboards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditMyReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewAllUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAllowUniversalSearch" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsConnectOrgToEnvironmentHub" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCreateCustomizeFilters" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsContentHubUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsGovernNetworks" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSalesConsole" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsTwoFactorApi" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsDeleteTopics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEditTopics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCreateTopics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAssignTopics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsIdentityEnabled" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsIdentityConnect" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAllowViewKnowledge" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsContentWorkspaces" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageSearchPromotionRules" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCustomMobileAppsAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewHelpLink" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageProfilesPermissionsets" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAssignPermissionSets" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageRoles" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageIpAddresses" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageSharing" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageInternalUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManagePasswordPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageLoginAccessPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewPlatformEvents" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageCustomPermissions" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCanVerifyComment" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageUnlistedGroups" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsFreezeUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageTwoFactor" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsLightningExperienceUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewDataLeakageEvents" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsConfigCustomRecs" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSubmitMacrosAllowed" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsBulkMacrosAllowed" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsShareInternalArticles" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageSessionPermissionSets" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSendAnnouncementEmails" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsChatterEditOwnPost" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsChatterEditOwnRecordPost" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsImportCustomObjects" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsDelegatedTwoFactor" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsChatterComposeUiCodesnippet" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSelectFilesFromSalesforce" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsModerateNetworkUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsMergeTopics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSubscribeToLightningReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManagePvtRptsAndDashbds" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAllowLightningLogin" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCampaignInfluence2" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewDataAssessment" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsRemoveDirectMessageMembers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCanApproveFeedPost" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAddDirectMessageMembers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAllowViewEditConvertedLeads" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsShowCompanyNameAsUserBadge" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAccessCMC" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewHealthCheck" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageHealthCheck" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsPackaging2" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageCertificates" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCreateReportInLightning" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsPreventClassicExperience" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsHideReadByList" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsListEmailSend" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsFeedPinning" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsChangeDashboardColors" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsIotUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageRecommendationStrategies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManagePropositions" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCloseConversations" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSubscribeReportRolesGrps" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSubscribeDashboardRolesGrps" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsUseWebLink" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsHasUnlimitedNBAExecutions" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewAllActivities" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSubscribeReportToOtherUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsLightningConsoleAllowedForUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSubscribeReportsRunAsUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSubscribeToLightningDashboards" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSubscribeDashboardToOtherUsers" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCreateLtngTempInPub" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsTransactionalEmailSend" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewPrivateStaticResources" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCreateLtngTempFolder" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsApexRestServices" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEnableCommunityAppLauncher" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsGiveRecognitionBadge" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsUseMySearch" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsLtngPromoReserved01UserPerm" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageSubscriptions" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageSurveys" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsUseAssistantDialog" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewRoles" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCustomTabBarOnMobile" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsLMOutboundMessagingUserPerm" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsModifyDataClassification" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsPrivacyDataAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsQueryAllFiles" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsModifyMetadata" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageCMS" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSandboxTestingInCommunityApp" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCanEditPrompts" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewUserPII" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageHubConnections" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsB2BMarketingAnalyticsUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsTraceXdsQueries" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewAllCustomSettings" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewAllForeignKeyNames" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsHeadlessCMSAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsLMEndMessagingSessionUserPerm" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsConsentApiUpdate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAccountSwitcherUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewAnomalyEvents" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageC360AConnections" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageReleaseUpdates" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSkipIdentityConfirmation" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsLearningManager" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSendCustomNotifications" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsPackaging2Delete" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewRestrictionAndScopingRules" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsBotManageBots" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsBotManageBotsTrainingData" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageLearningReporting" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsQuipMetricsAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsQuipUserEngagementMetrics" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsTransactionSecurityExempt" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageExternalConnections" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsNativeWebviewScrolling" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewDeveloperName" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsBypassMFAForUiLogins" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsClientSecretRotation" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAccessToServiceProcess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageOrchInstsAndWorkItems" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCMSECEAuthoringAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageDataspaceScope" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsConfigureDataspaceScope" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewClientSecret" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCdcReportingCreateReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCdcReportingViewReports" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCdcReportingManageFolders" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsExternalClientAppDeveloper" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsExternalClientAppAdmin" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsExternalClientAppViewer" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsDeleteCrMemoAndInvoice" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageNamedCredentials" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCanUpdateEmailMessage" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsDownloadPackageVersionZips" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewContentTaxonomy" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageContentTaxonomy" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsReassignOrchestrationWorkItems" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageOrchestrationRuns" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsDigitalLendingUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageCertificatesExpiration" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEnableIPFSUpload" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEnableBCTransactionPolling" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsLobbyManagementUserAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsMonitorLoginHistory" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEnhancedSalesMobileExp" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSimpleCsvDataImportUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAdvancedCsvDataImportUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAccessToComplaintMgmt" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAccessToDisputeManagement" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsPersonalizedFinanceUserAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCustomAppsOnFSMobile" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsStageManagementDesignUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSegmentIntelligenceUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsFSCArcGraphCommunityUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageCdpMlModels" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsDigitalLendingAdminUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsActivateSystemModeFlows" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsPersonalizationPlatform" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageIntegrationConnections" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageFilesAndAttachments" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageCustomDomains" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsEngagementConfigUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsPersonalizationIntelUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAttributionModelUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAccessDisputePrompts" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsQueryNonVetoedFiles" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsMetadataStudioUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsDigitalLendingWorkbench" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsDigitalLendingEditReadOnly" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsPrmExtIntPrtnrAdminUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManagePersonalOrg" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewPersonalOrg" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsUseServicePartReturn" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsHeadlessPublishNudges" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsApprovalAdmin" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsApprovalDesigner" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAccessServiceEinstein" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewRecommendations" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsPrismPlaygroundUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsModifyAllPolicyCenterPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewAllPolicyCenterPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAccessSfDrive" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAppFrameworkManageApp" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAppFrameworkViewApp" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAgentforceServiceAgentUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageAgentforceServiceAgent" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsPersonalizationDecisioningUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsCanDoActAsUser" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewAllFieldsGlobal" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsSchedulerAIAgentUserAccess" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsAppFrameworkManageTemplate" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsModifyAccessDenyPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsManageAccessPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewAccessPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsModifyAccessAllowPolicies" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsViewOrchestrationsInAutomApp" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "PermissionsTerritoryOperations" : {
              "type" : "boolean",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UserPreference" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a functional preference for a specific user in your organization.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "The ID of the user associated with this role. The corresponding field label is User ID."
            },
            "Preference" : {
              "type" : "string",
              "description" : "The name of the user preference. Supported values are: 57 (Event Reminder Default Lead Time) 58 (Task Reminder Default Time) 91 (Prevent Logs on Load) 92 (Autocomplete Apex After Key Press) 93 (Visualforce Viewstate Inspector) 94 (Forecasting Displayed Type) 96 (Editor Theme) 97 (Editor Font Size) 98 (Pinned Folders) 99 (Enable Query Plan) 100 (Enable New Open Dialog) 101 (Email Transport Type) 102 (Pinned Wave Folders) 108 (Density)"
            },
            "Value" : {
              "type" : "string",
              "description" : "The value of the user preference. For Event Reminder Default Lead Time, the values are increasing intervals of time from 0 minutes to 2 days. For Task Reminder Default Time, the values are half-hours from 12:00 AM to 11:30 PM. To view the respective sets of values, access the Reminders in your personal settings in the online application."
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "UserProvAccount" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents information that links a Salesforce user account with an account in a third-party (target) system, such as Google, for users of connected apps with Salesforce user provisioning enabled.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The unique name for this object.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SalesforceUserId" : {
              "type" : "string",
              "description" : "The user ID for the user account in the Salesforce organization that is associated with the user account in the target system."
            },
            "ConnectedAppId" : {
              "type" : "string",
              "description" : "The 15 character application ID."
            },
            "ExternalUserId" : {
              "type" : "string",
              "description" : "The unique identifier for the user as stored in the target system."
            },
            "ExternalUsername" : {
              "type" : "string",
              "description" : "The username as stored in the target system for the associated user account."
            },
            "ExternalEmail" : {
              "type" : "string",
              "description" : "The email address as stored in the target system for the associated user account."
            },
            "ExternalFirstName" : {
              "type" : "string",
              "description" : "The first name as stored in the target system for the associated user account."
            },
            "ExternalLastName" : {
              "type" : "string",
              "description" : "The last name as stored in the target system for the associated user account."
            },
            "LinkState" : {
              "type" : "string",
              "description" : "The state of the current connection between the user account in the Salesforce organization and the associated user account in the target system. The valid values are: linked— changes to the account in the Salesforce organization are queued to be updated for the associated user account in the target system. duplicate— an associated account in the target system exists. orphaned—no associated account exists in the target system. ignored— changes to the account in the Salesforce organization have no effect on the associated user account in the target system."
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the account in the target system. The valid values are: Active Deactivated Deleted"
            },
            "DeletedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when the associated user account in the target system was deleted. This value is automatically updated during the provisioning and reconciling processes."
            },
            "IsKnownLink" : {
              "type" : "boolean",
              "description" : "Setting the IsKnownLink value to true implies the administrator or another user is managing the relationship between the Salesforce user account and the third-party user account, manually. This field helps Salesforce coordinate updates between the UserProvAccountStaging object and the UserProvAccount object while committing staged accounts. Typically, for a matching user account (the same ExternalUserId for both objects), Salesforce copies the values from the UserProvAccountStaging object to the UserProvAccount object. However, if Salesforce encounters a UserProvAccountStaging object with a matching ExternalUserId but different LinkState and SalesforceUserId values during this process, Salesforce checks the UserProvAccount IsKnownLink value. If the IsKnownLinkvalue is true, Salesforce doesn’t copy the LinkState and SalesforceUserId values from the UserProvAccountStaging object to the UserProvAccount object (all other values are copied). The default is false, meaning Salesforce manages the account relationship."
            }
          }
        } ]
      },
      "UserProvAccountStaging" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Temporarily stores user account information while a user completes the User Provisioning Wizard. This information that is stored in the UserProvAccount object when you click the button to collect and analyze accounts on the target system.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The unique name for this object.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ConnectedAppId" : {
              "type" : "string",
              "description" : "The 15 character connected app ID."
            },
            "SalesforceUserId" : {
              "type" : "string",
              "description" : "The user ID for the user account in the Salesforce organization that is associated with the user account in the target system."
            },
            "ExternalUserId" : {
              "type" : "string",
              "description" : "The unique identifier for the user as stored in the target system."
            },
            "ExternalUsername" : {
              "type" : "string",
              "description" : "The username as stored in the target system for the associated user account."
            },
            "ExternalEmail" : {
              "type" : "string",
              "description" : "The email address as stored in the target system for the associated user account."
            },
            "ExternalFirstName" : {
              "type" : "string",
              "description" : "The first name as stored in the target system for the associated user account."
            },
            "ExternalLastName" : {
              "type" : "string",
              "description" : "The last name as stored in the target system for the associated user account."
            },
            "LinkState" : {
              "type" : "string",
              "description" : "The state of the current connection between the user account in the Salesforce organization and the associated user account in the target system. The valid values are: linked— a user account matches one in the target system. duplicate— an associated account in the target system exists. orphaned—no associated account exists in the target system. ignored— changes to the account in the Salesforce organization have no effect on the associated user account in the target system."
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the account in the target system. The valid values are: Active Deactivated Deleted"
            }
          }
        } ]
      },
      "UserProvMockTarget" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an entity for testing user data before committing the data to a third-party system for user provisioning.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The unique name for this object."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ExternalUserId" : {
              "type" : "string",
              "description" : "The unique identifier for the user as stored in the target system."
            },
            "ExternalUsername" : {
              "type" : "string",
              "description" : "The username as stored in the target system for the associated user account."
            },
            "ExternalEmail" : {
              "type" : "string",
              "description" : "The email address as stored in the target system for the associated user account."
            },
            "ExternalFirstName" : {
              "type" : "string",
              "description" : "The first name as stored in the target system for the associated user account."
            },
            "ExternalLastName" : {
              "type" : "string",
              "description" : "The last name as stored in the target system for the associated user account."
            }
          }
        } ]
      },
      "UserProvisioningConfig" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents information for a flow to use during a user provisioning request process, such as the attributes for an update.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package, and the changes are reflected in a subscriber’s organization."
            },
            "Language" : {
              "type" : "string",
              "description" : "The two- to five-character code that represents the language and locale ISO. This code controls the language for labels displayed in an application."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "The master label for this object. This value is the internal label that doesn’t get translated."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "ConnectedAppId" : {
              "type" : "string",
              "description" : "The 18-digit application ID for the connected app."
            },
            "Notes" : {
              "type" : "string",
              "description" : "A utility field for administrators to add any additional information about the configuration. This field is for internal reference only, and is not used by any process."
            },
            "Enabled" : {
              "type" : "boolean",
              "description" : "Indicates whether user provisioning is enabled for the associated connected app (true) or not (false)."
            },
            "FlowId" : {
              "type" : "string"
            },
            "ApprovalRequired" : {
              "type" : "string",
              "description" : "Denotes whether approvals are required for provisioning users for the associated connected app. If the value is null, no approval is required."
            },
            "UserAccountMapping" : {
              "type" : "string",
              "description" : "Stores the attributes used to link the Salesforce user to the account on the third-party system, in JSON format. For example: {\"linkingSalesforceUserAttribute\":\"Username\", \"linkingTargetUserAttribute\":\"Email\"}"
            },
            "EnabledOperations" : {
              "type" : "string",
              "description" : "Lists the operations, as comma-separated values, that create a UserProvisioningRequest object for the associated connected app. Allowed values are: Create Update EnableAndDisable (activation and deactivation) SuspendAndRestore (freeze and unfreeze)"
            },
            "OnUpdateAttributes" : {
              "type" : "string",
              "description" : "Lists the user attributes, as comma-separated values, that generate a UserProvisioningRequest object during an update."
            },
            "LastReconDateTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time when user accounts were last reconciled between Salesforce and the target system."
            },
            "NamedCredentialId" : {
              "type" : "string",
              "description" : "Salesforce ID of the named credential that’s used for a request. The named credential identifies the third-party system and the third-party authentication settings."
            },
            "ReconFilter" : {
              "type" : "string",
              "description" : "When collecting and analyzing users on a third-party system, the plug-in uses this filter to limit the scope of the collection."
            }
          }
        } ]
      },
      "UserProvisioningLog" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents messages generated during the process of provisioning users for third-party applications.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The unique name for this object.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "UserProvisioningRequestId" : {
              "type" : "string",
              "description" : "A unique identifier for the user provisioning request."
            },
            "ExternalUserId" : {
              "type" : "string",
              "description" : "The unique identifier for the user in the target system."
            },
            "ExternalUsername" : {
              "type" : "string",
              "description" : "The username set in the target system for the associated user account."
            },
            "UserId" : {
              "type" : "string",
              "description" : "Salesforce ID of the user making the request."
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the user provisioning request. Based on the context of the log, it can contain different values, such as an HttpStatusCode."
            },
            "Details" : {
              "type" : "string",
              "description" : "The value of this field depends on the log entry. For example, if the target system returns an error, the error message may be recorded in this field."
            }
          }
        } ]
      },
      "UserProvisioningRequest" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents an individual provisioning request to create, update, or delete a single user account in a third-party service system (or another Salesforce organization).",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "OwnerId" : {
              "type" : "string",
              "description" : "Salesforce ID of the Group or User who owns this object."
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "The unique name for this object.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "SalesforceUserId" : {
              "type" : "string",
              "description" : "Salesforce ID of the user making the request."
            },
            "ExternalUserId" : {
              "type" : "string",
              "description" : "The unique identifier for the user in the target system."
            },
            "AppName" : {
              "type" : "string",
              "description" : "The unique name of the connected app associated with the service provider."
            },
            "State" : {
              "type" : "string",
              "description" : "Status of this request. Supported values are: New Requested Completed Failed Collecting Collected Analyzing Analyzed Committing Retried Manually Completed The State goes from New to Requested to Completed or Failed, unless a reconciliation process is occurring. For details about the reconciliation process State value changes, see Usage. The State goes from Failed to Retried or Manually Completed when troubleshooting UPR failures. For details about handling failures, see State Values for Managing Provisioning Failures."
            },
            "Operation" : {
              "type" : "string",
              "description" : "The Apex method called by the trigger associated with the provisioning request (typically a change to the User object). Supported values are: Create Read Update Deactivate Activate Freeze Unfreeze Reconcile Linking For example, when the User object field isActive is set to false, the UPR object Operation field value is set to Deactivate."
            },
            "ScheduleDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "When to send this request to the service provider.Scheduling is not implemented yet. Currently, provisioning changes are queued immediately to be sent to the service provider."
            },
            "ConnectedAppId" : {
              "type" : "string",
              "description" : "The 18-digit application ID for the connected app."
            },
            "UserProvConfigId" : {
              "type" : "string",
              "description" : "The ID value of the associated UserProvisioningConfig object. Available in API version 34.0 and later."
            },
            "UserProvAccountId" : {
              "type" : "string",
              "description" : "The ID value of the associated UserProvAccount object."
            },
            "ApprovalStatus" : {
              "type" : "string",
              "description" : "The status of the approval for the current request. If the user provisioning setup for the connected app does not have an approval process enabled, the status is Not Required. If an approval process is enabled, supported values are: Required— An approval process is enabled in the user provisioning setup for the associated connected app, but there is no response to the request yet. Not Required— An approval process is not enabled in the user provisioning setup for the associated connected app. Approved Denied"
            },
            "ManagerId" : {
              "type" : "string",
              "description" : "Salesforce ID of the user who manages the user specified in the SalesforceUserId field. If an approval process is configured for the user provisioning request. this value allows the manager to approve the request. Available in API version 34.0 and later."
            },
            "RetryCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "ParentId" : {
              "type" : "string"
            }
          }
        } ]
      },
      "UserProvisioningRequestShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string"
            },
            "UserOrGroupId" : {
              "type" : "string"
            },
            "AccessLevel" : {
              "type" : "string"
            },
            "RowCause" : {
              "type" : "string"
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            }
          }
        } ]
      },
      "UserRecordAccess" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a user’s access to a set of records.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the user.",
              "readOnly" : true
            },
            "RecordId" : {
              "type" : "string",
              "description" : "ID of the record.",
              "readOnly" : true
            },
            "HasReadAccess" : {
              "type" : "boolean",
              "description" : "Indicates whether a user has read access to the record (true) or not (false).",
              "readOnly" : true
            },
            "HasEditAccess" : {
              "type" : "boolean",
              "description" : "Indicates whether a user has edit access to the record (true) or not (false).",
              "readOnly" : true
            },
            "HasDeleteAccess" : {
              "type" : "boolean",
              "description" : "Indicates whether a user has delete access to the record (true) or not (false).",
              "readOnly" : true
            },
            "HasTransferAccess" : {
              "type" : "boolean",
              "description" : "Indicates whether a user has transfer access to the record (true) or not (false).",
              "readOnly" : true
            },
            "HasAllAccess" : {
              "type" : "boolean",
              "description" : "Indicates whether a user can share the record.",
              "readOnly" : true
            },
            "MaxAccessLevel" : {
              "type" : "string",
              "description" : "Indicates a user’s maximum level of access to a record.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UserRole" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a user role in your organization.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name of the role. Corresponds to Label on the user interface."
            },
            "ParentRoleId" : {
              "type" : "string",
              "description" : "The ID of the parent role."
            },
            "RollupDescription" : {
              "type" : "string",
              "description" : "Description of the forecast rollup. Label is Description."
            },
            "OpportunityAccessForAccountOwner" : {
              "type" : "string",
              "description" : "Required. The opportunity access level for the account owner. Note that you can’t set a user role with an opportunity access less than that specified in organization-wide defaults."
            },
            "CaseAccessForAccountOwner" : {
              "type" : "string",
              "description" : "The case access level for the account owner."
            },
            "ContactAccessForAccountOwner" : {
              "type" : "string",
              "description" : "The contact access level for the account owner.When DefaultContactAccess is set to Controlled by Parent, you can’t create or update this field.",
              "readOnly" : true
            },
            "ForecastUserId" : {
              "type" : "string",
              "description" : "The ID of the forecast manager associated with this role. Label is User ID."
            },
            "MayForecastManagerShare" : {
              "type" : "boolean",
              "description" : "Indicates whether the forecast manager can manually share their own forecast.",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "description" : "The unique name of the object in the API. This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores. In managed packages, this field prevents naming conflicts on package installations. With this field, a developer can change the object’s name in a managed package and the changes are reflected in a subscriber’s organization. Corresponds to Role Name in the user interface. This field is available in API version 24.0 and later. When creating large sets of data, always specify a unique DeveloperName for each record. If no DeveloperName is specified, performance may slow while Salesforce generates one for each record."
            },
            "PortalAccountId" : {
              "type" : "string",
              "description" : "The ID of the role’s associated portal account. This field is read-only."
            },
            "PortalType" : {
              "type" : "string",
              "description" : "This value indicates the type of portal for the role: None: Salesforce application role. CustomerPortal: Customer portal role. Partner: partner portal role. The field IsPartner used in release 8.0 will map to this value. This field replaces IsPartner beginning with release 9.0."
            },
            "PortalAccountOwnerId" : {
              "type" : "string",
              "description" : "The ID of the role’s associated portal account’s owner. This field is read-only.",
              "readOnly" : true
            }
          }
        } ]
      },
      "UserSetupEntityAccess" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "DurableId" : {
              "type" : "string",
              "readOnly" : true
            },
            "SetupEntityId" : {
              "type" : "string",
              "readOnly" : true
            },
            "KeyPrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "DeveloperName" : {
              "type" : "string",
              "readOnly" : true
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastCacheUpdate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "UserShare" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a sharing entry on a user record.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the User being shared."
            },
            "UserOrGroupId" : {
              "type" : "string",
              "description" : "ID of the User or Group that has been given access to the User. This field can’t be updated."
            },
            "UserAccessLevel" : {
              "type" : "string",
              "description" : "Level of access that the User or Group has to the specified user. The specified user is denoted by the UserId. The possible values are: Read Edit This field must be set to an access level that is at least equal to the organization’s default UserAccessLevel. UserAccessLevel can be updated only if RowCause is set to Manual Sharing."
            },
            "RowCause" : {
              "type" : "string",
              "description" : "Reason that this sharing entry exists. You can only write to this field when its value is either omitted or set to Manual (default)."
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsActive" : {
              "type" : "boolean",
              "description" : "Read-only. Indicates whether the User has access to log in (true) or not (false). You can modify a User's active status from the user interface or via the API.",
              "readOnly" : true
            }
          }
        } ]
      },
      "UserSharedFeature" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "readOnly" : true
            },
            "FeatureName" : {
              "type" : "string",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "VerificationHistory" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents the past six months of your org users’ attempts to verify their identity.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "EventGroup" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "ID of the verification attempt. Verification can involve several attempts and use different verification methods. For example, in a user’s session, a user enters an invalid verification code (first attempt). The user then enters the correct code and successfully verifies identity (second attempt). Both attempts are part of a single verification and, therefore, have the same ID. The label is Verification Attempt.",
              "readOnly" : true
            },
            "VerificationTime" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The date and time of the identity verification attempt, for example, 7/19/2025, 3:19:13 PM PDT. The time zone is based on GMT. The label is Time.",
              "readOnly" : true
            },
            "VerificationMethod" : {
              "type" : "string",
              "description" : "The method by which the user attempted to verify identity in the verification event. The label is Method. Available values are: Email—Salesforce sent an email with a verification code to the address associated with the user’s account. EnableLL—Salesforce Authenticator sent a notification to the user’s mobile device to enroll in Lightning Login. This value is available in API version 38.0 and later. LL—Salesforce Authenticator sent a notification to the user’s mobile device to approve login via Lightning Login. This value is available in API version 38.0 and later. SalesforceAuthenticator—Salesforce Authenticator sent a notification to the user’s mobile device to verify account activity. Sms—Salesforce sent a text message with a verification code to the user’s mobile device. SMS messaging requires a Salesforce add-on license for Identity Verification Credits. TempCode—A Salesforce admin or a user with the Manage Multi-Factor Authentication in User Interface permission generated a temporary verification code for the user. This value is available in API version 37.0 and later. Totp—An authenticator app generated a time-based, one-time password (TOTP) on the user’s mobile device. U2F—A U2F security key-generated required credentials for the user. This value is available in API version 38.0 and later.",
              "readOnly" : true
            },
            "UserId" : {
              "type" : "string",
              "description" : "ID of the user verifying identity.",
              "readOnly" : true
            },
            "Activity" : {
              "type" : "string",
              "description" : "The action the user attempted that requires identity verification. The label is User Activity. Available values are: AccessReports—The user attempted to access reports or dashboards. Apex—The user attempted to access a Salesforce resource with a verification Apex method. ChangeEmail—The user attempted to change an email address. ConnectSms—The user attempted to connect a phone number. ConnectToopher—The user attempted to connect Salesforce Authenticator. ConnectTotp—The user attempted to connect a one-time password generator. ConnectU2F—The user attempted to register a U2F security key. ConnectedApp—The user attempted to access a connected app. EnableLL—The user attempted to enroll in Lightning Login. ExportPrintReports—The user attempted to export or print reports or dashboards. ExtraVerification—Reserved for future use. ListView—The user attempted to access a list view. Login—The user attempted to log in. Registration—Reserved for future use. TempCode—The user attempted to generate a temporary verification code.",
              "readOnly" : true
            },
            "Status" : {
              "type" : "string",
              "description" : "The status of the identity verification attempt. Available values are: AutomatedSuccess—Salesforce Authenticator approved the request for access because the request came from a trusted location. After users enable location services in Salesforce Authenticator, they can designate trusted locations. When a user trusts a location for a particular activity, such as logging in from a recognized device, that activity is approved from the trusted location for as long as the location is trusted. Denied—The user denied the approval request in the authenticator app, such as Salesforce Authenticator. FailedGeneralError—An error caused by something other than an invalid verification code, too many verification attempts, or authenticator app connectivity. FailedInvalidCode—The user entered an invalid verification code. FailedInvalidPassword—The user entered an invalid password. FailedPasswordLockout—The user attempted to enter a password too many times. FailedTooManyAttempts—The user attempted to verify identity too many times. For example, the user entered an invalid verification code repeatedly. Initiated—Salesforce initiated identity verification but hasn’t yet challenged the user. InProgress—Salesforce challenged the user to verify identity and is waiting for the user to respond or for Salesforce Authenticator to send an automated response. RecoverableError—Salesforce can’t reach the authenticator app to verify identity, but it continues to retry. ReportedDenied—The user denied the approval request in the authenticator app, such as Salesforce Authenticator, and also flagged the approval request to report to an administrator. Succeeded—The user’s identity was verified.",
              "readOnly" : true
            },
            "LoginHistoryId" : {
              "type" : "string",
              "description" : "The ID for the record of the user’s successful or unsuccessful login attempt.",
              "readOnly" : true
            },
            "SourceIp" : {
              "type" : "string",
              "description" : "The IP address of the machine from which the user attempted the action that requires identity verification. For example, the IP address of the machine from where the user tried to log in or access reports. If it’s a non-login action that required verification, the IP address can be different from the address from where the user logged in. This address can be an IPv4 or IPv6 address.",
              "readOnly" : true
            },
            "LoginGeoId" : {
              "type" : "string",
              "description" : "The 18-character ID for the record of the geographic location of the user for a successful or unsuccessful identity verification attempt. Due to the nature of geolocation technology, the accuracy of geolocation fields (for example, country, city, postal code) can vary.",
              "readOnly" : true
            },
            "Remarks" : {
              "type" : "string",
              "description" : "The text the user sees on the page or in Salesforce Authenticator when prompted to verify identity. For example, if identity verification is required for a user’s login, the user sees “You’re trying to Log In to Salesforce.” In this case, the Remarks value is “Log In to Salesforce.” But if the Activity value is Apex, the Remarks value is a custom description passed by an Apex method. If the user is verifying identity using Salesforce Authenticator, the custom description also appears in the app. If the custom description isn’t specified, the value is the name of the Apex method. The label is Activity Message.",
              "readOnly" : true
            },
            "ResourceId" : {
              "type" : "string",
              "description" : "If the Activity value is ConnectedApp, the ResourceId value is the ID of the connected app. The label is Connected App ID.",
              "readOnly" : true
            },
            "Policy" : {
              "type" : "string",
              "description" : "The identity verification security policy or setting. The label is Triggered By. Available values are: CustomApex—Identity verification made by a verification Apex method. DeviceActivation—Identity verification required for users logging in from an unrecognized device or new IP address. This verification is part of Salesforce’s risk-based authentication. EnableLightningLogin—Identity verification required for users enrolling in Lightning Login. This verification is triggered when the user attempts to enroll. Users are eligible to enroll if they have the Lightning Login User user permission and the org has enabled Allow Lightning Login in Session Settings. ExtraVerification—Reserved for future use. HighAssurance—High assurance session required for resource access. This verification is triggered when the user tries to access a resource, such as a connected app, report, or dashboard, that requires a high-assurance session level. LightningLogin—Identity verification required for internal users logging in via Lightning Login. This verification is triggered when the enrolled user attempts to log in. Users are eligible to log in if they have the Lightning Login User user permission and have successfully enrolled in Lightning Login. Also, from Session Settings in Setup, Allow Lightning Login must be enabled. PageAccess—Identity verification required for users attempting to perform an action, such as changing an email address or adding a verification method for multi-factor authentication (MFA). PasswordlessLogin—Identity verification required for customers attempting to log in to an Experience Cloud site that is set up for passwordless login. The admin controls which registered verification methods can be used, for example, email, SMS, Salesforce Authenticator, or TOTP. ProfilePolicy—Session security level required at login. This verification is triggered by the Session security level required at login setting on the user’s profile. TwoFactorAuthentication—Multi-factor authentication (formerly called two-factor authentication) required at login. This verification is triggered by the Multi-Factor Authentication for User Interface Logins user permission assigned to a custom profile. Or the user permission is included in a permission set that is assigned to a user.",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "VisualforceAccessMetrics" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents summary statistics for Visualforce pages.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "MetricsDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The date the metrics are queried.",
              "readOnly" : true
            },
            "ApexPageId" : {
              "type" : "string",
              "description" : "The ID of the Visualforce page.",
              "readOnly" : true
            },
            "ProfileId" : {
              "type" : "string",
              "description" : "The ID of the use who viewed the Visualforce page.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "DailyPageViewCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of views received by the specified Visualforce page.",
              "readOnly" : true
            },
            "LogDate" : {
              "type" : "string",
              "format" : "date",
              "description" : "The most recent page access date.",
              "readOnly" : true
            }
          },
          "readOnly" : true
        } ]
      },
      "Vote" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a vote that a user has made on an Idea or a Reply.",
          "properties" : {
            "Id" : {
              "type" : "string",
              "readOnly" : true
            },
            "IsDeleted" : {
              "type" : "boolean",
              "description" : "Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is Deleted.",
              "readOnly" : true
            },
            "ParentId" : {
              "type" : "string",
              "description" : "ID of the Idea or Reply associated with this vote."
            },
            "Type" : {
              "type" : "string",
              "description" : "Picklist that indicates the type of vote. The value Up indicates that the vote is a user's positive endorsement of the associated idea or reply. The value Down indicates that the vote is a user's negative endorsement of the associated idea or reply."
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The datetime when this vote was last modified.",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "description" : "ID of the user most recently associated with this vote.",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      },
      "WebLink" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SObject"
        }, {
          "description" : "Represents a custom link to a URL or Scontrol.",
          "properties" : {
            "Id" : {
              "type" : "string"
            },
            "PageOrSobjectType" : {
              "type" : "string",
              "description" : "Required. For standard objects, the name of the page on which to display the custom link. For custom objects, the name of the object."
            },
            "Name" : {
              "type" : "string",
              "description" : "Required. Name to display on page."
            },
            "IsProtected" : {
              "type" : "boolean",
              "description" : "Indicates whether the object is protected (true) or not (false). Protected components that have been installed in other organizations can’t be linked to or referenced by components created in the subscriber organization. A developer can easily delete a protected component contained in a managed package in a future release of the package without worrying about failing installations. However, once a component is marked as unprotected and is released globally, the developer can’t delete it."
            },
            "Url" : {
              "type" : "string",
              "description" : "Required. URL of the page to link to. Can include fields as tokens within the URL. Limit: 1,024 KB."
            },
            "EncodingKey" : {
              "type" : "string",
              "description" : "Required. Encoding of parameters on the URL link."
            },
            "LinkType" : {
              "type" : "string",
              "description" : "Required. Type of link (S-control or URL)."
            },
            "OpenType" : {
              "type" : "string",
              "description" : "Required. How the custom link opens when clicked in a browser—NewWindow, Sidebar, or NoSidebar."
            },
            "Height" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Height of the popup in pixels."
            },
            "Width" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Width of the popup in pixels."
            },
            "ShowsLocation" : {
              "type" : "boolean",
              "description" : "Indicates whether the popup window shows the browser’s address bar containing the URL (true) or not (false)."
            },
            "HasScrollbars" : {
              "type" : "boolean",
              "description" : "Indicates whether the popup window shows scroll bars (true) or not (false)."
            },
            "HasToolbar" : {
              "type" : "boolean",
              "description" : "Indicates whether the popup window shows browser toolbars (true) or not (false). Toolbars normally contain navigation buttons like Back, Forward, and Print."
            },
            "HasMenubar" : {
              "type" : "boolean",
              "description" : "Indicates whether the popup window shows a menu bar (true) or not (false)."
            },
            "ShowsStatus" : {
              "type" : "boolean",
              "description" : "Show the status bar at the bottom of the browser."
            },
            "IsResizable" : {
              "type" : "boolean",
              "description" : "Indicates whether users are allowed to resize the popup window (true) or not (false)."
            },
            "Position" : {
              "type" : "string",
              "description" : "Location on the screen where the popup should open—TopLeft, FullScreen, or None."
            },
            "ScontrolId" : {
              "type" : "string",
              "description" : "ID of the custom s-control object (Scontrol) to link to. Can include fields as tokens within the custom s-control object. Label is Custom S-Control ID."
            },
            "MasterLabel" : {
              "type" : "string",
              "description" : "Master label for the link. Limit is 240 characters. This display value is the internal label that is not translated."
            },
            "Description" : {
              "type" : "string",
              "description" : "Description of the custom link. Limit is 1,000 characters."
            },
            "DisplayType" : {
              "type" : "string",
              "description" : "Type of display: button, link, or mass-action button."
            },
            "RequireRowSelection" : {
              "type" : "boolean",
              "description" : "Indicates whether the custom link requires a row selection (true) or not (false)."
            },
            "NamespacePrefix" : {
              "type" : "string",
              "readOnly" : true
            },
            "CreatedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "CreatedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "LastModifiedDate" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            },
            "LastModifiedById" : {
              "type" : "string",
              "readOnly" : true
            },
            "SystemModstamp" : {
              "type" : "string",
              "format" : "date-time",
              "readOnly" : true
            }
          }
        } ]
      }
    },
    "securitySchemes" : {
      "openIDConnectDiscovery" : {
        "type" : "openIdConnect",
        "openIdConnectUrl" : "https://login.salesforce.com/.well-known/openid-configuration"
      },
      "bearerAuth" : {
        "type" : "http",
        "description" : "Use Session Id or Access Token as valid bearer token to authenticate with Salesforce. Access Token could be retrieved via any supported OAuth2 flows listed or not listed here (e.g. JWT Bearer Token Flow).To obtain a session ID, you can use the SOAP API login() call or through the Salesforce CLI.",
        "scheme" : "bearer"
      },
      "oAuth2" : {
        "type" : "oauth2",
        "description" : "For more information on all supported OAuth Flows, please see 'https://help.salesforce.com/articleView?id=remoteaccess_oauth_flows.htm&type=5'. For more information on all available scope options, please see 'https://help.salesforce.com/articleView?id=remoteaccess_oauth_tokens_scopes.htm&type=5#oauth_scopes'. ",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "https://login.salesforce.com/services/oauth2/authorize",
            "scopes" : {
              "visualforce" : "Allows access to customer-created Visualforce pages only. This scope doesn’t allow access to standard Salesforce UIs.",
              "address" : "Allows access to the identity URL service. You can request profile, email, address, or phone individually to get the same result as using id; they are all synonymous.",
              "custom_permissions" : "Allows access to the custom permissions in an org associated with the connected app. This scope also shows whether the current user has each permission enabled.",
              "openid" : "Allows access to the current, logged in user’s unique identifier for OpenID Connect apps. In the OAuth 2.0 user-agent flow and the OAuth 2.0 web server flow, use the openid scope. In addition to the access token, this scope enables you to receive a signed ID token that conforms to the OpenID Connect specifications.",
              "profile" : "Allows access to the identity URL service. You can request profile, email, address, or phone individually to get the same result as using id; they are all synonymous.",
              "refresh_token" : "Allows a refresh token to be returned when the requesting client is eligible to receive one. With a refresh token, the app can interact with the user’s data while the user is offline. This token is synonymous with requesting offline_access.",
              "wave_api" : "Access and manage your Wave data.",
              "web" : "Allows use of the access_token on the web. This scope also includes visualforce, allowing access to customer-created Visualforce pages.",
              "phone" : "Allows access to the identity URL service. You can request profile, email, address, or phone individually to get the same result as using id; they are all synonymous.",
              "offline_access" : "Allows a refresh token to be returned when the requesting client is eligible to receive one. With a refresh token, the app can interact with the user’s data while the user is offline. This token is synonymous with requesting offline_access.",
              "chatter_api" : "Allows access to Connect REST API resources on behalf of the user.",
              "id" : "Allows access to the identity URL service. You can request profile, email, address, or phone individually to get the same result as using id; they are all synonymous.",
              "api" : "Allows access to the current, logged-in user’s account using APIs, such as REST API and Bulk API. This scope also includes chatter_api, which allows access to Connect REST API resources.",
              "eclair_api" : "Access and manage your Eclair data.",
              "email" : "Allows access to the identity URL service. You can request profile, email, address, or phone individually to get the same result as using id; they are all synonymous.",
              "pardot_api" : "Allows access to Pardot API services on behalf of the user. Manage the full extent of accessible services in Pardot.",
              "full" : "Allows access to all data accessible by the logged-in user, and encompasses all other scopes. full doesn’t return a refresh token. You must explicitly request the refresh_token scope to get a refresh token."
            }
          },
          "password" : {
            "tokenUrl" : "https://login.salesforce.com/services/oauth2/token",
            "scopes" : {
              "api" : "Allows access to the current, logged-in user’s account using APIs, such as REST API and Bulk API. This scope also includes chatter_api, which allows access to Connect REST API resources."
            }
          },
          "authorizationCode" : {
            "authorizationUrl" : "https://login.salesforce.com/services/oauth2/authorize",
            "tokenUrl" : "https://login.salesforce.com/services/oauth2/token",
            "scopes" : {
              "visualforce" : "Allows access to customer-created Visualforce pages only. This scope doesn’t allow access to standard Salesforce UIs.",
              "address" : "Allows access to the identity URL service. You can request profile, email, address, or phone individually to get the same result as using id; they are all synonymous.",
              "custom_permissions" : "Allows access to the custom permissions in an org associated with the connected app. This scope also shows whether the current user has each permission enabled.",
              "openid" : "Allows access to the current, logged in user’s unique identifier for OpenID Connect apps. In the OAuth 2.0 user-agent flow and the OAuth 2.0 web server flow, use the openid scope. In addition to the access token, this scope enables you to receive a signed ID token that conforms to the OpenID Connect specifications.",
              "profile" : "Allows access to the identity URL service. You can request profile, email, address, or phone individually to get the same result as using id; they are all synonymous.",
              "refresh_token" : "Allows a refresh token to be returned when the requesting client is eligible to receive one. With a refresh token, the app can interact with the user’s data while the user is offline. This token is synonymous with requesting offline_access.",
              "wave_api" : "Access and manage your Wave data.",
              "web" : "Allows use of the access_token on the web. This scope also includes visualforce, allowing access to customer-created Visualforce pages.",
              "phone" : "Allows access to the identity URL service. You can request profile, email, address, or phone individually to get the same result as using id; they are all synonymous.",
              "offline_access" : "Allows a refresh token to be returned when the requesting client is eligible to receive one. With a refresh token, the app can interact with the user’s data while the user is offline. This token is synonymous with requesting offline_access.",
              "chatter_api" : "Allows access to Connect REST API resources on behalf of the user.",
              "id" : "Allows access to the identity URL service. You can request profile, email, address, or phone individually to get the same result as using id; they are all synonymous.",
              "api" : "Allows access to the current, logged-in user’s account using APIs, such as REST API and Bulk API. This scope also includes chatter_api, which allows access to Connect REST API resources.",
              "eclair_api" : "Access and manage your Eclair data.",
              "email" : "Allows access to the identity URL service. You can request profile, email, address, or phone individually to get the same result as using id; they are all synonymous.",
              "pardot_api" : "Allows access to Pardot API services on behalf of the user. Manage the full extent of accessible services in Pardot.",
              "full" : "Allows access to all data accessible by the logged-in user, and encompasses all other scopes. full doesn’t return a refresh token. You must explicitly request the refresh_token scope to get a refresh token."
            }
          }
        }
      }
    }
  }
}