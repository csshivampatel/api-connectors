{
    "swagger": "2.0",
    "info": {
      "description": "Marketo Rest API",
      "version": "1.0",
      "title": "Marketo Rest API",
      "termsOfService": "https://www.marketo.com/company/legal/",
      "contact": {
        "name": "Marketo Developer Relations",
        "url": "http://developers.marketo.com",
        "email": "developerfeedback@marketo.com"
      },
      "license": {
        "name": "API License Agreement",
        "url": "http://developers.marketo.com/api-license/"
      }
    },
    "host": "{Munchkin id}.mktorest.com",
    "basePath": "/",
    "schemes": [
      "https"
    ],
    "tags": [
      {
        "name": "Identity",
        "description": "Identity Controller"
      },
      {
        "name": "Assets-Tokens",
        "description": "Token Controller"
      },
      {
        "name": "Assets-Channels",
        "description": "Channel Controller"
      },
      {
        "name": "Assets-Files",
        "description": "File Controller"
      },
      {
        "name": "Assets-Segments",
        "description": "Segment Controller"
      },
      {
        "name": "Assets-Landing Page Content",
        "description": "Landing Page Content Controller"
      },
      {
        "name": "Assets-Snippets",
        "description": "Snippet Controller"
      },
      {
        "name": "Assets-Smart Lists",
        "description": "Smart List Controller"
      },
      {
        "name": "Assets-Static Lists",
        "description": "Static List Controller"
      },
      {
        "name": "Assets-Landing Pages",
        "description": "Landing Page Controller"
      },
      {
        "name": "Assets-Landing Page Redirect Rules",
        "description": "Landing Page Redirect Rule Controller"
      },
      {
        "name": "Assets-Forms",
        "description": "Form Controller"
      },
      {
        "name": "Assets-Form Fields",
        "description": "Form Field Controller"
      },
      {
        "name": "Assets-Tags",
        "description": "Tag Controller"
      },
      {
        "name": "Assets-Programs",
        "description": "Program Controller"
      },
      {
        "name": "Assets-Email Templates",
        "description": "Email Template Controller"
      },
      {
        "name": "Assets-Folders",
        "description": "Folder Controller"
      },
      {
        "name": "Assets-Landing Page Templates",
        "description": "Landing Page Template Controller"
      },
      {
        "name": "Assets-Emails",
        "description": "Email Controller"
      },
      {
        "name": "Assets-Smart Campaigns",
        "description": "Smart Campaign Controller"
      },
      {
        "name": "Assets-File Contents",
        "description": "File Content Controller"
      },
      {
        "name": "Leads",
        "description": "Leads Controller"
      },
      {
        "name": "Sales Persons",
        "description": "Sales Persons Controller"
      },
      {
        "name": "Activities",
        "description": "Activities Controller"
      },
      {
        "name": "Bulk Import Custom Objects",
        "description": "Bulk Import Custom Objects Controller"
      },
      {
        "name": "Bulk Import Program Members",
        "description": "Bulk Import Program Members Controller"
      },
      {
        "name": "Campaigns",
        "description": "Campaigns Controller"
      },
      {
        "name": "Opportunities",
        "description": "Opportunities Controller"
      },
      {
        "name": "Custom Objects",
        "description": "Custom Objects Controller"
      },
      {
        "name": "Usage",
        "description": "Stats Controller"
      },
      {
        "name": "Bulk Import Leads",
        "description": "Bulk Import Leads Controller"
      },
      {
        "name": "Static Lists",
        "description": "Lists Controller"
      },
      {
        "name": "Bulk Export Activities",
        "description": "Bulk Export Activities Controller"
      },
      {
        "name": "Named Account Lists",
        "description": "Named Account Lists Controller"
      },
      {
        "name": "Bulk Export Leads",
        "description": "Bulk Export Leads Controller"
      },
      {
        "name": "Bulk Export Program Members",
        "description": "Bulk Export Program Members Controller"
      },
      {
        "name": "Bulk Export Custom Objects",
        "description": "Bulk Export Custom Objects Controller"
      },
      {
        "name": "Companies",
        "description": "Companies Controller"
      },
      {
        "name": "Named Accounts",
        "description": "Named Accounts Controller"
      },
      {
        "name": "Program Members",
        "description": "Program Members Controller"
      }
    ],
    "paths": {
      "/identity/oauth/token": {
        "get": {
          "tags": [
            "Identity"
          ],
          "summary": "Get Access Token",
          "description": "Retrieve an access token from Marketo.  Calls to this endpoint are not counted towards API call limit.\n",
          "operationId": "identityUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "Client ID from Admin > Integration > Launchpoint menu.",
              "type": "string",
              "format": "string",
              "required": true
            },
            {
              "name": "client_secret",
              "in": "query",
              "description": "Client Secret from Admin > Integration > Launchpoint menu.",
              "type": "string",
              "format": "string",
              "required": true
            },
            {
              "name": "grant_type",
              "in": "query",
              "description": "Grant type.",
              "type": "string",
              "format": "string",
              "enum": [
                "client_credentials"
              ],
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdentity"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Identity"
          ],
          "summary": "Get Identity",
          "description": "Retrieve an access token from Marketo.  Calls to this endpoint are not counted towards API call limit.\n",
          "operationId": "identityUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "Client ID from Admin > Integration > Launchpoint menu.",
              "type": "string",
              "format": "string",
              "required": true
            },
            {
              "name": "client_secret",
              "in": "query",
              "description": "Client Secret from Admin > Integration > Launchpoint menu.",
              "type": "string",
              "format": "string",
              "required": true
            },
            {
              "name": "grant_type",
              "in": "query",
              "description": "Grant type.",
              "type": "string",
              "format": "string",
              "enum": [
                "client_credentials"
              ],
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdentity"
              }
            }
          }
        }
      },
      "/rest/asset/v1/channel/byName.json": {
        "get": {
          "tags": [
            "Assets-Channels"
          ],
          "summary": "Get Channel by Name",
          "description": "Retrieves channels based on the provided name. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getChannelByNameUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "Name",
              "in": "query",
              "description": "Name of channel to retrieve",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfChannelResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/channels.json": {
        "get": {
          "tags": [
            "Assets-Channels"
          ],
          "summary": "Get Channels",
          "description": "Retrieves all channels. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getAllChannelsUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of channels to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfChannelResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/byName.json": {
        "get": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Get Email by Name",
          "description": "Returns an email records based on the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getEmailByNameUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "Name of the email",
              "required": true,
              "type": "string"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            },
            {
              "name": "folder",
              "in": "query",
              "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}.json": {
        "get": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Get Email By Id",
          "description": "Returns an email records by its id.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getEmailByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Update Email Metadata",
          "description": "Updates the metadata of an email asset.  Required Permissions: Read-Write Assets",
          "operationId": "updateEmailUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateEmailRequest",
              "description": "updateEmailRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateEmailMetaDataRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/approveDraft.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Approve Email Draft",
          "description": "Approves the current draft of an email.  Required Permissions: Approve Assets",
          "operationId": "approveDraftUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/clone.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Clone Email",
          "description": "Clones the target email. Required Permissions: Read-Write Assets",
          "operationId": "cloneEmailUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "cloneEmailRequest",
              "description": "cloneEmailRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CloneEmailRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/content.json": {
        "get": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Get Email Content",
          "description": "Returns the content of the designated email.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getEmailContentByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailContentResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Update Email Content",
          "description": "Updates the content of an email.  Required Permissions: Read-Write Assets",
          "operationId": "updateEmailContentUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateEmailRequest",
              "description": "updateEmailRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateEmailComponentDataRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/content/rearrange.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Rearrange Email Modules",
          "description": "Rearranges the modules in an email.  Required Permissions: Read-Write Assets",
          "operationId": "rearrangeModulesUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "positions",
              "description": "JSON array of module positions.  Each position must be a JSON object with members 'index' and a 'moduleId'",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailModuleResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/content/{htmlId}.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Update Email Content Section",
          "description": "Updates the content in the given section.  Required Permissions: Read-Write Assets",
          "operationId": "updateEmailComponentContentUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "htmlId",
              "in": "path",
              "description": "htmlId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "description": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateEmailComponentContentRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/content/{moduleId}/add.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Add Email Module",
          "description": "Adds a new module to an email, with the given id.  Required Permissions: Read-Write Assets",
          "operationId": "addModuleUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "moduleId",
              "in": "path",
              "description": "moduleId",
              "required": true,
              "type": "string"
            },
            {
              "name": "name",
              "in": "query",
              "description": "Name of the module",
              "required": true,
              "type": "string"
            },
            {
              "name": "index",
              "in": "query",
              "description": "Index of the module.  Determines the order of the module in the email.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailModuleResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/content/{moduleId}/delete.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Delete Module",
          "description": "Deletes the given module from the email.  Required Permissions: Read-Write Assets",
          "operationId": "deleteModuleUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "moduleId",
              "in": "path",
              "description": "moduleId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailModuleResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/content/{moduleId}/duplicate.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Duplicate Email Module",
          "description": "Creates a copy of the designated module in an email.  Required Permissions: Read-Write Assets",
          "operationId": "duplicateModuleUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "moduleId",
              "in": "path",
              "description": "moduleId",
              "required": true,
              "type": "string"
            },
            {
              "name": "name",
              "in": "query",
              "description": "Name of the new module",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailModuleResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/content/{moduleId}/rename.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Rename Email Module",
          "description": "Renames a module.  Required Permissions: Read-Write Assets",
          "operationId": "renameUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "moduleId",
              "in": "path",
              "description": "moduleId",
              "required": true,
              "type": "string"
            },
            {
              "name": "name",
              "in": "query",
              "description": "New module name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailModuleResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/delete.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Delete Email",
          "description": "Deletes the target email.  Required Permissions: Read-Write Assets",
          "operationId": "deleteEmailUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/discardDraft.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Discard Email Draft",
          "description": "Discards the current draft of an email.  Required Permissions: Read-Write Assets",
          "operationId": "discardDraftUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/dynamicContent/{contentId}.json": {
        "get": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Get Email Dynamic Content",
          "description": "Retrieves the dyanmic content record for the given section.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getEmailDynamicContentUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of email",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "contentId",
              "in": "path",
              "description": "Id of email dynamic content section",
              "required": true,
              "type": "string"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailDynamicContentResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Update Email Dynamic Content Section",
          "description": "Updates dynamic content in the given section.  Required Permissions: Read-Write Assets",
          "operationId": "updateEmailDynamicContentUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of email",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "contentId",
              "in": "path",
              "description": "Id of email dynamic content section",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "description": "Content properties",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateEmailDynamicContentRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/sendSample.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Send Sample Email",
          "description": "Sends a sample email to the given email address.  Leads may be impersonated to populate data for tokens and dynamic content. Required Permissions: Read-Write Assets",
          "operationId": "sendSampleEmailUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the email",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "sendSampleEmailRequest",
              "description": "sendSampleEmailRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SendSampleEmailRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSendSampleResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/unapprove.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Unapprove Email",
          "description": "Unapproves the email and reverts it to a draft-only state.  Required Permissions: Approve Assets",
          "operationId": "unapproveDraftUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/variable/{name}.json": {
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Update Email Variable",
          "description": "Updates the value of a given variable in an email.  Required Permissions: Read-Write Assets",
          "operationId": "updateVariableUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "name",
              "in": "path",
              "description": "name",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "updateVariableRequest",
              "description": "updateVariableRequest",
              "required": false,
              "schema": {
                "$ref": "#/definitions/UpdateVariableRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailVariableResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/variables.json": {
        "get": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Get Email Variables",
          "description": "Returns a list of the available variables in an email.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getEmailVariablesUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailVariableResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/ccFields.json": {
        "get": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Get Email CC Fields",
          "description": "Returns the set of fields enabled for Email CC in the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getEmailCCFieldsUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailCCFieldsResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/emailTemplate/byName.json": {
        "get": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Get Email Template by Name",
          "description": "Retrieves and email template record by the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getTemplateByNameUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "name",
              "required": true,
              "type": "string"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/emailTemplate/{id}.json": {
        "get": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Get Email Template by Id",
          "description": "Returns an email template record by its id. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getTemplateByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Update Email Template Metadata",
          "description": "Updates the metadata for the designated email template.  Required Permissions: Read-Write Assets",
          "operationId": "updateEmailTemplateUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateEmailMetaDataRequest",
              "description": "updateEmailMetaDataRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateEmailTemplateMetaDataRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/emailTemplate/{id}/approveDraft.json": {
        "post": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Approve Email Template Draft",
          "description": "Approves the current draft of the email template.  Required Permissions: Approve Assets",
          "operationId": "approveDraftUsingPOST_1",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/emailTemplate/{id}/clone.json": {
        "post": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Clone Email Template",
          "description": "Clones the designated email template.  Required Permissions: Read-Write Assets",
          "operationId": "cloneTemplateUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "cloneEmailTemplateRequest",
              "description": "cloneEmailTemplateRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CloneEmailTemplateRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/emailTemplate/{id}/content": {
        "get": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Get Email Template Content by Id",
          "description": "Returns the content for a given email template.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getTemplateContentByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailTemplateContentResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/emailTemplate/{id}/content.json": {
        "post": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Update Email Template Content",
          "description": "Updates the content of the given email template.  Required Permissions: Read-Write Assets",
          "operationId": "updateEmailTemplateContentUsingPOST",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateEmailTemplateContentRequest",
              "description": "updateEmailTemplateContentRequest",
              "required": false,
              "schema": {
                "$ref": "#/definitions/UpdateEmailTemplateContentRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/emailTemplate/{id}/delete.json": {
        "post": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Delete Email Template",
          "description": "Deletes the designated email template.  Required Permissions: Read-Write Assets",
          "operationId": "deleteTemplateUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/emailTemplate/{id}/discardDraft.json": {
        "post": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Discard Email Template Draft",
          "description": "Discards the current draft of the email template.  Required Permissions: Read-Write Assets",
          "operationId": "discardDraftUsingPOST_1",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/emailTemplate/{id}/unapprove.json": {
        "post": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Unapprove Email Template Draft",
          "description": "Unapproves the current approved version of the Email Template.  Required Permissions: Approve Assets",
          "operationId": "unapproveDraftUsingPOST_1",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/emailTemplates.json": {
        "get": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Get Email Templates",
          "description": "Returns a list of email template records accessible in the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getEmailTemplatesUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of channels to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "status",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Create Email Template",
          "description": "Creates a new email template.  Required Permissions: Read-Write Assets",
          "operationId": "createEmailTemplateUsingPOST",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createEmailTemplateRequest",
              "description": "createEmailTemplateRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateEmailTemplateRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/emailTemplates/{id}/usedBy.json": {
        "get": {
          "tags": [
            "Assets-Email Templates"
          ],
          "summary": "Get Email Template Used By",
          "description": "Returns a list of email records which depend on a given email template.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getEmailTemplateUsedByUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the email template",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of channels to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailTemplateUsedByResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/emails.json": {
        "get": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Get Emails",
          "description": "Returns a list of emails matching the given filter parameters.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getEmailUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            },
            {
              "name": "folder",
              "in": "query",
              "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
              "required": false,
              "type": "string"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of emails to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "earliestUpdatedAt",
              "in": "query",
              "description": "Exclude emails prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "type": "string"
            },
            {
              "name": "latestUpdatedAt",
              "in": "query",
              "description": "Exclude emails after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Create Email",
          "description": "Creates a new email asset.  Required Permissions: Read-Write Assets",
          "operationId": "createEmailUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createEmailRequest",
              "description": "createEmailRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateEmailRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfEmailResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/email/{id}/fullContent.json": {
        "get": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Get Email Full Content",
          "description": "Returns the serialized HTML version of the email.  Required Permissions: Read-Only Assets, Read-Write Assets.  If leadId is passed in the request: Read-Only Lead, Read-Write Lead.",
          "operationId": "getEmailFullContentUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the email",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not.",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            },
            {
              "name": "leadId",
              "in": "query",
              "description": "The lead id to impersonate.  Email is rendered as though it was received by this lead.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "type",
              "in": "query",
              "description": "Email content type to return.  Default is HTML.",
              "required": false,
              "type": "string",
              "enum": [
                "Text",
                "HTML"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfGetEmailFullContentResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Emails"
          ],
          "summary": "Update Email Full Content",
          "description": "Replaces the HTML of an Email that has had its relationship broken from its template.  Required Permissions: Read-Write Assets",
          "operationId": "createEmailFullContentUsingPOST",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the email",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateEmailFullContentRequest",
              "description": "Content is multipart file parameter",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateEmailFullContentRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfUpdateEmailFullContentResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/file/byName.json": {
        "get": {
          "tags": [
            "Assets-Files"
          ],
          "summary": "Get File by Name",
          "description": "Returns files records for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getFileByNameUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "Name of the file",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFileResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/file/{id}.json": {
        "get": {
          "tags": [
            "Assets-Files"
          ],
          "summary": "Get File by Id",
          "description": "Returns the file record for the given id.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getFileByIdUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id for file in database",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFileResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/file/{id}/content.json": {
        "post": {
          "tags": [
            "Assets-File Contents"
          ],
          "summary": "Update File Content",
          "description": "Replaces the current content of the file with the included payload.  Required Permissions: Read-Write Assets",
          "operationId": "updateContentUsingPOST",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id for file in database",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "request",
              "description": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateFileContentRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFileResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/files.json": {
        "get": {
          "tags": [
            "Assets-Files"
          ],
          "summary": "Get Files",
          "description": "Returns the files from the given folder. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getFilesUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "getFilesRequest",
              "description": "getFilesRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GetFilesRequest"
              }
            },
            {
              "name": "folder",
              "in": "query",
              "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFileResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Files"
          ],
          "summary": "Create File",
          "description": "Creates a new file from the included payload. Required Permissions: Read-Write Assets",
          "operationId": "createFileUsingPOST",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createFileRequest",
              "description": "createFileRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateFileRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFileResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/folder/byName.json": {
        "get": {
          "tags": [
            "Assets-Folders"
          ],
          "summary": "Get Folder by Name",
          "description": "Returns a folder record for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getFolderByNameUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "Name of the folder.  Not applicable for Programs",
              "required": true,
              "type": "string"
            },
            {
              "name": "type",
              "in": "query",
              "description": "Type of folder.  'Folder' or 'Program'",
              "required": false,
              "type": "string"
            },
            {
              "name": "root",
              "in": "query",
              "description": "Parent folder reference",
              "required": false,
              "type": "string"
            },
            {
              "name": "workSpace",
              "in": "query",
              "description": "Name of the workspace",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFolderResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/folder/{id}.json": {
        "get": {
          "tags": [
            "Assets-Folders"
          ],
          "summary": "Get Folder by Id",
          "description": "Returns the folder record with the given id.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getFolderByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the folder to retrieve",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "type",
              "in": "query",
              "description": "Type of folder.  'Folder' or 'Program'",
              "required": true,
              "type": "string",
              "default": "Folder",
              "enum": [
                "Folder",
                "Program"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFolderResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Folders"
          ],
          "summary": "Update Folder Metadata",
          "description": "Updates the metadata for a given folder.  Required Permissions: Read-Write Assets",
          "operationId": "updateFolderUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the folder to update",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateFolderRequest",
              "description": "updateFolderRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateFolderRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFolderResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/folder/{id}/content.json": {
        "get": {
          "tags": [
            "Assets-Folders"
          ],
          "summary": "Get Folder Contents",
          "description": "Returns records for the contents of a given folder.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getFolderContentUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the folder to retrieve",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of channels to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "type",
              "in": "query",
              "description": "Type of folder.  'Folder' or 'Program'.  Default is 'Folder'",
              "required": true,
              "type": "string",
              "enum": [
                "Folder",
                "Program"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFolderContentResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/folder/{id}/delete.json": {
        "post": {
          "tags": [
            "Assets-Folders"
          ],
          "summary": "Delete Folder",
          "description": "Deletes the designated folder.  Deletion will fail if the folder has content.  Required Permissions: Read-Write Assets",
          "operationId": "deleteFolderUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the folder to delete",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "type",
              "in": "formData",
              "description": "type",
              "required": true,
              "type": "string",
              "default": "Folder",
              "enum": [
                "Program",
                "Folder"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/folder/{id}/tokens.json": {
        "get": {
          "tags": [
            "Assets-Tokens"
          ],
          "summary": "Get Tokens by Folder Id",
          "description": "Retrieves the list of available My Tokens in the target folder.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getTokensByFolderIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "folderType",
              "in": "query",
              "description": "Type of folder.  'Folder' or 'Program'",
              "required": false,
              "type": "string",
              "default": "Folder",
              "enum": [
                "Folder",
                "Program"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfTokenResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Tokens"
          ],
          "summary": "Create Token",
          "description": "Create or update a token in the parent folder.  Required Permissions: Read-Write Assets",
          "operationId": "addTokenTOFolderUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the folder to which the token will be associated with",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "createTokenRequest",
              "description": "createTokenRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateTokenRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfTokenResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/folder/{id}/tokens/delete.json": {
        "post": {
          "tags": [
            "Assets-Tokens"
          ],
          "summary": "Delete Token by Name",
          "description": "Deletes a token with the given name from the parent folder.  Required Permissions: Read-Write Assets",
          "operationId": "deleteTokenByNameUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "deleteTokenRequest",
              "description": "deleteTokenRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DeleteTokenRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/folders.json": {
        "get": {
          "tags": [
            "Assets-Folders"
          ],
          "summary": "Get Folders",
          "description": "Retrieves child folders from within a given root folder.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getFolderUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "root",
              "in": "query",
              "description": "Parent folder reference",
              "required": false,
              "type": "string"
            },
            {
              "name": "maxDepth",
              "in": "query",
              "description": "Maximum folder depth to traverse, Default 2",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of folders to return. Default 20, maximum 200",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging.  Default 0",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "workSpace",
              "in": "query",
              "description": "Name of the workspace",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFolderResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Folders"
          ],
          "summary": "Create Folder",
          "description": "Creates a new folder.  Required Permissions: Read-Write Assets",
          "operationId": "createFolderUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createFolderRequest",
              "description": "createFolderRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateFolderRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFolderResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/byName.json": {
        "get": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Get Form by Name",
          "description": "Retrieves a form record by its name. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getLpFormByNameUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "Name of the form",
              "required": true,
              "type": "string"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            },
            {
              "name": "folder",
              "in": "query",
              "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/fields.json": {
        "get": {
          "tags": [
            "Assets-Form Fields"
          ],
          "summary": "Get Available Form Fields",
          "description": "Retrieves a list of all valid fields for use in forms. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getAllFieldsUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of fields to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFieldsMetaDataResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/programMemberFields.json": {
        "get": {
          "tags": [
            "Assets-Form Fields"
          ],
          "summary": "Get Available Form Program Member Fields",
          "description": "Retrieves a list of all valid Program Member fields for use in forms. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getAllProgramMemberFieldsUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of fields to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFieldsMetaDataResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{formId}/field/{fieldId}/visibility.json": {
        "post": {
          "tags": [
            "Assets-Form Fields"
          ],
          "summary": "Add Form Field Visibility Rules",
          "description": "Adds a visibility rule to the target form field.  Required Permissions: Read-Write Assets",
          "operationId": "addFormFieldVisibilityRuleUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "formId",
              "in": "path",
              "description": "formId",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "fieldId",
              "in": "path",
              "description": "fieldId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "addFormFieldVisibilityRequest",
              "description": "addFormFieldVisibilityRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddFormFieldVisibilityRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFormVisibilityRuleResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}.json": {
        "get": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Get Form By Id",
          "description": "Retrieves a form record by its id. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getLpFormByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Update Form Metadata",
          "description": "Updates the metadata of the target form.  Required Permissions: Read-Write Assets",
          "operationId": "updateFormsUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateFormMetaDataRequest",
              "description": "updateFormMetaDataRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateFormMetaDataRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/approveDraft.json": {
        "post": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Approve Form Draft",
          "description": "Approves the current draft of the form.  This will delete the current approved version of the form.  Required Permissions: Approve Assets",
          "operationId": "approveFromUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/clone.json": {
        "post": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Clone Form",
          "description": "Clones the target form.  Required Permissions: Read-Write Assets",
          "operationId": "cloneLpFormsUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "cloneFormRequest",
              "description": "cloneFormRequest",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CloneFormRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/delete.json": {
        "post": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Delete Form",
          "description": "Deletes the target form.  Forms which are in use by landing pages may not be deleted until they are removed from all landing pages.  Required Permissions: Read-Write Assets",
          "operationId": "deleteFormByIdUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/discardDraft.json": {
        "post": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Discard Form Draft",
          "description": "Discards the current draft of the form.  Required Permissions: Read-Write Assets",
          "operationId": "discardFormByIdUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/field/{fieldId}.json": {
        "post": {
          "tags": [
            "Assets-Form Fields"
          ],
          "summary": "Update Form Field",
          "description": "Updates the configuration for that target field. Required Permissions: Read-Write Assets",
          "operationId": "updateFormFieldUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "fieldId",
              "in": "path",
              "description": "fieldId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "updateFormFieldRequest",
              "description": "updateFormFieldRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateFormFieldRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormFieldResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/field/{fieldId}/delete.json": {
        "post": {
          "tags": [
            "Assets-Form Fields"
          ],
          "summary": "Delete Form Field",
          "description": "Deletes a field from a form. Required Permissions: Read-Write Assets",
          "operationId": "deleteFormFieldUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "fieldId",
              "in": "path",
              "description": "fieldId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/fieldSet.json": {
        "post": {
          "tags": [
            "Assets-Form Fields"
          ],
          "summary": "Add Fieldset to Form",
          "description": "Adds a field set to the target form.  Required Permissions: Read-Write Assets",
          "operationId": "addFieldSetUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "addFormFieldSetRequest",
              "description": "addFormFieldSetRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddFormFieldSetRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormFieldResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/fieldSet/{fieldSetId}/field/{fieldId}/delete.json": {
        "post": {
          "tags": [
            "Assets-Form Fields"
          ],
          "summary": "Delete Field from Fieldset",
          "description": "Removes the target field from the fieldset. Required Permissions: Read-Write Assets",
          "operationId": "deleteFormFieldFromFieldSetUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "fieldSetId",
              "in": "path",
              "description": "fieldSetId",
              "required": true,
              "type": "string"
            },
            {
              "name": "fieldId",
              "in": "path",
              "description": "fieldId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/fields.json": {
        "get": {
          "tags": [
            "Assets-Form Fields"
          ],
          "summary": "Get Fields for Form",
          "description": "Retrieves the list of fields in the target form.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getFormFieldByFormVidUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormFieldResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Form Fields"
          ],
          "summary": "Add Field to Form",
          "description": "Adds a field to a form. Required Permissions: Read-Write Assets",
          "operationId": "addFieldToAFormUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "addFormFieldSetRequest",
              "description": "addFormFieldSetRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddFormFieldRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormFieldResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/reArrange.json": {
        "post": {
          "tags": [
            "Assets-Form Fields"
          ],
          "summary": "Update Field Positions",
          "description": "Reorders the list of fields in a form. Required Permissions: Read-Write Assets",
          "operationId": "updateFieldPositionsUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "reArrangeRequest",
              "description": "reArrangeRequest",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ReArrangeRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/richText.json": {
        "post": {
          "tags": [
            "Assets-Form Fields"
          ],
          "summary": "Add Rich Text Field",
          "description": "Adds a rich-text type field to the form.  Required Permissions: Read-Write Assets",
          "operationId": "addRichTextFieldUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "addRichTextRequest",
              "description": "addRichTextRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddRichTextRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormFieldResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/submitButton.json": {
        "post": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Update Submit Button",
          "description": "Updates the submit button configuration for the target form.  Required Permissions: Read-Write Assets",
          "operationId": "updateFormSubmitButtonUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "submitButtonRequest",
              "description": "submitButtonRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SubmitButtonRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/thankYouPage.json": {
        "get": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Get Thank You Page by Form Id",
          "description": "Returns the thank you page configuration for a given form.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getThankYouPageByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfThankYouPageResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Update Thank You Page",
          "description": "Updates the thank you page configuration for a given form.  This update is destructive and the resulting draft will not have any memory of the previous configuration.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "updateThankYouPageByIdUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "thankYouPageRequest",
              "description": "thankYouPageRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateThankYouPageRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfThankYouPageResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/forms.json": {
        "get": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Get Forms",
          "description": "Retrieves a list of accessible form records from the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "browseForms2UsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            },
            {
              "name": "folder",
              "in": "query",
              "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
              "required": true,
              "type": "string"
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of channels to return.  Max 200, default 20",
              "required": false,
              "type": "string"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Create Form",
          "description": "Creates a new form.  Required Permissions: Read-Write Assets",
          "operationId": "createLpFormsUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createFormRequest",
              "description": "createFormRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateLpFormRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpFormResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/form/{id}/usedBy.json": {
        "get": {
          "tags": [
            "Assets-Forms"
          ],
          "summary": "Get Form Used By",
          "description": "Returns a list of asset records which depend on a given form.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getFormUsedByUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the form",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of assets to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfFormUsedByResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/byName.json": {
        "get": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Get Landing Page by Name",
          "description": "Returns the landing page record for the given name. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getLandingPageByNameUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "Name of the landing page",
              "required": true,
              "type": "string"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of channels to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}.json": {
        "get": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Get Landing Page by Id",
          "description": "Returns the landing record for the given id. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getLandingPageByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Update Landing Page Metadata",
          "description": "Updates the metadata for the targe landing page.  Required Permissions: Read-Write Assets",
          "operationId": "updateLandingPageUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateLandingPageRequest",
              "description": "updateLandingPageRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateLandingPageRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}/approveDraft.json": {
        "post": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Approve Landing Page Draft",
          "description": "Approves the current draft of the landing page.  Required Permissions: Approve Assets",
          "operationId": "approveLandingPageUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}/clone.json": {
        "post": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Clone Landing Page",
          "description": "Clones the target landing page. Required Permissions: Read-Write Assets",
          "operationId": "cloneLandingPageUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "cloneLandingPageRequest",
              "description": "cloneLandingPageRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CloneLandingPageRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}/content.json": {
        "get": {
          "tags": [
            "Assets-Landing Page Content"
          ],
          "summary": "Get Landing Page Content",
          "description": "Retrieves the list of content sections in the target landing page.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getLandingPageContentUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageContentResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Landing Page Content"
          ],
          "summary": "Add Landing Page Content Section",
          "description": "Adds a content section to the target landing page. Parameters must be sent as application/x-www-form-urlencoded (not JSON).  Required Permissions: Read-Write Assets",
          "operationId": "addLandingPageContentUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "request",
              "description": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateLandingPageContentRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}/content/{contentId}.json": {
        "post": {
          "tags": [
            "Assets-Landing Page Content"
          ],
          "summary": "Update Landing Page Content Section",
          "description": "Updates a content section the landing page. Parameters must be sent as application/x-www-form-urlencoded (not JSON).  Required Permissions: Read-Write Assets",
          "operationId": "updateLandingPageContentUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of landing page",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "contentId",
              "in": "path",
              "description": "Id of landing page content section",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "description": "Content properties",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateLandingPageContentRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}/content/{contentId}/delete.json": {
        "post": {
          "tags": [
            "Assets-Landing Page Content"
          ],
          "summary": "Delete Landing Page Content Section",
          "description": "Removes the target content section from the parent landing page. Required Permissions: Read-Write Assets",
          "operationId": "removeLandingPageContentUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of landing page",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "contentId",
              "in": "path",
              "description": "Id of landing page content section",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}/delete.json": {
        "post": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Delete Landing Page",
          "description": "Deletes the target landing page. Required Permissions: Read-Write Assets",
          "operationId": "deleteLandingPageByIdUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}/discardDraft.json": {
        "post": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Discard Landing Page Draft",
          "description": "Discards the current draft of the landing page. Required Permissions: Read-Write Assets",
          "operationId": "discardLandingPageByIdUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}/dynamicContent/{contentId}.json": {
        "get": {
          "tags": [
            "Assets-Landing Page Content"
          ],
          "summary": "Get Landing Page Dynamic Content",
          "description": "Retrieves the dynamic content from the target section. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getLandingPageDynamicContentsUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of landing page",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "contentId",
              "in": "path",
              "description": "Id of landing page dynamic content section",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageDynamicContentResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Landing Page Content"
          ],
          "summary": "Update Landing Page Dynamic Content Section",
          "description": "Updates the content of the target dynamic content section. Required Permissions: Read-Write Assets",
          "operationId": "updateLandingPageDynamicContentUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the landing page",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "contentId",
              "in": "path",
              "description": "Id of the landing page dynamic content",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "description": "Dynamic content properties",
              "required": false,
              "schema": {
                "$ref": "#/definitions/UpdateLandingPageDynamicContentRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}/unapprove.json": {
        "post": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Unapprove Landing Page",
          "description": "Unapproves the landing page, reverting it to a draft-only state. Required Permissions: Approve Assets",
          "operationId": "unapproveLandingPageByIdUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}/variable/{variableId}.json": {
        "post": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Update Landing Page Variable",
          "description": "Updates the value of the given variable.  Required Permissions: Read-Write Assets",
          "operationId": "updateLandingPageVariableUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "variableId",
              "in": "path",
              "description": "variableId",
              "required": true,
              "type": "string"
            },
            {
              "name": "value",
              "in": "query",
              "description": "New value of the variable",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageVariableResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}/variables.json": {
        "get": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Get Landing Page Variables",
          "operationId": "getVariablesUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the landing page",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageVariableResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPageTemplate/byName.json": {
        "get": {
          "tags": [
            "Assets-Landing Page Templates"
          ],
          "summary": "Get Landing Page Template by Name",
          "description": "Retrieves the landing page template record for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getLandingPageTemplateByNameUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "Name of the landing page template",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpTemplateResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPageTemplate/{id}.json": {
        "get": {
          "tags": [
            "Assets-Landing Page Templates"
          ],
          "summary": "Get Landing Page Template by Id",
          "description": "Retrieves the record for the target landing page template.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getLandingPageTemplateByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpTemplateResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Landing Page Templates"
          ],
          "summary": "Update Landing Page Template Metadata",
          "description": "Updates the metadata for the target landing page template.  Required Permissions: Read-Write Assets",
          "operationId": "updateLpTemplateUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateLpTemplateRequest",
              "description": "updateLpTemplateRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateLpTemplateRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpTemplateResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPageTemplate/{id}/approveDraft.json": {
        "post": {
          "tags": [
            "Assets-Landing Page Templates"
          ],
          "summary": "Approve Landing Page Template Draft",
          "description": "Approves the current landing page template draft.  This will delete the current approved version of the template if there is one.  Required Permissions: Approve Assets",
          "operationId": "approveLandingPageTemplateUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpTemplateResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPageTemplate/{id}/clone.json": {
        "post": {
          "tags": [
            "Assets-Landing Page Templates"
          ],
          "summary": "Clone Landing Page Template",
          "description": "Clones the target landing page template.  Required Permissions: Read-Write Assets",
          "operationId": "cloneLpTemplateUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "cloneLpTemplateRequest",
              "description": "cloneLpTemplateRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CloneLpTemplateRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpTemplateResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPageTemplate/{id}/content.json": {
        "get": {
          "tags": [
            "Assets-Landing Page Templates"
          ],
          "summary": "Get Landing Page Template Content",
          "description": "Retrieves the content of the target landing page.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getLandingPageTemplateContentUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpTemplateGetContentResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Landing Page Templates"
          ],
          "summary": "Update Landing Page Template Content",
          "description": "Updates the content for the target landing page template.  This update is destructive for the draft version of the template.  Required Permissions: Read-Write Assets",
          "operationId": "updateLandingPageTemplateContentUsingPOST",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "content",
              "in": "formData",
              "description": "content",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPageTemplate/{id}/delete.json": {
        "post": {
          "tags": [
            "Assets-Landing Page Templates"
          ],
          "summary": "Delete Landing Page Template",
          "description": "Deletes the target landing page template.  Required Permissions: Read-Write Assets",
          "operationId": "deleteLpTemplateUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPageTemplate/{id}/discardDraft.json": {
        "post": {
          "tags": [
            "Assets-Landing Page Templates"
          ],
          "summary": "Discard Landing Page Template Draft",
          "description": "Discrads the current draft of the landing page template.  Required Permissions: Read-Write Assets",
          "operationId": "discardDraftUsingPOST_2",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPageTemplate/{id}/unapprove.json": {
        "post": {
          "tags": [
            "Assets-Landing Page Templates"
          ],
          "summary": "Unapprove Landing Page Template",
          "description": "Unapproves the landing page template and reverts it to a draft-only state.  Required Permissions: Approve Assets",
          "operationId": "unapproveLandingPageTemplateUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpTemplateResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPageTemplates.json": {
        "get": {
          "tags": [
            "Assets-Landing Page Templates"
          ],
          "summary": "Get Landing Page Templates",
          "description": "Retrieves the list of accessible landing page templates from the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getLandingPageTemplatesUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of channels to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            },
            {
              "name": "folder",
              "in": "query",
              "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpTemplateResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Landing Page Templates"
          ],
          "summary": "Create Landing Page Template",
          "description": "Creates a new landing page template.  Required Permissions: Read-Write Assets",
          "operationId": "createLpTemplateUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createLpTemplateRequest",
              "description": "createLpTemplateRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateLpTemplateRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLpTemplateResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPages.json": {
        "get": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Get Landing Pages",
          "description": "Retrieves a list of accessible landing pages from the target instance. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "browseLandingPagesUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of landing pages to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "folder",
              "in": "query",
              "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Create Landing Page",
          "description": "Creates a new landing page.  Required Permissions: Read-Write Assets",
          "operationId": "createLandingPageUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createLandingPageRequest",
              "description": "createLandingPageRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateLandingPageRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPage/{id}/fullContent.json": {
        "get": {
          "tags": [
            "Assets-Landing Pages"
          ],
          "summary": "Get Landing Page Full Content",
          "description": "Returns the serialized HTML version of the landing page.  Required Permissions: Read-Only Assets, Read-Write Assets.  If leadId is passed in the request: Read-Only Lead, Read-Write Lead.",
          "operationId": "getLandingPageFullContentUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the landing page.",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "leadId",
              "in": "query",
              "description": "The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "segmentation",
              "in": "query",
              "description": "JSON array of of segmentations.  Each segmentation must be a JSON object with members 'segmentationId', and 'segmentId'.<br>Example: [{\"segmentationId\":1030,\"segmentId\":1103}]",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfGetLandingPageFullContentResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/redirectRules.json": {
        "get": {
          "tags": [
            "Assets-Landing Page Redirect Rules"
          ],
          "summary": "Get Landing Page Redirect Rules",
          "description": "Retrieves a list of landing page redirect rules from the target instance. Required Permissions: Read Only Redirect Rules, Read Write Redirect Rules",
          "operationId": "getLandingPageRedirectRulesUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of landing page redirect rules to return.  Max 200, default 20",
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "redirectTolandingPageId",
              "in": "query",
              "description": "Landing page id of landing page to redirect to",
              "type": "string"
            },
            {
              "name": "redirectToPath",
              "in": "query",
              "description": "Path of landing page to redirect to",
              "type": "string"
            },
            {
              "name": "earliestUpdatedAt",
              "in": "query",
              "description": "Exclude landing page redirect rules prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "type": "string"
            },
            {
              "name": "latestUpdatedAt",
              "in": "query",
              "description": "Exclude landing page redirect rules after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageRedirectRules"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Landing Page Redirect Rules"
          ],
          "summary": "Create Landing Page Redirect Rule",
          "description": "Create a new landing page redirect rule. Required Permissions: Read Write Redirect Rules",
          "operationId": "createLandingPageRedirectRuleUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createLandingPageRedirectRuleRequest",
              "description": "createLandingPageRedirectRuleRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateLandingPageRedirectRuleRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageRedirectRules"
              }
            }
          }
        }
      },
      "/rest/asset/v1/redirectRule/{id}.json": {
        "get": {
          "tags": [
            "Assets-Landing Page Redirect Rules"
          ],
          "summary": "Get Landing Page Redirect Rule by Id",
          "description": "Retrieves the landing page redirect rule record. Required Permissions: Read Only Redirect Rules, Read Write Redirect Rules",
          "operationId": "getLandingPageRedirectRuleByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of landing page redirect rule",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageRedirectRules"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Landing Page Redirect Rules"
          ],
          "summary": "Update Landing Page Redirect Rule",
          "description": "Update an existing landing page redirect rule. Required Permissions: Read Write Redirect Rules",
          "operationId": "updateLandingPageRedirectRuleUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of landing page redirect rule",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateLandingPageRedirectRuleRequest",
              "description": "updateLandingPageRedirectRuleRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateLandingPageRedirectRuleRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageRedirectRules"
              }
            }
          }
        }
      },
      "/rest/asset/v1/redirectRule/{id}/delete.json": {
        "post": {
          "tags": [
            "Assets-Landing Page Redirect Rules"
          ],
          "summary": "Delete Landing Page Redirect Rule",
          "description": "Delete a landing page redirect rule. Required Permissions: Read Write Redirect Rules",
          "operationId": "deleteLandingPageRedirectRuleUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of landing page redirect rule",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/landingPageDomains.json": {
        "get": {
          "tags": [
            "Assets-Landing Page Redirect Rules"
          ],
          "summary": "Get Landing Page Domains",
          "description": "Retrieves a list of landing page domain and domain aliases. Required Permissions: Read Only Redirect Rules, Read Write Redirect Rules",
          "operationId": "getLandingPageDomainsUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of landing page domains and domain aliases to return.  Max 200, default 20",
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLandingPageDomains"
              }
            }
          }
        }
      },
      "/rest/asset/v1/program/byName.json": {
        "get": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Get Program by Name",
          "description": "Retrieves the program record for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getProgramByNameUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "Name of the program",
              "required": true,
              "type": "string"
            },
            {
              "name": "includeTags",
              "in": "query",
              "description": "Set true to populate program tags",
              "required": false,
              "type": "boolean"
            },
            {
              "name": "includeCosts",
              "in": "query",
              "description": "Set true to populate program costs",
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfProgramResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/program/byTag.json": {
        "get": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Get Programs by Tag",
          "description": "Retrieves a list of programs matching the tag type and tag values given.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getProgramListByTagUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "tagType",
              "in": "query",
              "description": "Type of program tag",
              "required": true,
              "type": "string"
            },
            {
              "name": "tagValue",
              "in": "query",
              "description": "Value of the tag",
              "required": true,
              "type": "string"
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of channels to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfProgramResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/program/{id}.json": {
        "get": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Get Program by Id",
          "description": "Retrieves the program record for the given id.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getProgramByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfProgramResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Update Program Metadata",
          "description": "Updates the target program's metadata.  Required Permissions: Read-Write Assets",
          "operationId": "updateProgramUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateProgramRequest",
              "description": "updateProgramRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateProgramRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfProgramResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/program/{programId}/smartList.json": {
        "get": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Get Smart List by Program Id",
          "description": "Retrieves a Smart List record by its Email Program id. Required Permissions: Read-Asset or Read-Write Asset",
          "operationId": "getSmartListByProgramIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "programId",
              "in": "path",
              "description": "Id for the email program containing smart list to retrieve",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "includeRules",
              "in": "query",
              "description": "Set true to populate smart list rules.  Default false",
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartListResponseWithRules"
              }
            }
          }
        }
      },
      "/rest/asset/v1/program/{id}/approve.json": {
        "post": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Approve Program",
          "description": "Approves the target program.  Only valid for unapproved email programs.  Required Permissions: Read-Write Assets",
          "operationId": "approveProgramUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/program/{id}/clone.json": {
        "post": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Clone Program",
          "description": "Clones the target program.  Required Permissions: Read-Write Assets",
          "operationId": "cloneProgramUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "cloneProgramRequest",
              "description": "cloneProgramRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CloneProgramRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfProgramResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/program/{id}/delete.json": {
        "post": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Delete Program",
          "description": "Deletes the target program.  The program may not contain any assets which are in use outside the program.  Required Permissions: Read-Write Assets",
          "operationId": "deleteProgramUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/program/{id}/unapprove.json": {
        "post": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Unapprove Program",
          "description": "Unapproves the target program.  Only valid for approved email programs.  Required Permissions: Read-Write Assets",
          "operationId": "unapproveProgramUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/program/{id}/tag/{tagType}.json": {
        "post": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Update Program Tag",
          "description": "Update program tag.  Required Permissions: Read-Write Assets",
          "operationId": "updateProgramTagUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "tagType",
              "in": "path",
              "description": "Type of program tag",
              "required": true,
              "type": "string"
            },
            {
              "name": "tagValue",
              "in": "query",
              "description": "Value of program tag",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/program/{id}/tag/{tagType}/delete.json": {
        "post": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Delete Program Tag",
          "description": "Delete non-required program tag.  Required Permissions: Read-Write Assets",
          "operationId": "deleteProgramTagUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "tagType",
              "in": "path",
              "description": "Type of program tag",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/programs.json": {
        "get": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Get Programs",
          "description": "Retrieves the list of accessible programs from the target instance. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "browseProgramsUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of channels to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "filterType",
              "in": "query",
              "description": "Optional filter.  Requires filterValues",
              "required": false,
              "type": "string",
              "enum": [
                "id",
                "programId",
                "folderId",
                "workspace"
              ]
            },
            {
              "name": "earliestUpdatedAt",
              "in": "query",
              "description": "Exclude programs prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "required": false,
              "type": "string"
            },
            {
              "name": "latestUpdatedAt",
              "in": "query",
              "description": "Exclude programs after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfBrowseAllPrograms"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Programs"
          ],
          "summary": "Create Program",
          "description": "Creates a new program.  Required Permissions: Read-Write Assets",
          "operationId": "createProgramUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createProgramRequest",
              "description": "createProgramRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateProgramRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfProgramResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/segmentation.json": {
        "get": {
          "tags": [
            "Assets-Segments"
          ],
          "summary": "Get Segmentations",
          "description": "Retrieves a list of accessible segmentations for the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getSegmentationUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of channels to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSegmentationResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/segmentation/{id}/segments.json": {
        "get": {
          "tags": [
            "Assets-Segments"
          ],
          "summary": "Get Segments For Segmentation",
          "description": "Retrieves a list of segments inside the target segmentation.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getSegmentsForSegmentationUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSegmentsResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartCampaign/{id}.json": {
        "get": {
          "tags": [
            "Assets-Smart Campaigns"
          ],
          "summary": "Get Smart Campaign by Id",
          "description": "Returns the smart campaign for the given id.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getSmartCampaignByIdUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id for the smart campaign",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartCampaignResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Smart Campaigns"
          ],
          "summary": "Update Smart Campaign",
          "description": "Update the smart campaign for the given id.  Required Permissions: Read-Write Assets",
          "operationId": "updateSmartCampaignUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id for the smart campaign",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateSmartCampaignRequest",
              "description": "updateSmartCampaignRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateSmartCampaignRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartCampaignResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartCampaign/byName.json": {
        "get": {
          "tags": [
            "Assets-Smart Campaigns"
          ],
          "summary": "Get Smart Campaign by Name",
          "description": "Returns the smart campaign for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getSmartCampaignByNameUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "Name for the smart campaign",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartCampaignResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartCampaign/{id}/smartList.json": {
        "get": {
          "tags": [
            "Assets-Smart Campaigns"
          ],
          "summary": "Get Smart List by Smart Campaign Id",
          "description": "Retrieves a Smart List record by its Smart Campaign id. Required Permissions: Read-Asset or Read-Write Asset",
          "operationId": "getSmartListBySmartCampaignIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id for the smart campaign containing smart list to retrieve",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "includeRules",
              "in": "query",
              "description": "Set true to populate smart list rules.  Default false",
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartListResponseWithRules"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartCampaigns.json": {
        "get": {
          "tags": [
            "Assets-Smart Campaigns"
          ],
          "summary": "Get Smart Campaigns",
          "description": "Retrieves all smart campaigns. Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getAllSmartCampaignsGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of smart campaigns to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "folder",
              "in": "query",
              "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
              "required": false,
              "type": "string"
            },
            {
              "name": "earliestUpdatedAt",
              "in": "query",
              "description": "Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "required": false,
              "type": "string"
            },
            {
              "name": "latestUpdatedAt",
              "in": "query",
              "description": "Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "required": false,
              "type": "string"
            },
            {
              "name": "isActive",
              "in": "query",
              "description": "Set true to return only active campaigns.  Default false",
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartCampaignResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Smart Campaigns"
          ],
          "summary": "Create Smart Campaign",
          "description": "Creates a new smart campaign.  Required Permissions: Read-Write Assets",
          "operationId": "createSmartCampaignUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createSmartCampaignRequest",
              "description": "createSmartCampaignRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateSmartCampaignRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartCampaignResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartCampaign/{id}/activate.json": {
        "post": {
          "tags": [
            "Assets-Smart Campaigns"
          ],
          "summary": "Activate Smart Campaign",
          "description": "Activates a trigger smart campaign.  Required Permissions: Activate Campaign",
          "operationId": "activateSmartCampaignUsingPOST",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the smart campaign",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartCampaign/{id}/deactivate.json": {
        "post": {
          "tags": [
            "Assets-Smart Campaigns"
          ],
          "summary": "Deactivate Smart Campaign",
          "description": "Deactivates a trigger smart campaign.  Required Permissions: Deactivate Campaign",
          "operationId": "deactivateSmartCampaignUsingPOST",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the smart campaign",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartCampaign/{id}/clone.json": {
        "post": {
          "tags": [
            "Assets-Smart Campaigns"
          ],
          "summary": "Clone Smart Campaign",
          "description": "Clones a smart campaign.  Required Permissions: Read-Write Assets",
          "operationId": "cloneSmartCampaignUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the smart campaign",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "cloneSmartCampaignRequest",
              "description": "cloneSmartCampaignRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CloneSmartCampaignRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartCampaignResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartCampaign/{id}/delete.json": {
        "post": {
          "tags": [
            "Assets-Smart Campaigns"
          ],
          "summary": "Delete Smart Campaign",
          "description": "Deletes a smart campaign.  Required Permissions: Read-Write Assets",
          "operationId": "deleteSmartCampaignUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the smart campaign",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/snippet/{id}.json": {
        "get": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Get Snippet by Id",
          "description": "Retrieves the target snippet record.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getSnippetByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSnippetResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Update Snippet Metadata",
          "description": "Updates the metadata of the snippet.  Required Permissions: Read-Write Assets",
          "operationId": "updateSnippetUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateSnippetRequest",
              "description": "updateSnippetRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateSnippetRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSnippetResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/snippet/{id}/approveDraft.json": {
        "post": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Approve Snippet Draft",
          "description": "Approves the current draft of the snippet.  Required Permissions: Approve Assets",
          "operationId": "approveSnippetUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSnippetResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/snippet/{id}/clone.json": {
        "post": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Clone Snippet",
          "description": "Clones the target snippet.  Required Permissions: Read-Write Assets",
          "operationId": "cloneSnippetUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "cloneSnippetRequest",
              "description": "cloneSnippetRequest",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CloneSnippetRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSnippetResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/snippet/{id}/content.json": {
        "get": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Get Snippet Content",
          "description": "Retrieves the content of the target snippet.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getSnippetContentByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSnippetContentResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Update Snippet Content",
          "description": "Updates the content of the target snippet.  Required Permissions: Read-Write Assets",
          "operationId": "updateContentUsingPOST_1",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "content",
              "in": "query",
              "description": "Content of the snippet",
              "required": true,
              "type": "string"
            },
            {
              "name": "type",
              "in": "query",
              "description": "Type of snippet content",
              "enum": [
                "DynamicContent",
                "HTML",
                "Text"
              ],
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/snippet/{id}/delete.json": {
        "post": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Delete Snippet",
          "description": "Deletes the target snippet.  The snippet may not be in use by emails or landing pages.  Required Permissions: Read-Write Assets",
          "operationId": "deleteSnippetUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/snippet/{id}/discardDraft.json": {
        "post": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Discard Snippet Draft",
          "description": "Discards the current draft of the snippet.  Required Permissions: Read-Write Assets",
          "operationId": "discardSnippetUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/snippet/{id}/dynamicContent.json": {
        "get": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Get Dynamic Content",
          "description": "Gets the list of dynamic content sections for the snippet.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getDynamicContentUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ModelResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/snippet/{id}/dynamicContent/{segmentId}.json": {
        "post": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Update Snippet Dynamic Content",
          "description": "Updates the target dynamic content section.  Required Permissions: Read-Write Assets",
          "operationId": "updateDynamicContentUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "segmentId",
              "in": "path",
              "description": "segmentId",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "request",
              "description": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateSnippetDynamicContentRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/snippet/{id}/unapprove.json": {
        "post": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Unapprove Snippet",
          "description": "Unapproves the current version of the snippet.  The snippet may not be in use.  The snippet will be reverted to a draft-only state.  Required Permissions: Approve Assets",
          "operationId": "unapproveSnippetUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSnippetResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/snippets.json": {
        "get": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Get Snippets",
          "description": "Retrieves a list of accessible snippets from the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getSnippetUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "Status filter for draft or approved versions",
              "required": false,
              "type": "string",
              "enum": [
                "approved",
                "draft"
              ]
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of channels to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSnippetResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Snippets"
          ],
          "summary": "Create Snippet",
          "description": "Creates a new snippet.  Required Permissions: Read-Write Assets",
          "operationId": "createSnippetUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createSnippetRequest",
              "description": "createSnippetRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateSnippetRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSnippetResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/tagType/byName.json": {
        "get": {
          "tags": [
            "Assets-Tags"
          ],
          "summary": "Get Tag By Name",
          "description": "Retrieves a tag by its name.  This will also return the set of valid values for the tag.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getTagByNameUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "Name of the tag",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfTagResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartList/{id}.json": {
        "get": {
          "tags": [
            "Assets-Smart Lists"
          ],
          "summary": "Get Smart List by Id",
          "description": "Retrieves a Smart List record by its id. Required Permissions: Read-Asset or Read-Write Asset",
          "operationId": "getSmartListByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the smart list to retrieve",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "includeRules",
              "in": "query",
              "description": "Set true to populate smart list rules.  Default false",
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartListResponseWithRules"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartList/byName.json": {
        "get": {
          "tags": [
            "Assets-Smart Lists"
          ],
          "summary": "Get Smart List by Name",
          "description": "Retrieves a Smart List record by its name. Required Permissions: Read-Asset or Read-Write Asset",
          "operationId": "getSmartListByNameUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "Name of smart list to retrieve",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartListResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartList/{id}/delete.json": {
        "post": {
          "tags": [
            "Assets-Smart Lists"
          ],
          "summary": "Delete Smart List",
          "description": "Deletes the designated Smart List. Required Permissions: Read-Write Asset",
          "operationId": "deleteSmartListByIdUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the smart list to delete",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartLists.json": {
        "get": {
          "tags": [
            "Assets-Smart Lists"
          ],
          "summary": "Get Smart Lists",
          "description": "Retrieves a list of user created Smart List records. Required Permissions: Read-Asset or Read-Write Asset",
          "operationId": "getSmartListsUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "folder",
              "in": "query",
              "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
              "required": false,
              "type": "string"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of smart lists to return.  Max 200, default 20.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "earliestUpdatedAt",
              "in": "query",
              "description": "Exclude smart lists prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "required": false,
              "type": "string"
            },
            {
              "name": "latestUpdatedAt",
              "in": "query",
              "description": "Exclude smart lists after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartListResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/smartList/{id}/clone.json": {
        "post": {
          "tags": [
            "Assets-Smart Lists"
          ],
          "summary": "Clone Smart List",
          "description": "Clones the designated Smart List. Required Permissions: Read-Write Asset",
          "operationId": "cloneSmartListUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of smart list to clone",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "cloneSmartListRequest",
              "description": "cloneSmartListRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CloneSmartListRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartListResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/staticList/{id}.json": {
        "get": {
          "tags": [
            "Assets-Static Lists"
          ],
          "summary": "Get Static List by Id",
          "description": "Retrieves a Static List record by its id. Required Permissions: Read-Asset or Read-Write Asset",
          "operationId": "getStaticListByIdUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the static list to retrieve",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfStaticListResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Static Lists"
          ],
          "summary": "Update Static List Metadata",
          "description": "Updates the metadata of a static list asset.  Required Permissions: Read-Write Assets",
          "operationId": "updateStaticListUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of static list to update",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "updateStaticListRequest",
              "description": "updateStaticListRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateStaticListRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfStaticListResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/staticLists.json": {
        "get": {
          "tags": [
            "Assets-Static Lists"
          ],
          "summary": "Get Static Lists",
          "description": "Retrieves a list of Static List records. Required Permissions: Read-Asset or Read-Write Asset",
          "operationId": "getStaticListsUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "folder",
              "in": "query",
              "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
              "required": false,
              "type": "string"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of static lists to return.  Max 200, default 20.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "earliestUpdatedAt",
              "in": "query",
              "description": "Exclude static lists prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "required": false,
              "type": "string"
            },
            {
              "name": "latestUpdatedAt",
              "in": "query",
              "description": "Exclude static lists after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfStaticListResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Assets-Static Lists"
          ],
          "summary": "Create Static List",
          "description": "Creates a new Static List.  Required Permissions: Read-Write Assets",
          "operationId": "createStaticListUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createStaticListRequest",
              "description": "createStaticListRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateStaticListRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfStaticListResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/staticList/byName.json": {
        "get": {
          "tags": [
            "Assets-Static Lists"
          ],
          "summary": "Get Static List by Name",
          "description": "Retrieves a Static List record by its name. Required Permissions: Read-Asset or Read-Write Asset",
          "operationId": "getStaticListByNameUsingGET",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "description": "Name of static list to retrieve",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfStaticListResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/staticList/{id}/delete.json": {
        "post": {
          "tags": [
            "Assets-Static Lists"
          ],
          "summary": "Delete Static List",
          "description": "Deletes the designated Static List. Required Permissions: Read-Write Asset",
          "operationId": "deleteStaticListByIdUsingPOST",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the static list to delete",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfIdResponse"
              }
            }
          }
        }
      },
      "/rest/asset/v1/tagTypes.json": {
        "get": {
          "tags": [
            "Assets-Tags"
          ],
          "summary": "Get Tag Types",
          "description": "Retrieves a list of available tag types.  Required Permissions: Read-Only Assets, Read-Write Assets",
          "operationId": "getTagTypesUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "maxReturn",
              "in": "query",
              "description": "Maximum number of channels to return.  Max 200, default 20",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Integer offset for paging",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfTagResponseGetAll"
              }
            }
          }
        }
      },
      "/bulk/v1/activities/export.json": {
        "get": {
          "tags": [
            "Bulk Export Activities"
          ],
          "summary": "Get Export Activity Jobs",
          "description": "Returns a list of export jobs that were created in the past 7 days.  Required Permissions: Read-Only Activity",
          "operationId": "getExportActivitiesUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "Comma separated list of statuses to filter on.",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "enum": [
                "created",
                "queued",
                "processing",
                "cancelled",
                "completed",
                "failed"
              ]
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return. The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponseWithToken"
              }
            }
          }
        }
      },
      "/bulk/v1/activities/export/create.json": {
        "post": {
          "tags": [
            "Bulk Export Activities"
          ],
          "summary": "Create Export Activity Job",
          "description": "Create export job for search criteria defined via \"filter\" parameter.  Request returns the \"exportId\" which is passed as a parameter in subsequent calls to Bulk Export Activities endpoints.  Use Enqueue Export Activity Job endpoint to queue the export job for processing.  Use Get Export Activity Job Status endpoint to retrieve status of export job.  Required Permissions: Read-Only Activity",
          "operationId": "createExportActivitiesUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "exportActivityRequest",
              "description": "exportActivityRequest<br><br>ColumnHeaderNames: A JSON object containing key-value pairs of field and column header names.<br><br>Example:<br><code>\"columnHeaderNames\":{<br>  \"primaryAttributeValueId\":\"Attribute ID\",<br>  \"primaryAttributeValue\":\"Attribute Value\",<br>  \"attributes\":\"Secondary Attributes\"<br>}</code><br>",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ExportActivityRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/activities/export/{exportId}/cancel.json": {
        "post": {
          "tags": [
            "Bulk Export Activities"
          ],
          "summary": "Cancel Export Activity Job",
          "description": "Cancel export job.  Required Permissions: Read-Only Activity",
          "operationId": "cancelExportActivitiesUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/activities/export/{exportId}/enqueue.json": {
        "post": {
          "tags": [
            "Bulk Export Activities"
          ],
          "summary": "Enqueue Export Activity Job",
          "description": "Enqueue export job. This will place export job in queue, and will start the job when computing resources become available.  The export job must be in \"Created\" state.  Use Get Export Activity Job Status endpoint to retrieve status of export job.  Required Permissions: Read-Only Activity",
          "operationId": "enqueueExportActivitiesUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/activities/export/{exportId}/file.json": {
        "get": {
          "tags": [
            "Bulk Export Activities"
          ],
          "summary": "Get Export Activity File",
          "description": "Returns the file content of an export job.  The export job must be in \"Completed\" state.  Use Get Export Activity Job Status endpoint to retrieve status of export job.  Required Permissions: Read-Only Activity<br><br>The file format is specified by calling the Create Export Activity Job endpoint. The following is an example of the default file format (\"CSV\"). Note that the \"attributes\" field is formatted as JSON.<br><br><code>marketoGUID,leadId,activityDate,activityTypeId,campaignId,primaryAttributeValueId,primaryAttributeValue, attributes</code><br><code>122323,6,2013-09-26T06:56:35+0000,12,11,6,Owyliphys Iledil,[{\"name\":\"Source Type\",\"value\":\"Web page visit\"}]</code>",
          "operationId": "getExportActivitiesFileUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "Range",
              "in": "header",
              "description": "To support partial retrieval of extracted data, the HTTP header \"Range\" of type \"bytes\" may be specified.  See RFC 2616 \"Range Retrieval Requests\" for more information. If the header is not set, the entire contents will be returned.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ObservableOfInputStreamRangeContent"
              }
            }
          }
        }
      },
      "/bulk/v1/activities/export/{exportId}/status.json": {
        "get": {
          "tags": [
            "Bulk Export Activities"
          ],
          "summary": "Get Export Activity Job Status",
          "description": "Returns status of an export job.  Job status is available for 30 days after Completed or Failed status was reached. Required Permissions: Read-Only Activity",
          "operationId": "getExportActivitiesStatusUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/customobjects/{apiName}/import.json": {
        "post": {
          "tags": [
            "Bulk Import Custom Objects"
          ],
          "summary": "Import Custom Objects",
          "description": "Imports a file containing data records into the target instance.  Required Permissions: Read-Write Custom Object",
          "operationId": "importCustomObjectUsingPOST",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object for the import batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "format",
              "in": "query",
              "description": "Import file format.",
              "required": true,
              "type": "string",
              "enum": [
                "csv",
                "tsv",
                "ssv"
              ]
            },
            {
              "name": "file",
              "in": "formData",
              "description": "File containing the data records to import.",
              "required": true,
              "type": "file"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfImportCustomObjectResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/customobjects/{apiName}/import/{batchId}/failures.json": {
        "get": {
          "tags": [
            "Bulk Import Custom Objects"
          ],
          "summary": "Get Import Custom Object Failures",
          "description": "Returns the list of failures for the import batch job.  Required Permissions: Read-Write Custom Object",
          "operationId": "getImportCustomObjectFailuresUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object for the import batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "batchId",
              "in": "path",
              "description": "Id of the import batch job.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ObservableOfInputStreamContent"
              }
            }
          }
        }
      },
      "/bulk/v1/customobjects/{apiName}/import/{batchId}/status.json": {
        "get": {
          "tags": [
            "Bulk Import Custom Objects"
          ],
          "summary": "Get Import Custom Object Status",
          "description": "Returns the status of an import batch job.  Required Permissions: Read-Write Custom Object",
          "operationId": "getImportCustomObjectStatusUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object for the import batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "batchId",
              "in": "path",
              "description": "Id of the import batch job.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfImportCustomObjectResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/customobjects/{apiName}/import/{batchId}/warnings.json": {
        "get": {
          "tags": [
            "Bulk Import Custom Objects"
          ],
          "summary": "Get Import Custom Object Warnings",
          "description": "Returns the list of warnings for the import batch job.  Required Permissions: Read-Write Custom Object",
          "operationId": "getImportCustomObjectWarningsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object for the import batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "batchId",
              "in": "path",
              "description": "Id of the import batch job.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ObservableOfInputStreamContent"
              }
            }
          }
        }
      },
      "/bulk/v1/program/{programId}/members/import.json": {
        "post": {
          "tags": [
            "Bulk Import Program Members"
          ],
          "summary": "Import Program Members",
          "description": "Imports a file containing data records into the target instance.  Required Permissions: Read-Write Lead",
          "operationId": "importProgramMemberUsingPOST",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "programId",
              "in": "path",
              "description": "Id of the program to add members to.",
              "required": true,
              "type": "string"
            },
            {
              "name": "programMemberStatus",
              "in": "query",
              "description": "Program member status for members being added.",
              "required": true,
              "type": "string"
            },
            {
              "name": "format",
              "in": "query",
              "description": "Import file format.",
              "required": true,
              "type": "string",
              "enum": [
                "CSV",
                "TSV",
                "SSV"
              ]
            },
            {
              "name": "file",
              "in": "formData",
              "description": "File containing the data records to import.",
              "required": true,
              "type": "file"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfImportProgramMemberResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/program/members/import/{batchId}/failures.json": {
        "get": {
          "tags": [
            "Bulk Import Program Members"
          ],
          "summary": "Get Import Program Member Failures",
          "description": "Returns the list of failures for the import batch job.  Required Permissions: Read-Write Lead",
          "operationId": "getImportProgramMemberFailuresUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "batchId",
              "in": "path",
              "description": "Id of the import batch job.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ObservableOfInputStreamContent"
              }
            }
          }
        }
      },
      "/bulk/v1/program/members/import/{batchId}/status.json": {
        "get": {
          "tags": [
            "Bulk Import Program Members"
          ],
          "summary": "Get Import Program Member Status",
          "description": "Returns the status of an import batch job.  Required Permissions: Read-Write Lead",
          "operationId": "getImportProgramMemberStatusUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "batchId",
              "in": "path",
              "description": "Id of the import batch job.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfImportProgramMemberResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/program/members/import/{batchId}/warnings.json": {
        "get": {
          "tags": [
            "Bulk Import Program Members"
          ],
          "summary": "Get Import Program Member Warnings",
          "description": "Returns the list of warnings for the import batch job.  Required Permissions: Read-Write Lead",
          "operationId": "getImportProgramMemberWarningsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "batchId",
              "in": "path",
              "description": "Id of the import batch job.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ObservableOfInputStreamContent"
              }
            }
          }
        }
      },
      "/bulk/v1/leads.json": {
        "post": {
          "tags": [
            "Bulk Import Leads"
          ],
          "summary": "Import Leads",
          "description": "Imports a file containing data records into the target instance.  Required Permissions: Read-Write Lead",
          "operationId": "importLeadUsingPOST",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "description": "Import file format.",
              "required": true,
              "type": "string",
              "enum": [
                "csv",
                "tsv",
                "ssv"
              ]
            },
            {
              "name": "lookupField",
              "in": "query",
              "description": "Field to use for deduplication.  Custom fields (string, email, integer), and the following field types are supported: id, cookies, email, twitterId, facebookId, linkedInId, sfdcAccountId, sfdcContactId, sfdcLeadId, sfdcLeadOwnerId, sfdcOpptyId.  Default is email.<br>Note: You can use id for update only operations. ",
              "required": false,
              "type": "string"
            },
            {
              "name": "partitionName",
              "in": "query",
              "description": "Name of the lead partition to import to.",
              "required": false,
              "type": "string"
            },
            {
              "name": "listId",
              "in": "query",
              "description": "Id of the static list to import into.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "file",
              "in": "formData",
              "description": "File containing the data records to import.",
              "required": true,
              "type": "file"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfImportLeadResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/leads/batch/{batchId}.json": {
        "get": {
          "tags": [
            "Bulk Import Leads"
          ],
          "summary": "Get Import Lead Status",
          "description": "Returns the status of an import batch job.  Required Permissions: Read-Write Lead",
          "operationId": "getImportLeadStatusUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "batchId",
              "in": "path",
              "description": "Id of the import batch job.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfImportLeadResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/leads/batch/{batchId}/failures.json": {
        "get": {
          "tags": [
            "Bulk Import Leads"
          ],
          "summary": "Get Import Lead Failures",
          "description": "Returns the list of failures for the import batch job.  Required Permissions: Read-Write Lead",
          "operationId": "getImportLeadFailuresUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "batchId",
              "in": "path",
              "description": "Id of the import batch job.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ObservableOfInputStreamContent"
              }
            }
          }
        }
      },
      "/bulk/v1/leads/batch/{batchId}/warnings.json": {
        "get": {
          "tags": [
            "Bulk Import Leads"
          ],
          "summary": "Get Import Lead Warnings",
          "description": "Returns the list of warnings for the import batch job.  Required Permissions: Read-Write Lead",
          "operationId": "getImportLeadWarningsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "batchId",
              "in": "path",
              "description": "Id of the import batch job.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ObservableOfInputStreamContent"
              }
            }
          }
        }
      },
      "/bulk/v1/leads/export.json": {
        "get": {
          "tags": [
            "Bulk Export Leads"
          ],
          "summary": "Get Export Lead Jobs",
          "description": "Returns a list of export jobs that were created in the past 7 days.  Required Permissions: Read-Only Lead",
          "operationId": "getExportLeadsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "Comma separated list of statuses to filter on.",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "enum": [
                "created",
                "queued",
                "processing",
                "cancelled",
                "completed",
                "failed"
              ]
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return. The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponseWithToken"
              }
            }
          }
        }
      },
      "/bulk/v1/leads/export/create.json": {
        "post": {
          "tags": [
            "Bulk Export Leads"
          ],
          "summary": "Create Export Lead Job",
          "description": "Create export job for search criteria defined via \"filter\" parameter.  Request returns the \"exportId\" which is passed as a parameter in subsequent calls to Bulk Export Leads endpoints.  Use Enqueue Export Lead Job endpoint to queue the export job for processing.  Use Get Export Lead Job Status endpoint to retrieve status of export job.  Required Permissions: Read-Only Lead",
          "operationId": "createExportLeadsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "exportLeadRequest",
              "description": "exportLeadRequest<br><br>ColumnHeaderNames: A JSON object containing key-value pairs of field and column header names.<br><br>Example:<br><code>\"columnHeaderNames\":{<br>  \"firstName\":\"First Name\",<br>  \"lastName\":\"Last Name\",<br>  \"email\":\"Email Address\"<br>}</code><br>",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ExportLeadRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/leads/export/{exportId}/cancel.json": {
        "post": {
          "tags": [
            "Bulk Export Leads"
          ],
          "summary": "Cancel Export Lead Job",
          "description": "Cancel export job.  Required Permissions: Read-Only Lead",
          "operationId": "cancelExportLeadsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/leads/export/{exportId}/enqueue.json": {
        "post": {
          "tags": [
            "Bulk Export Leads"
          ],
          "summary": "Enqueue Export Lead Job",
          "description": "Enqueue export job. This will place export job in queue, and will start the job when computing resources become available.  The export job must be in \"Created\" state.  Use Get Export Lead Job Status endpoint to retrieve status of export job.  Required Permissions: Read-Only Lead",
          "operationId": "enqueueExportLeadsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/leads/export/{exportId}/file.json": {
        "get": {
          "tags": [
            "Bulk Export Leads"
          ],
          "summary": "Get Export Lead File",
          "description": "Returns the file content of an export job.  The export job must be in \"Completed\" state.  Use Get Export Lead Job Status endpoint to retrieve status of export job.  Required Permissions: Read-Only Lead<br><br>The file format is specified by calling the Create Export Lead Job endpoint. The following is an example of the default file format (\"CSV\").<br><br><code>firstName,lastName,email</code><br><code>Marvin,Gaye,marvin.gaye@motown.com</code>",
          "operationId": "getExportLeadsFileUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "Range",
              "in": "header",
              "description": "To support partial retrieval of extracted data, the HTTP header \"Range\" of type \"bytes\" may be specified.  See RFC 2616 \"Range Retrieval Requests\" for more information. If the header is not set, the entire contents will be returned.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ObservableOfInputStreamRangeContent"
              }
            }
          }
        }
      },
      "/bulk/v1/leads/export/{exportId}/status.json": {
        "get": {
          "tags": [
            "Bulk Export Leads"
          ],
          "summary": "Get Export Lead Job Status",
          "description": "Returns status of an export job.  Job status is available for 30 days after Completed or Failed status was reached. Required Permissions: Read-Only Lead",
          "operationId": "getExportLeadsStatusUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/customobjects/{apiName}/export.json": {
        "get": {
          "tags": [
            "Bulk Export Custom Objects"
          ],
          "summary": "Get Export Custom Object Jobs",
          "description": "Returns a list of export jobs that were created in the past 7 days.  Required Permissions: Read-Only Custom Object",
          "operationId": "getExportCustomObjectsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object for the export batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "status",
              "in": "query",
              "description": "Comma separated list of statuses to filter on.",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "enum": [
                "created",
                "queued",
                "processing",
                "cancelled",
                "completed",
                "failed"
              ]
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return. The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponseWithToken"
              }
            }
          }
        }
      },
      "/bulk/v1/customobjects/{apiName}/export/create.json": {
        "post": {
          "tags": [
            "Bulk Export Custom Objects"
          ],
          "summary": "Create Export Custom Object Job",
          "description": "Create export job for search criteria defined via \"filter\" parameter.  Request returns the \"exportId\" which is passed as a parameter in subsequent calls to Bulk Export Custom Object endpoints.  Use Enqueue Export Custom Object Job endpoint to queue the export job for processing.  Use Get Export Custom Object Job Status endpoint to retrieve status of export job.  Required Permissions: Read-Only Custom Object",
          "operationId": "createExportCustomObjectsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object for the export batch job.",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "exportCustomObjectRequest",
              "description": "exportCustomObjectRequest<br><br>ColumnHeaderNames: A JSON object containing key-value pairs of custom object attributes and column header names.<br><br>Example:<br><code>\"columnHeaderNames\":{<br>  \"attrName1\":\"value1\",<br>  \"attrName2\":\"value2\",<br>  \"attrName3\":\"value3\"<br>}</code><br>",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ExportCustomObjectRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/customobjects/{apiName}/export/{exportId}/cancel.json": {
        "post": {
          "tags": [
            "Bulk Export Custom Objects"
          ],
          "summary": "Cancel Export Custom Object Job",
          "description": "Cancel export job.  Required Permissions: Read-Only Custom Object",
          "operationId": "cancelExportCustomObjectsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object for the export batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/customobjects/{apiName}/export/{exportId}/enqueue.json": {
        "post": {
          "tags": [
            "Bulk Export Custom Objects"
          ],
          "summary": "Enqueue Export Custom Object Job",
          "description": "Enqueue export job. This will place export job in queue, and will start the job when computing resources become available.  The export job must be in \"Created\" state.  Use Get Export Custom Object Job Status endpoint to retrieve status of export job.  Required Permissions: Read-Only Custom Object",
          "operationId": "enqueueExportCustomObjectsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object for the export batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/customobjects/{apiName}/export/{exportId}/file.json": {
        "get": {
          "tags": [
            "Bulk Export Custom Objects"
          ],
          "summary": "Get Export Custom Object File",
          "description": "Returns the file content of an export job.  The export job must be in \"Completed\" state.  Use Get Export Custom Object Job Status endpoint to retrieve status of export job.  Required Permissions: Read-Only Custom Object<br><br>The file format is specified by calling the Create Export Custom Object Job endpoint. The following is an example of the default file format (\"CSV\").<br><br><code>leadId,marketoGUID,itemName</code><br><code>11,c93f0494-bbd9-44e8-9c0e-dae9b525073f,Hoka One One Mach 4</code>",
          "operationId": "getExportCustomObjectsFileUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object for the export batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "Range",
              "in": "header",
              "description": "To support partial retrieval of extracted data, the HTTP header \"Range\" of type \"bytes\" may be specified.  See RFC 2616 \"Range Retrieval Requests\" for more information. If the header is not set, the entire contents will be returned.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ObservableOfInputStreamRangeContent"
              }
            }
          }
        }
      },
      "/bulk/v1/customobjects/{apiName}/export/{exportId}/status.json": {
        "get": {
          "tags": [
            "Bulk Export Custom Objects"
          ],
          "summary": "Get Export Custom Object Job Status",
          "description": "Returns status of an export job.  Job status is available for 30 days after Completed or Failed status was reached. Required Permissions: Read-Only Custom Object",
          "operationId": "getExportCustomObjectsStatusUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object for the export batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/program/members/export.json": {
        "get": {
          "tags": [
            "Bulk Export Program Members"
          ],
          "summary": "Get Export Program Member Jobs",
          "description": "Returns a list of export jobs that were created in the past 7 days.  Required Permissions: Read-Only Lead",
          "operationId": "getExportProgramMembersUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "Comma separated list of statuses to filter on.",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "enum": [
                "created",
                "queued",
                "processing",
                "cancelled",
                "completed",
                "failed"
              ]
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return. The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponseWithToken"
              }
            }
          }
        }
      },
      "/bulk/v1/program/members/export/create.json": {
        "post": {
          "tags": [
            "Bulk Export Program Members"
          ],
          "summary": "Create Export Program Member Job",
          "description": "Create export job for search criteria defined via \"filter\" parameter.  Request returns the \"exportId\" which is passed as a parameter in subsequent calls to Bulk Export Program Members endpoints.  Use Enqueue Export Program Member Job endpoint to queue the export job for processing.  Use Get Export Program Member Job Status endpoint to retrieve status of export job.  Required Permissions: Read-Only Lead",
          "operationId": "createExportProgramMembersUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "exportProgramMemberRequest",
              "description": "exportProgramMemberRequest<br><br>ColumnHeaderNames: A JSON object containing key-value pairs of field and column header names.<br><br>Example:<br><code>\"columnHeaderNames\":{<br>  \"firstName\":\"First Name\",<br>  \"lastName\":\"Last Name\",<br>  \"email\":\"Email Address\"<br>}</code><br>",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ExportProgramMemberRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/program/members/export/{exportId}/cancel.json": {
        "post": {
          "tags": [
            "Bulk Export Program Members"
          ],
          "summary": "Cancel Export Program Member Job",
          "description": "Cancel export job.  Required Permissions: Read-Only Lead",
          "operationId": "cancelExportProgramMembersUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/program/members/export/{exportId}/enqueue.json": {
        "post": {
          "tags": [
            "Bulk Export Program Members"
          ],
          "summary": "Enqueue Export Program Member Job",
          "description": "Enqueue export job. This will place export job in queue, and will start the job when computing resources become available.  The export job must be in \"Created\" state.  Use Get Export Program Member Job Status endpoint to retrieve status of export job.  Required Permissions: Read-Only Lead",
          "operationId": "enqueueExportProgramMembersUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/bulk/v1/program/members/export/{exportId}/file.json": {
        "get": {
          "tags": [
            "Bulk Export Program Members"
          ],
          "summary": "Get Export Program Member File",
          "description": "Returns the file content of an export job.  The export job must be in \"Completed\" state.  Use Get Export Program Member Job Status endpoint to retrieve status of export job.  Required Permissions: Read-Only Lead<br><br>The file format is specified by calling the Create Export Program Member Job endpoint. The following is an example of the default file format (\"CSV\").<br><br><code>firstName,lastName,email</code><br><code>Marvin,Gaye,marvin.gaye@motown.com</code>",
          "operationId": "getExportProgramMembersFileUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            },
            {
              "name": "Range",
              "in": "header",
              "description": "To support partial retrieval of extracted data, the HTTP header \"Range\" of type \"bytes\" may be specified.  See RFC 2616 \"Range Retrieval Requests\" for more information. If the header is not set, the entire contents will be returned.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ObservableOfInputStreamRangeContent"
              }
            }
          }
        }
      },
      "/bulk/v1/program/members/export/{exportId}/status.json": {
        "get": {
          "tags": [
            "Bulk Export Program Members"
          ],
          "summary": "Get Export Program Member Job Status",
          "description": "Returns status of an export job.  Job status is available for 30 days after Completed or Failed status was reached. Required Permissions: Read-Only Lead",
          "operationId": "getExportProgramMembersStatusUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "exportId",
              "in": "path",
              "description": "Id of export batch job.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfExportResponse"
              }
            }
          }
        }
      },
      "/rest/v1/activities.json": {
        "get": {
          "tags": [
            "Activities"
          ],
          "summary": "Get Lead Activities",
          "description": "Returns a list of activities from after a datetime given by the nextPageToken parameter.  Also allows for filtering by lead static list membership, or by a list of up to 30 lead ids.  Required Permissions: Read-Only Activity, Read-Write Activity",
          "operationId": "getLeadActivitiesUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime",
              "required": true,
              "type": "string"
            },
            {
              "name": "activityTypeIds",
              "in": "query",
              "description": "Comma-separated list of activity type ids. These can be retrieved with the Get Activity Types API.",
              "required": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "assetIds",
              "in": "query",
              "description": "Id of the primary asset for an activity.  This is based on the primary asset id of a given activity type.  Should only be used when a single activity type is set",
              "required": false,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "listId",
              "in": "query",
              "description": "Id of a static list.  If set, will only return activities of members of this static list.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "leadIds",
              "in": "query",
              "description": "Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries.",
              "required": false,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "Maximum number of records to return.  Maximum and default is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfActivity"
              }
            }
          }
        }
      },
      "/rest/v1/activities/deletedleads.json": {
        "get": {
          "tags": [
            "Activities"
          ],
          "summary": "Get Deleted Leads",
          "description": "Returns a list of leads deleted after a given datetime.  Deletions greater than 14 days old may be pruned.  Required Permissions: Read-Only Activity, Read-Write Activity",
          "operationId": "getDeletedLeadsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime",
              "required": true,
              "type": "string"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "Maximum number of records to return.  Maximum and default is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfActivity"
              }
            }
          }
        }
      },
      "/rest/v1/activities/external.json": {
        "post": {
          "tags": [
            "Activities"
          ],
          "summary": "Add Custom Activities",
          "description": "Allows insertion of custom activities associated to given lead records.  Requires provisioning of custom activity types to utilize.  Required Permissions: Read-Write Activity",
          "operationId": "addCustomActivityUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "customActivityRequest",
              "description": "customActivityRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CustomActivityRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomActivity"
              }
            }
          }
        }
      },
      "/rest/v1/activities/external/type.json": {
        "post": {
          "tags": [
            "Activities"
          ],
          "summary": "Create Custom Activity Type",
          "description": "Creates a new custom activity type draft in the target instance.  Required Permissions: Read-Write Activity Metadata",
          "operationId": "createCustomActivityTypeUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "customActivityTypeRequest",
              "description": "customActivityTypeRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CustomActivityTypeRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomActivityType"
              }
            }
          }
        }
      },
      "/rest/v1/activities/external/type/{apiName}.json": {
        "post": {
          "tags": [
            "Activities"
          ],
          "summary": "Update Custom Activity Type",
          "description": "Updates the target custom activity type.  All changes are applied to the draft version of the type.  Required Permissions: Read-Write Activity Metadata",
          "operationId": "updateCustomActivityTypeUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the activity type",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "customActivityTypeRequest",
              "description": "customActivityTypeRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CustomActivityTypeRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomActivityType"
              }
            }
          }
        }
      },
      "/rest/v1/activities/external/type/{apiName}/approve.json": {
        "post": {
          "tags": [
            "Activities"
          ],
          "summary": "Approve Custom Activity Type",
          "description": "Approves the current draft of the type, and makes it the live version.  This will delete the current live version of the type.  Required Permissions: Read-Write Activity Metadata",
          "operationId": "approveCustomActivityTypeUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the activity type",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomActivityType"
              }
            }
          }
        }
      },
      "/rest/v1/activities/external/type/{apiName}/attributes/create.json": {
        "post": {
          "tags": [
            "Activities"
          ],
          "summary": "Create Custom Activity Type Attributes",
          "description": "Adds activity attributes to the target type.  These are added to the draft version of the type.  Required Permissions: Read-Write Activity Metadata",
          "operationId": "createCustomActivityTypeAttributesUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the activity type",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "customActivityTypeAttributeRequest",
              "description": "customActivityTypeAttributeRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CustomActivityTypeAttributeRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomActivityType"
              }
            }
          }
        }
      },
      "/rest/v1/activities/external/type/{apiName}/attributes/delete.json": {
        "post": {
          "tags": [
            "Activities"
          ],
          "summary": "Delete Custom Activity Type Attributes",
          "description": "Deletes the target attributes from the custom activity type draft.  The apiName of each attribute is the primary key for the update.  Required Permissions: Read-Write Activity Metadata",
          "operationId": "deleteCustomActivityTypeAttributesUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the activity type",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "customActivityTypeAttributeRequest",
              "description": "customActivityTypeAttributeRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CustomActivityTypeAttributeRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomActivityType"
              }
            }
          }
        }
      },
      "/rest/v1/activities/external/type/{apiName}/attributes/update.json": {
        "post": {
          "tags": [
            "Activities"
          ],
          "summary": "Update Custom Activity Type Attributes",
          "description": "Updates the attributes of the custom activity type draft.  The apiName of each attribute is the primary key for the update.  Required Permissions: Read-Write Activity Metadata",
          "operationId": "updateCustomActivityTypeAttributesUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the activity type",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "customActivityTypeAttributeRequest",
              "description": "customActivityTypeAttributeRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CustomActivityTypeAttributeRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomActivityType"
              }
            }
          }
        }
      },
      "/rest/v1/activities/external/type/{apiName}/delete.json": {
        "post": {
          "tags": [
            "Activities"
          ],
          "summary": "Delete Custom Activity Type",
          "description": "Deletes the target custom activity type.  The type must first be removed from use by any assets, such as triggers or filters.  Required Permissions: Read-Write Activity Metadata",
          "operationId": "deleteCustomActivityTypeUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the activity type",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomActivityType"
              }
            }
          }
        }
      },
      "/rest/v1/activities/external/type/{apiName}/describe.json": {
        "get": {
          "tags": [
            "Activities"
          ],
          "summary": "Describe Custom Activity Type",
          "description": "Returns metadata for a specific custom activity type.  Required Permissions: Read-Only Activity Metadata, Read-Write Activity Metadata",
          "operationId": "describeCustomActivityTypeUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the activity type",
              "required": true,
              "type": "string"
            },
            {
              "name": "draft",
              "in": "query",
              "description": "draft",
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomActivityType"
              }
            }
          }
        }
      },
      "/rest/v1/activities/external/type/{apiName}/discardDraft.json": {
        "post": {
          "tags": [
            "Activities"
          ],
          "summary": "Discard Custom Activity Type Draft",
          "description": "Discards the current draft of the custom activity type.  Required Permissions: Read-Write Activity Metadata",
          "operationId": "discardDraftofCustomActivityTypeUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the activity type",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomActivityType"
              }
            }
          }
        }
      },
      "/rest/v1/activities/external/types.json": {
        "get": {
          "tags": [
            "Activities"
          ],
          "summary": "Get Custom Activity Types",
          "description": "Returns metadata regarding custom activities provisioned in the target instance.  Required Permissions: Read-Only Activity Metadata, Read-Write Activity Metadata",
          "operationId": "getCustomActivityTypeUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomActivityType"
              }
            }
          }
        }
      },
      "/rest/v1/activities/leadchanges.json": {
        "get": {
          "tags": [
            "Activities"
          ],
          "summary": "Get Lead Changes",
          "description": "Returns a list of Data Value Changes and New Lead activities after a given datetime. Required Permissions: Read-Only Activity, Read-Write Activity",
          "operationId": "getLeadChangesUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "Token representation of a datetime returned by the Get Paging Token endpoint.  This endpoint will return activities after this datetime",
              "required": true,
              "type": "string"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated list of field names to return changes for.  Field names can be retrieved with the Describe Lead API.",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "listId",
              "in": "query",
              "description": "Id of a static list.  If set, will only return activities of members of this static list.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "leadIds",
              "in": "query",
              "description": "Comma-separated list of lead ids.  If set, will only return activities of the leads with these ids.  Allows up to 30 entries.",
              "required": false,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "Maximum number of records to return.  Maximum and default is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadChange"
              }
            }
          }
        }
      },
      "/rest/v1/activities/pagingtoken.json": {
        "get": {
          "tags": [
            "Activities"
          ],
          "summary": "Get Paging Token",
          "description": "Returns a paging token for use in retrieving activities and data value changes.  Required Permissions: Read-Only Activity, Read-Write Activity",
          "operationId": "getActivitiesPagingTokenUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "sinceDatetime",
              "in": "query",
              "description": "Earliest datetime to retrieve activities from",
              "required": true,
              "type": "string",
              "format": "date-time"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfVoid"
              }
            }
          }
        }
      },
      "/rest/v1/activities/types.json": {
        "get": {
          "tags": [
            "Activities"
          ],
          "summary": "Get Activity Types",
          "description": "Returns a list of available activity types in the target instance, along with associated metadata of each type.  Required Permissions: Read-Only Activity, Read-Write Activity",
          "operationId": "getAllActivityTypesUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfActivityType"
              }
            }
          }
        }
      },
      "/rest/v1/campaigns.json": {
        "get": {
          "tags": [
            "Campaigns"
          ],
          "summary": "Get Campaigns",
          "description": "Returns a list of campaign records.  Required Permissions: Read-Only Campaigns, Read-Write Campaigns<br><br><b>Note: This endpoint has been superceded.</b>  Use <a href=\"/rest-api/endpoint-reference/asset-endpoint-reference/#/Smart_Campaigns/getAllSmartCampaignsGET\">Get Smart Campaigns</a> endpoint instead.",
          "operationId": "getCampaignsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "query",
              "description": "Comma-separated list of campaign ids to return records for",
              "required": false,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "name",
              "in": "query",
              "description": "Comma-separated list of names to filter on",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "programName",
              "in": "query",
              "description": "Comma-separated list of program names to filter on.  If set, will filter to only campaigns which are children of the designated programs.",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "workspaceName",
              "in": "query",
              "description": "Comma-separated list of workspace names to filter on.  If set, will only return campaigns in the given workspaces.",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "Maximum number of records to return.  Maximum and default is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            },
            {
              "name": "isTriggerable",
              "in": "query",
              "description": "Set to true to return active Campaigns which have a Campaign is Requested trigger and source is Web Service API",
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCampaign"
              }
            }
          }
        }
      },
      "/rest/v1/campaigns/{campaignId}.json": {
        "get": {
          "tags": [
            "Campaigns"
          ],
          "summary": "Get Campaign By Id",
          "description": "Returns the record of a campaign by its id.  Required Permissions: Read-Only Campaigns, Read-Write Campaigns<br><br><b>Note: This endpoint has been superceded.</b>  Use <a href=\"/rest-api/endpoint-reference/asset-endpoint-reference/#!/Smart_Campaigns/getSmartCampaignByIdUsingGET\">Get Smart Campaign by Id</a> endpoint instead.",
          "operationId": "getCampaignByIdUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "campaignId",
              "in": "path",
              "description": "campaignId",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCampaign"
              }
            }
          }
        }
      },
      "/rest/v1/campaigns/{campaignId}/schedule.json": {
        "post": {
          "tags": [
            "Campaigns"
          ],
          "summary": "Schedule Campaign",
          "description": "Remotely schedules a batch campaign to run at a given time.  My tokens local to the campaign's parent program can be overridden for the run to customize content.  When using the \"cloneToProgramName\" parameter described below, this endpoint is limited to 20 calls per day. Required Permissions: Execute Campaign",
          "operationId": "scheduleCampaignUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "campaignId",
              "in": "path",
              "description": "Id of the batch campaign to schedule.",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "scheduleCampaignRequest",
              "description": "scheduleCampaignRequest",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ScheduleCampaignRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCampaign"
              }
            }
          }
        }
      },
      "/rest/v1/campaigns/{campaignId}/trigger.json": {
        "post": {
          "tags": [
            "Campaigns"
          ],
          "summary": "Request Campaign",
          "description": "Passes a set of leads to a trigger campaign to run through the campaign's flow.  The designated campaign must have a Campaign is Requested: Web Service API trigger, and must be active.  My tokens local to the campaign's parent program can be overridden for the run to customize content. A maximum of 100 leads are allowed per call. Required Permissions: Execute Campaign",
          "operationId": "triggerCampaignUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "campaignId",
              "in": "path",
              "description": "The id of the campaign to trigger",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "triggerCampaignRequest",
              "description": "triggerCampaignRequest",
              "required": false,
              "schema": {
                "$ref": "#/definitions/TriggerCampaignRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCampaign"
              }
            }
          }
        }
      },
      "/rest/v1/companies.json": {
        "get": {
          "tags": [
            "Companies"
          ],
          "summary": "Get Companies",
          "description": "Retrieves company records from the destination instance based on the submitted filter.  Required Permissions: Read-Only Company, Read-Write Company",
          "operationId": "getCompaniesUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "filterType",
              "in": "query",
              "description": "The company field to filter on.  Searchable fields can be retrieved with the Describe Company call.",
              "required": true,
              "type": "string"
            },
            {
              "name": "filterValues",
              "in": "query",
              "description": "Comma-separated list of values to match against",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated list of fields to include in the response",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return.  The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCompany"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Companies"
          ],
          "summary": "Sync Companies",
          "description": "Allows inserting, updating, or upserting of company records into Marketo. Required Permissions: Read-Write Company",
          "operationId": "syncCompaniesUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "syncCompanyRequest",
              "description": "syncCompanyRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyncCompanyRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCompany"
              }
            }
          }
        }
      },
      "/rest/v1/companies/delete.json": {
        "post": {
          "tags": [
            "Companies"
          ],
          "summary": "Delete Companies",
          "description": "Deletes the included list of company records from the destination instance.  Required Permissions: Read-Write Company",
          "operationId": "deleteCompaniesUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "deleteCompanyRequest",
              "description": "deleteCompanyRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DeleteCompanyRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCompany"
              }
            }
          }
        }
      },
      "/rest/v1/companies/describe.json": {
        "get": {
          "tags": [
            "Companies"
          ],
          "summary": "Describe Companies",
          "description": "Returns metadata about companies and the fields available for interaction via the API.  Required Permissions: Read-Only Company, Read-Write Company",
          "operationId": "describeUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfObjectMetaData"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects.json": {
        "get": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "List Custom Objects",
          "description": "Returns a list of Custom Object types available in the target instance, along with id and deduplication information for each type.  Required Permissions: Read-Only Custom Object, Read-Write Custom Object",
          "operationId": "listCustomObjectsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "names",
              "in": "query",
              "description": "Comma-separated list of names to filter types on",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfObjectMetaData"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/{customObjectName}.json": {
        "get": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Get Custom Objects",
          "description": "Retrieves a list of custom objects records based on filter and set of values.  There are two unique types of requests for this endpoint: one is executed normally using a GET with URL parameters, the other is by passing a JSON object in the body of a POST and specifying _method=GET in the querystring.  The latter is used when dedupeFields attribute has more than one field, which is known as a \"compound key\".  Required Permissions: Read-Only Custom Object, Read-Write Custom Object",
          "operationId": "getCustomObjectsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "customObjectName",
              "in": "path",
              "description": "Name of custom object type to retrieve records for",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "customObjectLookupRequest",
              "description": "Optional JSON request for retrieving custom objects with compound keys.  Example:<br><code>{<br>\"filterType\":\"dedupeFields\",<br>\"fields\":[<br>\"marketoGuid\",<br>\"Bedrooms\",<br>\"yearBuilt\"<br>],<br>\"input\":[<br>{<br>\"mlsNum\":\"1962352\",<br>\"houseOwnerId\":\"42645756\"<br>},<br>{<br>\"mlsNum\":\"3962352\",<br>\"houseOwnerId\":\"62645756\"<br>}<br>]<br>}</code><br>",
              "required": false,
              "schema": {
                "$ref": "#/definitions/LookupCustomObjectRequest"
              }
            },
            {
              "name": "filterType",
              "in": "query",
              "description": "Field to filter on. Searchable fields can be retrieved with Describe Custom Object",
              "required": true,
              "type": "string"
            },
            {
              "name": "filterValues",
              "in": "query",
              "description": "Comma-separated list of field values to match against.",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated list of fields to return for each record.  If unset marketoGuid, dedupeFields, updatedAt, createdAt will be returned",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return.  The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObject"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Sync Custom Objects",
          "description": "Inserts, updates, or upserts custom object records to the target instance.  Required Permissions: Read-Write Custom Object",
          "operationId": "syncCustomObjectsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "customObjectName",
              "in": "path",
              "description": "customObjectName",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "syncCustomObjectRequest",
              "description": "syncCustomObjectRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyncCustomObjectRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObject"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/{customObjectName}/delete.json": {
        "post": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Delete Custom Objects",
          "description": "Deletes a given set of custom object records.  Required Permissions: Read-Write Custom Object",
          "operationId": "deleteCustomObjectsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "customObjectName",
              "in": "path",
              "description": "customObjectName",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "deleteCustomObjectRequest",
              "description": "deleteCustomObjectRequest",
              "required": false,
              "schema": {
                "$ref": "#/definitions/DeleteCustomObjectRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObject"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/{customObjectName}/describe.json": {
        "get": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Describe Custom Objects",
          "description": "Returns metadata regarding a given custom object.  Required Permissions: Read-Only Custom Object, Read-Write Custom Object",
          "operationId": "describeUsingGET_1",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "customObjectName",
              "in": "path",
              "description": "customObjectName",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfObjectMetaData"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/schema.json": {
        "get": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "List Custom Object Types",
          "description": "Returns a list of Custom Object Types available in the target instance, along with id, deduplication, relationship, and field information for each type.  Required Permissions: Read-Only Custom Object Type, Read-Write Custom Object Type",
          "operationId": "listCustomObjectTypesUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "names",
              "in": "query",
              "description": "Comma-separated list of API names of custom object types to filter on",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "state",
              "in": "query",
              "description": "State of custom object type to filter on.  By default, if an approved version exists, it is returned.  Otherwise, the draft version is returned.",
              "required": false,
              "type": "string",
              "enum": [
                "draft",
                "approved",
                "approvedWithDraft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfObjectMetaData"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Sync Custom Object Type",
          "description": "Inserts, updates, or upserts custom object type record to the target instance.  Required Permissions: Read-Write Custom Object Type",
          "operationId": "syncCustomObjectTypeUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "syncCustomObjectTypeRequest",
              "description": "JSON object containing custom object type attributes",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyncCustomObjectTypeRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObjectType"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/schema/{apiName}/approve.json": {
        "post": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Approve Custom Object Type",
          "description": "Approves the current draft of the type, and makes it the live version.  This will delete the current live version of the type.  Required Permissions: Read-Write Custom Object Type",
          "operationId": "approveCustomObjectTypeUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object type to approve",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObjectType"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/schema/{apiName}/discardDraft.json": {
        "post": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Discard Custom Object Type Draft",
          "description": "Discards the current draft of the custom object type.  Required Permissions: Read-Write Custom Object Type",
          "operationId": "discardCustomObjectTypeUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object type draft to discard",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObjectType"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/schema/{apiName}/delete.json": {
        "post": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Delete Custom Object Type",
          "description": "Deletes the target custom object type.  The type must first be removed from use by any assets, such as triggers or filters.  Required Permissions: Read-Write Custom Object Type",
          "operationId": "deleteCustomObjectTypeUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API Name of the custom object type to delete",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObjectType"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/schema/{apiName}/describe.json": {
        "get": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Describe Custom Object Type",
          "description": "Returns metadata regarding a given custom object type (including relationships and fields).  Required Permissions: Read-Only Custom Object Type, Read-Write Custom Object Type",
          "operationId": "describeCustomObjectTypeUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API name of custom object type to describe",
              "required": true,
              "type": "string"
            },
            {
              "name": "state",
              "in": "query",
              "description": "State of custom object type to filter on.  By default, if an approved version exists, it is returned.  Otherwise, the draft version is returned.",
              "required": false,
              "type": "string",
              "enum": [
                "draft",
                "approved",
                "approvedWithDraft"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfObjectMetaData"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/schema/{apiName}/addField.json": {
        "post": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Add Custom Object Type Fields",
          "description": "Adds fields to custom object type.  Required Permissions: Read-Write Custom Object Type",
          "operationId": "addCustomObjectTypeFieldsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API name of custom object type",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "addCustomObjectTypeFieldsRequest",
              "description": "JSON object containing custom object type fields",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddCustomObjectTypeFieldsRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObjectType"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/schema/{apiName}/deleteField.json": {
        "post": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Delete Custom Object Type Fields",
          "description": "Deletes fields from custom object type.  Required Permissions: Read-Write Custom Object Type",
          "operationId": "deleteCustomObjectTypeFieldsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API name of custom object type",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "deleteCustomObjectTypeFieldsRequest",
              "description": "JSON object containing custom object type fields",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DeleteCustomObjectTypeFieldsRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObjectType"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/schema/{apiName}/{fieldApiName}/updateField.json": {
        "post": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Update Custom Object Type Field",
          "description": "Updates a field in custom object type.  Required Permissions: Read-Write Custom Object Type",
          "operationId": "updateCustomObjectTypeFieldUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "API name of custom object type",
              "required": true,
              "type": "string"
            },
            {
              "name": "fieldApiName",
              "in": "path",
              "description": "API name of custom object type field",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "updateCustomObjectTypeFieldRequest",
              "description": "JSON object containing custom object type fields",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCustomObjectTypeFieldRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObjectType"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/schema/fieldDataTypes.json": {
        "get": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Get Custom Object Type Field Data Types",
          "description": "Returns a list of permissible data types that are assigned to custom object fields.  Required Permissions: Read-Only Custom Object Type, Read-Write Custom Object Type",
          "operationId": "getCustomObjectTypeFieldDataTypesUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObjectTypeFieldDataTypes"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/schema/linkableObjects.json": {
        "get": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Get Custom Object Linkable Objects",
          "description": "Returns a list of linkable custom objects and their fields.  Required Permissions: Read-Only Custom Object Type, Read-Write Custom Object Type",
          "operationId": "getCustomObjectTypeLinkableObjectsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfObjectLinkableObject"
              }
            }
          }
        }
      },
      "/rest/v1/customobjects/schema/{apiName}/dependentAssets.json": {
        "get": {
          "tags": [
            "Custom Objects"
          ],
          "summary": "Get Custom Object Dependent Assets",
          "description": "Returns a list of dependent assets for a custom object type, including their in-instance location.  Required Permissions: Read-Only Custom Object Type, Read-Write Custom Object Type",
          "operationId": "getCustomObjectTypeDependentAssetsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "apiName",
              "in": "path",
              "description": "REST API name for custom object",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfObjectDependentAssets"
              }
            }
          }
        }
      },
      "/rest/v1/lead/{leadId}.json": {
        "get": {
          "tags": [
            "Leads"
          ],
          "summary": "Get Lead by Id",
          "description": "Retrieves a single lead record through its Marketo id.  Required Permissions: Read-Only Lead, Read-Write Lead",
          "operationId": "getLeadByIdUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "leadId",
              "in": "path",
              "description": "The Marketo lead id",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Comma separated list of field names. If omitted, the following default fields will be returned: email, updatedAt, createdAt, lastName, firstName, and id.",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLead"
              }
            }
          }
        }
      },
      "/rest/v1/leads.json": {
        "get": {
          "tags": [
            "Leads"
          ],
          "summary": "Get Leads by Filter Type",
          "description": "Returns a list of up to 300 leads based on a list of values in a particular field.  Required Permissions: Read-Only Lead, Read-Write Lead",
          "operationId": "getLeadsByFilterUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "filterType",
              "in": "query",
              "description": "The lead field to filter on.  Any custom field (string, email, or integer types only), and any of the following fields are supported: cookies, email, facebookId, id, leadPartitionId, linkedInId, sfdcAccountId, sfdcContactId, sfdcLeadId, sfdcLeadOwnerId, sfdcOpptyId, twitterId.<br><br>A comprehensive list of fields can be obtained via the <a href=\"http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeUsingGET_6\">Describe Lead2</a> endpoint.",
              "required": true,
              "type": "string"
            },
            {
              "name": "filterValues",
              "in": "query",
              "description": "A comma-separated list of values to filter on in the specified fields.",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "A comma-separated list of lead fields to return for each record",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return.  The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLead"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Leads"
          ],
          "summary": "Sync Leads",
          "description": "Syncs a list of leads to the target instance.  Required Permissions: Read-Write Lead",
          "operationId": "syncLeadUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "syncLeadRequest",
              "description": "syncLeadRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyncLeadRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLead"
              }
            }
          }
        }
      },
      "/rest/v1/leads/delete.json": {
        "post": {
          "tags": [
            "Leads"
          ],
          "summary": "Delete Leads",
          "description": "Delete a list of leads from the destination instance.  Required Permissions: Read-Write Lead",
          "operationId": "deleteLeadsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "deleteLeadRequest",
              "description": "deleteLeadRequest",
              "required": false,
              "schema": {
                "$ref": "#/definitions/DeleteLeadRequest"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Parameter can be specified if the request body is empty. Multiple lead ids can be specified. e.g. id=1,2,3,2342",
              "required": false,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLead"
              }
            }
          }
        }
      },
      "/rest/v1/leads/describe.json": {
        "get": {
          "tags": [
            "Leads"
          ],
          "summary": "Describe Lead",
          "description": "Returns metadata about lead objects in the target instance, including a list of all fields available for interaction via the APIs.  Required Permissions: Read-Only Lead, Read-Write Lead<br><br><b>Note: This endpoint has been superceded.</b>  Use <a href=\"/rest-api/endpoint-reference/lead-database-endpoint-reference/#!/Leads/describeUsingGET_6\">Describe Lead2</a> endpoint instead.",
          "operationId": "describeUsingGET_2",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadAttribute"
              }
            }
          }
        }
      },
      "/rest/v1/leads/describe2.json": {
        "get": {
          "tags": [
            "Leads"
          ],
          "summary": "Describe Lead2",
          "description": "Returns list of searchable fields on lead objects in the target instance.  Required Permissions: Read-Only Lead, Read-Write Lead",
          "operationId": "describeUsingGET_6",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadAttribute2"
              }
            }
          }
        }
      },
      "/rest/v1/leads/schema/fields/{fieldApiName}.json": {
        "get": {
          "tags": [
            "Leads"
          ],
          "summary": "Get Lead Field by Name",
          "description": "Retrieves metadata for single lead field.  Required Permissions: Read-Write Schema Standard Field, Read-Write Schema Custom Field",
          "operationId": "getLeadFieldByNameUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fieldApiName",
              "in": "path",
              "description": "The API name of lead field",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadField"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Leads"
          ],
          "summary": "Update Lead Field",
          "description": "Update metadata for a lead field in the target instance.  See update rules <a href=\"https://developers.marketo.com/rest-api/lead-database/leads/#update_field\">here</a>.  Required Permissions: Read-Write Schema Standard Field, Read-Write Schema Custom Field",
          "operationId": "updateLeadFieldUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fieldApiName",
              "in": "path",
              "description": "The API name of lead field",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "updateLeadFieldRequest",
              "description": "updateLeadFieldRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateLeadFieldRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfUpdateLeadField"
              }
            }
          }
        }
      },
      "/rest/v1/leads/schema/fields.json": {
        "get": {
          "tags": [
            "Leads"
          ],
          "summary": "Get Lead Fields",
          "description": "Retrieves metadata for all lead fields in the target instance.  Required Permissions: Read-Write Schema Standard Field, Read-Write Schema Custom Field",
          "operationId": "getLeadFieldsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return. The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadField"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Leads"
          ],
          "summary": "Create Lead Fields",
          "description": "Create lead fields in the target instance.  Required Permissions: Read-Write Schema Custom Field",
          "operationId": "createLeadFieldUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createLeadFieldRequest",
              "description": "createLeadFieldRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateLeadFieldRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCreateLeadField"
              }
            }
          }
        }
      },
      "/rest/v1/programs/members/schema/fields/{fieldApiName}.json": {
        "get": {
          "tags": [
            "Program Members"
          ],
          "summary": "Get Program Member Field by Name",
          "description": "Retrieves metadata for single program member field.  Required Permissions: Read-Write Schema Standard Field, Read-Write Schema Custom Field",
          "operationId": "getProgramMemberFieldByNameUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fieldApiName",
              "in": "path",
              "description": "The API name of program member field",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadField"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Program Members"
          ],
          "summary": "Update Program Member Field",
          "description": "Update metadata for a program member field in the target instance.  See update rules <a href=\"https://developers.marketo.com/rest-api/lead-database/leads/#update_field\">here</a>.  Required Permissions: Read-Write Schema Standard Field, Read-Write Schema Custom Field",
          "operationId": "updateProgramMemberFieldUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fieldApiName",
              "in": "path",
              "description": "The API name of program member field",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "updateLeadFieldRequest",
              "description": "updateLeadFieldRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateLeadFieldRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfUpdateLeadField"
              }
            }
          }
        }
      },
      "/rest/v1/programs/members/schema/fields.json": {
        "get": {
          "tags": [
            "Program Members"
          ],
          "summary": "Get Program Member Fields",
          "description": "Retrieves metadata for all program member fields in the target instance.  Required Permissions: Read-Write Schema Standard Field, Read-Write Schema Custom Field",
          "operationId": "getProgramMemberFieldsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return. The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadField"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Program Members"
          ],
          "summary": "Create Program Member Fields",
          "description": "Create program member fields in the target instance.  Required Permissions: Read-Write Schema Custom Field",
          "operationId": "createProgramMemberFieldUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "createLeadFieldRequest",
              "description": "createLeadFieldRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateLeadFieldRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCreateLeadField"
              }
            }
          }
        }
      },
      "/rest/v1/companies/schema/fields/{fieldApiName}.json": {
        "get": {
          "tags": [
            "Companies"
          ],
          "summary": "Get Company Field by Name",
          "description": "Retrieves metadata for single company field.  Required Permissions: Read-Write Schema Standard Field, Read-Write Schema Custom Field",
          "operationId": "getCompanyFieldByNameUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fieldApiName",
              "in": "path",
              "description": "The API name of company field",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadField"
              }
            }
          }
        }
      },
      "/rest/v1/companies/schema/fields.json": {
        "get": {
          "tags": [
            "Companies"
          ],
          "summary": "Get Company Fields",
          "description": "Retrieves metadata for all company fields in the target instance.  Required Permissions: Read-Write Schema Standard Field, Read-Write Schema Custom Field",
          "operationId": "getCompanyFieldsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return. The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadField"
              }
            }
          }
        }
      },
      "/rest/v1/opportunities/schema/fields/{fieldApiName}.json": {
        "get": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Get Opportunity Field by Name",
          "description": "Retrieves metadata for single opportunity field.  Required Permissions: Read-Write Schema Standard Field, Read-Write Schema Custom Field",
          "operationId": "getOpportunityFieldByNameUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fieldApiName",
              "in": "path",
              "description": "The API name of opportunity field",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadField"
              }
            }
          }
        }
      },
      "/rest/v1/opportunities/schema/fields.json": {
        "get": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Get Opportunity Fields",
          "description": "Retrieves metadata for all opportunity fields in the target instance.  Required Permissions: Read-Write Schema Standard Field, Read-Write Schema Custom Field",
          "operationId": "getOpportunityFieldsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return. The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadField"
              }
            }
          }
        }
      },
      "/rest/v1/namedaccounts/schema/fields/{fieldApiName}.json": {
        "get": {
          "tags": [
            "Named Accounts"
          ],
          "summary": "Get Named Account Field by Name",
          "description": "Retrieves metadata for single named account field.  Required Permissions: Read-Write Schema Standard Field, Read-Write Schema Custom Field",
          "operationId": "getNamedAccountFieldByNameUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fieldApiName",
              "in": "path",
              "description": "The API name of named account field",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadField"
              }
            }
          }
        }
      },
      "/rest/v1/namedaccounts/schema/fields.json": {
        "get": {
          "tags": [
            "Named Accounts"
          ],
          "summary": "Get Named Account Fields",
          "description": "Retrieves metadata for all named account fields in the target instance.  Required Permissions: Read-Write Schema Standard Field, Read-Write Schema Custom Field",
          "operationId": "getNamedAccountFieldsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return. The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter. See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadField"
              }
            }
          }
        }
      },
      "/rest/v1/program/members/describe.json": {
        "get": {
          "tags": [
            "Leads"
          ],
          "summary": "Describe Program Member",
          "description": "Returns metadata about program member objects in the target instance, including a list of all fields available for interaction via the APIs.  Required Permissions: Read-Only Lead, Read-Write Lead<br><br><b>Note: This endpoint has been superceded.</b>  Use <a href=\"/rest-api/endpoint-reference/lead-database-endpoint-reference/#!/Program_Members/describeProgramMemberUsingGET2\">Describe Program Member</a> endpoint instead.",
          "operationId": "describeProgramMemberUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfProgramMemberAttributes"
              }
            }
          }
        }
      },
      "/rest/v1/programs/{programId}/members/status.json": {
        "post": {
          "tags": [
            "Program Members"
          ],
          "summary": "Sync Program Member Status",
          "description": "Changes the program member status of a list of leads in a target program.  If member is not part of the program, member is added to the program.  Required Permissions: Read-Write Lead",
          "operationId": "syncProgramMemberStatusUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "programId",
              "in": "path",
              "description": "The id of target program.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "syncProgramMemberStatusRequest",
              "description": "syncProgramMemberStatusRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyncProgramMemberStatusRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfProgramMemberStatus"
              }
            }
          }
        }
      },
      "/rest/v1/programs/{programId}/members.json": {
        "get": {
          "tags": [
            "Program Members"
          ],
          "summary": "Get Program Members",
          "description": "Returns a list of up to 300 program members on a list of values in a particular field.  If you specify a filterType that is a custom field, the custom field’s dataType must be either “string” or “integer”.  If you specify a filterType other than “leadId”, a maximum of 100,000 program member records can be processed by the request.  Required Permissions: Read-Only Lead, Read-Write Lead",
          "operationId": "getProgramMembersUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "programId",
              "in": "path",
              "description": "The id of target program.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "filterType",
              "in": "query",
              "description": "The program member field to filter on.  Any custom field (string or integer types only), \"updatedAt\", or any searchable field.  Searchable fields can be obtained via the <a href=\"/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeProgramMemberUsingGET2\">Describe Program Member</a> endpoint.",
              "required": true,
              "type": "string"
            },
            {
              "name": "filterValues",
              "in": "query",
              "description": "A comma-separated list of values to filter on in the specified fields.",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "startAt",
              "in": "query",
              "description": "When using filterType=updatedAt, the start of date range filter (ISO 8601-format)",
              "type": "string"
            },
            {
              "name": "endAt",
              "in": "query",
              "description": "When using filterType=updatedAt, the end of date range filter (ISO 8601-format)",
              "type": "string"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "A comma-separated list of lead fields to return for each record.",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return.  The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfProgramMember"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Program Members"
          ],
          "summary": "Sync Program Member Data",
          "description": "Changes the program member data of a list of leads in a target program. Only existing members of the program may have their data changed with this API. Required Permissions: Read-Write Lead",
          "operationId": "syncProgramMemberDataUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "programId",
              "in": "path",
              "description": "The id of target program.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "syncProgramMemberDataRequest",
              "description": "syncProgramMemberDataRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyncProgramMemberDataRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfProgramMemberData"
              }
            }
          }
        }
      },
      "/rest/v1/programs/{programId}/members/delete.json": {
        "post": {
          "tags": [
            "Program Members"
          ],
          "summary": "Delete Program Members",
          "description": "Delete a list of members from the destination instance.  Required Permissions: Read-Write Lead",
          "operationId": "deleteProgramMemberUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "programId",
              "in": "path",
              "description": "The id of target program.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "deleteProgramMemberRequest",
              "description": "deleteProgramMemberRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DeleteProgramMemberRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfProgramMemberDelete"
              }
            }
          }
        }
      },
      "/rest/v1/programs/members/describe.json": {
        "get": {
          "tags": [
            "Program Members"
          ],
          "summary": "Describe Program Member",
          "description": "Returns metadata about program member objects in the target instance, including a list of all fields available for interaction via the APIs.  Required Permissions: Read-Only Lead, Read-Write Lead",
          "operationId": "describeProgramMemberUsingGET2",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfProgramMemberAttributes2"
              }
            }
          }
        }
      },
      "/rest/v1/leads/partitions.json": {
        "get": {
          "tags": [
            "Leads"
          ],
          "summary": "Get Lead Partitions",
          "description": "Returns a list of available partitions in the target instance.  Required Permissions: Read-Only Lead, Read-Write Lead",
          "operationId": "getLeadPartitionsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadPartition"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Leads"
          ],
          "summary": "Update Lead Partition",
          "description": "Updates the lead partition for a list of leads.  Required Permissions: Read-Write Lead",
          "operationId": "updatePartitionsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "updateLeadPartitionRequest",
              "description": "updateLeadPartitionRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateLeadPartitionRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLead"
              }
            }
          }
        }
      },
      "/rest/v1/leads/programs/{programId}.json": {
        "get": {
          "tags": [
            "Leads"
          ],
          "summary": "Get Leads by Program Id",
          "description": "Retrieves a list of leads which are members of the designated program.  Required Permissions: Read-Only Lead, Read-Write Lead",
          "operationId": "getLeadsByProgramIdUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "programId",
              "in": "path",
              "description": "The id of the program to retrieve from",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "A comma-separated list of fields to be returned for each record",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return.  The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLead"
              }
            }
          }
        }
      },
      "/rest/v1/leads/programs/{programId}/status.json": {
        "post": {
          "tags": [
            "Leads"
          ],
          "summary": "Change Lead Program Status",
          "description": "Changes the program status of a list of leads in a target program.  Only existing members of the program may have their status changed with this API.  Required Permissions: Read-Write Lead<br><br><b>Note: This endpoint has been superceded.</b>  Use <a href=\"/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Program_Members/syncProgramMemberStatusUsingPOST\">Sync Program Member Status</a> endpoint instead.",
          "operationId": "changeLeadProgramStatusUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "programId",
              "in": "path",
              "description": "The id of target program",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "changeLeadProgramStatusRequest",
              "description": "changeLeadProgramStatusRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ChangeLeadProgramStatusRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfChangeLeadProgramStatusOutputData"
              }
            }
          }
        }
      },
      "/rest/v1/leads/push.json": {
        "post": {
          "tags": [
            "Leads"
          ],
          "summary": "Push Lead to Marketo",
          "description": "Upserts a lead and generates a Push Lead to Marketo activity.  Required Permissions: Read-Write Lead",
          "operationId": "pushToMarketoUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "pushLeadToMarketoRequest",
              "description": "pushLeadToMarketoRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PushLeadToMarketoRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfPushLeadToMarketo"
              }
            }
          }
        }
      },
      "/rest/v1/leads/submitForm.json": {
        "post": {
          "tags": [
            "Leads"
          ],
          "summary": "Submit Form",
          "description": "Upserts a lead and generates a \"Fill out Form\" activity which is associated back to program and/or campaign.  Required Permissions: Read-Write Lead",
          "operationId": "SubmitFormUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "submitFormRequest",
              "description": "submitFormRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SubmitFormRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSubmitForm"
              }
            }
          }
        }
      },
      "/rest/v1/leads/{leadId}/associate.json": {
        "post": {
          "tags": [
            "Leads"
          ],
          "summary": "Associate Lead",
          "description": "Associates a known Marketo lead record to a munchkin cookie and its associated web acitvity history.  Required Permissions: Read-Write Lead",
          "operationId": "associateLeadUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "leadId",
              "in": "path",
              "description": "The id of the lead to associate",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "cookie",
              "in": "query",
              "description": "The cookie value to associate",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseWithoutResult"
              }
            }
          }
        }
      },
      "/rest/v1/leads/{leadId}/merge.json": {
        "post": {
          "tags": [
            "Leads"
          ],
          "summary": "Merge Leads",
          "description": "Merges two or more known lead records into a single lead record.  Required Permissions: Read-Write Lead",
          "operationId": "mergeLeadsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "leadId",
              "in": "path",
              "description": "The id of the winning lead record",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "leadId",
              "in": "query",
              "description": "The id of the losing record",
              "required": false,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "leadIds",
              "in": "query",
              "description": "A comma-separated list of ids of losing records",
              "required": false,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "mergeInCRM",
              "in": "query",
              "description": "If set, will attempt to merge the designated records in a natively-synched CRM.  Only valid for instances with are natively synched to SFDC.",
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseWithoutResult"
              }
            }
          }
        }
      },
      "/rest/v1/leads/{leadId}/listMembership.json": {
        "get": {
          "tags": [
            "Leads"
          ],
          "summary": "Get Lists by Lead Id",
          "description": "Query static list membership for one lead.  Required Permissions: Read-Only Asset",
          "operationId": "getListMembershipUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "leadId",
              "in": "path",
              "description": "The Marketo lead id",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "Maximum number of records to return.  Maximum and default is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLists"
              }
            }
          }
        }
      },
      "/rest/v1/leads/{leadId}/programMembership.json": {
        "get": {
          "tags": [
            "Leads"
          ],
          "summary": "Get Programs by Lead Id",
          "description": "Query program membership for one lead.  Required Permissions: Read-Only Asset",
          "operationId": "getProgramMembershipUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "leadId",
              "in": "path",
              "description": "The Marketo lead id",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "Maximum number of records to return.  Maximum and default is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "earliestUpdatedAt",
              "in": "query",
              "description": "Exclude programs prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "required": false,
              "type": "string"
            },
            {
              "name": "latestUpdatedAt",
              "in": "query",
              "description": "Exclude programs after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "required": false,
              "type": "string"
            },
            {
              "name": "filterType",
              "in": "query",
              "description": "Set to \"programId\" to filter a set of programs.",
              "required": false,
              "type": "string"
            },
            {
              "name": "filterValues",
              "in": "query",
              "description": "Comma-separated list of program ids to match against",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfPrograms"
              }
            }
          }
        }
      },
      "/rest/v1/leads/{leadId}/smartCampaignMembership.json": {
        "get": {
          "tags": [
            "Leads"
          ],
          "summary": "Get Smart Campaigns by Lead Id",
          "description": "Query smart campaign membership for one lead.  Required Permissions: Read-Only Asset",
          "operationId": "getSmartCampaignMembershipUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "leadId",
              "in": "path",
              "description": "The Marketo lead id",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "Maximum number of records to return.  Maximum and default is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "earliestUpdatedAt",
              "in": "query",
              "description": "Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "required": false,
              "type": "string"
            },
            {
              "name": "latestUpdatedAt",
              "in": "query",
              "description": "Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSmartCampaigns"
              }
            }
          }
        }
      },
      "/rest/v1/list/{listId}/leads.json": {
        "get": {
          "tags": [
            "Static Lists"
          ],
          "summary": "Get Leads By List Id",
          "description": "Retrieves person records which are members of the given static list.  Required Permissions: Read-Only Lead, Read-Write Lead",
          "operationId": "getLeadsByListIdUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "listId",
              "in": "path",
              "description": "Id of the static list to retrieve records from",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated list of lead fields to return for each record.  If unset will return email, updatedAt, createdAt, lastName, firstName and id",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return.  The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLeadByListId"
              }
            }
          }
        }
      },
      "/rest/v1/lists.json": {
        "get": {
          "tags": [
            "Static Lists"
          ],
          "summary": "Get Lists",
          "description": "Returns a set of static list records based on given filter parameters. Required Permissions: Read-Only Lead, Read-Write Lead",
          "operationId": "getListsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "query",
              "description": "Comma-separated list of static list ids to return",
              "required": false,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "name",
              "in": "query",
              "description": "Comma-separated list of static list names to return",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "programName",
              "in": "query",
              "description": "Comma-separated list of program names.  If set will return all static lists that are children of the given programs",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "workspaceName",
              "in": "query",
              "description": "Comma-separated list of workspace names.  If set will return all static lists that are children of the given workspaces",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return.  The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfStaticList"
              }
            }
          }
        }
      },
      "/rest/v1/lists/{listId}.json": {
        "get": {
          "tags": [
            "Static Lists"
          ],
          "summary": "Get List by Id",
          "description": "Returns a list record by its id.  Required Permissions: Read-Only Lead, Read-Write Lead",
          "operationId": "getListByIdUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "listId",
              "in": "path",
              "description": "Id of the static list to retrieve records from",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfStaticList"
              }
            }
          }
        }
      },
      "/rest/v1/lists/{listId}/leads.json": {
        "get": {
          "tags": [
            "Static Lists"
          ],
          "summary": "Get Leads By List Id",
          "description": "Retrieves person records which are members of the given static list.  Required Permissions: Read-Only Lead, Read-Write Lead",
          "operationId": "getLeadsByListIdUsingGET_1",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "listId",
              "in": "path",
              "description": "Id of the static list to retrieve records from",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated list of lead fields to return for each record.  If unset will return email, updatedAt, createdAt, lastName, firstName and id",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return.  The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfLead"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Static Lists"
          ],
          "summary": "Add to List",
          "description": "Adds a given set of person records to a target static list.  There is a limit of 300 lead ids per request.  Required Permissions: Read-Write Lead",
          "operationId": "addLeadsToListUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "listId",
              "in": "path",
              "description": "Id of target list",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "listOperationRequest",
              "description": "Optional JSON request body for submitting leads",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ListOperationRequest"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Comma-separated list of lead ids to add to the list",
              "required": false,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfListOperationOutputData"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Static Lists"
          ],
          "summary": "Remove from List",
          "description": "Removes a given set of person records from a target static list.  Required Permissions: Read-Write Lead",
          "operationId": "removeLeadsFromListUsingDELETE",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "listId",
              "in": "path",
              "description": "Id of static list to remove leads from",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "listOperationRequest",
              "description": "listOperationRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ListOperationRequest"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "id",
              "required": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfListOperationOutputData"
              }
            }
          }
        }
      },
      "/rest/v1/lists/{listId}/leads/ismember.json": {
        "get": {
          "tags": [
            "Static Lists"
          ],
          "summary": "Member of List",
          "description": "Checks if leads are members of a given static list.  Required Permissions: Read-Write Lead",
          "operationId": "areLeadsMemberOfListUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "listId",
              "in": "path",
              "description": "Id of the static list to check against",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "listOperationRequest",
              "description": "Optional JSON request body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ListOperationRequest"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Comma-separated list of lead ids to check",
              "required": false,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfListOperationOutputData"
              }
            }
          }
        }
      },
      "/rest/v1/namedAccountList/{id}/namedAccounts.json": {
        "get": {
          "tags": [
            "Named Account Lists"
          ],
          "summary": "Get Named Account List Members",
          "description": "Retrieves the named accounts which are members of the given list.  Required Permissions: Read-Only Named Account, Read-Write Named Account",
          "operationId": "getNamedAccountListMembersUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the named account list",
              "required": true,
              "type": "string"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated list of fields to include in the response",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return.  The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfNamedAccount"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Named Account Lists"
          ],
          "summary": "Add Named Account List Members",
          "description": "Adds named account records to a named account list.  Required Permissions: Read-Write Named Account",
          "operationId": "addNamedAccountListMembersUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of target named account list",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "addNamedAccountListMemberRequest",
              "description": "addNamedAccountListMemberRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddNamedAccountListMemberRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfNamedAccount"
              }
            }
          }
        }
      },
      "/rest/v1/namedAccountList/{id}/namedAccounts/remove.json": {
        "post": {
          "tags": [
            "Named Account Lists"
          ],
          "summary": "Remove Named Account List Members",
          "description": "Removes named account members from a named account list.  Required Permissions: Read-Write Named Account",
          "operationId": "removeNamedAccountListMembersUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of target named account list",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "removeNamedAccountListMemberRequest",
              "description": "removeNamedAccountListMemberRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/RemoveNamedAccountListMemberRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfNamedAccount"
              }
            }
          }
        }
      },
      "/rest/v1/namedAccountLists.json": {
        "get": {
          "tags": [
            "Named Account Lists"
          ],
          "summary": "Get Named Account Lists",
          "description": "Retrieves a list of named account list records based on the filter type and values given.  Required Permissions: Read-Only Named Account List, Read-Write Named Account List",
          "operationId": "getNamedAccountListsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "filterType",
              "in": "query",
              "description": "The named account list field to filter on (\"dedupeFields\" or \"idFields\").",
              "required": true,
              "type": "string"
            },
            {
              "name": "filterValues",
              "in": "query",
              "description": "Comma-separated list of values to match against",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return.  The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfNamedAccountList"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Named Account Lists"
          ],
          "summary": "Sync Named Account Lists",
          "description": "Creates and/or updates named account list records.  Required Permissions: Read-Write Named Account List",
          "operationId": "syncNamedAccountListsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "syncNamedAccountListRequest",
              "description": "syncNamedAccountListRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyncNamedAccountListRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfNamedAccountList"
              }
            }
          }
        }
      },
      "/rest/v1/namedAccountLists/delete.json": {
        "post": {
          "tags": [
            "Named Account Lists"
          ],
          "summary": "Delete Named Account Lists",
          "description": "Delete named account lists by dedupe fields, or by id field.  Required Permissions: Read-Write Named Account List",
          "operationId": "deleteNamedAccountListsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "deleteNamedAccountListRequest",
              "description": "deleteNamedAccountListRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DeleteNamedAccountListRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfNamedAccountList"
              }
            }
          }
        }
      },
      "/rest/v1/namedaccounts.json": {
        "get": {
          "tags": [
            "Named Accounts"
          ],
          "summary": "Get NamedAccounts",
          "description": "Retrieves namedaccount records from the destination instance based on the submitted filter.  Required Permissions: Read-Only Named Account, Read-Write Named Account",
          "operationId": "getNamedAccountsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "filterType",
              "in": "query",
              "description": "NamedAccounts field to filter on.  Can be any searchable fields",
              "required": true,
              "type": "string"
            },
            {
              "name": "filterValues",
              "in": "query",
              "description": "A comma-separated list of values to match against",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated list of fields to include in the response",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return.  The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfNamedAccount"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Named Accounts"
          ],
          "summary": "Sync NamedAccounts",
          "description": "Allows inserts, updates, or upserts of namedaccounts to the target instance.  Required Permissions: Read-Write Named Account",
          "operationId": "syncNamedAccountsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "syncAccountRequest",
              "description": "syncAccountRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyncNamedAccountRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfNamedAccount"
              }
            }
          }
        }
      },
      "/rest/v1/namedaccounts/delete.json": {
        "post": {
          "tags": [
            "Named Accounts"
          ],
          "summary": "Delete NamedAccounts",
          "description": "Deletes a list of namedaccount records from the target instance.  Input records should have only one member, based on the value of 'dedupeBy'.  Required Permissions: Read-Write Named Account",
          "operationId": "deleteNamedAccountsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "deleteAccountRequest",
              "description": "deleteAccountRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DeleteNamedAccountRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfNamedAccount"
              }
            }
          }
        }
      },
      "/rest/v1/namedaccounts/describe.json": {
        "get": {
          "tags": [
            "Named Accounts"
          ],
          "summary": "Describe NamedAccounts",
          "description": "Returns metadata about namedaccounts and the fields available for interaction via the API.  Required Permissions: Read-Only Named Account, Read-Write Named Account",
          "operationId": "describeUsingGET_3",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfObjectMetaData"
              }
            }
          }
        }
      },
      "/rest/v1/opportunities.json": {
        "get": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Get Opportunities",
          "description": "Returns a list of opportunities based on a filter and set of values.  Required Permissions: Read-Only Opportunity, Read-Write Named Opportunity",
          "operationId": "getOpportunitiesUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "customObjectLookupRequest",
              "description": "customObjectLookupRequest",
              "required": false,
              "schema": {
                "$ref": "#/definitions/LookupCustomObjectRequest"
              }
            },
            {
              "name": "filterType",
              "in": "query",
              "description": "Opportunities field to filter on",
              "required": true,
              "type": "string"
            },
            {
              "name": "filterValues",
              "in": "query",
              "description": "Comma-separated list of values to match against",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated list of fields to include in the response",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "Maximum number of records to return in the response.  Max and default is 300",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "Paging token returned from a previous response",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObject"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Sync Opportunities",
          "description": "Allows inserting, updating, or upserting of opportunity records into the target instance.  Required Permissions: Read-Write Named Opportunity",
          "operationId": "syncOpportunitiesUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "syncCustomObjectRequest",
              "description": "syncCustomObjectRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyncCustomObjectRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObject"
              }
            }
          }
        }
      },
      "/rest/v1/opportunities/delete.json": {
        "post": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Delete Opportunities",
          "description": "Deletes a list of opportunity records from the target instance.  Input records should only have one member, based on the value of 'dedupeBy'.  Required Permissions: Read-Write Named Opportunity",
          "operationId": "deleteOpportunitiesUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "deleteCustomObjectRequest",
              "description": "deleteCustomObjectRequest",
              "required": false,
              "schema": {
                "$ref": "#/definitions/DeleteCustomObjectRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObject"
              }
            }
          }
        }
      },
      "/rest/v1/opportunities/describe.json": {
        "get": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Describe Opportunity",
          "description": "Returns object and field metadata for Opportunity type records in the target instance.  Required Permissions: Read-Only Opportunity, Read-Write Named Opportunity",
          "operationId": "describeUsingGET_4",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfObjectMetaData"
              }
            }
          }
        }
      },
      "/rest/v1/opportunities/roles.json": {
        "get": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Get Opportunity Roles",
          "description": "Returns a list of opportunity roles based on a filter and set of values.  Required Permissions: Read-Only Opportunity, Read-Write Named Opportunity",
          "operationId": "getOpportunityRolesUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "customObjectLookupRequest",
              "description": "Optional JSON request for retrieving opportunity roles with compound keys",
              "required": false,
              "schema": {
                "$ref": "#/definitions/LookupCustomObjectRequest"
              }
            },
            {
              "name": "filterType",
              "in": "query",
              "description": "The role field to filter on.  Searchable fields can be retrieved with the Describe Opportunity call.",
              "required": true,
              "type": "string"
            },
            {
              "name": "filterValues",
              "in": "query",
              "description": "Comma-separated list of field values to return records for",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated list of fields to include in the response",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "Maximum number of records to return in the response.  Max and default is 300",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "Paging token returned from a previous response",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObject"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Sync Opportunity Roles",
          "description": "Allows inserts, updates and upserts of Opportunity Role records in the target instance.  Required Permissions: Read-Write Named Opportunity",
          "operationId": "syncOpportunityRolesUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "syncCustomObjectRequest",
              "description": "syncCustomObjectRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyncCustomObjectRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObject"
              }
            }
          }
        }
      },
      "/rest/v1/opportunities/roles/delete.json": {
        "post": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Delete Opportunity Roles",
          "description": "Deletes a list of opportunities from the target instance.  Required Permissions: Read-Write Named Opportunity",
          "operationId": "deleteOpportunityRolesUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "deleteCustomObjectRequest",
              "description": "deleteCustomObjectRequest",
              "required": false,
              "schema": {
                "$ref": "#/definitions/DeleteCustomObjectRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfCustomObject"
              }
            }
          }
        }
      },
      "/rest/v1/opportunities/roles/describe.json": {
        "get": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Describe Opportunity Role",
          "description": "Returns object and field metadata for Opportunity Roles in the target instance.  Required Permissions: Read-Only Opportunity, Read-Write Named Opportunity",
          "operationId": "describeOpportunityRoleUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfObjectMetaData"
              }
            }
          }
        }
      },
      "/rest/v1/salespersons.json": {
        "get": {
          "tags": [
            "Sales Persons"
          ],
          "summary": "Get SalesPersons",
          "description": "Retrieves salesperson records from the destination instance based on the submitted filter.  Required Permissions: Read-Only Sales Person, Read-Write Sales Person",
          "operationId": "getSalesPersonUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "filterType",
              "description": "The sales person field to filter on. Searchable fields can be retrieved with the Describe Sales Person call.",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "filterValues",
              "description": "Comma seperated list of search values.",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated list of fields to include in the response",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "batchSize",
              "in": "query",
              "description": "The batch size to return.  The max and default value is 300.",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "nextPageToken",
              "in": "query",
              "description": "A token will be returned by this endpoint if the result set is greater than the batch size and can be passed in a subsequent call through this parameter.  See Paging Tokens for more info.",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSalesPerson"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Sales Persons"
          ],
          "summary": "Sync SalesPersons",
          "description": "Allows inserts, updates, or upserts of salespersons to the target instance.  Required Permissions: Read-Write Sales Person",
          "operationId": "syncSalesPersonsUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "syncSalesPersonRequest",
              "description": "syncSalesPersonRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyncSalesPersonRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSalesPerson"
              }
            }
          }
        }
      },
      "/rest/v1/salespersons/delete.json": {
        "post": {
          "tags": [
            "Sales Persons"
          ],
          "summary": "Delete SalesPersons",
          "description": "Deletes a list of salesperson records from the target instance.  Input records should have only one member, based on the value of 'dedupeBy'.  Required Permissions: Read-Write Sales Person",
          "operationId": "deleteSalesPersonUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "deleteSalesPersonRequest",
              "description": "deleteSalesPersonRequest",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DeleteSalesPersonRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfSalesPerson"
              }
            }
          }
        }
      },
      "/rest/v1/salespersons/describe.json": {
        "get": {
          "tags": [
            "Sales Persons"
          ],
          "summary": "Describe SalesPersons",
          "description": "Returns metadata about salespersons and the fields available for interaction via the API.  Required Permissions: Read-Only Sales Person, Read-Write Sales Person",
          "operationId": "describeUsingGET_5",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfObjectMetaData"
              }
            }
          }
        }
      },
      "/rest/v1/stats/errors.json": {
        "get": {
          "tags": [
            "Usage"
          ],
          "summary": "Get Daily Errors",
          "description": "Retrieves a count of each error type they have encountered in the current day.  Required Permissions: None",
          "operationId": "getDailyErrorsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfErrorsData"
              }
            }
          }
        }
      },
      "/rest/v1/stats/errors/last7days.json": {
        "get": {
          "tags": [
            "Usage"
          ],
          "summary": "Get Weekly Errors",
          "description": "Returns a count of each error type they have encountered in the past 7 days.  Required Permissions: None",
          "operationId": "getLast7DaysErrorsUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfErrorsData"
              }
            }
          }
        }
      },
      "/rest/v1/stats/usage.json": {
        "get": {
          "tags": [
            "Usage"
          ],
          "summary": "Get Daily Usage",
          "description": "Returns the number of calls consumed for the day.  Required Permissions: None",
          "operationId": "getDailyUsageUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfUsageData"
              }
            }
          }
        }
      },
      "/rest/v1/stats/usage/last7days.json": {
        "get": {
          "tags": [
            "Usage"
          ],
          "summary": "Get Weekly Usage",
          "description": "Returns the number of calls consumed in the past 7 days.  Required Permissions: None",
          "operationId": "getLast7DaysUsageUsingGET",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ResponseOfUsageData"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "CreateProgramRequest": {
        "type": "object",
        "required": [
          "folder",
          "name",
          "type",
          "channel"
        ],
        "properties": {
          "channel": {
            "type": "string",
            "description": "Channel of the program"
          },
          "costs": {
            "type": "array",
            "description": "Lists of associated period costs",
            "items": {
              "$ref": "#/definitions/CostRequest"
            }
          },
          "description": {
            "type": "string"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the program"
          },
          "tags": {
            "type": "array",
            "description": "List of associated program tags",
            "items": {
              "$ref": "#/definitions/TagRequest"
            }
          },
          "type": {
            "type": "string",
            "description": "Type of the program"
          }
        }
      },
      "UpdateEmailMetaDataRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the Email"
          },
          "preHeader": {
            "type": "string",
            "description": "Preheader text for the email"
          },
          "operational": {
            "type": "boolean",
            "description": "Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false"
          },
          "published": {
            "type": "boolean",
            "description": "Whether the email has been published to Sales Insight.  Default false"
          },
          "textOnly": {
            "type": "boolean",
            "description": "Setting to include text-only version of email when sent"
          },
          "webView": {
            "type": "boolean",
            "description": "Whether the email has been enabled to allow the 'View as Web Page' when received"
          }
        }
      },
      "CreateLandingPageRedirectRuleRequest": {
        "type": "object",
        "required": [
          "hostname",
          "redirectFrom",
          "redirectTo"
        ],
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The hostname for the landing pages.  Branding domain or alias.  Max 255 characters"
          },
          "redirectFrom": {
            "$ref": "#/definitions/RedirectFrom",
            "description": "JSON representation of redirect from landing page, with members 'type' which may be 'landingPageId' or 'path', and 'value'"
          },
          "redirectTo": {
            "$ref": "#/definitions/RedirectTo",
            "description": "JSON representation of redirect to landing page, with members 'type' which may be 'landingPageId' or 'url', and 'value'"
          }
        }
      },
      "UpdateLandingPageRedirectRuleRequest": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The hostname for the landing pages.  Branding domain or alias.  Max 255 characters"
          },
          "redirectFrom": {
            "$ref": "#/definitions/RedirectFrom",
            "description": "JSON representation of redirect from landing page, with members 'type' which may be 'landingPageId' or 'path', and 'value'"
          },
          "redirectTo": {
            "$ref": "#/definitions/RedirectTo",
            "description": "JSON representation of redirect to landing page, with members 'type' which may be 'landingPageId' or 'url', and 'value'"
          }
        }
      },
      "BrowseAllPrograms": {
        "type": "object",
        "required": [
          "channel",
          "folder",
          "status",
          "type"
        ],
        "properties": {
          "channel": {
            "type": "string",
            "description": "Channel of the program"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset"
          },
          "sfdcId": {
            "type": "string",
            "description": "SFDC id of the program if linked to an SFDC campaign"
          },
          "sfdcName": {
            "type": "string",
            "description": "Name of the linked SFDC campaign if applicable"
          },
          "status": {
            "type": "string",
            "description": "Status of the program.  Only valid for Email and engagement program types.",
            "enum": [
              "locked",
              "unlocked",
              "on",
              "off"
            ]
          },
          "type": {
            "type": "string",
            "description": "Type of the program",
            "enum": [
              "program",
              "event",
              "webinar",
              "nurture"
            ]
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the asset in the Marketo UI"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace"
          }
        }
      },
      "CloneEmailTemplateRequest": {
        "type": "object",
        "required": [
          "folder",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the Email Template"
          }
        }
      },
      "CreateEmailTemplateRequest": {
        "type": "object",
        "required": [
          "name",
          "folder",
          "content"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Email Template.  Must be unique under the parent folder."
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "description": {
            "type": "string",
            "description": "Description of the email template"
          },
          "content": {
            "type": "string",
            "description": "HTML content for template.  Multipart file."
          }
        }
      },
      "CloneFormRequest": {
        "type": "object",
        "required": [
          "name",
          "folder"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the cloned form"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "description": {
            "type": "string",
            "description": "Description of the cloned form"
          }
        }
      },
      "CloneSnippetRequest": {
        "type": "object",
        "required": [
          "name",
          "folder"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the cloned snippet"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "description": {
            "type": "string",
            "description": "Description of the cloned snippet"
          }
        }
      },
      "CloneSmartListRequest": {
        "type": "object",
        "required": [
          "name",
          "folder"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the cloned smart list"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "description": {
            "type": "string",
            "description": "Description of the cloned smart list"
          }
        }
      },
      "UpdateEmailTemplateMetaDataRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the Email Template"
          }
        }
      },
      "CloneLandingPageRequest": {
        "type": "object",
        "required": [
          "folder",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the landing page"
          },
          "template": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the template used"
          }
        }
      },
      "ResponseOfLandingPageResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LandingPageResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfLandingPageRedirectRules": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LandingPageRedirectRule"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfLandingPageDomains": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LandingPageDomain"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateProgramRequest": {
        "type": "object",
        "properties": {
          "costs": {
            "type": "array",
            "description": "Lists of associated period costs that allow you to append, replace, or delete. To append new costs, simply add them to costs array.  To replace costs (destructive update), pass new costs and set costsDestructiveUpdate to true. To delete costs, do not pass costs parameter and set costsDestructiveUpdate to true",
            "items": {
              "$ref": "#/definitions/CostRequest"
            }
          },
          "costsDestructiveUpdate": {
            "type": "boolean",
            "description": "Set true to destroy existing costs and replace them with the specified costs"
          },
          "description": {
            "type": "string",
            "description": "Updated description for the program"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the program.  Applicable to event, email, and webinar type programs"
          },
          "name": {
            "type": "string",
            "description": "Name of the program"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of program.  Applicable to event, email and webinar type programs"
          },
          "tags": {
            "type": "array",
            "description": "List of associated program tags",
            "items": {
              "$ref": "#/definitions/TagRequest"
            }
          }
        }
      },
      "FolderContentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "LandingPageDynamicContentResponse": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "description": "List of variations in the section",
            "items": {
              "$ref": "#/definitions/SegmentContent"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the section was created"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the dnamic content section"
          },
          "segmentation": {
            "type": "integer",
            "format": "int32",
            "description": "Segmentation to which the section is linked"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the section was last updated"
          }
        }
      },
      "FileFolder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ResponseOfSegmentsResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SegmentsResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfProgramResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProgramResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CostRequest": {
        "type": "object",
        "required": [
          "cost",
          "startDate"
        ],
        "properties": {
          "cost": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of the cost"
          },
          "note": {
            "type": "string",
            "description": "Notes on the cost"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date of the period cost"
          }
        }
      },
      "EmailResponse": {
        "type": "object",
        "required": [
          "folder",
          "fromEmail",
          "fromName",
          "operational",
          "publishToMSI",
          "replyEmail",
          "status",
          "subject",
          "template",
          "textOnly",
          "webView",
          "isOpenTrackingDisabled",
          "autoCopyToText",
          "preHeader"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "fromEmail": {
            "description": "From-address of the Email",
            "$ref": "#/definitions/EmailHeaderField"
          },
          "fromName": {
            "description": "From-name of the Email",
            "$ref": "#/definitions/EmailHeaderField"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset"
          },
          "operational": {
            "type": "boolean",
            "description": "Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false"
          },
          "publishToMSI": {
            "type": "boolean",
            "description": "Whether the email is published to Marketo Sales Insight"
          },
          "replyEmail": {
            "description": "Reply-To address of the Email",
            "$ref": "#/definitions/EmailHeaderField"
          },
          "status": {
            "type": "string",
            "description": "Status filter for draft or approved versions"
          },
          "subject": {
            "description": "Subject Line of the Email",
            "$ref": "#/definitions/EmailHeaderField"
          },
          "template": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the parent template"
          },
          "textOnly": {
            "type": "boolean",
            "description": "Setting to include text-only version of email when sent"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the asset in the Marketo UI"
          },
          "version": {
            "type": "integer",
            "format": "int32",
            "description": "The type version of the email",
            "enum": [
              1,
              2
            ]
          },
          "webView": {
            "type": "boolean",
            "description": "Whether 'View as Webpage' function is enabled for the email"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace"
          },
          "autoCopyToText": {
            "type": "boolean",
            "description": "Setting to automatically copy HTML version to Text version"
          },
          "isOpenTrackingDisabled": {
            "type": "boolean",
            "description": "Whether 'Disable Open Tracking' function is enabled for the email"
          },
          "preHeader": {
            "type": "string",
            "description": "The email preheader text (max 1024 characters)"
          },
          "ccFields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailCCFields"
            }
          }
        }
      },
      "EmailCCFields": {
        "type": "object",
        "required": [
          "attributeId",
          "objectName",
          "displayName",
          "apiName"
        ],
        "properties": {
          "attributeId": {
            "type": "string",
            "description": "Attribute identifier"
          },
          "objectName": {
            "type": "string",
            "description": "Object name.  'lead' or 'company'"
          },
          "displayName": {
            "type": "string",
            "description": "Display name"
          },
          "apiName": {
            "type": "string",
            "description": "API name"
          }
        }
      },
      "LpTemplateResponse": {
        "type": "object",
        "required": [
          "enableMunchkin",
          "folder",
          "status",
          "templateType"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "enableMunchkin": {
            "type": "boolean",
            "description": "Whether to enable munchkin on the derived pages.  Defaults to true"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset"
          },
          "status": {
            "type": "string",
            "description": "Status filter for draft or approved versions"
          },
          "templateType": {
            "type": "string",
            "description": "Type of template to create.  Defaults to freeForm",
            "enum": [
              "guided",
              "freeForm"
            ]
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the asset in the Marketo UI"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace.  Max 255 characters"
          }
        }
      },
      "CloneProgramRequest": {
        "type": "object",
        "required": [
          "folder",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the program.  Max 255 characters"
          }
        }
      },
      "CreateFolderRequest": {
        "type": "object",
        "required": [
          "name",
          "parent"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the Folder"
          },
          "parent": {
            "description": "Folder object describing the parent folder",
            "$ref": "#/definitions/Folder"
          }
        }
      },
      "CreateStaticListRequest": {
        "type": "object",
        "required": [
          "name",
          "folder"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the static list"
          },
          "name": {
            "type": "string",
            "description": "Name of the static list"
          },
          "folder": {
            "description": "Folder object describing the parent folder",
            "$ref": "#/definitions/Folder"
          }
        }
      },
      "UpdateStaticListRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the static list"
          },
          "name": {
            "type": "string",
            "description": "Name of the static list"
          }
        }
      },
      "UpdateFormFieldRequest": {
        "type": "object",
        "properties": {
          "blankFields": {
            "type": "integer",
            "format": "int32",
            "description": "Number of blank fields to show when progressive profiling is enabled"
          },
          "defaultValue": {
            "type": "string",
            "description": "Optional default value for the field"
          },
          "fieldType": {
            "type": "string",
            "description": "Type of field"
          },
          "fieldWidth": {
            "type": "integer",
            "format": "int32",
            "description": "Width of the input or select element"
          },
          "formPrefill": {
            "type": "boolean",
            "description": "Whether the field should prefill.  Default true"
          },
          "isSensitive": {
            "type": "boolean",
            "description": "Whether the field is marked as sensitive.  Default false"
          },
          "hintText": {
            "type": "string",
            "description": "Hint text for the field"
          },
          "initiallyChecked": {
            "type": "boolean",
            "description": "Whether the field should be checked upon loading.  Default false"
          },
          "instructions": {
            "type": "string",
            "description": "Instructions for the field"
          },
          "label": {
            "type": "string",
            "description": "Label of the field"
          },
          "labelToRight": {
            "type": "boolean",
            "description": "Whether the field label should be displayed to the right of the input/select element. Default false"
          },
          "labelWidth": {
            "type": "integer",
            "format": "int32",
            "description": "Width of the field label element"
          },
          "maskInput": {
            "type": "string",
            "description": "Optional input mask for the field"
          },
          "maxLength": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum length for text type fields"
          },
          "maxValue": {
            "type": "number",
            "format": "float",
            "description": "Maximum value accepted by the field"
          },
          "minValue": {
            "type": "number",
            "format": "float",
            "description": "Minimum value accepted by the field"
          },
          "multiSelect": {
            "type": "boolean",
            "description": "Whether the field should allow multiple selections. Default false"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the field is required to submit the form.  Default false"
          },
          "validationMessage": {
            "type": "string",
            "description": "Validation message to display on failed validation"
          },
          "values": {
            "type": "string",
            "description": "Array of JSON objects that contain field attributes. Only for select-field types.  Example: values=[{'label':'Select...','value':'','isDefault':true,'selected':true}, {'label':'MR','value':'Mr'}, {'label':'MS','value':'Ms'}, {'label':'MRS','value':'Mrs'}, {'label':'DR','value':'Dr'}, {'label':'PROF','value':'Prof'}]"
          },
          "visibleLines": {
            "type": "integer",
            "format": "int32",
            "description": "Number of lines to display for the field element"
          }
        }
      },
      "SnippetContentResponse": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "Content of the snippet"
          },
          "type": {
            "type": "string",
            "description": "Type of snippet content"
          }
        }
      },
      "GetFilesRequest": {
        "type": "object",
        "properties": {
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "maxReturn": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of channels to return.  Max 200, default 20"
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "description": "Integer offset for paging"
          }
        }
      },
      "ResponseOfEmailDynamicContentResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailDynamicContentResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FormFieldVisibilityRequest": {
        "type": "object",
        "required": [
          "ruleType",
          "rules"
        ],
        "properties": {
          "ruleType": {
            "type": "string",
            "description": "Type of rule to apply",
            "enum": [
              "show",
              "alwaysShow",
              "hide"
            ]
          },
          "rules": {
            "type": "array",
            "description": "JSON Array of rules",
            "items": {
              "$ref": "#/definitions/VisibilityRuleRequest"
            }
          }
        }
      },
      "UpdateFolderRequest": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "isArchive": {
            "type": "boolean",
            "description": "Whether the folder is archived or not.  Toggling this value will change the archival status of the folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the Folder"
          },
          "type": {
            "type": "string",
            "description": "Type of folder.  'Folder' or 'Program'",
            "enum": [
              "Folder",
              "Program"
            ]
          }
        }
      },
      "ResponseOfLpFormFieldResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LpFormFieldResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ThankYouPageResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "thankYouList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FormThankYouPageDTO"
            }
          }
        }
      },
      "CreateLandingPageContentRequest": {
        "type": "object",
        "required": [
          "contentId",
          "type"
        ],
        "properties": {
          "backgroundColor": {
            "type": "string",
            "description": "background-color property of the HTML section"
          },
          "borderColor": {
            "type": "string",
            "description": "border-color property of the HTML section"
          },
          "borderStyle": {
            "type": "string",
            "description": "border-style property of the HTML section"
          },
          "borderWidth": {
            "type": "string",
            "description": "border-width property of the HTML section"
          },
          "contentId": {
            "type": "string",
            "description": "Id of the content section.  Also the HTML id of the section."
          },
          "height": {
            "type": "string",
            "description": "height property of the HTML section"
          },
          "hideDesktop": {
            "type": "boolean",
            "description": "Hide the section when displayed on a desktop browser.  Default false"
          },
          "hideMobile": {
            "type": "boolean",
            "description": "Hide the section when displayed on a mobile browser.  Default false"
          },
          "imageOpenNewWindow": {
            "type": "string"
          },
          "left": {
            "type": "string",
            "description": "left property of the HTML section"
          },
          "linkUrl": {
            "type": "string",
            "description": "URL parameter of a link type section"
          },
          "opacity": {
            "type": "string",
            "description": "opacity property of the HTML section"
          },
          "top": {
            "type": "string",
            "description": "top property of the HTML section"
          },
          "type": {
            "type": "string",
            "description": "Type of content section",
            "enum": [
              "Image",
              "Form",
              "Rectangle",
              "Snippet",
              "RichText",
              "HTML"
            ]
          },
          "value": {
            "type": "string",
            "description": "Type of content section"
          },
          "width": {
            "type": "string",
            "description": "width property of the HTML section"
          },
          "zIndex": {
            "type": "string",
            "description": "z-index property of the HTML section"
          }
        }
      },
      "JsonNode": {
        "type": "object",
        "properties": {
          "array": {
            "type": "boolean"
          },
          "bigDecimal": {
            "type": "boolean"
          },
          "bigInteger": {
            "type": "boolean"
          },
          "binary": {
            "type": "boolean"
          },
          "boolean": {
            "type": "boolean"
          },
          "containerNode": {
            "type": "boolean"
          },
          "double": {
            "type": "boolean"
          },
          "float": {
            "type": "boolean"
          },
          "floatingPointNumber": {
            "type": "boolean"
          },
          "int": {
            "type": "boolean"
          },
          "integralNumber": {
            "type": "boolean"
          },
          "long": {
            "type": "boolean"
          },
          "missingNode": {
            "type": "boolean"
          },
          "nodeType": {
            "type": "string",
            "enum": [
              "ARRAY",
              "BINARY",
              "BOOLEAN",
              "MISSING",
              "NULL",
              "NUMBER",
              "OBJECT",
              "POJO",
              "STRING"
            ]
          },
          "null": {
            "type": "boolean"
          },
          "number": {
            "type": "boolean"
          },
          "object": {
            "type": "boolean"
          },
          "pojo": {
            "type": "boolean"
          },
          "short": {
            "type": "boolean"
          },
          "textual": {
            "type": "boolean"
          },
          "valueNode": {
            "type": "boolean"
          }
        }
      },
      "EmailContentResponse": {
        "type": "object",
        "required": [
          "contentType",
          "htmlId",
          "value"
        ],
        "properties": {
          "contentType": {
            "type": "string",
            "description": "Type of content to set for the section."
          },
          "htmlId": {
            "type": "string",
            "description": "HTML id of the content section"
          },
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "isLocked": {
            "type": "boolean"
          },
          "parentHtmlId": {
            "type": "string"
          },
          "value": {
            "type": "object",
            "description": "Contents of the section"
          }
        }
      },
      "SnippetResponse": {
        "type": "object",
        "required": [
          "folder",
          "status"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'folderName', 'value', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/SnippetFolder"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset"
          },
          "status": {
            "type": "string",
            "description": "Status filter for draft or approved versions"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the asset in the Marketo UI"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace"
          }
        }
      },
      "LpFormResponse": {
        "type": "object",
        "required": [
          "buttonLabel",
          "buttonLocation",
          "folder",
          "fontFamily",
          "fontSize",
          "knownVisitor",
          "labelPosition",
          "language",
          "locale",
          "progressiveProfiling",
          "status",
          "thankYouList",
          "theme",
          "waitingLabel"
        ],
        "properties": {
          "buttonLabel": {
            "type": "string",
            "description": "Label text of the button"
          },
          "buttonLocation": {
            "type": "integer",
            "format": "int32",
            "description": "Location in pixels of the button relative to the left of the form"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "fontFamily": {
            "type": "string",
            "description": "font-family property for the form"
          },
          "fontSize": {
            "type": "string",
            "description": "font-size property of the form"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the asset"
          },
          "knownVisitor": {
            "description": "Known visitor behavior for the form",
            "$ref": "#/definitions/FormKnownVisitorDTO"
          },
          "labelPosition": {
            "type": "string",
            "description": "Default positioning of labels."
          },
          "language": {
            "type": "string",
            "description": "Language of the form"
          },
          "locale": {
            "type": "string",
            "description": "Locale of the form"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset"
          },
          "progressiveProfiling": {
            "type": "boolean",
            "description": "Whether progressive profiling is enabled for the form"
          },
          "status": {
            "type": "string",
            "description": "Status filter for draft or approved versions",
            "enum": [
              "approved",
              "draft"
            ]
          },
          "thankYouList": {
            "type": "array",
            "description": "List of thank you page behaviors for the form",
            "items": {
              "$ref": "#/definitions/FormThankYouPageDTO"
            }
          },
          "theme": {
            "type": "string",
            "description": "CSS theme for the form to use"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the asset in the Marketo UI"
          },
          "waitingLabel": {
            "type": "string",
            "description": "Waiting text of the button"
          }
        }
      },
      "UpdateLandingPageRequest": {
        "type": "object",
        "properties": {
          "customHeadHTML": {
            "type": "string",
            "description": "Any custom HTML to embed in the <head> tag of the page"
          },
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "facebookOgTags": {
            "type": "string",
            "description": "Any OpenGraph meta tags to apply to the page"
          },
          "keywords": {
            "type": "string"
          },
          "metaTagsDescription": {
            "type": "string",
            "description": "Meta description property of the page"
          },
          "mobileEnabled": {
            "type": "boolean",
            "description": "Whether the page has mobile viewing enabled.  Free-form pages only.  Default false"
          },
          "name": {
            "type": "string",
            "description": "Name of the landing page"
          },
          "robots": {
            "type": "string",
            "description": "Robots directives to apply to the pages meta tags"
          },
          "styleOverRide": {
            "type": "string",
            "description": "Additional CSS styles to append to the landing page <head>"
          },
          "title": {
            "type": "string",
            "description": "Title element of the landing page"
          },
          "urlPageName": {
            "type": "string",
            "description": "URL path of the page.  Derived from the name field if unset"
          }
        }
      },
      "UpdateFormMetaDataRequest": {
        "type": "object",
        "properties": {
          "customCss": {
            "type": "string",
            "description": "Custom CSS to apply to the form"
          },
          "description": {
            "type": "string",
            "description": "Description of the form"
          },
          "fontFamily": {
            "type": "string",
            "description": "font-family property for the form"
          },
          "fontSize": {
            "type": "string",
            "description": "font-size property of the form"
          },
          "knownVisitor": {
            "description": "Known visitor behavior for the form",
            "$ref": "#/definitions/FormKnownVisitorDTO"
          },
          "labelPosition": {
            "type": "string",
            "description": "Default positioning of labels."
          },
          "language": {
            "type": "string",
            "description": "Language of the form"
          },
          "locale": {
            "type": "string",
            "description": "Locale of the form"
          },
          "name": {
            "type": "string",
            "description": "Name of the form"
          },
          "progressiveProfiling": {
            "type": "boolean",
            "description": "Whether progressive profiling is enabled for the form"
          },
          "theme": {
            "type": "string",
            "description": "CSS theme for the form to use"
          }
        }
      },
      "ResponseOfLandingPageContentResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LandingPageContentResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateLandingPageContentRequest": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "backgroundColor": {
            "type": "string",
            "description": "background-color property of the HTML section"
          },
          "borderColor": {
            "type": "string",
            "description": "border-color property of the HTML section"
          },
          "borderStyle": {
            "type": "string",
            "description": "border-style property of the HTML section"
          },
          "borderWidth": {
            "type": "string",
            "description": "border-width property of the HTML section"
          },
          "height": {
            "type": "string",
            "description": "height property of the HTML section"
          },
          "hideDesktop": {
            "type": "boolean",
            "description": "Hide the section when displayed on a desktop browser.  Default false"
          },
          "hideMobile": {
            "type": "boolean",
            "description": "Hide the section when displayed on a mobile browser.  Default false"
          },
          "imageOpenNewWindow": {
            "type": "string"
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "Index of the content section.  Determines the order of the section in the landing page"
          },
          "left": {
            "type": "string",
            "description": "left property of the HTML section"
          },
          "linkUrl": {
            "type": "string",
            "description": "URL parameter of a link type section"
          },
          "opacity": {
            "type": "string",
            "description": "opacity property of the HTML section"
          },
          "top": {
            "type": "string",
            "description": "top property of the HTML section"
          },
          "type": {
            "type": "string",
            "description": "Type of content section",
            "enum": [
              "Image",
              "Form",
              "Rectangle",
              "Snippet",
              "RichText",
              "HTML",
              "DynamicContent"
            ]
          },
          "value": {
            "type": "string",
            "description": "Type of content section"
          },
          "width": {
            "type": "string",
            "description": "width property of the HTML section"
          },
          "zIndex": {
            "type": "string",
            "description": "z-index property of the HTML section"
          }
        }
      },
      "VisibilityRuleRequest": {
        "type": "object",
        "required": [
          "operator",
          "subjectField",
          "values"
        ],
        "properties": {
          "altLabel": {
            "type": "string"
          },
          "operator": {
            "type": "string",
            "description": "Operation to apply to target field.  Evaluated against the list of values when applicable.",
            "enum": [
              "is",
              "isNot",
              "isEmpty",
              "isNotEmpty",
              "startsWith",
              "notStartsWith",
              "endsWith",
              "notEndsWith",
              "contains",
              "notContains",
              "greaterThan",
              "lessThan",
              "atLeast",
              "atMost",
              "between",
              "notBetween",
              "notInTimeFrame",
              "inPast",
              "notInPast",
              "after",
              "before",
              "inTimeFrame",
              "onOrAfter",
              "onOrBefore"
            ]
          },
          "pickListValues": {
            "type": "array",
            "description": "Alternative label to display when rules are applied.",
            "items": {
              "$ref": "#/definitions/PickListDTO"
            }
          },
          "subjectField": {
            "type": "string",
            "description": "Target field id to apply the operation defined by operator to"
          },
          "values": {
            "type": "array",
            "description": "Comma-separated list of values to match against.  Valid for operators 'is', 'isNot', 'startsWith', 'notStartsWith', 'endsWith', 'notEndsWith', 'contains', and 'notContains'",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ModelResponse": {
        "type": "object"
      },
      "ResponseOfLpTemplateGetContentResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LpTemplateGetContentResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfLpFormResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LpFormResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfTagResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TagRequest": {
        "type": "object",
        "properties": {
          "tagType": {
            "type": "string",
            "description": "Type of program tag"
          },
          "tagValue": {
            "type": "string",
            "description": "Value of the tag"
          }
        }
      },
      "SegmentContent": {
        "type": "object",
        "required": [
          "content",
          "segmentId",
          "segmentName",
          "type"
        ],
        "properties": {
          "content": {
            "type": "object",
            "description": "Type of content section"
          },
          "followupType": {
            "type": "string"
          },
          "followupValue": {
            "type": "string"
          },
          "segmentId": {
            "type": "integer",
            "format": "int32",
            "description": "Segmentation to which the section is linked"
          },
          "segmentName": {
            "type": "string",
            "description": "Name of the segment to display content section for"
          },
          "type": {
            "type": "string",
            "description": "Type of content section"
          }
        }
      },
      "ResponseOfFieldsMetaDataResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FieldsMetaDataResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "required": [
          "folder"
        ],
        "properties": {
          "folder": {
            "type": "string",
            "example": "{\"id\":1001,\"type\":\"Program\"}",
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'"
          },
          "tokens": {
            "type": "array",
            "description": "List of tokens in the folder",
            "items": {
              "$ref": "#/definitions/TokenDTO"
            }
          }
        }
      },
      "CreateEmailRequest": {
        "type": "object",
        "required": [
          "folder",
          "fromEmail",
          "fromName",
          "name",
          "replyEmail",
          "subject",
          "template"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "fromEmail": {
            "type": "string",
            "description": "From-address of the Email"
          },
          "fromName": {
            "type": "string",
            "description": "From-name of the Email"
          },
          "name": {
            "type": "string",
            "description": "Name of the email"
          },
          "operational": {
            "type": "boolean",
            "description": "Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false"
          },
          "replyEmail": {
            "type": "string",
            "description": "Reply-To address of the Email"
          },
          "subject": {
            "type": "string",
            "description": "Subject Line of the Email"
          },
          "template": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the parent template"
          },
          "textOnly": {
            "type": "string",
            "description": "Setting to include text-only version of email when sent"
          }
        }
      },
      "EmailHeaderField": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Field type"
          },
          "value": {
            "type": "string",
            "description": "Value of field"
          }
        }
      },
      "EmailTemplateResponse": {
        "type": "object",
        "required": [
          "folder",
          "status"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset"
          },
          "status": {
            "type": "string",
            "description": "Status filter for draft or approved versions"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the asset in the Marketo UI"
          },
          "version": {
            "type": "integer",
            "format": "int32",
            "description": "Template version type",
            "enum": [
              1,
              2
            ]
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace"
          }
        }
      },
      "EmailTemplateUsedByResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "status",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset"
          },
          "type": {
            "type": "string",
            "description": "Type of asset"
          },
          "status": {
            "type": "string",
            "description": "Status filter for draft or approved versions",
            "enum": [
              "approved",
              "draft"
            ]
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was most recently updated"
          }
        }
      },
      "FormUsedByResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "status",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset"
          },
          "type": {
            "type": "string",
            "description": "Type of asset"
          },
          "status": {
            "type": "string",
            "description": "Status filter for draft or approved versions",
            "enum": [
              "approved",
              "draft"
            ]
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was most recently updated"
          }
        }
      },
      "ResponseOfThankYouPageResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ThankYouPageResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChannelResponse": {
        "type": "object",
        "required": [
          "applicableProgramType",
          "createdAt",
          "id",
          "name",
          "updatedAt"
        ],
        "properties": {
          "applicableProgramType": {
            "type": "string",
            "description": "Types of programs to which the channel can apply"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the channel was created"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the Channel"
          },
          "name": {
            "type": "string",
            "description": "Name of the Channel"
          },
          "progressionStatuses": {
            "type": "array",
            "description": "List of available statuses for members of programs with the channel",
            "items": {
              "$ref": "#/definitions/ChannelProgression"
            }
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the channel was most recently updated"
          }
        }
      },
      "EmailModuleResponse": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the email module"
          }
        }
      },
      "EmailVariableResponse": {
        "type": "object",
        "required": [
          "name",
          "value",
          "moduleScope"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the email variable"
          },
          "value": {
            "type": "string",
            "description": "Value of the email variable"
          },
          "moduleScope": {
            "type": "boolean",
            "description": "Returns true for local variables else returns false"
          },
          "moduleId": {
            "type": "string",
            "description": "Returns the moduleId associated with the variable, only in case of local variable"
          }
        }
      },
      "SmartCampaignResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "type",
          "isSystem",
          "isActive",
          "isRequestable",
          "recurrence",
          "qualificationRuleType",
          "qualificationRuleInterval",
          "qualificationRuleUnit",
          "maxMembers",
          "isCommunicationLimitEnabled",
          "smartListId",
          "flowId",
          "folder",
          "createdAt",
          "updatedAt",
          "workspace",
          "status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the smart campaign (system managed)"
          },
          "name": {
            "type": "string",
            "description": "Name of the smart campaign"
          },
          "description": {
            "type": "string",
            "description": "Description of the smart campaign"
          },
          "type": {
            "type": "string",
            "description": "Type of the smart campaign. Batch: has at least one filter and no triggers. Trigger: has at least one trigger. Default: has no smart list rules",
            "enum": [
              "batch",
              "default",
              "trigger"
            ]
          },
          "isSystem": {
            "type": "boolean",
            "description": "Whether smart campaign is system managed.  Defaults to false"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether smart campaign is active.  Defaults to false"
          },
          "isRequestable": {
            "type": "boolean",
            "description": "Whether smart campaign is requestable (is active and contains 'Campaign is Requested' trigger with Source of 'Web Service API').  Defaults to false"
          },
          "recurrence": {
            "description": "Recurrence schedule of batch smart campaign",
            "$ref": "#/definitions/Recurrence"
          },
          "qualificationRuleType": {
            "type": "string",
            "description": "Type of qualification rule.  Defaults to 'once'",
            "enum": [
              "once",
              "any",
              "interval"
            ]
          },
          "qualificationRuleInterval": {
            "type": "integer",
            "description": "Interval of qualification rule.  Only set when qualificationRuleType is 'interval'"
          },
          "qualificationRuleUnit": {
            "type": "string",
            "description": "Unit of measure of qualification rule.  Only set when qualificationRuleType is 'interval'",
            "enum": [
              "hour",
              "day",
              "week",
              "month"
            ]
          },
          "maxMembers": {
            "type": "integer",
            "format": "int32",
            "description": "Smart campaign membership limit"
          },
          "isCommunicationLimitEnabled": {
            "type": "boolean",
            "description": "Whether smart campaign communication limit is enabled (i.e. block non-operational emails).  Defaults to false"
          },
          "smartListId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the smart campaign's child smart list"
          },
          "flowId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the smart campaign's child flow"
          },
          "parentProgramId": {
            "type": "integer",
            "format": "int32",
            "description": "Parent program Id.  Present if smart campaign is under program or nested folder"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the smart campaign was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the smart campaign was most recently updated"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the smart campaign workspace"
          },
          "computedUrl": {
            "type": "string",
            "description": "URL to asset in Marketo Engage"
          },
          "status": {
            "type": "string",
            "description": "Status of smart campaign",
            "enum": [
              "Inactive",
              "Single Run",
              "Invalid",
              "Recurring Run",
              "Active",
              "Requested",
              "Never Run"
            ]
          }
        }
      },
      "CreateSnippetRequest": {
        "type": "object",
        "required": [
          "folder",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the snippet"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the snippet"
          }
        }
      },
      "CreateSmartCampaignRequest": {
        "type": "object",
        "required": [
          "folder",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the smart campaign"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the smart campaign"
          }
        }
      },
      "UpdateSmartCampaignRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the smart campaign"
          },
          "name": {
            "type": "string",
            "description": "Name of the smart campaign"
          }
        }
      },
      "CloneSmartCampaignRequest": {
        "type": "object",
        "required": [
          "folder",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the smart campaign"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the smart campaign"
          },
          "isExecutable": {
            "type": "boolean",
            "description": "Whether smart campaign is executable.  Defaults to false"
          }
        }
      },
      "ResponseOfEmailResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfGetEmailFullContentResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GetEmailFullContentResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfGetLandingPageFullContentResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GetLandingPageFullContentResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfEmailCCFieldsResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailCCFields"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfSmartListResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SmartListResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfSmartListResponseWithRules": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SmartListResponseWithRules"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Recurrence": {
        "type": "object",
        "required": [
          "startAt",
          "endAt",
          "intervalType",
          "interval",
          "weekdayOnly",
          "weekdayMask",
          "dayOfMonth",
          "dayOfWeek",
          "weekOfMonth"
        ],
        "properties": {
          "startAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime of the first scheduled campaign to run. Required if setting recurrence. Not required to create a smart campaign that has no recurrence"
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime after which no further runs will be automatically scheduled"
          },
          "intervalType": {
            "type": "string",
            "description": "Recurrence interval. Not required to create a smart campaign that has no recurrence",
            "enum": [
              "Daily",
              "Weekly",
              "Monthly"
            ]
          },
          "interval": {
            "type": "integer",
            "format": "int32",
            "description": "Number of interval units between recurrences"
          },
          "weekdayOnly": {
            "type": "boolean",
            "description": "Only run smart campaign on weekdays. May only be set if intervalType is 'Daily'.  Defaults to false"
          },
          "weekdayMask": {
            "type": "array",
            "description": "String array of empty or one or more of 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'. May only be set if intervalType is 'Weekly'",
            "items": {
              "type": "string"
            }
          },
          "dayOfMonth": {
            "type": "integer",
            "format": "int32",
            "description": "Day of the month to recur. Permissible range 1-31. May only be set if intervalType is 'Monthly' and dayOfWeek and weekOfMonth are unset."
          },
          "dayOfWeek": {
            "type": "string",
            "format": "int32",
            "description": "Day of the week to recur. May only be set if dayOfMonth is not set, and weekOfMonth is set",
            "enum": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ]
          },
          "weekOfMonth": {
            "type": "integer",
            "format": "int32",
            "description": "Week of the month to recur. Permissible range 1-4. May only be set if dayOfMonth is not set, and dayOfWeek is set"
          }
        }
      },
      "SmartListResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "createdAt",
          "updatedAt",
          "url",
          "folder",
          "workspace"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the smart list"
          },
          "name": {
            "type": "string",
            "description": "Name of the smart list"
          },
          "description": {
            "type": "string",
            "description": "Description of the smart list"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the smart list was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the smart list was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the smart list in the Marketo UI"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace"
          }
        }
      },
      "SmartListResponseWithRules": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "createdAt",
          "updatedAt",
          "url",
          "folder",
          "workspace"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the smart list"
          },
          "name": {
            "type": "string",
            "description": "Name of the smart list"
          },
          "description": {
            "type": "string",
            "description": "Description of the smart list"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the smart list was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the smart list was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the smart list in the Marketo UI"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace"
          },
          "rules": {
            "description": "Rules contained in the smart list",
            "$ref": "#/definitions/SmartListRules"
          }
        }
      },
      "ResponseOfStaticListResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/StaticListResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StaticListResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "createdAt",
          "updatedAt",
          "url",
          "folder",
          "workspace"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the static list"
          },
          "name": {
            "type": "string",
            "description": "Name of the static list"
          },
          "description": {
            "type": "string",
            "description": "Description of the static list"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the static list was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the static list was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the static list in the Marketo UI"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace"
          },
          "computedUrl": {
            "type": "string"
          }
        }
      },
      "ResponseOfUpdateEmailFullContentResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UpdateEmailFullContentResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfobject": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddFormFieldRequest": {
        "type": "object",
        "required": [
          "fieldId"
        ],
        "properties": {
          "blankFields": {
            "type": "integer",
            "format": "int32",
            "description": "Number of blank fields to show when progressive profiling is enabled"
          },
          "defaultValue": {
            "type": "string",
            "description": "Optional default value for the field"
          },
          "fieldId": {
            "type": "string",
            "description": "Id of the field"
          },
          "fieldWidth": {
            "type": "integer",
            "format": "int32",
            "description": "Width of the input or select element"
          },
          "formPrefill": {
            "type": "boolean",
            "description": "Whether the field should prefill.  Default true"
          },
          "isSensitive": {
            "type": "boolean",
            "description": "Whether the field is marked as sensitive.  Default false"
          },
          "hintText": {
            "type": "string",
            "description": "Hint text for the field"
          },
          "initiallyChecked": {
            "type": "boolean",
            "description": "Whether the field should be checked upon loading.  Default false"
          },
          "instructions": {
            "type": "string",
            "description": "Instructions for the field"
          },
          "label": {
            "type": "string",
            "description": "Label of the field"
          },
          "labelToRight": {
            "type": "boolean",
            "description": "Whether the field label should be displayed to the right of the input/select element. Default false"
          },
          "labelWidth": {
            "type": "integer",
            "format": "int32",
            "description": "Width of the field label element"
          },
          "maskInput": {
            "type": "string",
            "description": "Optional input mask for the field"
          },
          "maxLength": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum length for text type fields"
          },
          "maxValue": {
            "type": "number",
            "format": "float",
            "description": "Maximum value accepted by the field"
          },
          "minValue": {
            "type": "number",
            "format": "float",
            "description": "Minimum value accepted by the field"
          },
          "multiSelect": {
            "type": "boolean",
            "description": "Whether the field should allow multiple selections. Default false"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the field is required to submit the form.  Default false"
          },
          "validationMessage": {
            "type": "string",
            "description": "Validation message to display on failed validation"
          },
          "values": {
            "type": "string",
            "description": "Comma-separated list of accepted values for the field.  Only for select-field types"
          },
          "visibleLines": {
            "type": "integer",
            "format": "int32",
            "description": "Number of lines to display for the field element"
          }
        }
      },
      "ResponseOfEmailTemplateContentResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailTemplateContentResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateLandingPageDynamicContentRequest": {
        "type": "object",
        "properties": {
          "backgroundColor": {
            "type": "string",
            "description": "background-color property of the HTML section"
          },
          "borderColor": {
            "type": "string",
            "description": "border-color property of the HTML section"
          },
          "borderStyle": {
            "type": "string",
            "description": "border-style property of the HTML section"
          },
          "borderWidth": {
            "type": "string",
            "description": "border-width property of the HTML section"
          },
          "height": {
            "type": "string",
            "description": "height property of the HTML section"
          },
          "hideDesktop": {
            "type": "boolean",
            "description": "Hide the section when displayed on a desktop browser.  Default false"
          },
          "hideMobile": {
            "type": "boolean",
            "description": "Hide the section when displayed on a mobile browser.  Default false"
          },
          "imageOpenNewWindow": {
            "type": "string"
          },
          "left": {
            "type": "string",
            "description": "left property of the HTML section"
          },
          "linkUrl": {
            "type": "string",
            "description": "URL parameter of a link type section"
          },
          "opacity": {
            "type": "string",
            "description": "opacity property of the HTML section"
          },
          "segment": {
            "type": "string",
            "description": "Name of the segment to display content section for"
          },
          "top": {
            "type": "string",
            "description": "top property of the HTML section"
          },
          "type": {
            "type": "string",
            "description": "Type of content section"
          },
          "value": {
            "type": "string",
            "description": "Type of content section"
          },
          "width": {
            "type": "string",
            "description": "width property of the HTML section"
          },
          "zIndex": {
            "type": "string",
            "description": "z-index property of the HTML section"
          }
        }
      },
      "ResponseOfSnippetContentResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SnippetContentResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateEmailDynamicContentRequest": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "altText": {
            "type": "string",
            "description": "Sets the value of the alt parameter for the resulting img element"
          },
          "externalUrl": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32",
            "description": "Overrides naitve height of the image.  The resulting file will be resized to the given height"
          },
          "image": {
            "type": "string",
            "description": "Multipart file that allows you to add an image from your computer"
          },
          "linkUrl": {
            "type": "string"
          },
          "overWrite": {
            "type": "boolean",
            "description": "Allows overwriting of the existing image content section"
          },
          "style": {
            "type": "string",
            "description": "Sets the value of the style parameter for the content section"
          },
          "type": {
            "type": "string",
            "description": "Type of content to set for the section.",
            "enum": [
              "Text",
              "DynamicContent",
              "Snippet"
            ]
          },
          "value": {
            "type": "string",
            "description": "Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed"
          },
          "videoUrl": {
            "type": "string",
            "description": "Sets the Url of the video element.  Videos must be either from YouTube or Vimeo"
          },
          "width": {
            "type": "integer",
            "format": "int32",
            "description": "Overrides native width of the image.  The resulting file will be resized to the given width"
          }
        }
      },
      "AddFormFieldVisibilityRequest": {
        "type": "object",
        "properties": {
          "visibilityRule": {
            "$ref": "#/definitions/FormFieldVisibilityRequest"
          }
        }
      },
      "CreateTokenRequest": {
        "type": "object",
        "required": [
          "folderType",
          "name",
          "type",
          "value"
        ],
        "properties": {
          "folderType": {
            "type": "string",
            "description": "Type of folder.  'Folder' or 'Program'",
            "enum": [
              "Program",
              "Folder"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the token. Max length is 50 characters)"
          },
          "type": {
            "type": "string",
            "description": "Type of the token",
            "enum": [
              "date",
              "number",
              "rich text",
              "score",
              "sfdc campaign",
              "text"
            ]
          },
          "value": {
            "type": "string",
            "description": "Value of the token"
          }
        }
      },
      "ResponseOfLpTemplateResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LpTemplateResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LpTemplateGetContentResponse": {
        "type": "object",
        "required": [
          "content",
          "enableMunchkin",
          "id",
          "status",
          "templateType"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "HTML content of the landing page template"
          },
          "enableMunchkin": {
            "type": "boolean",
            "description": "Whether to enable munchkin on the derived pages.  Defaults to true"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the template"
          },
          "status": {
            "type": "string",
            "description": "Status filter for draft or approved versions",
            "enum": [
              "approved",
              "draft"
            ]
          },
          "templateType": {
            "type": "string",
            "description": "Type of template to create.  Defaults to freeForm",
            "enum": [
              "guided",
              "freeForm"
            ]
          }
        }
      },
      "FormVisibilityRuleDTO": {
        "type": "object",
        "properties": {
          "altLabel": {
            "type": "string"
          },
          "operator": {
            "type": "string"
          },
          "picklistFilterValues": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PickListDTO"
            }
          },
          "subjectField": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfLandingPageVariableResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LandingPageVariableResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateLandingPageRequest": {
        "type": "object",
        "required": [
          "folder",
          "name",
          "template"
        ],
        "properties": {
          "customHeadHTML": {
            "type": "string",
            "description": "Any custom HTML to embed in the <head> tag of the page"
          },
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "facebookOgTags": {
            "type": "string",
            "description": "Any OpenGraph meta tags to apply to the page"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "keywords": {
            "type": "string"
          },
          "mobileEnabled": {
            "type": "boolean",
            "description": "Whether the page has mobile viewing enabled.  Free-form pages only.  Default false"
          },
          "name": {
            "type": "string",
            "description": "Name of the landing page"
          },
          "prefillForm": {
            "type": "boolean",
            "description": "Boolean to toggle whether forms embedded in the page will prefill.  Default false"
          },
          "robots": {
            "type": "string",
            "description": "Robots directives to apply to the pages meta tags"
          },
          "template": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the template used"
          },
          "title": {
            "type": "string",
            "description": "Title element of the landing page"
          },
          "urlPageName": {
            "type": "string",
            "description": "URL path of the page.  Derived from the name field if unset"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace"
          }
        }
      },
      "PickListDTO": {
        "type": "object",
        "properties": {
          "isDefault": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "selected": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "SegmentsResponse": {
        "type": "object",
        "required": [
          "segmentationId"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset"
          },
          "segmentationId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the Segmentation"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the asset in the Marketo UI"
          }
        }
      },
      "ResponseOfEmailTemplateResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailTemplateResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfEmailTemplateUsedByResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailTemplateUsedByResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfFormUsedByResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FormUsedByResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateLpTemplateRequest": {
        "type": "object",
        "required": [
          "folder",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the landing page template"
          },
          "enableMunchkin": {
            "type": "boolean",
            "description": "Whether to enable munchkin on the derived pages.  Defaults to true"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the landing page template"
          },
          "templateType": {
            "type": "string",
            "description": "Type of template to create.  Defaults to freeForm",
            "enum": [
              "guided",
              "freeForm"
            ]
          }
        }
      },
      "UpdateThankYouPageRequest": {
        "type": "object",
        "properties": {
          "thankyou": {
            "type": "array",
            "description": "JSON array of followup rules",
            "items": {
              "$ref": "#/definitions/ThankYouPageRequest"
            }
          }
        }
      },
      "ProgramResponse": {
        "type": "object",
        "required": [
          "channel",
          "costs",
          "folder",
          "status",
          "tags",
          "type",
          "headStart"
        ],
        "properties": {
          "channel": {
            "type": "string",
            "description": "Channel of the program"
          },
          "costs": {
            "type": "array",
            "description": "Lists of associated period costs",
            "items": {
              "$ref": "#/definitions/Costs"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "End date of the program.  Applicable to event, email, and webinar type programs"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset"
          },
          "sfdcId": {
            "type": "string",
            "description": "SFDC id of the program if linked to an SFDC campaign"
          },
          "sfdcName": {
            "type": "string",
            "description": "Name of the linked SFDC campaign if applicable"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date of program.  Applicable to event, email and webinar type programs"
          },
          "status": {
            "type": "string",
            "description": "Status of the program.  Only valid for Email and engagement program types.",
            "enum": [
              "locked",
              "unlocked",
              "on",
              "off"
            ]
          },
          "tags": {
            "type": "array",
            "description": "List of associated program tags",
            "items": {
              "$ref": "#/definitions/Tags"
            }
          },
          "type": {
            "type": "string",
            "description": "Type of the program",
            "enum": [
              "default",
              "event",
              "webinar",
              "nurture"
            ]
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the asset in the Marketo UI"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace"
          },
          "headStart": {
            "type": "boolean",
            "description": "Whether 'Head Start' function is enabled for the program"
          }
        }
      },
      "FileResponse": {
        "type": "object",
        "required": [
          "createdAt",
          "folder",
          "id",
          "mimeType",
          "name",
          "size",
          "updatedAt",
          "url"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the file was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the file"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/FileFolder"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the file"
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type of the file"
          },
          "name": {
            "type": "string",
            "description": "Name of the file"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "Size of the file in bytes"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the file was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Publically accessible URL of the file"
          }
        }
      },
      "TagResponseGetAll": {
        "type": "object",
        "required": [
          "applicableProgramTypes",
          "required",
          "tagType"
        ],
        "properties": {
          "applicableProgramTypes": {
            "type": "string",
            "description": "Types of programs to which the tag can apply"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the tag is required for its applicable program types"
          },
          "tagType": {
            "type": "string",
            "description": "Name of the tag"
          }
        }
      },
      "ChannelProgression": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the program status"
          },
          "hidden": {
            "type": "boolean",
            "description": "Whether the status has been hidden"
          },
          "name": {
            "type": "string",
            "description": "Name of the status"
          },
          "type": {
            "type": "string",
            "description": "Type of the status"
          },
          "step": {
            "type": "integer",
            "format": "int32",
            "description": "Step number of the status"
          },
          "success": {
            "type": "boolean",
            "description": "Whether this status is a success step for program members"
          }
        }
      },
      "LandingPageContentResponse": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "content": {
            "type": "object",
            "description": "Content of the section.  Expected values vary based on type.  Image: An image URL.  RichText: HTML Content.  HTML: HTML Content.  Form: A form id.  Rectangle: Empty. Snippet: A snippet id."
          },
          "followupType": {
            "type": "string",
            "description": "Follow-up behavior of a form.  Only available for form-type content sections.  Defaults to form defined behavior.",
            "enum": [
              "url",
              "lp",
              "formDefined"
            ]
          },
          "followupValue": {
            "type": "string",
            "description": "Where to follow-up on form submission.  When followupType is lp, accepts the integer id of a landing page.  For url, it accepts a url string."
          },
          "formattingOptions": {
            "$ref": "#/definitions/JsonNode"
          },
          "id": {
            "type": "object",
            "description": "Id of the content section, may be a string or an int"
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "Index of the content section.  Index orients the elements from lowest to highest"
          },
          "type": {
            "type": "string",
            "description": "Type of content section",
            "enum": [
              "Image",
              "SocialButton",
              "Form",
              "DynamicContent",
              "Rectangle",
              "Snippet",
              "RichText",
              "HTML",
              "Video",
              "Poll",
              "ReferralOffer",
              "Sweepstakes"
            ]
          }
        }
      },
      "UpdateEmailComponentContentRequest": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "altText": {
            "type": "string",
            "description": "Sets the value of the alt parameter for the resulting img element"
          },
          "externalUrl": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32",
            "description": "Overrides naitve height of the image.  The resulting file will be resized to the given height"
          },
          "image": {
            "type": "string",
            "description": "Multipart file that allows you to load an image from your computer"
          },
          "linkUrl": {
            "type": "string"
          },
          "overWrite": {
            "type": "boolean",
            "description": "Allows overwriting of the existing image content section"
          },
          "style": {
            "type": "string",
            "description": "Sets the value of the style parameter for the content section"
          },
          "textValue": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Type of content to set for the section.",
            "enum": [
              "Text",
              "DynamicContent",
              "Snippet"
            ]
          },
          "value": {
            "type": "string",
            "description": "Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed"
          },
          "videoUrl": {
            "type": "string",
            "description": "Sets the Url of the video element.  Videos must be either from YouTube or Vimeo"
          },
          "width": {
            "type": "integer",
            "format": "int32",
            "description": "Overrides native width of the image.  The resulting file will be resized to the given width"
          }
        }
      },
      "LandingPageResponse": {
        "type": "object",
        "required": [
          "customHeadHTML",
          "facebookOgTags",
          "robots",
          "title"
        ],
        "properties": {
          "URL": {
            "type": "string",
            "description": "Url of the asset in the Marketo UI"
          },
          "computedUrl": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was created"
          },
          "customHeadHTML": {
            "type": "string",
            "description": "Any custom HTML to embed in the <head> tag of the page"
          },
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "facebookOgTags": {
            "type": "string",
            "description": "Any OpenGraph meta tags to apply to the page"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "formPrefill": {
            "type": "boolean",
            "description": "Boolean to toggle whether forms embedded in the page will prefill.  Default false"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the asset"
          },
          "keywords": {
            "type": "string"
          },
          "mobileEnabled": {
            "type": "boolean",
            "description": "Whether the page has mobile viewing enabled.  Free-form pages only.  Default false"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset"
          },
          "robots": {
            "type": "string",
            "description": "Robots directives to apply to the pages meta tags"
          },
          "status": {
            "type": "string",
            "description": "Status filter for draft or approved versions"
          },
          "template": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the template used"
          },
          "title": {
            "type": "string",
            "description": "Title element of the landing page"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was most recently updated"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace"
          }
        }
      },
      "LandingPageRedirectRule": {
        "type": "object",
        "required": [
          "id",
          "redirectFromUrl",
          "redirectToUrl",
          "hostname",
          "redirectFrom",
          "redirectTo",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Internal id for landing page redirect rule"
          },
          "redirectFromUrl": {
            "type": "string",
            "description": "Redirect 'from' URL of the Landing Page.  Combination of the hostname and redirectFrom landing page or path"
          },
          "redirectToUrl": {
            "type": "string",
            "description": "Redirect 'to' URL of the Landing Page.  Could be a Marketo landing page or non-Marketo URL."
          },
          "hostname": {
            "type": "string",
            "description": "The hostname for the landing pages.  Branding domain or alias.  Max 255 characters."
          },
          "redirectFrom": {
            "description": "JSON representation of redirect from landing page, with members 'type' which may be 'landingPageId' or 'path', and 'value'",
            "$ref": "#/definitions/RedirectFrom"
          },
          "redirectTo": {
            "description": "JSON representation of redirect to landing page, with members 'type' which may be 'landingPageId' or 'url', and 'value'",
            "$ref": "#/definitions/RedirectTo"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the landing page redirect rule was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the landing page redirect rule was most recently updated"
          }
        }
      },
      "LandingPageDomain": {
        "type": "object",
        "required": [
          "hostname",
          "type"
        ],
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The hostname for the landing pages"
          },
          "type": {
            "type": "string",
            "description": "Specifies type of hostname",
            "enum": [
              "domain",
              "domain-alias"
            ]
          }
        }
      },
      "ResponseOfFileResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FileResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FolderResponse": {
        "type": "object",
        "required": [
          "createdAt",
          "folderId",
          "folderType",
          "id",
          "isArchive",
          "name",
          "parent",
          "path",
          "updatedAt",
          "url"
        ],
        "properties": {
          "accessZoneId": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the folder was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the folder"
          },
          "folderId": {
            "description": "Id of the folder",
            "$ref": "#/definitions/Folder"
          },
          "folderType": {
            "type": "string",
            "description": "Type of folder",
            "enum": [
              "Email",
              "Email Batch Program",
              "Email Template",
              "Image",
              "Landing Page",
              "Landing Page Form",
              "Landing Page Template",
              "Marketing Event",
              "Marketing Folder",
              "Marketing Program",
              "Nurture Program",
              "Report",
              "Revenue Cycle Model",
              "Zone"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the folder"
          },
          "isArchive": {
            "type": "boolean",
            "description": "Archival status of the folder"
          },
          "isSystem": {
            "type": "boolean",
            "description": "Whether the folder is system-managed"
          },
          "name": {
            "type": "string",
            "description": "Name of the folder.  Not applicable for Programs"
          },
          "parent": {
            "description": "Parent folder reference",
            "$ref": "#/definitions/Folder"
          },
          "path": {
            "type": "string",
            "description": "Path of the folder"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the folder was last updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the folder"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace"
          }
        }
      },
      "CreateFileRequest": {
        "type": "object",
        "required": [
          "file",
          "folder",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "file": {
            "type": "string",
            "description": "Multipart file.  Content of the file."
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "insertOnly": {
            "type": "boolean",
            "description": "Whether the calls hould fail if there is already an existing file with the same name"
          },
          "name": {
            "type": "string",
            "description": "Name of the File"
          }
        }
      },
      "UpdateFieldPosition": {
        "type": "object",
        "required": [
          "columnNumber",
          "fieldName",
          "rowNumber"
        ],
        "properties": {
          "columnNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Column number of the field"
          },
          "fieldList": {
            "type": "array",
            "description": "List of positions inside the fields.  Only valid if the target is a fieldset",
            "items": {
              "$ref": "#/definitions/UpdateFieldPosition"
            }
          },
          "fieldName": {
            "type": "string",
            "description": "Id of the field"
          },
          "rowNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Row number of the field"
          }
        }
      },
      "LpFormFieldResponse": {
        "type": "object",
        "properties": {
          "blankFields": {
            "type": "integer",
            "format": "int32"
          },
          "columnNumber": {
            "type": "integer",
            "format": "int32"
          },
          "dataType": {
            "type": "string"
          },
          "defaultValue": {
            "type": "string"
          },
          "fieldMetaData": {
            "type": "object"
          },
          "fieldWidth": {
            "type": "integer",
            "format": "int32"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formPrefill": {
            "type": "boolean"
          },
          "isSensitive": {
            "type": "boolean"
          },
          "hintText": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "instructions": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "labelWidth": {
            "type": "integer",
            "format": "int32"
          },
          "maxLength": {
            "type": "integer",
            "format": "int32"
          },
          "required": {
            "type": "boolean"
          },
          "rowNumber": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string"
          },
          "validationMessage": {
            "type": "object"
          },
          "visibilityRules": {
            "$ref": "#/definitions/FormFieldVisibilityRuleResponse"
          }
        }
      },
      "TagResponse": {
        "type": "object",
        "required": [
          "applicableProgramTypes",
          "required",
          "tagType"
        ],
        "properties": {
          "allowableValues": {
            "type": "string",
            "description": "The list of acceptable values for the tag type"
          },
          "applicableProgramTypes": {
            "type": "string",
            "description": "Types of programs to which the tag can apply"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the tag is required for its applicable program types"
          },
          "tagType": {
            "type": "string",
            "description": "Name of the tag"
          }
        }
      },
      "FormVisibilityRuleResponse": {
        "type": "object",
        "properties": {
          "formFieldId": {
            "type": "string"
          },
          "ruleType": {
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FormVisibilityRuleDTO"
            }
          }
        }
      },
      "MultipartFile": {
        "type": "object"
      },
      "ResponseOfTokenResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TokenResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateLpTemplateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the landing page template"
          },
          "enableMunchkin": {
            "type": "boolean",
            "description": "Whether to enable munchkin on the derived pages.  Defaults to true"
          },
          "name": {
            "type": "string",
            "description": "Name of the landing page template"
          }
        }
      },
      "ResponseOfIdResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IdResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfSendSampleResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SendSampleResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CloneEmailRequest": {
        "type": "object",
        "required": [
          "folder",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the new email asset"
          },
          "operational": {
            "type": "boolean",
            "description": "Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false"
          }
        }
      },
      "SendSampleEmailRequest": {
        "type": "object",
        "required": [
          "emailAddress"
        ],
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "Email address to receive sample email"
          },
          "leadId": {
            "type": "string",
            "description": "Id of a lead to impersonate.  Tokens and dynamic content will be populated as though it were sent to the lead."
          },
          "textOnly": {
            "type": "boolean",
            "description": "Whether to send to text only version along with the HTML version.  Default false."
          }
        }
      },
      "Tags": {
        "type": "object",
        "required": [
          "tagType",
          "tagValue"
        ],
        "properties": {
          "tagType": {
            "type": "string",
            "description": "Name of the tag"
          },
          "tagValue": {
            "type": "string",
            "description": "Value of the tag"
          }
        }
      },
      "UpdateFileContentRequest": {
        "type": "object",
        "required": [
          "file",
          "id"
        ],
        "properties": {
          "file": {
            "type": "string",
            "description": "Multipart file. Content of the file."
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the file"
          }
        }
      },
      "UpdateEmailFullContentRequest": {
        "type": "object",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "Multipart file. File containing HTML document to update with.  File cannot include JavaScript or script tags."
          }
        }
      },
      "LandingPageVariableResponse": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Integer id of the variable"
          },
          "type": {
            "type": "string",
            "description": "Type of the variable"
          },
          "value": {
            "type": "object",
            "description": "Value of the variable"
          }
        }
      },
      "ResponseOfBrowseAllPrograms": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BrowseAllPrograms"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfFolderResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FolderResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfFolderContentResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FolderContentResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfSegmentationResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SegmentationResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FormKnownVisitorDTO": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ResponseOfEmailContentResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailContentResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfSnippetResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SnippetResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddFormFieldSetRequest": {
        "type": "object",
        "required": [
          "label"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": "Label of the fieldset"
          }
        }
      },
      "IdResponse": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the asset"
          }
        }
      },
      "SendSampleResponse": {
        "type": "object",
        "required": [
          "service",
          "result"
        ],
        "properties": {
          "service": {
            "type": "string",
            "description": "API call name",
            "enum": [
              "sendTestEmail"
            ]
          },
          "result": {
            "type": "boolean",
            "description": "Whether call was successful"
          }
        }
      },
      "UpdateSnippetDynamicContentRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of dynamic content section",
            "enum": [
              "Typeofcontent.Either'HTML'or'Text'"
            ]
          },
          "value": {
            "type": "string",
            "description": "Value of the dynamic content section"
          }
        }
      },
      "EmailDynamicContentResponse": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "description": "List of variations in the section",
            "items": {
              "$ref": "#/definitions/EmailDynamicContentItem"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the section was created"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the dnamic content section"
          },
          "segmentation": {
            "type": "integer",
            "format": "int32",
            "description": "Segmentation to which the section is linked"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the section was last updated"
          }
        }
      },
      "CloneLpTemplateRequest": {
        "type": "object",
        "required": [
          "folder",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the landing page template"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the landing page template"
          }
        }
      },
      "CreateLpFormRequest": {
        "type": "object",
        "required": [
          "folder"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the form"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "fontFamily": {
            "type": "string",
            "description": "font-family property for the form"
          },
          "fontSize": {
            "type": "string",
            "description": "font-size property of the form"
          },
          "knownVisitor": {
            "description": "Known visitor behavior for the form",
            "$ref": "#/definitions/FormKnownVisitorDTO"
          },
          "labelPosition": {
            "type": "string",
            "description": "Default positioning of labels."
          },
          "language": {
            "type": "string",
            "description": "Language of the form"
          },
          "locale": {
            "type": "string",
            "description": "Locale of the form"
          },
          "name": {
            "type": "string",
            "description": "Name of the form"
          },
          "progressiveProfiling": {
            "type": "boolean",
            "description": "Whether progressive profiling is enabled for the form"
          },
          "theme": {
            "type": "string",
            "description": "CSS theme for the form to use"
          }
        }
      },
      "Costs": {
        "type": "object",
        "required": [
          "cost",
          "startDate"
        ],
        "properties": {
          "cost": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of the cost"
          },
          "note": {
            "type": "string",
            "description": "Notes on the cost"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date of the period cost"
          }
        }
      },
      "FormFieldVisibilityRuleResponse": {
        "type": "object",
        "properties": {
          "ruleType": {
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FormVisibilityRuleDTO"
            }
          }
        }
      },
      "TokenDTO": {
        "type": "object",
        "properties": {
          "computedUrl": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ThankYouPageRequest": {
        "type": "object",
        "required": [
          "followupType",
          "followupValue",
          "operator",
          "subjectField",
          "values"
        ],
        "properties": {
          "default": {
            "type": "boolean",
            "description": "When true, this is the default rule, and will be applied when a user does not qualify for any of the other rules"
          },
          "followupType": {
            "type": "string",
            "description": "Type of followup.  When set to url, will follow to the url set in followupValue.  When set to lp, will follow to the Landing page with the id given in followupValue"
          },
          "followupValue": {
            "type": "string",
            "description": "Where to follow to on submission.  Given as a URL or and Integer depending on followupType"
          },
          "operator": {
            "type": "string",
            "description": "Operator to evaluate aginst the subject field"
          },
          "subjectField": {
            "type": "string",
            "description": "Field to apply to operator to"
          },
          "values": {
            "type": "array",
            "description": "Comma-separated list of values to compare to with the operator",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FormThankYouPageDTO": {
        "type": "object",
        "properties": {
          "default": {
            "type": "boolean"
          },
          "followupType": {
            "type": "string"
          },
          "followupValue": {
            "type": "object"
          },
          "operator": {
            "type": "string"
          },
          "subjectField": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfFormVisibilityRuleResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FormVisibilityRuleResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EmailDynamicContentItem": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "segmentId": {
            "type": "string"
          },
          "segmentName": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ResponseOfLandingPageDynamicContentResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LandingPageDynamicContentResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddRichTextRequest": {
        "type": "object",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "description": "Multipart file. HTML Content for the rich text field."
          }
        }
      },
      "Folder": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the folder"
          },
          "type": {
            "type": "string",
            "description": "Type of folder",
            "enum": [
              "Folder",
              "Program"
            ]
          }
        },
        "description": "JSON representation of a folder"
      },
      "SnippetFolder": {
        "type": "object",
        "required": [
          "value",
          "type",
          "folderName"
        ],
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the folder"
          },
          "type": {
            "type": "string",
            "description": "Type of folder",
            "enum": [
              "Folder",
              "Program"
            ]
          },
          "folderName": {
            "type": "string",
            "description": "Name of folder"
          }
        },
        "description": "JSON representation of a folder"
      },
      "RedirectFrom": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of redirect landing page",
            "enum": [
              "landingPageId",
              "path"
            ]
          },
          "value": {
            "type": "string",
            "description": "Value for redirect landing page.  If type is 'path' this must not begin with forward slash"
          }
        },
        "description": "JSON representation of 'from' redirect landing page rule"
      },
      "RedirectTo": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of redirect landing page",
            "enum": [
              "landingPageId",
              "url"
            ]
          },
          "value": {
            "type": "string",
            "description": "Value for redirect landing page"
          }
        },
        "description": "JSON representation of 'to' redirect landing page rule"
      },
      "SmartListRules": {
        "type": "object",
        "required": [
          "filterMatchType",
          "triggers",
          "filters"
        ],
        "description": "JSON representation of smart list rules",
        "properties": {
          "filterMatchType": {
            "type": "string",
            "description": "Smart list filter match type (rule logic)",
            "enum": [
              "All",
              "Any",
              "Advanced"
            ]
          },
          "triggers": {
            "type": "array",
            "description": "List of smart list triggers",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "array",
            "description": "List of smart list filters",
            "items": {
              "$ref": "#/definitions/SmartListFilters"
            }
          }
        }
      },
      "SmartListFilters": {
        "type": "object",
        "required": [
          "id",
          "name",
          "ruleTypeId",
          "ruleType",
          "operator",
          "conditions"
        ],
        "description": "JSON representation of smart list filters",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the filter"
          },
          "name": {
            "type": "string",
            "description": "Name of filter"
          },
          "ruleTypeId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the rule type"
          },
          "ruleType": {
            "type": "string",
            "description": "Name of rule type"
          },
          "operator": {
            "type": "string",
            "description": "Name of operator"
          },
          "conditions": {
            "type": "array",
            "description": "List of smart list conditions",
            "items": {
              "$ref": "#/definitions/SmartListConditions"
            }
          }
        }
      },
      "SmartListConditions": {
        "type": "object",
        "required": [
          "activityAttributeId",
          "activityAttributeName",
          "operator",
          "values",
          "isPrimary"
        ],
        "description": "JSON representation of smart list conditions",
        "properties": {
          "activityAttributeId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the activity attribute"
          },
          "activityAttributeName": {
            "type": "string",
            "description": "Name of activity attribute"
          },
          "operator": {
            "type": "string",
            "description": "Value of operator"
          },
          "values": {
            "type": "array",
            "description": "List of values",
            "items": {
              "type": "string"
            }
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Whether the condition is primary or not (first condition of the smart list)"
          }
        }
      },
      "EmailTemplateContentResponse": {
        "type": "object",
        "required": [
          "content",
          "id",
          "status"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "HTML content of the template"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the email template"
          },
          "status": {
            "type": "string",
            "description": "Status filter for draft or approved versions",
            "enum": [
              "approved",
              "draft"
            ]
          }
        }
      },
      "GetEmailFullContentResponse": {
        "type": "object",
        "required": [
          "content",
          "id",
          "status"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "HTML content of the email"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the email"
          },
          "status": {
            "type": "string",
            "description": "Status filter for draft or approved versions",
            "enum": [
              "approved",
              "draft"
            ]
          }
        }
      },
      "GetLandingPageFullContentResponse": {
        "type": "object",
        "required": [
          "content",
          "id",
          "status"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "HTML content of the landing page"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the landing page"
          }
        }
      },
      "UpdateEmailFullContentResponse": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the email"
          }
        }
      },
      "ResponseOfChannelResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ChannelResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfEmailModuleResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailModuleResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfEmailVariableResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailVariableResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseOfSmartCampaignResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SmartCampaignResponse"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SegmentationResponse": {
        "type": "object",
        "required": [
          "folder",
          "status"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the asset"
          },
          "folder": {
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "$ref": "#/definitions/Folder"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the asset"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset"
          },
          "status": {
            "type": "string",
            "description": "Status filter for draft or approved versions"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime the asset was most recently updated"
          },
          "url": {
            "type": "string",
            "description": "Url of the asset in the Marketo UI"
          },
          "workspace": {
            "type": "string",
            "description": "Name of the workspace"
          }
        }
      },
      "ResponseOfTagResponseGetAll": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagResponseGetAll"
            }
          },
          "success": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ReArrangeRequest": {
        "type": "object",
        "properties": {
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UpdateFieldPosition"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code of the error.  See full list of error codes <a href=\"https://developers.marketo.com/rest-api/error-codes/\">here</a>"
          },
          "message": {
            "type": "string",
            "description": "Message describing the cause of the error"
          }
        }
      },
      "SubmitButtonRequest": {
        "type": "object",
        "properties": {
          "buttonPosition": {
            "type": "integer",
            "format": "int32",
            "description": "Location in pixels of the button relative to the left of the form"
          },
          "buttonStyle": {
            "type": "string",
            "description": "Style of the button"
          },
          "label": {
            "type": "string",
            "description": "Label text of the button"
          },
          "waitingLabel": {
            "type": "string",
            "description": "Waiting text of the button"
          }
        }
      },
      "UpdateSnippetRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the snippet"
          },
          "isArchive": {
            "type": "string",
            "description": "Archival status of the snippet"
          },
          "name": {
            "type": "string",
            "description": "Name of the snippet"
          }
        }
      },
      "FieldsMetaDataResponse": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "dataType": {
            "type": "string",
            "description": "Type of field"
          },
          "defaultValue": {
            "type": "string",
            "description": "Optional default value for the field"
          },
          "description": {
            "type": "string",
            "description": "Description of the field"
          },
          "fieldMaskValues": {
            "type": "string",
            "description": "Optional input mask for the field"
          },
          "fieldWidth": {
            "type": "integer",
            "format": "int32",
            "description": "Width of the input or select element"
          },
          "id": {
            "type": "string",
            "description": "Id of the field"
          },
          "initiallyChecked": {
            "type": "boolean",
            "description": "Whether the field should be checked upon loading.  Default false"
          },
          "isLabelToRight": {
            "type": "boolean",
            "description": "Whether the field label should be displayed to the right of the input/select element. Default false"
          },
          "isMultiselect": {
            "type": "boolean",
            "description": "Whether the field should allow multiple selections. Default false"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Whether the field is required to submit the form.  Default false"
          },
          "isSensitive": {
            "type": "boolean",
            "description": "Whether the field is marked as sensitive.  Default false"
          },
          "labelWidth": {
            "type": "integer",
            "format": "int32",
            "description": "Width of the field label element"
          },
          "maxLength": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum length for text type fields"
          },
          "maximumNumber": {
            "type": "number",
            "format": "float",
            "description": "Maximum value accepted by the field"
          },
          "minimumNumber": {
            "type": "number",
            "format": "float",
            "description": "Minimum value accepted by the field"
          },
          "picklistValues": {
            "type": "string",
            "description": "Comma-separated list of available picklist values for the field"
          },
          "placeholderText": {
            "type": "string",
            "description": "Placeholder text for the field"
          },
          "validationMessage": {
            "type": "string",
            "description": "Validation message to display on failed validation"
          },
          "visibleRows": {
            "type": "integer",
            "format": "int32",
            "description": "Number of rows visible for progressive profiling"
          }
        }
      },
      "DeleteTokenRequest": {
        "type": "object",
        "properties": {
          "folderType": {
            "type": "string",
            "enum": [
              "Program",
              "Folder"
            ]
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "UpdateVariableRequest": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value to update variable with"
          },
          "moduleId": {
            "type": "string",
            "description": "Module that variable is associated with. Required for updating module variables. Not needed for global variables."
          }
        }
      },
      "UpdateEmailTemplateContentRequest": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Content for the email template.  Multipart file."
          }
        }
      },
      "UpdateEmailComponentDataRequest": {
        "type": "object",
        "properties": {
          "fromEmail": {
            "description": "From-address of the Email",
            "$ref": "#/definitions/EmailHeaderField"
          },
          "fromName": {
            "description": "From-name of the Email",
            "$ref": "#/definitions/EmailHeaderField"
          },
          "replyTO": {
            "description": "Reply-To address of the Email",
            "$ref": "#/definitions/EmailHeaderField"
          },
          "subject": {
            "description": "Subject Line of the Email",
            "$ref": "#/definitions/EmailHeaderField"
          }
        }
      },
      "IdentityRequest": {
        "type": "object",
        "required": [
          "client_id",
          "client_secret",
          "grant_type"
        ],
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Client ID from Admin > Integration > Launchpoint menu"
          },
          "client_secret": {
            "type": "string",
            "description": "Client Secret from Admin > Integration > Launchpoint menu"
          },
          "grant_type": {
            "type": "string",
            "description": "Grant type",
            "enum": [
              "client_credentials"
            ]
          }
        }
      },
      "ResponseOfIdentity": {
        "type": "object",
        "required": [
          "access_token",
          "scope",
          "expires_in",
          "token_type"
        ],
        "properties": {
          "access_token": {
            "description": "The token that you pass with subsequent calls to authenticate with the target instance",
            "type": "string"
          },
          "scope": {
            "description": "The owning API-only user of the custom service that was used to authenticate",
            "type": "string"
          },
          "expires_in": {
            "description": "Remaining lifespan of the current token in seconds",
            "type": "integer"
          },
          "token_type": {
            "description": "The OAuth authentication method",
            "type": "string",
            "enum": [
              "bearer"
            ]
          }
        }
      },
      "ResponseOfActivity": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/Activity"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfLists": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/List"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfPrograms": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/Program"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfSmartCampaigns": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/SmartCampaign"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "LeadInputData": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique integer id of a lead record"
          }
        },
        "description": "Lead record containing only lead id"
      },
      "ResponseOfStaticList": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/StaticList"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfCustomActivityType": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/CustomActivityType"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "LeadChange": {
        "type": "object",
        "required": [
          "activityDate",
          "activityTypeId",
          "attributes",
          "id",
          "leadId"
        ],
        "properties": {
          "activityDate": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime of the activity"
          },
          "activityTypeId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the activity type"
          },
          "attributes": {
            "type": "array",
            "description": "List of secondary attributes",
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "campaignId": {
            "type": "integer",
            "format": "int64"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LeadChangeField"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Integer id of the activity.  For instances which have been migrated to Activity Service, this field may not be present, and should not be treated as unique."
          },
          "leadId": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lead associated to the activity"
          },
          "marketoGUID": {
            "type": "string",
            "description": "Unique id of the activity (128 character string)"
          }
        }
      },
      "LeadPartition": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the partition"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the partition"
          },
          "name": {
            "type": "string",
            "description": "Name of the partition"
          }
        }
      },
      "ActivityType": {
        "type": "object",
        "required": [
          "attributes",
          "id",
          "name",
          "primaryAttribute"
        ],
        "properties": {
          "apiName": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "description": "List of secondary attributes of the type",
            "items": {
              "$ref": "#/definitions/ActivityTypeAttribute"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of the activity type"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the activity type"
          },
          "name": {
            "type": "string",
            "description": "Name of the activity type"
          },
          "primaryAttribute": {
            "description": "Primary attribute of the type",
            "$ref": "#/definitions/ActivityTypeAttribute"
          }
        }
      },
      "ActivityTypeAttribute": {
        "type": "object",
        "required": [
          "dataType",
          "name"
        ],
        "properties": {
          "apiName": {
            "type": "string"
          },
          "dataType": {
            "type": "string",
            "description": "Datatype of the Attribute"
          },
          "name": {
            "type": "string",
            "description": "Name of the attribute"
          }
        }
      },
      "ResponseWithoutResult": {
        "type": "object",
        "required": [
          "requestId",
          "success"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token returned from a previous response"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "SyncCustomObjectRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "Type of sync operation to perform",
            "enum": [
              "createOnly",
              "updateOnly",
              "createOrUpdate"
            ]
          },
          "dedupeBy": {
            "type": "string",
            "description": "Field to deduplicate on.  If the value in the field for a given record is not unique, an error will be returned for the individual record."
          },
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/CustomObject"
            }
          }
        }
      },
      "SyncProgramMemberStatusRequest": {
        "type": "object",
        "required": [
          "statusName",
          "input"
        ],
        "properties": {
          "statusName": {
            "type": "string",
            "description": "Program member status"
          },
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/ProgramMemberStatus"
            }
          }
        }
      },
      "ProgramMemberStatus": {
        "type": "object",
        "required": [
          "leadId"
        ],
        "properties": {
          "leadId": {
            "type": "integer",
            "format": "int64",
            "description": "Unique integer id of a lead record"
          }
        }
      },
      "SyncProgramMemberDataRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/ProgramMemberData"
            }
          }
        }
      },
      "ProgramMemberData": {
        "type": "object",
        "required": [
          "leadId",
          "{fieldApiName}"
        ],
        "properties": {
          "leadId": {
            "type": "integer",
            "format": "int64",
            "description": "Unique integer id of a lead record"
          },
          "{fieldApiName}": {
            "type": "string",
            "description": "API Name of field to update.  Must be updateable as described by <a href=\"/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeProgramMemberUsingGET2\">Describe Program Member</a> endpoint."
          },
          "{fieldApiName2}": {
            "type": "string",
            "description": "API Name of another field to update (and so forth).  Must be updateable as described by <a href=\"/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Leads/describeProgramMemberUsingGET2\">Describe Program Member</a> endpoint."
          }
        }
      },
      "DeleteProgramMemberRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/ProgramMemberDelete"
            }
          }
        }
      },
      "ProgramMemberDelete": {
        "type": "object",
        "required": [
          "leadId"
        ],
        "properties": {
          "leadId": {
            "type": "integer",
            "format": "int64",
            "description": "Unique integer id of a lead record"
          }
        }
      },
      "SyncCustomObjectTypeRequest": {
        "type": "object",
        "required": [
          "apiName",
          "displayName"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "Type of sync operation to perform.  Default is createOrUpdate.",
            "enum": [
              "createOnly",
              "updateOnly",
              "createOrUpdate"
            ]
          },
          "displayName": {
            "type": "string",
            "description": "UI display-name of the custom object type"
          },
          "apiName": {
            "type": "string",
            "description": "API name of the custom object type"
          },
          "pluralName": {
            "type": "string",
            "description": "UI plural-name of the custom object type"
          },
          "description": {
            "type": "string",
            "description": "Description of the custom object type"
          },
          "showInLeadDetail": {
            "type": "boolean",
            "description": "Whether to show custom object type in lead detail of UI.  Default is false"
          }
        }
      },
      "InputStream": {
        "type": "object"
      },
      "TriggerCampaignRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "description": "Object describing trigger configuration for the campaign",
            "$ref": "#/definitions/TriggerCampaignData"
          }
        }
      },
      "ResponseOfNamedAccount": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/NamedAccount"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "Lead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of a lead record"
          },
          "membership": {
            "description": "Membership data for the parent program.  Only returned via Get Leads By Program Id",
            "$ref": "#/definitions/ProgramMembership"
          },
          "reason": {
            "description": "Reason object describing why an operation did not succeed for a record",
            "$ref": "#/definitions/Reason"
          },
          "status": {
            "type": "string",
            "description": "Status of the operation performed on the record"
          }
        },
        "description": "Lead record.  Always contains id, but may have any number of other fields, depending on the fields available in the target instance."
      },
      "PushLead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of a lead record"
          },
          "reason": {
            "description": "Reason object describing why an operation did not succeed for a record",
            "$ref": "#/definitions/Reason"
          },
          "status": {
            "type": "string",
            "description": "Status of the operation performed on the record"
          }
        },
        "description": "Lead record.  Always contains id, but may have any number of other fields, depending on the fields available in the target instance."
      },
      "LeadField": {
        "type": "object",
        "description": "Lead field record",
        "required": [
          "displayName",
          "name",
          "description",
          "dataType",
          "isHidden",
          "isHtmlEncodingInEmail",
          "isSensitive",
          "isCustom",
          "isApiCreated"
        ],
        "properties": {
          "displayName": {
            "type": "string",
            "description": "UI display-name of the field"
          },
          "name": {
            "type": "string",
            "description": "API name of the field"
          },
          "description": {
            "type": "string",
            "description": "Description of the field"
          },
          "dataType": {
            "type": "string",
            "description": "Datatype of the field"
          },
          "length": {
            "type": "integer",
            "format": "int32",
            "description": "Max length of the field.  Only applicable to text, string, and text area."
          },
          "isHidden": {
            "type": "boolean",
            "example": false,
            "description": "If set to true, the field is hidden"
          },
          "isHtmlEncodingInEmail": {
            "type": "boolean",
            "example": false,
            "description": "If set to true, field is encoded as HTML in email"
          },
          "isSensitive": {
            "type": "boolean",
            "example": false,
            "description": "If set to true, field is marked as sensitive"
          },
          "isCustom": {
            "type": "boolean",
            "example": false,
            "description": "If set to true, field is custom"
          },
          "isApiCreated": {
            "type": "boolean",
            "example": false,
            "description": "If set to true, field was created using REST API"
          }
        }
      },
      "UpdateLeadField": {
        "type": "object",
        "description": "Lead field record for update",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "UI display-name of the field"
          },
          "description": {
            "type": "string",
            "description": "Description of the field"
          },
          "isHidden": {
            "type": "boolean",
            "example": false,
            "description": "If set to true, the field is hidden.  Default is false"
          },
          "isHtmlEncodingInEmail": {
            "type": "boolean",
            "example": false,
            "description": "If set to true, field is encoded as HTML in email.  Default is true"
          },
          "isSensitive": {
            "type": "boolean",
            "example": false,
            "description": "If set to true, field is marked as sensitive.  Default is false"
          }
        }
      },
      "CreateLeadField": {
        "type": "object",
        "required": [
          "displayName",
          "name",
          "dataType"
        ],
        "description": "Lead field record for create",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "UI display-name of the field.  Must be unique, cannot contain special characters"
          },
          "name": {
            "type": "string",
            "description": "API name of the field.  Must be unique, start with a letter, and only contain letters, numbers, or underscore"
          },
          "description": {
            "type": "string",
            "description": "Description of the field.  Default is no description"
          },
          "dataType": {
            "type": "string",
            "description": "Datatype of the field",
            "enum": [
              "boolean",
              "currency",
              "date",
              "datetime",
              "email",
              "float",
              "integer",
              "percent",
              "phone",
              "score",
              "string",
              "url"
            ]
          },
          "isHidden": {
            "type": "boolean",
            "example": false,
            "description": "If set to true, the field is hidden.  Default is false"
          },
          "isHtmlEncodingInEmail": {
            "type": "boolean",
            "example": false,
            "description": "If set to true, field is encoded as HTML in email.  Default is true"
          },
          "isSensitive": {
            "type": "boolean",
            "example": false,
            "description": "If set to true, field is marked as sensitive.  Default is false"
          }
        }
      },
      "LeadFieldStatus": {
        "type": "object",
        "required": [
          "name",
          "status"
        ],
        "description": "Lead field update status",
        "properties": {
          "name": {
            "type": "string",
            "description": "API name of the field"
          },
          "status": {
            "type": "string",
            "description": "Status of the operation performed on the record",
            "enum": [
              "created",
              "updated"
            ]
          }
        }
      },
      "UpdateLeadFieldRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "Single lead field for input",
            "items": {
              "$ref": "#/definitions/UpdateLeadField"
            }
          }
        }
      },
      "CreateLeadFieldRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "List of lead fields for input",
            "items": {
              "$ref": "#/definitions/CreateLeadField"
            }
          }
        }
      },
      "SyncLeadRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "Type of sync operation to perform.  Defaults to createOrUpdate if unset",
            "enum": [
              "createOnly",
              "updateOnly",
              "createOrUpdate",
              "createDuplicate"
            ]
          },
          "asyncProcessing": {
            "type": "boolean",
            "example": false,
            "description": "If set to true, the call will return immediately"
          },
          "input": {
            "type": "array",
            "description": "List of leads for input",
            "items": {
              "$ref": "#/definitions/Lead"
            }
          },
          "lookupField": {
            "type": "string",
            "description": "Field to deduplicate on.  The field must be present in each lead record of the input.  Defaults to email if unset"
          },
          "partitionName": {
            "type": "string",
            "description": "Name of the partition to operate on, if applicable.  Should be set whenever possible, when interacting with an instance where partitions are enabled."
          }
        }
      },
      "DeleteSalesPersonRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "deleteBy": {
            "type": "string",
            "description": "Key to use for deletion of the record"
          },
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/SalesPerson"
            }
          }
        }
      },
      "ListOperationOutputData": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique integer id of a lead record"
          },
          "reasons": {
            "type": "array",
            "description": "List of reasons why an operation did not succeed.  Reasons are only present in API responses and should not be submitted",
            "items": {
              "$ref": "#/definitions/Reason"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of the operation performed on the record"
          }
        }
      },
      "LeadAttribute": {
        "type": "object",
        "required": [
          "dataType",
          "displayName",
          "id"
        ],
        "properties": {
          "dataType": {
            "type": "string",
            "description": "Datatype of the field"
          },
          "displayName": {
            "type": "string",
            "description": "UI display-name of the field"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the field"
          },
          "length": {
            "type": "integer",
            "format": "int32",
            "description": "Max length of the field.  Only applicable to text, string, and text area."
          },
          "rest": {
            "description": "Description of REST API usage attributes",
            "$ref": "#/definitions/LeadMapAttribute"
          },
          "soap": {
            "description": "Description of SOAP API usage attributes",
            "$ref": "#/definitions/LeadMapAttribute"
          }
        }
      },
      "LeadAttribute2": {
        "type": "object",
        "required": [
          "name",
          "searchableFields",
          "fields"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "\"API Lead\""
          },
          "searchableFields": {
            "type": "array",
            "description": "List of searchable fields",
            "items": {
              "$ref": "#/definitions/LeadAttribute2SearchableFields"
            }
          },
          "fields": {
            "type": "array",
            "description": "Description of searchable fields",
            "items": {
              "$ref": "#/definitions/LeadAttribute2Fields"
            }
          }
        }
      },
      "LeadAttribute2SearchableFields": {
        "type": "array",
        "description": "List of searchable fields",
        "items": {
          "type": "string",
          "description": "Searchable field"
        }
      },
      "LeadAttribute2Fields": {
        "type": "object",
        "required": [
          "name",
          "displayName",
          "dataType",
          "updateable",
          "crmManaged"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "REST API name of field"
          },
          "displayName": {
            "type": "string",
            "description": "Display name of field (friendly name)"
          },
          "dataType": {
            "type": "string",
            "description": "Data type of field"
          },
          "length": {
            "type": "integer",
            "description": "Length of field"
          },
          "updateable": {
            "type": "boolean",
            "description": "Is field updateable"
          },
          "crmManaged": {
            "type": "boolean",
            "description": "Is field managed by CRM"
          }
        }
      },
      "LeadAttribute2Fields2": {
        "type": "object",
        "required": [
          "name",
          "displayName",
          "dataType",
          "updateable",
          "crmManaged"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "REST API name of field"
          },
          "displayName": {
            "type": "string",
            "description": "Display name of field (friendly name)"
          },
          "dataType": {
            "type": "string",
            "description": "Data type of field"
          },
          "length": {
            "type": "integer",
            "description": "Length of field"
          },
          "updateable": {
            "type": "boolean",
            "description": "Is field updateable"
          },
          "crmManaged": {
            "type": "boolean",
            "description": "Is field managed by CRM"
          }
        }
      },
      "ProgramMemberAttribute": {
        "type": "object",
        "required": [
          "fields"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "\"API Program Member\""
          },
          "fields": {
            "type": "array",
            "description": "Description of searchable fields",
            "items": {
              "$ref": "#/definitions/LeadAttribute2Fields"
            }
          }
        }
      },
      "ProgramMemberAttribute2": {
        "type": "object",
        "required": [
          "name",
          "description",
          "createdAt",
          "updatedAt",
          "dedupeFields",
          "searchableFields",
          "fields"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "\"API Program Member\""
          },
          "description": {
            "type": "string",
            "description": "\"API Program Member Map\""
          },
          "createdAt": {
            "type": "string",
            "description": "Datetime when created"
          },
          "updatedAt": {
            "type": "string",
            "description": "Datetime updated"
          },
          "dedupeFields": {
            "type": "array",
            "description": "List of dedupe fields",
            "items": {
              "type": "string"
            }
          },
          "searchableFields": {
            "type": "array",
            "description": "List of searchable fields",
            "items": {
              "$ref": "#/definitions/LeadAttribute2SearchableFields"
            }
          },
          "fields": {
            "type": "array",
            "description": "Description of searchable fields",
            "items": {
              "$ref": "#/definitions/LeadAttribute2Fields2"
            }
          }
        }
      },
      "ScheduleCampaignRequest": {
        "type": "object",
        "properties": {
          "input": {
            "$ref": "#/definitions/ScheduleCampaignData"
          }
        },
        "description": "Record describe how to schedule the campaign"
      },
      "SyncSalesPersonRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "Type of sync operation to perform",
            "enum": [
              "createOnly",
              "updateOnly",
              "createOrUpdate"
            ]
          },
          "dedupeBy": {
            "type": "string",
            "description": "Field to deduplicate on.  If the value in the field for a given record is not unique, an error will be returned for the individual record."
          },
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/SalesPerson"
            }
          }
        }
      },
      "ResponseOfImportLeadResponse": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ImportLeadResponse"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "NamedAccountList": {
        "type": "object",
        "required": [
          "marketoGUID",
          "seq"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Datetime when the named account list was created"
          },
          "marketoGUID": {
            "type": "string",
            "description": "Unique GUID of the custom object records"
          },
          "name": {
            "type": "string",
            "description": "Name of named account list"
          },
          "reasons": {
            "type": "array",
            "description": "List of reasons why an operation did not succeed.  Reasons are only present in API responses and should not be submitted",
            "items": {
              "$ref": "#/definitions/Reason"
            }
          },
          "seq": {
            "type": "integer",
            "format": "int32",
            "description": "Integer indicating the sequence of the record in response.  This value is correlated to the order of the records included in the request input.  Seq should only be part of responses and should not be submitted."
          },
          "status": {
            "type": "string",
            "enum": [
              "created",
              "updated",
              "deleted",
              "skipped",
              "added",
              "removed"
            ]
          },
          "type": {
            "type": "string",
            "description": "Type of named account list (\"default\" if created by user or API, \"external\" if managed by CRM-View)"
          },
          "updateable": {
            "type": "boolean",
            "example": false,
            "description": "Whether the list is updateable (true if created by user or API, false if managed by CRM-View)"
          },
          "updatedAt": {
            "type": "string",
            "description": "Datetime when the named account list was most recently updated"
          }
        }
      },
      "ExportLeadRequest": {
        "type": "object",
        "required": [
          "fields",
          "filter"
        ],
        "properties": {
          "columnHeaderNames": {
            "description": "File header field names override (corresponds with REST API name)",
            "$ref": "#/definitions/ColumnHeaderNames"
          },
          "fields": {
            "type": "array",
            "description": "Comma-separated list of fields to include in the file",
            "items": {
              "type": "string"
            }
          },
          "filter": {
            "description": "Lead record selection criteria. Can be one of the following: \"createdAt\", \"updatedAt\", \"staticListName\", \"staticListId\", \"smartListName\", \"smartListId\"",
            "$ref": "#/definitions/ExportLeadFilter"
          },
          "format": {
            "type": "string",
            "description": "File format to create(\"CSV\", \"TSV\", \"SSV\").  Default is \"CSV\""
          }
        }
      },
      "ExportCustomObjectRequest": {
        "type": "object",
        "required": [
          "fields",
          "filter"
        ],
        "properties": {
          "columnHeaderNames": {
            "description": "File header field names override (corresponds with REST API name)",
            "$ref": "#/definitions/ColumnHeaderNames"
          },
          "fields": {
            "type": "array",
            "description": "Comma-separated list of custom object attributes to include in the file",
            "items": {
              "type": "string"
            }
          },
          "filter": {
            "description": "Custom object record selection criteria. Can be one of the following: \"updatedAt\", \"staticListName\", \"staticListId\", \"smartListName\", \"smartListId\"",
            "$ref": "#/definitions/ExportCustomObjectFilter"
          },
          "format": {
            "type": "string",
            "description": "File format to create(\"CSV\", \"TSV\", \"SSV\").  Default is \"CSV\""
          }
        }
      },
      "ExportProgramMemberRequest": {
        "type": "object",
        "required": [
          "fields",
          "filter"
        ],
        "properties": {
          "columnHeaderNames": {
            "description": "File header field names override (corresponds with REST API name)",
            "$ref": "#/definitions/ColumnHeaderNames"
          },
          "fields": {
            "type": "array",
            "description": "Comma-separated list of fields to include in the file",
            "items": {
              "type": "string"
            }
          },
          "filter": {
            "description": "Program member record selection criteria. Must be the following: \"programId\"",
            "$ref": "#/definitions/ExportProgramMemberFilter"
          },
          "format": {
            "type": "string",
            "description": "File format to create(\"CSV\", \"TSV\", \"SSV\").  Default is \"CSV\""
          }
        }
      },
      "CustomActivityRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "List of custom activities to insert",
            "items": {
              "$ref": "#/definitions/CustomActivity"
            }
          }
        }
      },
      "DeleteLeadRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "List of leads for input",
            "items": {
              "$ref": "#/definitions/LeadInputData"
            }
          }
        }
      },
      "Attribute": {
        "type": "object",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "apiName": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the attribute"
          },
          "value": {
            "type": "object",
            "description": "Value of the attribute"
          }
        },
        "description": "Name-Value pair"
      },
      "SyncNamedAccountRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "Type of sync operation to perform",
            "enum": [
              "createOnly",
              "updateOnly",
              "createOrUpdate"
            ]
          },
          "dedupeBy": {
            "type": "string",
            "description": "Field to deduplicate on.  If the value in the field for a given record is not unique, an error will be returned for the individual record."
          },
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/NamedAccount"
            }
          }
        }
      },
      "DeleteNamedAccountListRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "deleteBy": {
            "type": "string",
            "description": "Key to use for deletion of the record"
          },
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/NamedAccountList"
            }
          }
        }
      },
      "ResponseOfCampaign": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/Campaign"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "DateRange": {
        "type": "object",
        "properties": {
          "endAt": {
            "type": "string",
            "description": "End of date range filter (ISO 8601-format)"
          },
          "startAt": {
            "type": "string",
            "description": "Start of date range filter (ISO-8601 format)"
          }
        }
      },
      "ResponseOfChangeLeadProgramStatusOutputData": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ChangeLeadProgramStatusOutputData"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfVoid": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ImportCustomObjectResponse": {
        "type": "object",
        "required": [
          "batchId",
          "objectApiName",
          "operation",
          "status"
        ],
        "properties": {
          "batchId": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the import batch"
          },
          "importTime": {
            "type": "string",
            "description": "Time spent on the batch"
          },
          "message": {
            "type": "string",
            "description": "Status message of the batch"
          },
          "numOfObjectsProcessed": {
            "type": "integer",
            "format": "int32",
            "description": "Number of rows processed so far"
          },
          "numOfRowsFailed": {
            "type": "integer",
            "format": "int32",
            "description": "Number of rows failed so far"
          },
          "numOfRowsWithWarning": {
            "type": "integer",
            "format": "int32",
            "description": "Number of rows with a warning so far"
          },
          "objectApiName": {
            "type": "string",
            "description": "Object API Name"
          },
          "operation": {
            "type": "string",
            "description": "Bulk operation type. Can be import or export"
          },
          "status": {
            "type": "string",
            "description": "Status of the batch"
          }
        },
        "description": "Response containing import status information"
      },
      "ImportProgramMemberResponse": {
        "type": "object",
        "required": [
          "batchId",
          "importId",
          "status"
        ],
        "properties": {
          "batchId": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the import job"
          },
          "importId": {
            "type": "string",
            "description": "Unique integer id of the import job"
          },
          "status": {
            "type": "string",
            "description": "Status of the import job"
          }
        },
        "description": "Response containing import status information"
      },
      "AddNamedAccountListMemberRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/NamedAccount"
            }
          }
        }
      },
      "ExportActivityFilter": {
        "type": "object",
        "required": [
          "createdAt"
        ],
        "properties": {
          "activityTypeIds": {
            "type": "array",
            "description": "List of activity type ids to filter on",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "primaryAttributeValueIds": {
            "type": "array",
            "description": "List of primary attribute ids to filter on",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "primaryAttributeValues": {
            "type": "array",
            "description": "List of primary attribute values to filter on",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "description": "Date range to filter new activities on",
            "$ref": "#/definitions/DateRange"
          }
        }
      },
      "ResponseOfListOperationOutputData": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ListOperationOutputData"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "Campaign": {
        "type": "object",
        "required": [
          "createdAt",
          "id",
          "name",
          "type",
          "updatedAt"
        ],
        "properties": {
          "active": {
            "type": "boolean",
            "example": false,
            "description": "Whether the campaign is active.  Only applicable to trigger campaigns"
          },
          "createdAt": {
            "type": "string",
            "description": "Datetime when the campaign was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the Smart Campaign"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the Smart Campaign"
          },
          "name": {
            "type": "string",
            "description": "Name of the Smart Campaign"
          },
          "programId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the parent program if applicable"
          },
          "programName": {
            "type": "string",
            "description": "Name of the parent program if applicable"
          },
          "type": {
            "type": "string",
            "description": "Type of the Smart Campaign",
            "enum": [
              "batch",
              "trigger"
            ]
          },
          "updatedAt": {
            "type": "string",
            "description": "Datetime when the campaign was most recently updated"
          },
          "workspaceName": {
            "type": "string",
            "description": "Name of the parent workspace if applicable"
          }
        },
        "description": "Record of a Marketo Smart Campaign"
      },
      "DeleteNamedAccountRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "deleteBy": {
            "type": "string",
            "description": "Key to use for deletion of the record"
          },
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/NamedAccount"
            }
          }
        }
      },
      "ResponseOfLead": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/Lead"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfLeadByListId": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/Lead"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfLeadField": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/LeadField"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfUpdateLeadField": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/LeadFieldStatus"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfCreateLeadField": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/LeadFieldStatus"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfPushLeadToMarketo": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/Lead"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfSubmitForm": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/FormResponse"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "FormResponse": {
        "type": "object",
        "description": "Disposition of lead",
        "required": [
          "id",
          "status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of lead"
          },
          "status": {
            "type": "string",
            "enum": [
              "created",
              "updated",
              "skipped"
            ]
          },
          "reasons": {
            "type": "array",
            "description": "List of reasons why an operation did not succeed.  Reasons are only present in API responses and should not be submitted",
            "items": {
              "$ref": "#/definitions/Reason"
            }
          }
        }
      },
      "Activity": {
        "type": "object",
        "required": [
          "activityDate",
          "activityTypeId",
          "attributes",
          "id",
          "leadId"
        ],
        "properties": {
          "activityDate": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime of the activity"
          },
          "activityTypeId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the activity type"
          },
          "attributes": {
            "type": "array",
            "description": "List of secondary attributes",
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "campaignId": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the associated Smart Campaign, if applicable"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Integer id of the activity. This value could exceed Int.MAX. For instances which have been migrated to Activity Service, this field may not be present, and should not be treated as unique."
          },
          "leadId": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lead associated to the activity"
          },
          "marketoGUID": {
            "type": "string",
            "description": "Unique id of the activity (128 character string)"
          },
          "primaryAttributeValue": {
            "type": "string",
            "description": "Value of the primary attribute"
          },
          "primaryAttributeValueId": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the primary attribute field"
          }
        }
      },
      "CustomActivityTypeAttributeRequest": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "description": "List of attributes to add to the activity type",
            "items": {
              "$ref": "#/definitions/CustomActivityTypeAttribute"
            }
          }
        }
      },
      "AddCustomObjectTypeFieldsRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "List of fields to add to custom object type",
            "items": {
              "$ref": "#/definitions/AddCustomObjectTypeField"
            }
          }
        }
      },
      "AddCustomObjectTypeField": {
        "type": "object",
        "required": [
          "name",
          "displayName",
          "dataType"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "API Name of custom object field"
          },
          "displayName": {
            "type": "string",
            "description": "UI display-name of the custom object field"
          },
          "dataType": {
            "type": "string",
            "description": "Datatype of the custom object field"
          },
          "description": {
            "type": "string",
            "description": "Description of the custom object field"
          },
          "isDedupeField": {
            "type": "boolean",
            "description": "Set to true to enable field as unique identifier for deduplicating records.  Default is false"
          },
          "relatedTo": {
            "description": "Define custom object link field",
            "$ref": "#/definitions/CustomObjectTypeFieldRelatedTo"
          }
        }
      },
      "UpdateCustomObjectTypeFieldRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "API Name of custom object field"
          },
          "displayName": {
            "type": "string",
            "description": "UI display-name of the custom object field"
          },
          "dataType": {
            "type": "string",
            "description": "Datatype of the custom object field"
          },
          "description": {
            "type": "string",
            "description": "Description of the custom object field"
          },
          "isDedupeField": {
            "type": "boolean",
            "description": "Set to true to enable field as unique identifier for deduplicating records.  Default is false"
          },
          "relatedTo": {
            "description": "Define custom object link field",
            "$ref": "#/definitions/CustomObjectTypeFieldRelatedTo"
          }
        }
      },
      "CustomObjectTypeFieldRelatedTo": {
        "type": "object",
        "required": [
          "name",
          "field"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of linkable object type"
          },
          "field": {
            "type": "string",
            "description": "Foreign field to which the parent is linked"
          }
        }
      },
      "DeleteCustomObjectTypeFieldsRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "List of fields to delete from the custom object type",
            "items": {
              "$ref": "#/definitions/DeleteCustomObjectTypeField"
            }
          }
        }
      },
      "DeleteCustomObjectTypeField": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "API Name of custom object type field"
          }
        }
      },
      "TriggerCampaignData": {
        "type": "object",
        "required": [
          "leads"
        ],
        "properties": {
          "leads": {
            "type": "array",
            "description": "List of leads for input",
            "items": {
              "$ref": "#/definitions/InputLead"
            }
          },
          "tokens": {
            "type": "array",
            "description": "List of my tokens to replace during the run of the target campaign.  The tokens must be available in a parent program or folder to be replaced during the run",
            "items": {
              "$ref": "#/definitions/Token"
            }
          }
        }
      },
      "ObjectMetaData": {
        "type": "object",
        "required": [
          "createdAt",
          "dedupeFields",
          "description",
          "displayName",
          "pluralName",
          "fields",
          "idField",
          "apiName",
          "relationships",
          "searchableFields",
          "updatedAt",
          "status",
          "version"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the object type was created"
          },
          "dedupeFields": {
            "type": "array",
            "description": "List of dedupe fields.  Arrays with multiple members are compound keys",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of the object type"
          },
          "displayName": {
            "type": "string",
            "description": "UI display-name of the object type"
          },
          "pluralName": {
            "type": "string",
            "description": "UI plural-name of the custom object type"
          },
          "fields": {
            "type": "array",
            "description": "List of fields available on the object type",
            "items": {
              "$ref": "#/definitions/ObjectField"
            }
          },
          "idField": {
            "type": "string",
            "description": "Primary id key of the object type"
          },
          "apiName": {
            "type": "string",
            "description": "Name of the object type"
          },
          "relationships": {
            "type": "array",
            "description": "List of relationships which the object has",
            "items": {
              "$ref": "#/definitions/ObjectRelation"
            }
          },
          "searchableFields": {
            "type": "array",
            "description": "List of fields valid for use as a filter type in a query",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the object type was most recently updated"
          },
          "state": {
            "type": "string",
            "description": "Approval state of object type",
            "enum": [
              "draft",
              "approved",
              "approvedWithDraft"
            ]
          },
          "version": {
            "type": "string",
            "description": "Version of object type that is returned in response",
            "enum": [
              "draft",
              "approved"
            ]
          }
        }
      },
      "ObjectLinkableObject": {
        "type": "object",
        "required": [
          "name",
          "displayName",
          "fields"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Link object API name"
          },
          "displayName": {
            "type": "string",
            "description": "Link object UI display-name"
          },
          "fields": {
            "type": "array",
            "description": "List of fields available on the link object",
            "items": {
              "$ref": "#/definitions/ObjectLinkableObjectField"
            }
          }
        }
      },
      "ObjectDependentAsset": {
        "type": "object",
        "required": [
          "assetType",
          "assetId",
          "assetName"
        ],
        "properties": {
          "assetType": {
            "type": "string",
            "description": "Type of asset"
          },
          "assetId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of asset"
          },
          "assetName": {
            "type": "string",
            "description": "Name of asset"
          },
          "usedFields": {
            "type": "array",
            "description": "List of associated fields",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ObjectLinkableObjectField": {
        "type": "object",
        "required": [
          "name",
          "displayName",
          "dataType"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Link field API name"
          },
          "displayName": {
            "type": "string",
            "description": "Link field name"
          },
          "dataType": {
            "type": "string",
            "description": "Link field data type"
          }
        }
      },
      "CustomActivityTypeRequest": {
        "type": "object",
        "required": [
          "apiName",
          "name",
          "triggerName",
          "filterName",
          "primaryAttribute"
        ],
        "properties": {
          "apiName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "filterName": {
            "type": "string",
            "description": "Human-readable name of the associated filter"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the activity type"
          },
          "primaryAttribute": {
            "description": "Primary attribute of the activity type",
            "$ref": "#/definitions/CustomActivityTypeAttribute"
          },
          "triggerName": {
            "type": "string",
            "description": "Human-readable name of the associated trigger"
          }
        }
      },
      "ListOperationRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "List of leads for input",
            "items": {
              "$ref": "#/definitions/LeadInputData"
            }
          }
        }
      },
      "ResponseOfLeadPartition": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/LeadPartition"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfObjectMetaData": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ObjectMetaData"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfCustomObjectTypeFieldDataTypes": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "List of permissible data types for custom object fields",
            "items": {
              "type": "string"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfObjectLinkableObject": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "List of permissible objects to use as custom object link field",
            "items": {
              "$ref": "#/definitions/ObjectLinkableObject"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfObjectDependentAssets": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "List of dependent assets for a custom object type",
            "items": {
              "$ref": "#/definitions/ObjectDependentAsset"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "InputLead": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique integer id of a lead record"
          }
        },
        "description": "Lead record containing only lead id"
      },
      "CustomActivityType": {
        "type": "object",
        "properties": {
          "apiName": {
            "type": "string",
            "description": "API Name of the type.  The API name must be unique and alphanumeric, containing at least one letter.  It is highly recommended to prepend a unique namespace of up to sixteen characters to the API name.  Required on creation"
          },
          "attributes": {
            "type": "array",
            "description": "List of attributes for the activity type.  May only be added or update through Create or Update Custom Activity Type Attributes",
            "items": {
              "$ref": "#/definitions/CustomActivityTypeAttribute"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "Datetime when the activity type was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the activity type"
          },
          "filterName": {
            "type": "string",
            "description": "Human-readable name for the associated filter of the activity type.  Required on creation"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the type.  Required on creation"
          },
          "primaryAttribute": {
            "description": "Primary Attribute of the activity type.  Required on creation",
            "$ref": "#/definitions/CustomActivityTypeAttribute"
          },
          "status": {
            "type": "string",
            "description": "State of the activity type",
            "enum": [
              "draft",
              "approved",
              "deleted",
              "approved with draft"
            ]
          },
          "triggerName": {
            "type": "string",
            "description": "Human-readable name for the associated trigger of the activity type.  Required on creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Datetime when the activity type was most recently updated"
          }
        }
      },
      "ChangeLeadProgramStatusRequest": {
        "type": "object",
        "required": [
          "input",
          "status"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "List of leads for input",
            "items": {
              "$ref": "#/definitions/LeadLookupInputData"
            }
          },
          "status": {
            "type": "string",
            "description": "Program status of the record.  Permissible values can be retrieve from the Get Channel by Name API for the designated program's channel"
          }
        }
      },
      "ResponseOfNamedAccountList": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/NamedAccountList"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfLeadAttribute": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/LeadAttribute"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfLeadAttribute2": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/LeadAttribute2"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfProgramMemberAttributes": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ProgramMemberAttribute"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfProgramMemberAttributes2": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ProgramMemberAttribute2"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfCompany": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/CompanyResponse"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfUsageData": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/UsageData"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfErrorsData": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ErrorsData"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ObjectRelation": {
        "type": "object",
        "required": [
          "field",
          "relatedTo",
          "type"
        ],
        "properties": {
          "field": {
            "type": "string",
            "description": "API Name of link field"
          },
          "relatedTo": {
            "description": "Object to which the field is linked",
            "$ref": "#/definitions/RelatedObject"
          },
          "type": {
            "type": "string",
            "description": "Type of the relationship field"
          }
        }
      },
      "Warning": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "Integer code of the warning"
          },
          "message": {
            "type": "string",
            "description": "Message describing the warning"
          }
        }
      },
      "Empty": {},
      "ResponseOfExportResponse": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ExportResponse"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfExportResponseWithToken": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ExportResponse"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfCustomObject": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/CustomObject"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfProgramMember": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ProgramMember"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ProgramMember": {
        "type": "object",
        "description": "Program member record.  Always contains lead id, but may have any number of other fields, depending on the fields available in the target instance.",
        "required": [
          "seq",
          "leadId",
          "reachedSuccess",
          "programId",
          "acquiredBy",
          "membershipDate"
        ],
        "properties": {
          "seq": {
            "type": "integer",
            "format": "int32",
            "description": "Integer indicating the sequence of the record in response.  This value is correlated to the order of the records included in the request input.  Seq should only be part of responses and should not be submitted."
          },
          "leadId": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of a lead record"
          },
          "reachedSuccess": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if program member has reached success criteria for program"
          },
          "programId": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of a program"
          },
          "acquiredBy": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if program member was acquired by program"
          },
          "membershipDate": {
            "type": "string",
            "description": "Date the lead first became a member of the program"
          }
        }
      },
      "ResponseOfProgramMemberStatus": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ProgramMemberStatusResponse"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfProgramMemberData": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ProgramMemberStatusResponse"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfProgramMemberDelete": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ProgramMemberDeleteResponse"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfCustomObjectType": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Empty array",
            "items": {
              "$ref": "#/definitions/Empty"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "NamedAccount": {
        "type": "object",
        "required": [
          "marketoGUID",
          "seq"
        ],
        "properties": {
          "marketoGUID": {
            "type": "string",
            "description": "Unique GUID of the custom object records"
          },
          "reasons": {
            "type": "array",
            "description": "List of reasons why an operation did not succeed.  Reasons are only present in API responses and should not be submitted",
            "items": {
              "$ref": "#/definitions/Reason"
            }
          },
          "seq": {
            "type": "integer",
            "format": "int32",
            "description": "Integer indicating the sequence of the record in response.  This value is correlated to the order of the records included in the request input.  Seq should only be part of responses and should not be submitted."
          },
          "status": {
            "type": "string",
            "enum": [
              "created",
              "updated",
              "deleted",
              "skipped",
              "added",
              "removed"
            ]
          }
        }
      },
      "ObservableOfInputStreamRangeContent": {
        "type": "object"
      },
      "ImportLeadResponse": {
        "type": "object",
        "required": [
          "batchId",
          "numOfLeadsProcessed",
          "status"
        ],
        "properties": {
          "batchId": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the import batch"
          },
          "importId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "numOfLeadsProcessed": {
            "type": "integer",
            "format": "int32",
            "description": "Number of rows processed so far"
          },
          "numOfRowsFailed": {
            "type": "integer",
            "format": "int32",
            "description": "Number of rows failed so far"
          },
          "numOfRowsWithWarning": {
            "type": "integer",
            "format": "int32",
            "description": "Number of rows with a warning so far"
          },
          "status": {
            "type": "string",
            "description": "Status of the batch"
          }
        },
        "description": "Response containing import status information"
      },
      "PushLeadToMarketoRequest": {
        "type": "object",
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PushLead"
            }
          },
          "lookupField": {
            "type": "string"
          },
          "partitionName": {
            "type": "string"
          },
          "programName": {
            "type": "string"
          },
          "programStatus": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        }
      },
      "SubmitFormRequest": {
        "type": "object",
        "required": [
          "input",
          "formId"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "Single array item that contains form fields and visitor data to use during a form submittal",
            "items": {
              "$ref": "#/definitions/Form"
            }
          },
          "formId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the form"
          },
          "programId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the program to add lead and/or program member custom fields to"
          }
        }
      },
      "Form": {
        "type": "object",
        "required": [
          "leadFormFields"
        ],
        "properties": {
          "leadFormFields": {
            "description": "List of form fields.  Email is required field",
            "$ref": "#/definitions/LeadFormFields"
          },
          "visitorData": {
            "description": "Page visit-related data",
            "$ref": "#/definitions/VisitorData"
          },
          "cookie": {
            "type": "string",
            "description": "Munchkin cookie value used to associate new lead with anonymous activities.  e.g. id:123-XYZ-456&token:_mch-marketo.com-1594662481190-60776"
          }
        },
        "description": "Form field data.  May have any number of fields depending on the fields available in the form."
      },
      "LeadFormFields": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address used as primary key during lead upsert"
          }
        },
        "description": "Form fields.  Always contains email, but may have any number of other fields depending on the fields available in the form."
      },
      "VisitorData": {
        "type": "object",
        "properties": {
          "pageURL": {
            "type": "string",
            "description": "Web page that hosts the form.  Must be a fully formed URL"
          },
          "queryString": {
            "type": "string",
            "description": "Web page query string.  Contains one or more ampersand delimited key=value pairs"
          },
          "leadClientIpAddress": {
            "type": "string",
            "description": "Client IP address.  IPv4 format.  Used to populate inferred fields on upserted lead record."
          },
          "userAgentString": {
            "type": "string",
            "description": "User agent of browser hosting the form"
          }
        },
        "description": "Page visit related data.  Used to populate additional activity fields for filtering and triggering."
      },
      "ChangeLeadProgramStatusOutputData": {
        "type": "object",
        "required": [
          "id",
          "status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique integer id of a lead record"
          },
          "reasons": {
            "type": "array",
            "description": "List of reasons why an operation did not succeed.  Reasons are only present in API responses and should not be submitted",
            "items": {
              "$ref": "#/definitions/Reason"
            }
          },
          "status": {
            "type": "string",
            "description": "Program status of the record.  Permissible values can be retrieve from the Get Channel by Name API for the designated program's channel"
          }
        }
      },
      "LeadChangeField": {
        "type": "object",
        "required": [
          "id",
          "name",
          "newValue"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the change record"
          },
          "name": {
            "type": "string",
            "description": "Name of the field which was changed"
          },
          "newValue": {
            "type": "string",
            "description": "New value after the change"
          },
          "oldValue": {
            "type": "string",
            "description": "Old value before the change"
          }
        },
        "description": "Activity record containing information on a data value change"
      },
      "CustomActivityTypeAttribute": {
        "type": "object",
        "required": [
          "apiName",
          "name"
        ],
        "properties": {
          "apiName": {
            "type": "string",
            "description": "API Name of the attribute"
          },
          "dataType": {
            "type": "string",
            "description": "Data type of the attribute",
            "enum": [
              "string",
              "boolean",
              "integer",
              "float",
              "link",
              "email",
              "currency",
              "date",
              "datetime",
              "phone",
              "text"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description of the attribute"
          },
          "isPrimary": {
            "type": "boolean",
            "example": false,
            "description": "Whether the attribute is the primary attribute of the activity type.  There may only be one primary attribute at a time"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the attribute"
          }
        }
      },
      "ResponseOfActivityType": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ActivityType"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "UserCount": {
        "type": "object",
        "required": [
          "count",
          "userId"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of calls made in the time period"
          },
          "userId": {
            "type": "string",
            "description": "Id of the user"
          }
        }
      },
      "InputStreamContent": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "inputStream": {
            "$ref": "#/definitions/InputStream"
          }
        }
      },
      "SyncCompanyRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "Type of sync operation to perform",
            "enum": [
              "createOnly",
              "updateOnly",
              "createOrUpdate"
            ]
          },
          "dedupeBy": {
            "type": "string",
            "description": "Field to deduplicate on.  If the value in the field for a given record is not unique, an error will be returned for the individual record."
          },
          "input": {
            "type": "array",
            "description": "List of input records. Each 'Company' object contains a 'searchableField' for lookup purposes, and one or more 'fields' to create or update.  Both can be retrieved using the Describe Companies endpoint",
            "items": {
              "$ref": "#/definitions/Company"
            }
          }
        }
      },
      "ResponseOfSalesPerson": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/SalesPerson"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ProgramMembership": {
        "type": "object",
        "required": [
          "membershipDate",
          "progressionStatus"
        ],
        "properties": {
          "acquiredBy": {
            "type": "boolean",
            "example": false,
            "description": "Whether the lead was acquired by the parent program"
          },
          "isExhausted": {
            "type": "boolean",
            "example": false,
            "description": "Whether the lead is currently exhausted in the stream, if applicable"
          },
          "membershipDate": {
            "type": "string",
            "description": "Date the lead first became a member of the program"
          },
          "nurtureCadence": {
            "type": "string",
            "description": "Cadence of the parent stream if applicable"
          },
          "progressionStatus": {
            "type": "string",
            "description": "Program status of the lead in the parent program"
          },
          "reachedSuccess": {
            "type": "boolean",
            "example": false,
            "description": "Whether the lead is in a success-status in the parent program"
          },
          "stream": {
            "type": "string",
            "description": "Stream that the lead is a member of, if the parent program is an engagement program"
          }
        }
      },
      "Program": {
        "type": "object",
        "required": [
          "id",
          "progressionStatus",
          "isExhausted",
          "acquiredBy",
          "reachedSuccess",
          "membershipDate",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique integer id of a program record"
          },
          "acquiredBy": {
            "type": "boolean",
            "example": false,
            "description": "Whether the lead was acquired by the parent program"
          },
          "isExhausted": {
            "type": "boolean",
            "example": false,
            "description": "Whether the lead is currently exhausted in the stream, if applicable"
          },
          "membershipDate": {
            "type": "string",
            "description": "Date the lead first became a member of the program"
          },
          "nurtureCadence": {
            "type": "string",
            "description": "Cadence of the parent stream if applicable"
          },
          "progressionStatus": {
            "type": "string",
            "description": "Program status of the lead in the parent program"
          },
          "reachedSuccess": {
            "type": "boolean",
            "example": false,
            "description": "Whether the lead is in a success-status in the parent program"
          },
          "stream": {
            "type": "string",
            "description": "Stream that the lead is a member of, if the parent program is an engagement program"
          },
          "updatedAt": {
            "type": "string",
            "description": "Datetime when the program was most recently updated"
          }
        }
      },
      "RelatedObject": {
        "type": "object",
        "required": [
          "field",
          "name"
        ],
        "properties": {
          "field": {
            "type": "string",
            "description": "Name of link field (within link object)"
          },
          "name": {
            "type": "string",
            "description": "Name of the link object"
          }
        }
      },
      "ResponseOfLeadChange": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/LeadChange"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ExportResponse": {
        "type": "object",
        "required": [
          "exportId",
          "status"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the export request was created"
          },
          "errorMsg": {
            "type": "string",
            "description": "Error message in case of \"Failed\" status"
          },
          "exportId": {
            "type": "string",
            "description": "Unique id of the export job"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64",
            "description": "Size of exported file in bytes. This will have a value only when status is \"Completed\", otherwise null"
          },
          "fileChecksum": {
            "type": "string",
            "description": "SHA-256 hash of exported file. This will have a value only when status is \"Completed\", otherwise null"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Finish time of export job. This will have value only when status is \"Completed\" or \"Failed\", otherwise null"
          },
          "format": {
            "type": "string",
            "description": "Format of file as given in the request (\"CSV\", \"TSV\", \"SSV\")"
          },
          "numberOfRecords": {
            "type": "integer",
            "format": "int64",
            "description": "Number of records in the export file.  This will have value only when status is \"Completed\", otherwise null"
          },
          "queuedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Queue time of export job. This will have value when \"Queued\" status is reached, before that null"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Start time of export job. This will have value when \"Processing\" status is reached, before that null"
          },
          "status": {
            "type": "string",
            "description": "Status of the export job (\"Created\",\"Queued\",\"Processing\",\"Canceled\",\"Completed\",\"Failed\")"
          }
        },
        "description": "Response containing export job status information"
      },
      "ResponseOfCustomActivity": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/CustomActivity"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "LookupCustomObjectRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "batchSize": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of records to return in the response.  Max and default is 300"
          },
          "fields": {
            "type": "array",
            "description": "List of fields to return. If not specified, will return the following fields: marketoGuid, dedupeFields, updatedAt, createdAt, filterType",
            "items": {
              "type": "string"
            }
          },
          "filterType": {
            "type": "string",
            "description": "Field to search on.  Valid values are: dedupeFields, idFields, and any field defined in searchableFields attribute of Describe endpoint.  Default is dedupeFields"
          },
          "input": {
            "type": "array",
            "description": "Search values when using a compound key.  Each element must include each of the fields in the compound key.  Compound keys are determined by the contents of \"dedupeFields\" in the Describe result for the object",
            "items": {
              "$ref": "#/definitions/CustomObject"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token returned from a previous response"
          }
        }
      },
      "CompanyResponse": {
        "type": "object",
        "required": [
          "id",
          "seq"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique integer id of the company record"
          },
          "reasons": {
            "type": "array",
            "description": "List of reasons why an operation did not succeed.  Reasons are only present in API responses and should not be submitted",
            "items": {
              "$ref": "#/definitions/Reason"
            }
          },
          "seq": {
            "type": "integer",
            "format": "int32",
            "description": "Integer indicating the sequence of the record in response.  This value is correlated to the order of the records included in the request input.  Seq should only be part of responses and should not be submitted."
          },
          "status": {
            "type": "string",
            "description": "Status of the operation performed on the record",
            "enum": [
              "created",
              "updated",
              "deleted",
              "skipped",
              "added",
              "removed"
            ]
          }
        },
        "description": "Company record.  May include any additional fields listed in the corresponding describe method"
      },
      "Company": {
        "type": "object",
        "description": "Company record.  May include any additional 'fields' listed in the Describe Companies endpoint",
        "properties": {
          "externalCompanyId": {
            "type": "string",
            "description": "Unique id of the company record"
          },
          "id": {
            "type": "integer",
            "description": "Unique integer id of the company record"
          },
          "company": {
            "type": "string",
            "description": "Unique name of the company record"
          }
        }
      },
      "Reason": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Integer code of the reason"
          },
          "message": {
            "type": "string",
            "description": "Message describing the reason for the status of the operation"
          }
        }
      },
      "FileRange": {
        "type": "object",
        "properties": {
          "end": {
            "type": "integer",
            "format": "int64"
          },
          "start": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ObservableOfInputStreamContent": {
        "type": "object"
      },
      "ErrorCount": {
        "type": "object",
        "required": [
          "count",
          "errorCode"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of occurences of the error"
          },
          "errorCode": {
            "type": "string",
            "description": "Integer error code of the error"
          }
        }
      },
      "LeadMapAttribute": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the attribute"
          },
          "readOnly": {
            "type": "boolean",
            "example": false,
            "description": "Whether the attribute is read only"
          }
        }
      },
      "LeadLookupInputData": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique integer id of a lead record"
          }
        }
      },
      "SalesPerson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique integer id of the salesperson record"
          },
          "reasons": {
            "type": "array",
            "description": "List of reasons why an operation did not succeed.  Reasons are only present in API responses and should not be submitted",
            "items": {
              "$ref": "#/definitions/Reason"
            }
          },
          "seq": {
            "type": "integer",
            "format": "int32",
            "description": "Integer indicating the sequence of the record in response.  This value is correlated to the order of the records included in the request input.  Seq should only be part of responses and should not be submitted."
          },
          "status": {
            "type": "string",
            "description": "Status of the operation performed on the record",
            "enum": [
              "created",
              "updated",
              "deleted",
              "skipped",
              "added",
              "removed"
            ]
          }
        }
      },
      "RemoveNamedAccountListMemberRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/NamedAccount"
            }
          }
        }
      },
      "Token": {
        "type": "object",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the token.  Should be formatted as \"{{my.name}}\""
          },
          "value": {
            "type": "string",
            "description": "Value of the token"
          }
        }
      },
      "ExportLeadFilter": {
        "type": "object",
        "required": [
          "createdAt",
          "smartListId",
          "smartListName",
          "staticListId",
          "staticListName",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "description": "Date range to filter new leads on",
            "$ref": "#/definitions/DateRange"
          },
          "smartListId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of smart list to retrieve leads from"
          },
          "smartListName": {
            "type": "string",
            "description": "Name of smart list to retrieve leads from"
          },
          "staticListId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of static list to retrieve leads from"
          },
          "staticListName": {
            "type": "string",
            "description": "Name of static list to retrieve leads from"
          },
          "updatedAt": {
            "description": "Date range to filter updated leads on",
            "$ref": "#/definitions/DateRange"
          }
        }
      },
      "ExportCustomObjectFilter": {
        "type": "object",
        "required": [
          "updatedAt",
          "smartListId",
          "smartListName",
          "staticListId",
          "staticListName"
        ],
        "properties": {
          "updatedAt": {
            "description": "Date range to filter updated custom objects on",
            "$ref": "#/definitions/DateRange"
          },
          "smartListId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of smart list to retrieve leads from"
          },
          "smartListName": {
            "type": "string",
            "description": "Name of smart list to retrieve leads from"
          },
          "staticListId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of static list to retrieve leads from"
          },
          "staticListName": {
            "type": "string",
            "description": "Name of static list to retrieve leads from"
          }
        }
      },
      "ExportProgramMemberFilter": {
        "type": "object",
        "required": [
          "programId",
          "programIds"
        ],
        "properties": {
          "programId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of program to retrieve members from. Cannot be used in combination with \"programIds\" filter"
          },
          "programIds": {
            "type": "array",
            "description": "Array of program ids to retrieve members from. Cannot be used in combination with \"programId\" filter",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "isExhausted": {
            "type": "boolean",
            "description": "Filter program membership records for people who have exhausted content"
          },
          "nurtureCadence": {
            "type": "string",
            "description": "Filter program membership records for a given nurture cadence",
            "enum": [
              "paus",
              "norm"
            ]
          },
          "statusNames": {
            "type": "array",
            "description": "Array of program member status names.  Can be default and/or user-defined.  Multiple status names are ORed together.",
            "items": {
              "type": "string"
            }
          },
          "updatedAt": {
            "description": "Date range to filter program members on",
            "$ref": "#/definitions/DateRange"
          }
        }
      },
      "InputStreamRangeContent": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "fileRange": {
            "$ref": "#/definitions/FileRange"
          },
          "inputStream": {
            "$ref": "#/definitions/InputStream"
          },
          "length": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DeleteCompanyRequest": {
        "type": "object",
        "properties": {
          "deleteBy": {
            "type": "string",
            "description": "Field to delete company records by.  Key may be \"dedupeFields\" or \"idField\""
          },
          "input": {
            "type": "array",
            "description": "List of company objects. Companies in the list should only contain a member matching the dedupeBy value. Each 'Company' object contains a 'searchableField' for lookup purposes which can be retrieved using the Describe Companies endpoint",
            "items": {
              "$ref": "#/definitions/Company"
            }
          }
        }
      },
      "ResponseOfImportCustomObjectResponse": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "moreResult": {
            "type": "boolean",
            "example": false,
            "description": "Boolean indicating if there are more results in subsequent pages"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Paging token given if the result set exceeded the allowed batch size"
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ImportCustomObjectResponse"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "ResponseOfImportProgramMemberResponse": {
        "type": "object",
        "required": [
          "errors",
          "requestId",
          "result",
          "success",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request made"
          },
          "result": {
            "type": "array",
            "description": "Array of results for individual records in the operation, may be empty",
            "items": {
              "$ref": "#/definitions/ImportProgramMemberResponse"
            }
          },
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Whether the request succeeded"
          },
          "warnings": {
            "type": "array",
            "description": "Array of warnings given for the operation",
            "items": {
              "$ref": "#/definitions/Warning"
            }
          }
        }
      },
      "CustomObject": {
        "type": "object",
        "required": [
          "marketoGUID",
          "seq"
        ],
        "properties": {
          "marketoGUID": {
            "type": "string",
            "description": "Unique GUID of the custom object records"
          },
          "reasons": {
            "type": "array",
            "description": "List of reasons why an operation did not succeed.  Reasons are only present in API responses and should not be submitted",
            "items": {
              "$ref": "#/definitions/Reason"
            }
          },
          "seq": {
            "type": "integer",
            "format": "int32",
            "description": "Integer indicating the sequence of the record in response.  This value is correlated to the order of the records included in the request input.  Seq should only be part of responses and should not be submitted."
          }
        }
      },
      "ProgramMemberStatusResponse": {
        "type": "object",
        "required": [
          "status",
          "leadId",
          "seq"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the operation performed on the record",
            "enum": [
              "updated",
              "skipped"
            ]
          },
          "reasons": {
            "type": "array",
            "description": "List of reasons why an operation did not succeed.  Reasons are only present in API responses and should not be submitted",
            "items": {
              "$ref": "#/definitions/Reason"
            }
          },
          "leadId": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lead associated to the program member"
          },
          "seq": {
            "type": "integer",
            "format": "int32",
            "description": "Integer indicating the sequence of the record in response.  This value is correlated to the order of the records included in the request input.  Seq should only be part of responses and should not be submitted."
          }
        }
      },
      "ProgramMemberDataResponse": {
        "type": "object",
        "required": [
          "status",
          "leadId",
          "seq"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the operation performed on the record",
            "enum": [
              "created",
              "updated",
              "skipped"
            ]
          },
          "reasons": {
            "type": "array",
            "description": "List of reasons why an operation did not succeed.  Reasons are only present in API responses and should not be submitted",
            "items": {
              "$ref": "#/definitions/Reason"
            }
          },
          "leadId": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lead associated to the program member"
          },
          "seq": {
            "type": "integer",
            "format": "int32",
            "description": "Integer indicating the sequence of the record in response.  This value is correlated to the order of the records included in the request input.  Seq should only be part of responses and should not be submitted."
          }
        }
      },
      "ProgramMemberDeleteResponse": {
        "type": "object",
        "required": [
          "status",
          "leadId",
          "seq"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the operation performed on the record",
            "enum": [
              "deleted",
              "skipped"
            ]
          },
          "reasons": {
            "type": "array",
            "description": "List of reasons why an operation did not succeed.  Reasons are only present in API responses and should not be submitted",
            "items": {
              "$ref": "#/definitions/Reason"
            }
          },
          "leadId": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lead associated to the program member"
          },
          "seq": {
            "type": "integer",
            "format": "int32",
            "description": "Integer indicating the sequence of the record in response.  This value is correlated to the order of the records included in the request input.  Seq should only be part of responses and should not be submitted."
          }
        }
      },
      "ExportActivityRequest": {
        "type": "object",
        "required": [
          "fields",
          "filter"
        ],
        "properties": {
          "columnHeaderNames": {
            "description": "File header field names override (corresponds with REST API name)",
            "$ref": "#/definitions/ColumnHeaderNames"
          },
          "fields": {
            "type": "array",
            "description": "Array of strings containing field values.  Used to reduce the number of fields contained in export file.  Select one or more of: marketoGUID, leadId, activityDate, activityTypeId, campaignId, primaryAttributeValueId, primaryAttributeValue, actionResult",
            "items": {
              "type": "string"
            }
          },
          "filter": {
            "description": "Record selection criteria. \"createAt\" is required, \"activityTypeIds\", \"primaryAttributeValueIds\", and \"primaryAttributeValues\" are optional",
            "$ref": "#/definitions/ExportActivityFilter"
          },
          "format": {
            "type": "string",
            "description": "File format to create(\"CSV\", \"TSV\", \"SSV\").  Default is \"CSV\""
          }
        }
      },
      "UsageData": {
        "type": "object",
        "required": [
          "date"
        ],
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the collected calls"
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of errors in the time period"
          },
          "users": {
            "type": "array",
            "description": "Counts for individual users",
            "items": {
              "$ref": "#/definitions/UserCount"
            }
          }
        }
      },
      "ErrorsData": {
        "type": "object",
        "required": [
          "date"
        ],
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the collected calls"
          },
          "errors": {
            "type": "array",
            "description": "Counts for individual error codes",
            "items": {
              "$ref": "#/definitions/ErrorCount"
            }
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of errors in the time period"
          }
        }
      },
      "StaticList": {
        "type": "object",
        "required": [
          "createdAt",
          "id",
          "name",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Datetime when the list was created"
          },
          "description": {
            "type": "string",
            "description": "Description of the static list"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the static list"
          },
          "name": {
            "type": "string",
            "description": "Name of the static list"
          },
          "programName": {
            "type": "string",
            "description": "Name of the program"
          },
          "updatedAt": {
            "type": "string",
            "description": "Datetime when the list was most recently updated"
          },
          "workspaceName": {
            "type": "string",
            "description": "Name of the parent workspace, if applicable"
          }
        }
      },
      "List": {
        "type": "object",
        "required": [
          "createdAt",
          "listId",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Datetime when the static list was created"
          },
          "listId": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the static list"
          },
          "updatedAt": {
            "type": "string",
            "description": "Datetime when the static list was most recently updated"
          }
        }
      },
      "SmartCampaign": {
        "type": "object",
        "required": [
          "createdAt",
          "smartCampaignId",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Datetime when the smart campaign was created"
          },
          "smartCampaignId": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of the smart campaign"
          },
          "updatedAt": {
            "type": "string",
            "description": "Datetime when the smart campaign was most recently updated"
          }
        }
      },
      "CustomActivity": {
        "type": "object",
        "required": [
          "activityDate",
          "activityTypeId",
          "attributes",
          "errors",
          "id",
          "leadId",
          "primaryAttributeValue"
        ],
        "properties": {
          "activityDate": {
            "type": "string",
            "description": "Datetime of the activity"
          },
          "activityTypeId": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the activity type"
          },
          "apiName": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "description": "List of secondary attributes",
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "errors": {
            "type": "array",
            "description": "Array of errors that occurred if the request was unsuccessful",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Integer id of the activity.  For instances which have been migrated to Activity Service, this field may not be present, and should not be treated as unique."
          },
          "leadId": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lead associated to the activity"
          },
          "marketoGUID": {
            "type": "string",
            "description": "Unique id of the activity (128 character string)"
          },
          "primaryAttributeValue": {
            "type": "string",
            "description": "Value of the primary attribute"
          },
          "status": {
            "type": "string",
            "description": "Status of the operation performed on the record",
            "enum": [
              "created",
              "updated",
              "deleted",
              "skipped",
              "added",
              "removed"
            ]
          }
        }
      },
      "SyncNamedAccountListRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "Type of sync operation to perform",
            "enum": [
              "createOnly",
              "updateOnly"
            ]
          },
          "dedupeBy": {
            "type": "string",
            "description": "Field to deduplicate on.  If the value in the field for a given record is not unique, an error will be returned for the individual record."
          },
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/NamedAccountList"
            }
          }
        }
      },
      "ScheduleCampaignData": {
        "type": "object",
        "properties": {
          "cloneToProgramName": {
            "type": "string",
            "description": "Name of the resulting program.  When set, this attribute will cause the campaign, parent program, and all of its assets, to be created with the resulting new name.  The parent program will be cloned and the newly created campaign will be scheduled.  The resulting program is created underneath the parent.  Programs with snippets, push notifications, in-app messages, static lists, reports, and social assets may not be cloned in this way"
          },
          "runAt": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime to run the campaign at.  If unset, the campaign will be run five minutes after the call is made"
          },
          "tokens": {
            "type": "array",
            "description": "List of my tokens to replace during the run of the target campaign.  The tokens must be available in a parent program or folder to be replaced during the run",
            "items": {
              "$ref": "#/definitions/Token"
            }
          }
        }
      },
      "ObjectField": {
        "type": "object",
        "properties": {
          "dataType": {
            "type": "string",
            "description": "Datatype of the field"
          },
          "displayName": {
            "type": "string",
            "description": "UI display-name of the field"
          },
          "length": {
            "type": "integer",
            "format": "int32",
            "description": "Max length of the field.  Only applicable to text, string, and text area."
          },
          "name": {
            "type": "string",
            "description": "Name of the field"
          },
          "updateable": {
            "type": "boolean",
            "example": false,
            "description": "Whether the field is updateable"
          },
          "crmManaged": {
            "type": "boolean",
            "example": false,
            "description": "Whether the field is managed by CRM (native sync)"
          }
        }
      },
      "ColumnHeaderNames": {
        "type": "object",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "REST API name for header field"
          },
          "value": {
            "type": "string",
            "description": "Value for header field"
          }
        }
      },
      "DeleteCustomObjectRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "deleteBy": {
            "type": "string",
            "description": "Field to delete records by.  Permissible values are idField or dedupeFields as indicated by the result of the corresponding describe record"
          },
          "input": {
            "type": "array",
            "description": "List of input records",
            "items": {
              "$ref": "#/definitions/CustomObject"
            }
          }
        }
      },
      "UpdateLeadPartitionRequest": {
        "type": "object",
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "array",
            "description": "List of leads for input",
            "items": {
              "$ref": "#/definitions/UpdateLeadPartition"
            }
          }
        }
      },
      "UpdateLeadPartition": {
        "type": "object",
        "required": [
          "id",
          "partitionName"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique integer id of a lead record"
          },
          "partitionName": {
            "type": "string",
            "description": "Name of the partition"
          }
        }
      }
    }
  }